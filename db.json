{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/ylion/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"source/favicons/browserconfig.xml","path":"favicons/browserconfig.xml","modified":1,"renderable":0},{"_id":"source/favicons/android-chrome-192x192.png","path":"favicons/android-chrome-192x192.png","modified":1,"renderable":0},{"_id":"source/favicons/apple-touch-icon.png","path":"favicons/apple-touch-icon.png","modified":1,"renderable":0},{"_id":"source/favicons/favicon-16x16.png","path":"favicons/favicon-16x16.png","modified":1,"renderable":0},{"_id":"source/favicons/favicon-32x32.png","path":"favicons/favicon-32x32.png","modified":1,"renderable":0},{"_id":"source/favicons/favicon.ico","path":"favicons/favicon.ico","modified":1,"renderable":0},{"_id":"source/favicons/site.webmanifest","path":"favicons/site.webmanifest","modified":1,"renderable":0},{"_id":"source/favicons/mstile-150x150.png","path":"favicons/mstile-150x150.png","modified":1,"renderable":0},{"_id":"themes/ylion/source/css/base.less","path":"css/base.less","modified":1,"renderable":1},{"_id":"themes/ylion/source/js/app.js","path":"js/app.js","modified":1,"renderable":1},{"_id":"themes/ylion/source/js/highsong.js","path":"js/highsong.js","modified":1,"renderable":1},{"_id":"themes/ylion/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/ylion/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/ylion/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"source/favicons/android-chrome-512x512.png","path":"favicons/android-chrome-512x512.png","modified":1,"renderable":0},{"_id":"themes/ylion/source/css/pages/article-exp.less","path":"css/pages/article-exp.less","modified":1,"renderable":1},{"_id":"themes/ylion/source/css/pages/archive.less","path":"css/pages/archive.less","modified":1,"renderable":1},{"_id":"themes/ylion/source/css/pages/othersPages.less","path":"css/pages/othersPages.less","modified":1,"renderable":1},{"_id":"themes/ylion/source/css/pages/post.less","path":"css/pages/post.less","modified":1,"renderable":1},{"_id":"themes/ylion/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/ylion/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/ylion/source/css/pages/comments.css","path":"css/pages/comments.css","modified":1,"renderable":1},{"_id":"themes/ylion/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/ylion/source/css/thirdParty/font-awesome.min.css","path":"css/thirdParty/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/ylion/source/js/thirdParty/busuanzi.min.js","path":"js/thirdParty/busuanzi.min.js","modified":1,"renderable":1},{"_id":"themes/ylion/source/js/thirdParty/gitment.browser.min.js","path":"js/thirdParty/gitment.browser.min.js","modified":1,"renderable":1},{"_id":"themes/ylion/source/js/thirdParty/highlight.pack.js","path":"js/thirdParty/highlight.pack.js","modified":1,"renderable":1},{"_id":"themes/ylion/source/css/thirdParty/highlight/github.css","path":"css/thirdParty/highlight/github.css","modified":1,"renderable":1},{"_id":"themes/ylion/source/css/thirdParty/highlight/solarized-light.css","path":"css/thirdParty/highlight/solarized-light.css","modified":1,"renderable":1},{"_id":"themes/ylion/source/js/thirdParty/leancloud.min.js","path":"js/thirdParty/leancloud.min.js","modified":1,"renderable":1},{"_id":"themes/ylion/source/js/thirdParty/gitment.browser.js","path":"js/thirdParty/gitment.browser.js","modified":1,"renderable":1},{"_id":"themes/ylion/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/ylion/source/js/thirdParty/gitment.browser.js.map","path":"js/thirdParty/gitment.browser.js.map","modified":1,"renderable":1},{"_id":"themes/ylion/source/js/thirdParty/gitment.browser.min.js.map","path":"js/thirdParty/gitment.browser.min.js.map","modified":1,"renderable":1}],"Cache":[{"_id":"themes/ylion/.gitignore","hash":"6e3a09b0d19dfe679aa416609d58581ea6bfa9b2","modified":1569415848000},{"_id":"themes/ylion/404.md","hash":"35eab98f14ba0ce50cba8f63b6e0d80328eb2fd0","modified":1569415848000},{"_id":"themes/ylion/CHANGELOG.md","hash":"c47c138626fe4917696ff5e96e629e78130ca5c6","modified":1569415848000},{"_id":"themes/ylion/LICENSE","hash":"5e65ec894a8c1a584620276b0b2d79a63101201c","modified":1569415848000},{"_id":"themes/ylion/README.md","hash":"31892094943eb72c371dc8df6c197c3403b8ab9a","modified":1569415848000},{"_id":"themes/ylion/_config.yml","hash":"6789564f7cf5bcf0105006d9092c7ed50411c423","modified":1583223156369},{"_id":"themes/ylion/package.json","hash":"dc7a8b087254bfe3f83d09a5a8a0e0ab87885192","modified":1569415848000},{"_id":"source/CNAME","hash":"5d1b3c534b5001bee37dc2a8e8da866b00c2eb73","modified":1582768766363},{"_id":"themes/ylion/_neededFile/search.ejs","hash":"5aed86cf52b0f0746426cbddbb96913880638d4c","modified":1569415848000},{"_id":"themes/ylion/languages/default.yml","hash":"ee1626dab2f76c04f07b49b3016f7e8354b907df","modified":1569415848000},{"_id":"themes/ylion/languages/ko.yml","hash":"a4dc4646a61974dee8983c9cfd72ff4c4b26fbe3","modified":1569415848000},{"_id":"themes/ylion/languages/zh-CN.yml","hash":"267909418b5be5441c4ff44dfdf5003ee4bb9209","modified":1569415848000},{"_id":"themes/ylion/languages/zh-TW.yml","hash":"3e0fdbe453d96f3e6467e7aa97e60d1e93196398","modified":1569415848000},{"_id":"themes/ylion/layout/archive.ejs","hash":"913edfb62e33bd4eab564c62304d03833a5378a0","modified":1569415848000},{"_id":"themes/ylion/layout/category.ejs","hash":"ebd05ceb75be73e84ddf085ccfdb24c07162d0fa","modified":1569415848000},{"_id":"themes/ylion/layout/layout.ejs","hash":"a6410ed79ed77d83e3bbe064188a50b45a9af739","modified":1569415848000},{"_id":"themes/ylion/layout/index.ejs","hash":"f5dfbcfcdaab7a6c2b77d0d371335c569801352f","modified":1569415848000},{"_id":"themes/ylion/layout/page.ejs","hash":"febe98fb69248e8d1638dc83a25a17ee16ebeeca","modified":1569415848000},{"_id":"themes/ylion/layout/tag.ejs","hash":"9b42656e75c58e7145e52408b51f017f6b6d9464","modified":1569415848000},{"_id":"themes/ylion/layout/post.ejs","hash":"3475e67bab1ef4c1a782d64cb8bdf7c719c877cb","modified":1582768276416},{"_id":"themes/ylion/source/favicon.ico","hash":"38591b263c047efbb16cd04a51a2d43316e3ebac","modified":1569415848000},{"_id":"source/favicons/browserconfig.xml","hash":"974aea18bda5a95802c06b80126ab1d96d91d708","modified":1580092054000},{"_id":"source/favicons/android-chrome-192x192.png","hash":"05d291f0be2766b4f46a62fbabdc10b3d6ff092a","modified":1580092054000},{"_id":"source/favicons/apple-touch-icon.png","hash":"f208d1156aee20488a1f98d902f5a674a7cc6d84","modified":1580092054000},{"_id":"source/favicons/favicon-16x16.png","hash":"c92eeb1df6654eb34f9cf354e3922a794021e377","modified":1580092054000},{"_id":"source/favicons/favicon-32x32.png","hash":"8c3bb4b352237b05f8119644d91099c5288ca2b6","modified":1580092054000},{"_id":"source/favicons/favicon.ico","hash":"7819f8009e037fa738545f5645efc32457ebb9e0","modified":1580092056000},{"_id":"source/_posts/100CPP-读书记录-高性能服务器编程读书记录初级部分.md","hash":"dc43127b234dc76e833a0775e9c4a0b580df32fe","modified":1583308146121},{"_id":"source/favicons/site.webmanifest","hash":"13e5aa58eb2182d8ace63266856c8cc29c47c083","modified":1580092056000},{"_id":"source/favicons/mstile-150x150.png","hash":"266c87b17aa65bed8a431b5d88281ce488b03c6f","modified":1580092056000},{"_id":"source/_posts/101CPP-读书记录-高性能服务器编程读书记录高级部分.md","hash":"fbcbc3d9d1d600875408551e7154a9054c0bf2ce","modified":1583308167553},{"_id":"source/_posts/3DMAX-3dmax快捷键及基础知识.md","hash":"e6d9810b53641a6332f50b454d7006dd3c92ae87","modified":1581950939145},{"_id":"source/_posts/102CPP-读书记录-高性能服务器编程读书记录进程线程部分.md","hash":"988aea7df4430bd4a2b23dbec3a7138f4c9c75b0","modified":1583308162887},{"_id":"source/_posts/90算法-简单算法.md","hash":"3bc761b3a28b6e32e0de3c77666927292041a32c","modified":1583310078178},{"_id":"source/_posts/80CPP-读书记录-CPPPrimer.md","hash":"dd012ff2a26dfc1d377c1460df10070678d1b010","modified":1583308181794},{"_id":"source/_posts/110CPP-读书记录-Effective读书记录.md","hash":"2e1e6cabc76bf7f128783cbb8e88f020dce3bc8c","modified":1583416473681},{"_id":"source/_posts/CPP-CPP基础-指针.md","hash":"ad30d100b711e58ef8d996fcff0ec42f75c28336","modified":1579779312218},{"_id":"source/_posts/CPP-CPP基础-牛客.md","hash":"bc5ca871c8e22044f487f1ef41c61a34340345a9","modified":1579779308099},{"_id":"source/_posts/91算法-中等算法.md","hash":"ef21f90192fd9c0e0e5fe8861e6961814638052a","modified":1583317202373},{"_id":"source/_posts/CPP-CPP基础-2.md","hash":"294972eeb0e57ce1e1c597a8e4b42b8e3b6fe448","modified":1580458067178},{"_id":"source/_posts/CPP-CPP重点-CPP11特性.md","hash":"8f056c76827bebd6e6f3ef0a91784f314fa3627f","modified":1582212072730},{"_id":"source/_posts/CPP-CPP重点-STL记录.md","hash":"16a9c53e879dcc75ddefb3061852fde4ca8e0b32","modified":1583308366224},{"_id":"source/_posts/CPP-CPP采坑-头文件互相引用.md","hash":"36b7da44cc1ee271a20265ead90728477ac61777","modified":1581070188656},{"_id":"source/_posts/CPP-CPP重点-CMAKE.md","hash":"3ad3c230afe490a5aafd26c28688e18f3dbb046c","modified":1582122915526},{"_id":"source/_posts/CPP-CPP重点-字节对齐.md","hash":"e564bde826e217acb3c177e15f58b7144852c62a","modified":1581064693076},{"_id":"source/_posts/CPP-CPP重点-定义与声明详解.md","hash":"85164e5f3a5a14a1db3c02fcc402b3c417c785cf","modified":1582773976583},{"_id":"source/_posts/CPP-CPP重点-编程规范.md","hash":"8184158365c24f4b54fcd3c4df3804375238475e","modified":1583416714793},{"_id":"source/_posts/CPP-数据库-MongoDB-MongoDB基本使用.md","hash":"9d7a37cd4f97e6afca19b61896c507dc7b4a4629","modified":1582768156303},{"_id":"source/_posts/Git-基础操作.md","hash":"5341378d1f3bcc1059e763029fd328614fdd6853","modified":1583466096634},{"_id":"source/_posts/CPP-源码学习-Jsoncpp代码阅读.md","hash":"5c5ca91a6cc90c9c29f545757c5f63d9c36bf20b","modified":1583308364944},{"_id":"source/_posts/Java-Springboot基础知识1.md","hash":"d86342dfb62b844b8f570edeb90de9d94dd0b20e","modified":1582768156306},{"_id":"source/_posts/Java-IDEA.md","hash":"b7f46bc751f181f0a8f44251f5589c52c07c0311","modified":1581064385113},{"_id":"source/_posts/CPP-源码学习-Libevent代码初期了解.md","hash":"0799c6926304191af11c3f1f621d2877dbffdcad","modified":1583029310230},{"_id":"source/_posts/Java-SDK-Fastjson的使用.md","hash":"d0aa4426de166f2b79e010feb06f95836288f5c6","modified":1582768156304},{"_id":"source/_posts/Java-Springboot日志操作.md","hash":"6617bce9eba93a51111b106586c22b4dc7596447","modified":1581064371420},{"_id":"source/_posts/Java-Springboot数据交互.md","hash":"9aa713ba9c19537dcfae482b506c05bce538488a","modified":1581064366519},{"_id":"source/_posts/Java-Springboot基础知识2.md","hash":"a12d0464c491105c378663cf42db7dd196a85378","modified":1582768156333},{"_id":"source/_posts/Java-文件操作.md","hash":"caf6d94084c94ad7df94b2e44ba7b6d98eaf163b","modified":1581064389738},{"_id":"source/_posts/Java-爬虫.md","hash":"43edeaf5c79232af32cbf36272e7cca61098370c","modified":1582768156336},{"_id":"source/_posts/Java-设计模式.md","hash":"04344ac4301b618b9761fe12111b0bfc4fd59d8c","modified":1581064402988},{"_id":"source/_posts/Java-输入输出流.md","hash":"1a08346a74290909586b80ef0f627d1e5280db5e","modified":1581064396483},{"_id":"source/_posts/大一暑假学习记录与总结.md","hash":"a2315312caf69106cf88543c8d414b4a9253f40f","modified":1581064462973},{"_id":"source/_posts/游戏知识-腾讯游戏学院-如何进入游戏开发行业.md","hash":"d21558281664cd236bd76b2ad66b3e1f6509d9f3","modified":1583417096802},{"_id":"source/_posts/游戏知识-服务器-服务器通信.md","hash":"5ca2b3ae622f33b618bb4a3271836f3d9ea4f3cc","modified":1583417099979},{"_id":"source/_posts/大二寒假学习记录与总结.md","hash":"9074a4dfea258a172690e4149dcdeeaad5c9903d","modified":1582768156339},{"_id":"source/_posts/小游戏-联机打砖块.md","hash":"93418b48cc1a408c278e123aea486a5d96909e45","modified":1582122922496},{"_id":"source/_posts/游戏知识-腾讯游戏学院-球球.md","hash":"bddb7428227520d7a9a000cb26b9cf7d740c043a","modified":1583419334972},{"_id":"themes/ylion/layout/_partial/after-footer.ejs","hash":"1a11f6c5d8afd45baf6829638ec1b2fbf30be974","modified":1569415848000},{"_id":"themes/ylion/layout/_partial/archive.ejs","hash":"a36b8d1a3ee2442444cba08e6afebde783e3f581","modified":1569415848000},{"_id":"themes/ylion/layout/_partial/comments.ejs","hash":"cd927a126c35cfd47abf3a568bcdc2a30b3e6fad","modified":1569415848000},{"_id":"themes/ylion/layout/_partial/gallery.ejs","hash":"3afb29dba43eedcbe55d98131a95de23affe846f","modified":1569415848000},{"_id":"themes/ylion/layout/_partial/header.ejs","hash":"fb7534e90746553d4b13f0c81512cdff47104bf7","modified":1569415848000},{"_id":"themes/ylion/layout/_partial/pagination.ejs","hash":"eb0f07bfb4a19a9027ea861904541ecfcb96936a","modified":1569415848000},{"_id":"themes/ylion/layout/_partial/sidebar.ejs","hash":"5989030b7f02af282211a306759ddbdac47536c7","modified":1569415848000},{"_id":"themes/ylion/layout/_thirdParty/baidu_an.ejs","hash":"c8ff48ffdc16a94b7d24037a953f7442789a3f86","modified":1569415848000},{"_id":"themes/ylion/layout/_thirdParty/baidu_sitemap.ejs","hash":"5fbadc6b28c1f850269381b7dc843dbf10499b51","modified":1569415848000},{"_id":"themes/ylion/layout/_partial/article-meta.ejs","hash":"dd844ba05438c5a6b93323f0ccdd0157057c044e","modified":1569415848000},{"_id":"themes/ylion/layout/_partial/footer.ejs","hash":"134a566a57942fcbfb06663305de6078702f5b94","modified":1569415848000},{"_id":"themes/ylion/layout/_thirdParty/google_analytics.ejs","hash":"0d100d7ad555bea422f5c02126bf6fb14fa82a8b","modified":1569415848000},{"_id":"themes/ylion/layout/_partial/head.ejs","hash":"8af3ec434d29c8e7354cb2e144041e7cbfc85f53","modified":1569415848000},{"_id":"themes/ylion/layout/_thirdParty/mathjax.ejs","hash":"d29b18efe49cae48846f74f53e0a6d1e1e3e98a7","modified":1569415848000},{"_id":"themes/ylion/layout/_widget/category.ejs","hash":"dcd285e44e45d2b4d845c39815db2e1840953f96","modified":1569415848000},{"_id":"themes/ylion/layout/_thirdParty/google_sitemap.ejs","hash":"4d57bbf3e53a334760e1540eb4b7a2b65268962d","modified":1569415848000},{"_id":"themes/ylion/layout/_widget/archive.ejs","hash":"3d89804f2b5d4a7718125c8fe4b9fde289efd34c","modified":1569415848000},{"_id":"themes/ylion/layout/_widget/friends.ejs","hash":"b62e2965c6940ce994cb5db5fd5f32fc9a3401d8","modified":1569415848000},{"_id":"themes/ylion/layout/_widget/notification.ejs","hash":"c32a1a7aebb0714f1415bed286a9a39b79a2c985","modified":1569415848000},{"_id":"themes/ylion/scripts/filter/translation.filter.js","hash":"5ec9cde7e4dbd659fe1adb4211c07a375b7049b5","modified":1569415848000},{"_id":"themes/ylion/layout/_widget/popular.ejs","hash":"3b671d247b2b3ec3560c904263a6b93b4da61d63","modified":1569415848000},{"_id":"themes/ylion/scripts/filter/emptycode.filter.js","hash":"7c0440d1a4b0f798e060504519cc6a39b5f29e9b","modified":1569415848000},{"_id":"themes/ylion/scripts/helper/getCurPosts.js","hash":"e9d58b03448d74a60978e97c463652af28d9931c","modified":1569415848000},{"_id":"themes/ylion/layout/_widget/tagcloud.ejs","hash":"e739c974437ace225251c9a23a5d6ef7adf3f5c5","modified":1569415848000},{"_id":"themes/ylion/scripts/helper/my_paginator.js","hash":"f42b8683428546b914ead3df83cc0a19eaa2712d","modified":1569415848000},{"_id":"themes/ylion/scripts/generator/index.js","hash":"7df7ea4a2265301644879c9ded9a6e78bb006448","modified":1569415848000},{"_id":"themes/ylion/scripts/helper/pickImgs.js","hash":"f26c478a78d94f89611095025d9a2c08065c700f","modified":1569415848000},{"_id":"themes/ylion/scripts/helper/sortPosts.js","hash":"a6c073157b2fb53cb3ef5825ca3ccd7a38e3d63a","modified":1569415848000},{"_id":"themes/ylion/layout/_thirdParty/duoshuo.ejs","hash":"f2c4f7ec5ea94796f2a7f87b6b04353dfe07300d","modified":1569415848000},{"_id":"themes/ylion/layout/_thirdParty/disqus.ejs","hash":"67d8349201a7b508c378a7124b295245a0095768","modified":1569415848000},{"_id":"themes/ylion/source/css/base.less","hash":"1d501cd1b75980e6058de48a664434bdad45c3cc","modified":1569415848000},{"_id":"themes/ylion/source/css/_func.less","hash":"c8804cb0effe6177775ba27ff8781431ec0d6282","modified":1569415848000},{"_id":"themes/ylion/translate/korean/_config_kr.yml","hash":"f86a88597aec2ce2033351dc0dca0b1508d80425","modified":1569415848000},{"_id":"themes/ylion/source/css/_variable.less","hash":"a113fb91689ef444bd650c04306ad99628f63dc7","modified":1569415848000},{"_id":"themes/ylion/translate/korean/README_kr.md","hash":"f6c7ab74db9a288656f57ba2d01837f7dd1256a3","modified":1569415848000},{"_id":"themes/ylion/source/js/app.js","hash":"c257da122c1bff2c989c87a247e962ab6913d991","modified":1569415848000},{"_id":"themes/ylion/source/js/highsong.js","hash":"a103f4e3a9b337668fe2c937dd66c4a4963733df","modified":1569415848000},{"_id":"themes/ylion/source/js/search.js","hash":"553b02d5ea62a97885d4405a6cbbe8685ba27b73","modified":1569415848000},{"_id":"themes/ylion/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1569415848000},{"_id":"themes/ylion/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1569415848000},{"_id":"source/favicons/android-chrome-512x512.png","hash":"e02dcf98fa3f146bfdd7bc74046b913627f8abee","modified":1580092054000},{"_id":"themes/ylion/layout/_partial/_head-sections/IE.ejs","hash":"292033d3eaec35593cb229d58eab7043022bd3a5","modified":1569415848000},{"_id":"themes/ylion/layout/_partial/_head-sections/seo.ejs","hash":"4898581e4aff0c1800213f9a05b612105d7a77ee","modified":1569415848000},{"_id":"themes/ylion/layout/_partial/_head-sections/style.ejs","hash":"6596c472dc32b194afc96309a6327ea30aab0834","modified":1569415848000},{"_id":"themes/ylion/layout/_partial/_head-sections/script.ejs","hash":"4ef9cf901a81f59b8788bebba0fb16d74d37d87f","modified":1569415848000},{"_id":"themes/ylion/layout/_partial/_head-sections/title.ejs","hash":"5cf4842a152b85d02ed83206b300d5b5d8998c51","modified":1569415848000},{"_id":"themes/ylion/scripts/generator/lib/generator.js","hash":"68cd4fc227f71bb035ac069c00fc714f4a42da99","modified":1569415848000},{"_id":"themes/ylion/source/css/_base/_footer.less","hash":"41ba98f0688556d880604bcf4e2f471e5b92b40d","modified":1569415848000},{"_id":"themes/ylion/source/css/_base/_article-meta.less","hash":"5e5318560835ee9922cb7be75e810e99c62549bf","modified":1569415848000},{"_id":"themes/ylion/source/css/_base/_header.less","hash":"0b26efafd609e62ddda2fa23348bfd43ca7a467e","modified":1569415848000},{"_id":"themes/ylion/source/css/_base/_animation.less","hash":"9393f207f1840f7a1bcd5cc7a3086ae3c6122d66","modified":1569415848000},{"_id":"themes/ylion/source/css/_base/_after-footer.less","hash":"2a851257ea9a4fe3157123d7c1f941f974deaa58","modified":1569415848000},{"_id":"themes/ylion/source/css/_base/_reset.less","hash":"fa0ea262c80660c5cf2f3c84fe74a09ec4c0ac8f","modified":1569415848000},{"_id":"themes/ylion/source/css/_base/_pagination.less","hash":"fccf9b341e51cb426753609ac42a5ba140198c24","modified":1569415848000},{"_id":"themes/ylion/source/css/_base/_media.less","hash":"34b03d8f51e15f746e00b17579310fd6cdc652f9","modified":1569415848000},{"_id":"themes/ylion/source/css/pages/article-exp.less","hash":"f87e35ad474eba21029acbda840dc91c9284275d","modified":1569415848000},{"_id":"themes/ylion/source/css/_base/_sidebar.less","hash":"dbd121c923141472c84a1fc607d55f8f083edee0","modified":1569415848000},{"_id":"themes/ylion/source/css/pages/archive.less","hash":"4250b13fcfd16045ccd70b40ea74e296111b1b7b","modified":1569415848000},{"_id":"themes/ylion/source/css/pages/othersPages.less","hash":"e346c1fd2a12608e6f1e8a2d98e4652164b4208e","modified":1569415848000},{"_id":"themes/ylion/source/css/pages/post.less","hash":"b699f3fa3a701e84a32f05396b399b806e9a42f6","modified":1569415848000},{"_id":"themes/ylion/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1569415848000},{"_id":"themes/ylion/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1569415848000},{"_id":"themes/ylion/source/css/pages/comments.css","hash":"ee7e553676fa58acf12ffbb34decce30f733f4bc","modified":1569415848000},{"_id":"themes/ylion/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1569415848000},{"_id":"themes/ylion/source/css/thirdParty/font-awesome.min.css","hash":"d2c7e3e8ed62f73240fde919253822bc7ce12b15","modified":1569415848000},{"_id":"themes/ylion/source/js/thirdParty/busuanzi.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1569415848000},{"_id":"themes/ylion/source/js/thirdParty/gitment.browser.min.js","hash":"5cb10e77f44ad075512ee4a3fd518d9a5257a80c","modified":1569415848000},{"_id":"themes/ylion/source/js/thirdParty/highlight.pack.js","hash":"3c707416d178e317afa6fc552fc181d08ccc9c8c","modified":1569415848000},{"_id":"themes/ylion/source/css/thirdParty/highlight/github.css","hash":"e5cdc036897bef17b0a40bd3310fb35a202df2b3","modified":1569415848000},{"_id":"themes/ylion/source/css/thirdParty/highlight/solarized-light.css","hash":"10bd5d6b6f332e32edd377f16d3b8ed04713ae81","modified":1569415848000},{"_id":"themes/ylion/source/js/thirdParty/leancloud.min.js","hash":"f80bcc588670fbf8fe720b7b7c31789b640e649b","modified":1569415848000},{"_id":"themes/ylion/source/js/thirdParty/gitment.browser.js","hash":"240ce6fc52400cd8b8302cc242e61504e7d86938","modified":1569415848000},{"_id":"themes/ylion/source/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1569415848000},{"_id":"themes/ylion/source/js/thirdParty/gitment.browser.js.map","hash":"b921d63b0e593bfc456068b40516dc0ea442dc53","modified":1569415848000},{"_id":"themes/ylion/source/js/thirdParty/gitment.browser.min.js.map","hash":"6cd313c386f1dfb5093fb4f71ed29796e01134f4","modified":1569415848000},{"_id":"public/atom.xml","hash":"b1b0a91ba0efa747de6a0cef385f3f20491044aa","modified":1583466118308},{"_id":"public/search.xml","hash":"8cd4518acf72b98f1756c3a372c5ddba15aa0137","modified":1583466118308},{"_id":"public/sitemap.xml","hash":"14b6d8ece6dbd088739b7df29116ae1306ff61d6","modified":1583466118308},{"_id":"public/2019/12/游戏知识-腾讯游戏学院-如何进入游戏开发行业/index.html","hash":"b4070b4f880596d3ffcddb677a56003b6ac49bba","modified":1583466118308},{"_id":"public/archives/2019/04/index.html","hash":"db5b9fcf181ae633576a63865ab10ad917ca5bb8","modified":1583466118308},{"_id":"public/archives/2019/05/index.html","hash":"de66bd9dbddf55c898918b34837f7366fa3c0377","modified":1583466118308},{"_id":"public/archives/2019/06/index.html","hash":"9567579fa3f1c861e5f33dbcbfc02d2e81b55518","modified":1583466118308},{"_id":"public/archives/2019/07/index.html","hash":"85ae5577165ddd2a8ebe20e8093a83daaf0155c9","modified":1583466118308},{"_id":"public/archives/2019/08/index.html","hash":"4cf3e4f882ec3bf65e7a77720eb46073ac86b13b","modified":1583466118308},{"_id":"public/archives/2019/10/index.html","hash":"f9ff18a91e3c462974791769015d3c011b9631e4","modified":1583466118308},{"_id":"public/archives/2019/11/index.html","hash":"b95653401b4ac04e3e4fe841612e9fd3cf471ec9","modified":1583466118308},{"_id":"public/archives/2019/12/index.html","hash":"4595d506ced7cdb9c818deeb778a46403f065f32","modified":1583466118308},{"_id":"public/archives/2020/01/index.html","hash":"c6a8a2cd11e630a979ad7bdef0f67316bb107b9d","modified":1583466118308},{"_id":"public/archives/2020/02/page/2/index.html","hash":"7ffd8ccf688372cbe68920894c9a83f2bb0b19e7","modified":1583466118308},{"_id":"public/categories/3DMAX/index.html","hash":"82a9fa0aeadd8ef32ed47fb3b6f60e185813831d","modified":1583466118308},{"_id":"public/categories/算法/index.html","hash":"a13b91aafbcb2da3f1393454ba1f9cfb98433217","modified":1583466118308},{"_id":"public/categories/CPP/CPP基础/index.html","hash":"8ec9a62ead0e805d2c37102c5a02d491b724d3be","modified":1583466118308},{"_id":"public/categories/算法/简单算法/index.html","hash":"8a1cf1943e9ede459071f341e411ec820c18914a","modified":1583466118308},{"_id":"public/categories/CPP/CPP踩坑/index.html","hash":"c91b54aeb4e8a5bcf61c13369de98daa5c81b9c4","modified":1583466118308},{"_id":"public/categories/必备技能/index.html","hash":"9e27e4c5f2514b41390022244e515f117af7fd1b","modified":1583466118308},{"_id":"public/categories/CPP/源码学习/index.html","hash":"982f0613a17ff6a4349e5e335c55bdccce527091","modified":1583466118308},{"_id":"public/categories/CPP/数据库/index.html","hash":"bdbcf613f05afef655a6c3ec3ef53cba0f7694ee","modified":1583466118308},{"_id":"public/categories/算法/中等算法/index.html","hash":"034cb7afbfb1a5dc87e44b5bb0a13e5c280a141d","modified":1583466118308},{"_id":"public/categories/学习记录/index.html","hash":"42cb15e55f70066fd1e0eeb67b78efa6c7f02dce","modified":1583466118308},{"_id":"public/categories/游戏知识/index.html","hash":"23789783ed686982717090b159e57b7da646b518","modified":1583466118308},{"_id":"public/categories/小游戏/index.html","hash":"2f02e55bd15944dd18b509a5853dcdaff7faaf67","modified":1583466118308},{"_id":"public/categories/必备技能/Git操作/index.html","hash":"9a5204ab487bf889c95926ca0143bfcd49fa4452","modified":1583466118308},{"_id":"public/categories/CPP/数据库/MongoDB/index.html","hash":"d95cf625a5dc4bad27352c30b56cdca950762a3e","modified":1583466118308},{"_id":"public/categories/游戏知识/腾讯游戏学院/index.html","hash":"1146cafd20333b569408b76a2bbbfea38cbe59bf","modified":1583466118308},{"_id":"public/categories/游戏知识/服务器/index.html","hash":"ea1e6fdc3c08c16d114826c582e8415e07df222a","modified":1583466118308},{"_id":"public/tags/3DMAX/index.html","hash":"0e3da20bee48e1528c6748bc278c1865fd26126b","modified":1583466118308},{"_id":"public/tags/CPP踩坑记/index.html","hash":"9ada63dfd8f108b6790a6ca0aace7db49a8f41cc","modified":1583466118308},{"_id":"public/tags/CPP/index.html","hash":"4de704a7a9aed9361299a8a37d83e81d750a9a91","modified":1583466118308},{"_id":"public/tags/Git操作/index.html","hash":"6565615a695a99985932a738741710ad9c0fd2c1","modified":1583466118308},{"_id":"public/tags/Mysql/index.html","hash":"035a77157c3c7dfc957cebfd0da4e7e7cbaf7b48","modified":1583466118308},{"_id":"public/tags/腾讯游戏学院/index.html","hash":"10739b484eef3b433c87a1a5b2e7058a67ac90dd","modified":1583466118308},{"_id":"public/2020/03/游戏知识-腾讯游戏学院-球球/index.html","hash":"e2b6e182454e1481af3161723a43ab76db3e6fa5","modified":1583466118308},{"_id":"public/2020/03/90算法-简单算法/index.html","hash":"e9aa34975e988a330fb7ba1f44e03af5560aac47","modified":1583466118308},{"_id":"public/2020/03/91算法-中等算法/index.html","hash":"f1c28ce97dcdcf0a4d168b0a39977029c86f4bd9","modified":1583466118308},{"_id":"public/2020/03/CPP-CPP重点-STL记录/index.html","hash":"7c39630ad263a5460cd6fb7c492540e31cd5a2ad","modified":1583466118308},{"_id":"public/2020/03/CPP-源码学习-Jsoncpp代码阅读/index.html","hash":"2f10331b01734b3f96354254f2a944881b6cc962","modified":1583466118308},{"_id":"public/2020/02/CPP-CPP重点-定义与声明详解/index.html","hash":"6af9e984a1f5e709ce14378d7a34f2d7c19166b3","modified":1583466118308},{"_id":"public/2020/02/110CPP-读书记录-Effective读书记录/index.html","hash":"853a4217d5ba61a3d28ed701056dd5857340fab8","modified":1583466118308},{"_id":"public/2020/02/102CPP-读书记录-高性能服务器编程读书记录进程线程部分/index.html","hash":"8169dac007d5fb9d465eb0a6472ab134ee6d35a2","modified":1583466118308},{"_id":"public/2020/02/CPP-CPP重点-CPP11特性/index.html","hash":"4f759fa27a381c171af109a3dc4c3fadc662da24","modified":1583466118308},{"_id":"public/2020/02/CPP-源码学习-Libevent代码初期了解/index.html","hash":"66175bc5ec25c6e828b15f7ea6d3ce7f80ed9db4","modified":1583466118308},{"_id":"public/2020/02/小游戏-联机打砖块/index.html","hash":"88849bc9a93028728e37375f8756b97b8d9384b3","modified":1583466118308},{"_id":"public/2020/02/3DMAX-3dmax快捷键及基础知识/index.html","hash":"b283751a5ac5c3c01f3d39ff88f807dfd545774a","modified":1583466118308},{"_id":"public/2020/02/Git-基础操作/index.html","hash":"26f1bf7faebcbd0929445fea3916928267e5a15e","modified":1583466118308},{"_id":"public/2020/02/CPP-CPP采坑-头文件互相引用/index.html","hash":"54b56e8592220e4a6adb46baeade6421d7f7234c","modified":1583466118308},{"_id":"public/2020/02/CPP-CPP重点-CMAKE/index.html","hash":"d8fa137ce433873fd3694235147bf8dbb32b729b","modified":1583466118308},{"_id":"public/2020/02/CPP-CPP重点-字节对齐/index.html","hash":"79becbf8dd1904c9c7c50414295e386a43378cff","modified":1583466118308},{"_id":"public/2020/02/大二寒假学习记录与总结/index.html","hash":"d1e554bbbc348258ba9f4c5ffb8705aa786f24c7","modified":1583466118308},{"_id":"public/2020/01/CPP-CPP重点-编程规范/index.html","hash":"3cfa6395d68e9a9f8626373c480f5b8279a61712","modified":1583466118308},{"_id":"public/2019/12/游戏知识-服务器-服务器通信/index.html","hash":"4c6f2f27cf224c1866818eddbd9de56955e2b0d6","modified":1583466118308},{"_id":"public/2019/11/CPP-CPP基础-指针/index.html","hash":"f31799b6f8eadd5b32a739b6371e482857521277","modified":1583466118308},{"_id":"public/2019/10/CPP-CPP基础-2/index.html","hash":"4119bd3204dbe7999f7f6f629eba907727aa8846","modified":1583466118308},{"_id":"public/2019/10/CPP-CPP基础-牛客/index.html","hash":"99c8ec6646d9dd161b9a9b86394a0d0e2e79f66a","modified":1583466118308},{"_id":"public/2019/10/CPP-数据库-MongoDB-MongoDB基本使用/index.html","hash":"ba8086b7c30329e0a1b1018f7893df3385981508","modified":1583466118308},{"_id":"public/2019/08/101CPP-读书记录-高性能服务器编程读书记录高级部分/index.html","hash":"69f8f216670294948e7f80b4fc86f82e389c438e","modified":1583466118308},{"_id":"public/2019/08/100CPP-读书记录-高性能服务器编程读书记录初级部分/index.html","hash":"587b1e15fb67eb01e0f03f0135c31dbf7b86ea5b","modified":1583466118308},{"_id":"public/2019/08/80CPP-读书记录-CPPPrimer/index.html","hash":"f6cfe112c04f38985cf02138872010d55f7b37e7","modified":1583466118308},{"_id":"public/2019/07/Java-IDEA/index.html","hash":"cabfab76956589c96a7ae84ef2e7f7b96a0d20d2","modified":1583466118308},{"_id":"public/2019/07/大一暑假学习记录与总结/index.html","hash":"1083472395d5237da8b3f2e7f0d072ddee434d06","modified":1583466118308},{"_id":"public/2019/06/Java-Springboot基础知识2/index.html","hash":"024d13c83e1779ee25aa648c40fdd44e37a9541c","modified":1583466118308},{"_id":"public/2019/06/Java-Springboot基础知识1/index.html","hash":"bbb257d22b261a2a39a62d6aa18ec181d37ba677","modified":1583466118308},{"_id":"public/2019/05/Java-设计模式/index.html","hash":"88f76fb525dbfca0e2e171f5fe7cb6b98457fa36","modified":1583466118308},{"_id":"public/2019/05/Java-Springboot数据交互/index.html","hash":"3145c9eebda8298a8a853b1d3432ef1d68c8a7e1","modified":1583466118308},{"_id":"public/2019/05/Java-Springboot日志操作/index.html","hash":"80c3ec7e2a15f2da77372f2a2de61f1d3cfae659","modified":1583466118308},{"_id":"public/2019/04/Java-爬虫/index.html","hash":"7669b59689809d23c58b52fa44f96a42ab365fff","modified":1583466118308},{"_id":"public/2019/04/Java-输入输出流/index.html","hash":"6ec7305af25fcddc288597f45bb000a22917f766","modified":1583466118308},{"_id":"public/2019/04/Java-SDK-Fastjson的使用/index.html","hash":"0b55ade5562573e416e4c54a3b2aaaef6a32ef96","modified":1583466118308},{"_id":"public/2019/04/Java-文件操作/index.html","hash":"265564c7d80a780143c27f78432c42f263a27e74","modified":1583466118308},{"_id":"public/archives/index.html","hash":"207bde3d98c2e2a06624250967b3bf632b7aa995","modified":1583466118308},{"_id":"public/archives/page/2/index.html","hash":"d9dbf205e13ad92316414dd8c9b31fde2cf95105","modified":1583466118308},{"_id":"public/archives/page/3/index.html","hash":"6c9ceda2f0654e57a4064d603eeb10559009c69a","modified":1583466118308},{"_id":"public/archives/page/4/index.html","hash":"673a6bb9b9c26e94ad1d33e594e5c25b022c0f73","modified":1583466118308},{"_id":"public/archives/2019/index.html","hash":"44ac08da75d0e3dc3079d2f3598e1c0e749fc12d","modified":1583466118308},{"_id":"public/archives/2019/page/2/index.html","hash":"b830ebfbfe8a272ed3c4f2cb40ef5f01d7b4e9bd","modified":1583466118308},{"_id":"public/archives/2020/index.html","hash":"9eb44e804c121c8030919eaa4b00265470f3672b","modified":1583466118308},{"_id":"public/archives/2020/page/2/index.html","hash":"7552b74269f2eefbfb0845298ad94c14d5461cab","modified":1583466118308},{"_id":"public/archives/2020/02/index.html","hash":"072986a869a6e67cb02f0538b568c285fb44c3b9","modified":1583466118308},{"_id":"public/archives/2020/03/index.html","hash":"fb234f18f0d70dc943d5ff29c9e00fd07754d79b","modified":1583466118308},{"_id":"public/categories/CPP/index.html","hash":"5fb41285faeb54e98a3a2db6101dd80f36c4c0d1","modified":1583466118308},{"_id":"public/categories/CPP/page/2/index.html","hash":"6e5acef0982a425617d180e94d293e31b0a95058","modified":1583466118308},{"_id":"public/categories/CPP/服务器编程-书籍记录/index.html","hash":"7bd9918fbe825efe3a5bc38875b0c3efd166f1ca","modified":1583466118308},{"_id":"public/categories/CPP/CPP重点/index.html","hash":"1a6e0a9ce099be67a0dfc92c0dc9bafe54c3e5bf","modified":1583466118308},{"_id":"public/categories/Java/index.html","hash":"1d3b753b42cc7929fa013cf64c6edd2499e74d7b","modified":1583466118308},{"_id":"public/index.html","hash":"2defbf8558d0f5e6b0ff66b9b3c80c785f2edb3a","modified":1583466118308},{"_id":"public/page/2/index.html","hash":"5eb4d55255e6d45cb0cb93727f5b30a0c0407020","modified":1583466118308},{"_id":"public/page/3/index.html","hash":"b5ec03a0a4b02ac6cda5a3357c0e63391adb98af","modified":1583466118308},{"_id":"public/page/4/index.html","hash":"cd28f2c3f025a190059abdecdbb57f38eeafe8ab","modified":1583466118308},{"_id":"public/tags/小游戏/index.html","hash":"b185f6f42eaa0c85c145d249e911c6adbcbfc08d","modified":1583466118308},{"_id":"public/CNAME","hash":"5d1b3c534b5001bee37dc2a8e8da866b00c2eb73","modified":1583466118308},{"_id":"public/favicon.ico","hash":"38591b263c047efbb16cd04a51a2d43316e3ebac","modified":1583466118308},{"_id":"public/favicons/browserconfig.xml","hash":"974aea18bda5a95802c06b80126ab1d96d91d708","modified":1583466118308},{"_id":"public/favicons/android-chrome-192x192.png","hash":"05d291f0be2766b4f46a62fbabdc10b3d6ff092a","modified":1583466118308},{"_id":"public/favicons/apple-touch-icon.png","hash":"f208d1156aee20488a1f98d902f5a674a7cc6d84","modified":1583466118308},{"_id":"public/favicons/favicon-16x16.png","hash":"c92eeb1df6654eb34f9cf354e3922a794021e377","modified":1583466118308},{"_id":"public/favicons/favicon-32x32.png","hash":"8c3bb4b352237b05f8119644d91099c5288ca2b6","modified":1583466118308},{"_id":"public/favicons/favicon.ico","hash":"7819f8009e037fa738545f5645efc32457ebb9e0","modified":1583466118308},{"_id":"public/favicons/site.webmanifest","hash":"13e5aa58eb2182d8ace63266856c8cc29c47c083","modified":1583466118308},{"_id":"public/favicons/mstile-150x150.png","hash":"266c87b17aa65bed8a431b5d88281ce488b03c6f","modified":1583466118308},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1583466118308},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1583466118308},{"_id":"public/js/highsong.js","hash":"8138f104a8607b93bce3d7c3641e069952f3849b","modified":1583466118308},{"_id":"public/js/search.js","hash":"600a37dbbc5377e5e7ded6ce993badc30211afee","modified":1583466118308},{"_id":"public/js/thirdParty/busuanzi.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1583466118308},{"_id":"public/css/thirdParty/highlight/github.css","hash":"e5cdc036897bef17b0a40bd3310fb35a202df2b3","modified":1583466118308},{"_id":"public/css/thirdParty/highlight/solarized-light.css","hash":"10bd5d6b6f332e32edd377f16d3b8ed04713ae81","modified":1583466118308},{"_id":"public/js/app.js","hash":"647c1cf899574d9d3c979ade87ba18e1559a8d78","modified":1583466118308},{"_id":"public/css/pages/comments.css","hash":"ee7e553676fa58acf12ffbb34decce30f733f4bc","modified":1583466118308},{"_id":"public/css/thirdParty/font-awesome.min.css","hash":"d2c7e3e8ed62f73240fde919253822bc7ce12b15","modified":1583466118308},{"_id":"public/js/thirdParty/highlight.pack.js","hash":"3c707416d178e317afa6fc552fc181d08ccc9c8c","modified":1583466118308},{"_id":"public/js/thirdParty/gitment.browser.min.js","hash":"5cb10e77f44ad075512ee4a3fd518d9a5257a80c","modified":1583466118308},{"_id":"public/js/thirdParty/leancloud.min.js","hash":"2c4846325ac8f0b036a3b37d2176ed81b3a51d60","modified":1583466118308},{"_id":"public/js/thirdParty/gitment.browser.js","hash":"0711b1ae17b2dd8767ec60dabe5d71b75037cedc","modified":1583466118308},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1583466118308},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1583466118308},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1583466118308},{"_id":"public/favicons/android-chrome-512x512.png","hash":"e02dcf98fa3f146bfdd7bc74046b913627f8abee","modified":1583466118308},{"_id":"public/js/thirdParty/gitment.browser.js.map","hash":"b921d63b0e593bfc456068b40516dc0ea442dc53","modified":1583466118308},{"_id":"public/css/pages/archive.css","hash":"0d7bd6c5971b30d19ae01c8fb99f2b7db090ad22","modified":1583466118308},{"_id":"public/css/pages/article-exp.css","hash":"ff3ff2ca0629ae9c93f9c4dc44571d72342853c1","modified":1583466118308},{"_id":"public/css/pages/othersPages.css","hash":"d374c64bd2cb94613fd25a4902de5382a9ffba8b","modified":1583466118308},{"_id":"public/css/pages/post.css","hash":"8c24a714cb49c1b68ffc9821360d71bc3c97fbd6","modified":1583466118308},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1583466118308},{"_id":"public/css/base.css","hash":"00fdb8e72e44066bfc0b10e85c978025f45c912c","modified":1583466118308},{"_id":"public/js/thirdParty/gitment.browser.min.js.map","hash":"6cd313c386f1dfb5093fb4f71ed29796e01134f4","modified":1583466118308}],"Category":[{"name":"CPP","_id":"ck7fmucy80002souoas6m6nad"},{"name":"3DMAX","_id":"ck7fmucye000asouoc1j468jm"},{"name":"服务器编程-书籍记录","parent":"ck7fmucy80002souoas6m6nad","_id":"ck7fmucyg000esouo94ct8zn4"},{"name":"算法","_id":"ck7fmucyk000msouoecp8017r"},{"name":"CPP基础","parent":"ck7fmucy80002souoas6m6nad","_id":"ck7fmucyp0012souo0ssp5vlr"},{"name":"CPP重点","parent":"ck7fmucy80002souoas6m6nad","_id":"ck7fmucyx001nsouo6edt1lsy"},{"name":"简单算法","parent":"ck7fmucyk000msouoecp8017r","_id":"ck7fmucz60026souoapu857qv"},{"name":"CPP踩坑","parent":"ck7fmucy80002souoas6m6nad","_id":"ck7fmuczb002dsouoe1bhd3qa"},{"name":"必备技能","_id":"ck7fmuczf002wsouo5heogeqf"},{"name":"源码学习","parent":"ck7fmucy80002souoas6m6nad","_id":"ck7fmuczf0030souo7b9whahc"},{"name":"数据库","parent":"ck7fmucy80002souoas6m6nad","_id":"ck7fmuczg0032souoclbt9d46"},{"name":"Java","_id":"ck7fmuczg0034souo214k5r1u"},{"name":"中等算法","parent":"ck7fmucyk000msouoecp8017r","_id":"ck7fmuczi003bsouohsgf3mrv"},{"name":"学习记录","_id":"ck7fmuczl003tsouocszu4aig"},{"name":"游戏知识","_id":"ck7fmuczl003wsouogxwhennt"},{"name":"小游戏","_id":"ck7fmuczm003zsouoapcvho3v"},{"name":"Git操作","parent":"ck7fmuczf002wsouo5heogeqf","_id":"ck7fmuczn0043souo65tacdtn"},{"name":"MongoDB","parent":"ck7fmuczg0032souoclbt9d46","_id":"ck7fmuczn0045souo1i4e0tef"},{"name":"腾讯游戏学院","parent":"ck7fmuczl003wsouogxwhennt","_id":"ck7fmuczn0047souo70997whf"},{"name":"服务器","parent":"ck7fmuczl003wsouogxwhennt","_id":"ck7fmuczo004asouo9ms0hcjg"}],"Data":[],"Page":[],"Post":[{"title":"Linux高性能服务器编程读书记录-初级部分","date":"2019-08-17T12:34:39.000Z","top":100,"img":"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%B0%81%E9%9D%A2/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B.jpg","_content":"开头选了这本书, 看到这本书是他人总结三大本后自己写的, 先求个理解大概.\n话说别人推荐的c++服务器咋都是c语言.....\n2019年8月17日20:37:53\n\n每学习一部分就写一个demo\n<!--more-->\n\n分了三篇\n# 第一篇TCP/IP协议详解\n## 第一章 TCP/IP协议族\n\n### TCP/IP协议族体系结构和主要协议\n协议族中协议众多, 这本书只选取了IP和TCP协议 - 对网络编程影响最直接\n\n见得最多就是这四层结构了, 不过这本书写得更加详细一些\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E5%9B%9B%E5%B1%82%E7%BB%93%E6%9E%84.jpg)\n\n同样七层是osi参考模型, 简化后得到四层\n![](https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=3a1768f4c6fc1e17e9b284632bf99d66/0dd7912397dda144d48ab350bbb7d0a20df48655.jpg)\n不同层次之间, 通过接口互相交流, 这样方便了各层次的修改\n\n**应用层**\n负责处理应用程序的逻辑\n\n**表示层**\n定义了数据的格式及加密\n\n**会话层**\n它定义了如何开始、控制和结束一个会话，包括对多个双向消息的控制和管理，以便在只完成连续消息的一部分时可以通知应用，从而使表示层看到的数据是连续的\n\n**传输层**\n为两台主机的应用提供端到端(end to end)的通信. 与网络层使用的下一跳不同, 他只关心起始和终止, 中转过程交给下层处理.\n此层存在两大协议TCP协议和UDP协议\n*TCP协议*\nTCP协议(Transmission Control Protocol 传输控制协议) - 为应用层提供`可靠的, 面向连接, 基于流的服`\n通过`超时重传`和`数据确认`等确保数据正常送达.\nTCP需要存储一些必要的状态, 可靠的协议\n*UDP协议*\nUPD协议(User Datagram Protocol 用户数据报协议) - 为应用层提供`不可靠的, 无连接的, 基于数据报的服务`\n一般需要自己处理`数据确认`和`超时重传`的问题\n通信两者不存储状态, 每次发送都需要指定地址信息. `有自己的长度`\n\n**网络层**\n实现了数据包的选路和转发.  只有数据包到不了目标地址, 就`下一跳`(hop by hop), 选择最近的.\n*IP协议(Internet Protocol)* 以及 *ICMP协议(Internet Control Message Protocol)* \n后者协议是IP协议的补充, 用来检测网络连接 1. 差错报文, 用来回应状态 2. 查询报文(ping程序就是使用的此报文来判断信息是否送达)\n\n**数据链路层**\n实现了网卡接口的网络驱动程序. 这里驱动程序方便了厂商的下层修改, 只需要向上层提供规定的接口即可.\n存在两个协议 *ARP协议(Address Resolve Protocol, 地址解析协议)*. 还有*RARP(Reverse ~, 逆地址解析协议)*.  由于网络层使用IP地址寻址机器, 但是数据链路层使用物理地址(通常为MAC地址), 之间的转化涉及到ARP协议**ARP欺骗, 可能与这个有关, 目前不去学习**\n\n**封装**\n上层协议发送到下层协议. 通过封装实现, 层与层之间传输的时候, 加上自己的头部信息.\n被TCP封装的数据成为 `TCP报文段`\n- 内核部分发送成功后删除数据\n\n被UDP封装的数据成为 `UDP数据报`\n- 发送后即删除\n\n再经IP封装后成为`IP数据报`\n最后经过数据链路层封装后为 `帧`\n\n下面的操作都将在如下环境进行\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C.png)\n\n**ARP**\nARP协议能实现任意网络层地址到任意物理地址的转换\n\n## 第二章 IP协议详解\nIP协议是TCP/IP协议簇的核心协议, 是socket网络编程的基础之一\nIP协议为上层协议提供无状态, 无连接, 不可靠的服务\n\n\n# 第二篇深入解析高性能服务器编程\n## 第五章Linux网络编程基础API\n\n\nsocket基础api位于 `sys/socket.h` 头文件中\nsocket最开始的含义是 一个IP地址和端口对. 唯一的表示了TCP通信的一段\n网络信息api `netdb.h`头文件中\n\n### 主机字节序和网络字节序\n字节序分为 `大端字节序`和`小端字节序`\n由于大多数PC采用小端字节序(高位存在高地址处), 所以小端字节序又称为主机字节序\n\n为了防止不同机器字节序不同导致的错乱问题. 规定传输的时候统一为 大端字节序(网络字节序).\n这样主机会根据自己的情况决定 - 是否转换接收到的数据的字节序\n\n\n### API\n\n**基础连接**\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E5%9C%B0%E5%9D%80%E7%BB%93%E6%9E%84%E4%BD%93.jpg)\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E5%8D%8F%E8%AE%AE%E7%BB%84%E5%90%88%E5%9C%B0%E5%9D%80%E6%97%8F.jpg)\n```c++\n// 主机序和网络字节序转换\n#include <netinet/in.h>\nunsigned long int htonl (unsigned long int hostlong); // host to network long\nunsigned short int htons (unsigned short int hostlong); // host to network short\n\nunsigned long int htonl (unsigned long int netlong);\nunsigned short int htons (unsigned short int netlong);\n\n// IP地址转换函数\n#include <arpa/inet.h>\n// 将点分十进制字符串的IPv4地址, 转换为网络字节序整数表示的IPv4地址. 失败返回INADDR_NONE\nin_addr_t  inet_addr( const char* strptr);\n\n// 功能相同不过转换结果存在 inp指向的结构体中. 成功返回1 反之返回0\nint inet_aton( const char* cp, struct in_addr* inp);\n\n// 函数返回一个静态变量地址值, 所以多次调用会导致覆盖\nchar* inet_ntoa(struct in_addr in); \n\n// src为 点分十进制字符串的IPv4地址 或 十六进制字符串表示的IPv6地址 存入dst的内存中 af指定地址族\n// 可以为 AF_INET AF_INET6 成功返回1 失败返回-1\nint inet_pton(int af, const char * src, void* dst);\n// 协议名, 需要转换的ip, 存储地址, 长度(有两个常量 INET_ADDRSTRLEN, INET6_ADDRSTRLEN)\nconst char* inet_ntop(int af, const void*  src, char* dst, socklen_t cnt);\n\n\n// 创建 命名 监听 socket\n# include <sys/types.h>\n# include <sys/socket.h>\n// domain指定使用那个协议族 PF_INET PF_INET6\n// type指定服务类型 SOCK_STREAM (TCP协议) SOCK_DGRAM(UDP协议)\n// protocol设置为默认的0\n// 成功返回socket文件描述符(linux一切皆文件), 失败返回-1\nint socket(int domain, int type, int protocol);\n\n// socket为socket文件描述符\n// my_addr 为地址信息\n// addrlen为socket地址长度\n// 成功返回0 失败返回 -1\nint bind(int socket, const struct sockaddr* my_addr, socklen_t addrlen);\n\n// backlog表示队列最大的长度\nint listen(int socket, int backlog);\n// 接受连接 失败返回-1 成功时返回socket\nint accept(int sockfd, struct sockaddr* addr, socklen_t* addrlen)\n```\n客户端\n```c\n// 发起连接\n#include <sys/types.h>\n#include <sys/socket.h>\n// 第三个参数为 地址指定的长度\n// 成功返回0 失败返回-1\nint connect(int sockfd, const struct sockaddr * serv_addr, socklen_t addrlen);\n\n// 关闭连接\n#include <unistd.h>\n// 参数为保存的socket\n// 并非立即关闭, 将socket的引用计数-1, 当fd的引用计数为0, 才能关闭(需要查阅)\nint close(int fd);\n\n// 立即关闭\n#include <sys/socket.h>\n// 第二个参数为可选值 \n//\tSHUT_RD 关闭读, socket的接收缓冲区的数据全部丢弃\n//\tSHUT_WR 关闭写 socket的发送缓冲区全部在关闭前发送出去\n//\tSHUT_RDWR 同时关闭读和写\n// 成功返回0 失败为-1 设置errno\nint shutdown(int sockfd, int howto)\n```\n**基础TCP**\n```c\n#include<sys/socket.h>\n#include<sys/types.h>\n\n// 读取sockfd的数据\n// buf 指定读缓冲区的位置\n// len 指定读缓冲区的大小\n// flags 参数较多\n// 成功的时候返回读取到的长度, 可能小于预期长度, 需要多次读取.   读取到0 通信对方已经关闭连接, 错误返回-1\nssize_t recv(int sockfd, void *buf, size_t len, int flags);\n// 发送\nssize_t send(int sockfd, const void *buf, size_t len, int flags);\n```\n\n| 选项名        | 含义                                                                                     | 可用于发送 | 可用于接收 |\n| ------------- | ---------------------------------------------------------------------------------------- | ---------- | ---------- |\n| MSG_CONFIRM   | 指示链路层协议持续监听, 直到得到答复.(仅能用于SOCK_DGRAM和SOCK_RAW类型的socket)          | Y          | N          |\n| MSG_DONTROUTE | 不查看路由表, 直接将数据发送给本地的局域网络的主机(代表发送者知道目标主机就在本地网络中) | Y          | N          |\n| MSG_DONTWAIT  | 非阻塞                                                                                   | Y          | Y          |\n| MSG_MORE      | 告知内核有更多的数据要发送, 等到数据写入缓冲区完毕后,一并发送.减少短小的报文提高传输效率 | Y          | N          |\n| MSG_WAITALL   | 读操作一直等待到读取到指定字节后才会返回                                                 | N          | Y          |\n| MSG_PEEK      | 看一下内缓存数据, 并不会影响数据                                                         | N          | Y          |\n| MSG_OOB       | 发送或接收紧急数据                                                                       | Y          | Y          |\n| MSG_NOSIGNAL  | 向读关闭的管道或者socket连接中写入数据不会触发SIGPIPE信号                                | Y          |        N    |\n\n**基础UDP**\n```c\n#include <sys/types.h>\n#include <sys/socket.h>\n// 由于UDP不保存状态, 每次发送数据都需要 加入目标地址.\n// 不过recvfrom和sendto 也可以用于 面向STREAM的连接, 这样可以省略发送和接收端的socket地址\nssize_t recvfrom(int sockfd, void *buf, size_t len, int flags, struct sockaddr* src_addr, socklen_t* addrlen);\nssize_t sendto(int sockfd, const void* buf, size_t len, ing flags, const struct sockaddr* dest_addr, socklen_t addrlen);\n\n```\n\n**通用读写函数**\n\n```c\n#inclued <sys/socket.h>\nssize_t recvmsg(int sockfd, struct msghdr* msg, int flags);\nssize_t sendmsg(int sockfd, struct msghdr* msg, int flags);\n\nstruct msghdr\n{\n/* socket address --- 指向socket地址结构变量, 对于TCP连接需要设置为NULL*/\n\tvoid* msg_name; \n\n\n\tsocklen_t msg_namelen;\n\t\n\t/* 分散的内存块 --- 对于 recvmsg来说数据被读取后将存放在这里的块内存中, 内存的位置和长度由\n     * msg_iov指向的数组指定, 称为分散读(scatter read)  ---对于sendmsg而言, msg_iovlen块的分散内存中\n     * 的数据将一并发送称为集中写(gather write);\n\t*/\n\tstruct iovec* msg_iov;\n\tint msg_iovlen; /* 分散内存块的数量*/\n\tvoid* msg_control; /* 指向辅助数据的起始位置*/\n\tsocklen_t msg_controllen; /* 辅助数据的大小*/\n\tint msg_flags; /* 复制函数的flags参数, 并在调用过程中更新*/\n};\n\nstruct iovec\n{\n\tvoid* iov_base /* 内存起始地址*/\n\tsize_t iov_len /* 这块内存长度*/\n}\n```\n**其他Api**\n```c\n#include <sys/socket.h>\n// 用于判断 sockfd是否处于带外标记, 即下一个被读取到的数据是否是带外数据, \n// 是的话返回1, 不是返回0\n// 这样就可以选择带MSG_OOB标志的recv调用来接收带外数据. \nint sockatmark(int sockfd);\n\n// getsockname 获取sockfd对应的本端socket地址, 存入address指定的内存中, 长度存入address_len中 成功返回0失败返回-1\n// getpeername 获取远端的信息, 同上\nint getsockname(int sockfd, struct sockaddr* address, socklen_t* address_len);\nint getpeername(int sockfd, struct sockaddr* address, socklen_t* address_len);\n\n/* 以下函数头文件均相同*/\n\n// sockfd 目标socket, level执行操作协议(IPv4, IPv6, TCP) option_name 参数指定了选项的名字. 后面值和长度\n// 成功时返回0 失败返回-1\nint getsockopt(int sockfd, int level, int option_name, void* option_value, \n\t\t\t\t\t\tsocklen_t restrict option_len);\nint setsockopt(int sockfd, int level, int option_name, void* option_value, \n\t\t\t\t\t\tsocklen_t restrict option_len);\n```\n\n| SO_REUSEADDR | 重用本地地址      | sock被设置此属性后, 即使sock在被bind()后处于TIME_WAIT状态, 此时与他绑定的socket地址依然能够立即重用来绑定新的sock        |\n| ------------ | ----------------- | ------------------------------------------------------------------------------------------------------------------------ |\n| SO_RCVBUF    | TCP接收缓冲区大小 | 最小值为256字节. 设置完后系统会自动加倍你所设定的值. 多出来的一倍将用用作空闲缓冲区处理拥塞                              |\n| SO_SNDBUF    | TCP发送缓冲区大小 | 最小值为2048字节                                                                                                         |\n| SO_RCVLOWAT  | 接收的低水位标记  | 默认为1字节, 当TCP接收缓冲区中可读数据的总数大于其低水位标记时, IO复用系统调用将通知应用程序可以从对应的socket上读取数据 |\n| SO_SNDLOWAT  | 发送的高水位标记  | 默认为1字节, 当TCP发送缓冲区中空闲空间大于低水位标记的时候可以写入数据                                                   |\n| SO_LINGER    |                   |                                                                                                                          |\n\n\n```c\nstruct linger\n{\n\tint l_onoff /* 开启非0, 关闭为0*/\n\tint l_linger; /* 滞留时间*/\n\t/*\n\t* 当onoff为0的时候此项不起作用, close调用默认行为关闭socket\n\t* 当onoff不为0 且linger为0, close将立即返回, TCP将丢弃发送缓冲区的残留数据, 同时发送一个复位报文段\n\t* 当onoff不为0 且linger大于0 . 当socket阻塞的时候close将会等待TCP模块发送完残留数据并得到确认后关 \n\t* 闭, 如果是处于非阻塞则立即关闭\n\t*/\n};\n```\n\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/socket%E9%80%89%E9%A1%B9.jpg)\n**网络信息API**\n```c\n#include <netdb.h>\n// 通过主机名查找ip\nstruct hostent* gethostbyname(const char* name);\n\n// 通过ip获取主机完整信息 \n// type为IP地址类型 AF_INET和AF_INET6\nstruct hostent* gethostbyaddr(const void* addr, size_t len, int type);\n\nstruct hostent\n{\n  char *h_name;\t\t\t/* Official name of host.  */\n  char **h_aliases;\t\t/* Alias list.  */\n  int h_addrtype;\t\t/* Host address type.  */\n  int h_length;\t\t\t/* Length of address.  */\n  char **h_addr_list;\t\t/* List of addresses from name server.  */\n}\n\nint main(int argc, char* argv[])\n{\n    if (argc != 2)\n    {\n        printf(\"非法输入\\n\");\n        exit(0);\n    }\n    char* name = argv[1];\n\n    struct hostent *hostptr{};\n\n    hostptr = gethostbyname(name);\n    if (hostptr == nullptr)\n    {\n        printf(\"输入存在错误 或无法获取\\n\");\n        exit(0);\n    }\n\n    printf(\"Official name of hostptr: %s\\n\", hostptr->h_name);\n\n    char **pptr;\n    char inet_addr[INET_ADDRSTRLEN];\n\n    printf(\"Alias list:\\n\");\n    for (pptr = hostptr->h_aliases; *pptr != nullptr; ++pptr)\n    {\n        printf(\"\\t%s\\n\", *pptr);\n    }\n\n    switch (hostptr->h_addrtype)\n    {\n        case AF_INET:\n        {\n            printf(\"List of addresses from name server:\\n\");\n            for (pptr = hostptr->h_addr_list; *pptr != nullptr; ++pptr)\n            {\n                printf(\"\\t%s\\n\",\n                        inet_ntop(hostptr->h_addrtype, *pptr, inet_addr, sizeof(inet_addr)));\n            }\n            break;\n        }\n        default:\n        {\n            printf(\"unknow address type\\n\");\n            exit(0);\n        }\n    }\n    return 0;\n}\n\n/*\n./run baidu.com\nOfficial name of hostptr: baidu.com\nAlias list:\nList of addresses from name server:\n\t39.156.69.79\n\t220.181.38.148\n*/\n```\n以下两个函数通过读取/etc/services文件 来获取服务信息 以下内容来自维基百科\n\nService文件是现代操作系统在etc目录下的一个配置文件，记录网络服务名对应的端口号与协议 其用途如下\n- 通过TCP/IP的API函数（声明在netdb.h中）直接查到网络服务名与端口号、使用协议的对应关系。如getservbyname(\"serve\",\"tcp\")获取端口号;getservbyport（htons（port），“tcp”）获取端口和协议上的服务名\n- 如果用户在这个文件中维护所有使用的网络服务名字、端口、协议，那么可以一目了然的获悉哪些端口号用于哪个服务，哪些端口号是空闲的\n```c\n#include <netdb.h>\n// 根据名称获取某个服务的完整信息\nstruct servent getservbyname(const char* name, const char* proto);\n\n// 根据端口号获取服务信息\nstruct servent getservbyport(int port, const char* proto);\n\nstruct servent\n{\n\tchar* s_name; /* 服务名称*/\n\tchar ** s_aliases; /* 服务的别名列表*/\n\tint s_port; /* 端口号*/\n\tchar* s_proto; /* 服务类型, 通常为TCP或UDP*/\n}\n```\n```c\n#include <netdb.h>\n// 内部使用的gethostbyname 和 getserverbyname\n// hostname 用于接收主机名, 也可以用来接收字符串表示的IP地址(点分十进制, 十六进制字符串)\n// service 用于接收服务名, 字符串表示的十进制端口号\n// hints参数 对getaddrinfo的输出进行更准确的控制, 可以设置为NULL, 允许反馈各种有用的结果\n// result 指向一个链表, 用于存储getaddrinfo的反馈结果\nint getaddrinfo(const char* hostname, const char* service, const struct addrinfo* hints, struct addrinfo** result)\n\nstruct addrinfo\n{\n\tint ai_flags;\n\tint ai_family;\n\tint ai_socktype; /* 服务类型, SOCK_STREAM或者SOCK_DGRAM*/\n\tint ai_protocol;\n\tsocklen_t ai_addrlen;\n\tchar* ai_canonname; /* 主机的别名*/\n\tstruct sockaddr* ai_addr; /* 指向socket地址*/\n\tstruct addrinfo* ai_next; /* 指向下一个结构体*/\n}\n\n// 需要手动的释放堆内存\nvoid freeaddrinfo(struct addrinfo* res);\n```\n![](https://ftp.bmp.ovh/imgs/2019/08/7ebedb14d8eedeac.png)\n\n```c\n#include <netdb.h>\n// host 存储返回的主机名\n// serv存储返回的服务名\n\nint getnameinfo(const struct sockaddr* sockaddr, socklen_t addrlen, char* host, socklen_t hostlen, char* serv\n\tsocklen_t servlen, int flags);\n\n```\n![](https://ftp.bmp.ovh/imgs/2019/08/bc7196e9a30d5152.png)\n\n测试\n使用\n```shell\ntelnet ip port #来连接服务器的此端口\nnetstat -nt | grep port #来查看此端口的监听\n```\n\n## 第六章高级IO函数\n\nLinux提供的高级IO函数, 自然是特定条件下能力更强, 不然要他干啥, 特定条件自然限制了他的使用频率\n*文件描述符*\n文件描述符在是一个非负整数。是一个索引值,指向内核为每一个进程所维护的该进程打开文件的记录表。\nSTDOUT_FILENO(值为1)- 值为1的文件描述符为标准输出, 关闭STDOUT_FILENO后用dup即可返回最小可用值(目前为, 1) 这样输出就重定向到了调用dup的参数指向的文件\n\n### 创建文件描述符 - pipe dup dup2 splice select\n**pipe函数**\n这个函数可用于创建一个管道, 实现进程间的通信. \n\n```c\n// 函数定义\n// 参数文件描述符数组 fd[0] 读出 fd[1]写入 单向管道\n// 成功返回0, 并将一对打开的文件描述符填入其参数指向的数组\n// 失败返回-1 errno\n#include <unistd.h>\nint pipe(int fd[2]);\n```\n```c\n// 双向管道\n// 第一个参数为 协议PF_UNIX(书上是AF_UNIX)感觉这里指明协议使用PF更好一些\n#include <sys/types.h>\n#include <sys/socket.h>\nint socketpair(int domain, int type, int protocol, int fd[2]);\n```\n学习了后面的内容了解到了进程间通信, 回来补上一个例子\n```c\nint main()\n{\n    int fds[2];\n    socketpair(PF_UNIX, SOCK_STREAM, 0, fds);\n    int pid = fork();\n    if (pid == 0)\n    {\n        close(fds[0]);\n        char a[] = \"123\";\n        send(fds[1], a, strlen(a), 0);\n    }\n    else if (pid > 0)\n    {\n        close(fds[1]);\n        char b[20] {};\n        recv(fds[0], b, 20, 0);\n        printf(\"%s\", b);\n    }\n}\n```\n**dup和dup2函数**\n复制一个现有的文件描述符\n```c\n#include <unistd.h>\n// 返回的文件描述符总是取系统当前可用的最小整数值\nint dup(int oldfd);\n// 可以用newfd来制定新的文件描述符, 如果newfd已经被打开则先关闭\n// 如果newfd==oldfd 则不关闭newfd直接返回\nint dup2(int oldfd, int newfd);\n```\ndup函数创建一个新的文件描述符, 新的文件描述符和原有的file_descriptor共同指向相同的目标.\n回来补上例子, 这个例子由于关掉了`STDOUT_FILENO`dup最小的即为`STDOUT_FILENO`所以\n标准输出都到了这个文件之中\n```c\nint main()\n{\n    int filefd = open(\"/home/lsmg/1.txt\", O_WRONLY);\n    close(STDOUT_FILENO);\n    dup(filefd);\n    printf(\"123\\n\");\n    exit(0);\n}\n```\n\n### 读写数据 - readv writev mmap munmap\n**readv/writev**\n```c\n#include <sys/uio.h>\n// count 为 vector的长度, 即为有多少块内存\n// 成功时返回写入\\读取的长度 失败返回-1\nssize_t readv(int fd, const struct iovec* vector, int count);\nssize_t writev(int fd, const struct iovec* vector, int count);\n\nstruct iovec {\n\tvoid* iov_base /* 内存起始地址*/\n\tsize_t iov_len /* 这块内存长度*/\n}\n```\n回来补上一个使用例子, 这个例子将一个int的内存表示写入到了文件之中\n使用hexdump查看这个文件`0000000 86a0 0001`可以看到`186a0`即为100000\n```c\n// 2020年1月7日16:52:11\nint main()\n{\n    int file = open(\"/home/lsmg/1.txt\", O_WRONLY);\n    int temp = 100000;\n    iovec temp_iovec{};\n    temp_iovec.iov_base = &temp;\n    temp_iovec.iov_len = sizeof(temp);\n    writev(file, &temp_iovec, 1);\n}\n```\nsendfile函数\n```c\n#include <sys/sendfile.h>\n// offset为指定输入流从哪里开始读, 如果为NULL 则从开头读取\nssize_t sendfile(int out_fd, int in_fd, off_t* offset, size_t count);\n\nO_RDONLY只读模式\nO_WRONLY只写模式\nO_RDWR读写模式\nint open(file_name, flag);\n```\nstat结构体, 可用fstat生成, **简直就是文件的身份证**\n```c\n#include <sys/stat.h>\nstruct stat\n{\n    dev_t       st_dev;     /* ID of device containing file -文件所在设备的ID*/\n    ino_t       st_ino;     /* inode number -inode节点号*/\n    mode_t      st_mode;    /* protection -保护模式?*/\n    nlink_t     st_nlink;   /* number of hard links -链向此文件的连接数(硬连接)*/\n    uid_t       st_uid;     /* user ID of owner -user id*/\n    gid_t       st_gid;     /* group ID of owner - group id*/\n    dev_t       st_rdev;    /* device ID (if special file) -设备号，针对设备文件*/\n    off_t       st_size;    /* total size, in bytes -文件大小，字节为单位*/\n    blksize_t   st_blksize; /* blocksize for filesystem I/O -系统块的大小*/\n    blkcnt_t    st_blocks;  /* number of blocks allocated -文件所占块数*/\n    time_t      st_atime;   /* time of last access -最近存取时间*/\n    time_t      st_mtime;   /* time of last modification -最近修改时间*/\n    time_t      st_ctime;   /* time of last status change - */\n};\n```\n**身份证**生成函数\n```c\n// 第一个参数需要调用open生成文件描述符\n// 下面其他两个为文件全路径\nint fstat(int filedes, struct stat *buf);\n\n// 当路径指向为符号链接的时候, lstat为符号链接的信息. stat为符号链接指向文件信息\nint stat(const char *path, struct stat *buf);\nint lstat(const char *path, struct stat *buf);\n\n/*\n* ln -s source dist  建立软连接, 类似快捷方式, 也叫符号链接\n* ln source dist  建立硬链接, 同一个文件使用多个不同的别名, 指向同一个文件数据块, 只要硬链接不被完全\n* 删除就可以正常访问\n* 文件数据块 - 文件的真正数据是一个文件数据块, 打开的`文件`指向这个数据块, 就是说\n* `文件`本身就类似快捷方式, 指向文件存在的区域.\n*/\n```\n **mmap和munmap函数**\n\n`mmap`创建一块进程通讯共享的内存(可以将文件映射入其中), `munmap`释放这块内存\n```c\n#include <sys/mman.h>\n\n// start 内存起始位置, 如果为NULL则系统分配一个地址 length为长度\n// port参数 PROT_READ(可读) PROT_WRITE(可写) PROT_EXEC(可执行), PROT_NONE(不可访问)\n// flag参数 内存被修改后的行为\n// - MAP_SHARED 进程间共享内存, 对内存的修改反映到映射文件中\n// - MAP_PRIVATE 为调用进程私有, 对该内存段的修改不会反映到文件中\n// - MAP_ANONUMOUS 不是从文件映射而来, 内容被初始化为0, 最后两个参数被忽略\n// 成功返回区域指针, 失败返回 -1\nvoid* mmap(void* start, size_t length, int port, int flags, int fd, off_t offset);\n// 成功返回0 失败返回-1\nint munmap(void* start, size_t length);\n```\n**splice函数**\n用于在两个文件名描述符之间移动数据, 0拷贝操作\n```c\n#include <fcntl.h>\n// fd_in 为文件描述符, 如果为管道文件描述符则 off_in必须为NULL, 否则为读取开始偏移位置\n// len为指定移动的数据长度, flags参数控制数据如何移动.\n// - SPLICE_F_NONBLOCK 非阻塞splice操作, 但会受文件描述符自身的阻塞\n// - SPLICE_F_MORE 给内核一个提示, 后续的splice调用将读取更多的数据???????\nssize_t splice(int fd_in, loff_t* off_in, int fd_out, loff_t* off_out, size_t len, unsigned int flags);\n\n// 使用splice函数  实现echo服务器\nint main(int argc, char* argv[])\n{\n    if (argc <= 2)\n    {\n        printf(\"the parmerters is wrong\\n\");\n        exit(errno);\n    }\n    char *ip = argv[1];\n\n    int port = atoi(argv[2]);\n    printf(\"the port is %d the ip is %s\\n\", port, ip);\n\n    int sockfd = socket(PF_INET, SOCK_STREAM, 0);\n    assert(sockfd >= 0);\n\n    struct sockaddr_in address{};\n    address.sin_family = AF_INET;\n    address.sin_port = htons(port);\n    inet_pton(AF_INET, ip, &address.sin_addr);\n\n    int ret = bind(sockfd, (sockaddr*)&address, sizeof(address));\n    assert(ret != -1);\n\n    ret = listen(sockfd, 5);\n\n    int clientfd{};\n    sockaddr_in client_address{};\n    socklen_t client_addrlen = sizeof(client_address);\n\n    clientfd = accept(sockfd, (sockaddr*)&client_address, &client_addrlen);\n    if (clientfd < 0)\n    {\n        printf(\"accept error\\n\");\n    }\n    else\n    {\n        printf(\"a new connection from %s:%d success\\n\", inet_ntoa(client_address.sin_addr), ntohs(client_address.sin_port));\n        int fds[2];\n        pipe(fds);\n        ret = splice(clientfd, nullptr, fds[1], nullptr, 32768, SPLICE_F_MORE);\n        assert(ret != -1);\n\n        ret = splice(fds[0], nullptr, clientfd, nullptr, 32768, SPLICE_F_MORE);\n        assert(ret != -1);\n\n        close(clientfd);\n    }\n    close(sockfd);\n    exit(0);\n}\n```\n\n**select 函数**\nselect函数在第二个参数列表 可读的时候返回\n或者是等到了规定的时间返回\n\n返回之后 第二个参数指向fdset的集合 被修改为可读的fd列表\n这就需要每次返回后都更新 fdset集合\n\n返回后 此函数的返回值为可读的fd数量, 遍历fdset集合 同时使用FD_ISSET判断fdset[i] 是否在其中\n然后判断此fd是否为listenfd 如果是则接受新的连接 如果不是说明是已经接受的其他fd 判断是有数据可读\n还是此连接断开\n\n```c\n#include <fcntl.h> \n// maxfdp 最大数 FD_SETSIZE\n// struct fd_set 一个集合,可以存储多个文件描述符\n// - FD_ZERO(&fd_set) 清空 -FD_SET(fd, &fd_set) 放入fd FD_CLR(fd, &fd_set)从其中清除fd\n// - FD_ISSET(fd, &fd_set) 判断是否在其中\n// readfds  需要监视的文件描述符读变化, 其中的文件描述符可读的时候返回\n// writefds 需要监视的文件描述符写变化, 其中的文件描述符可写的时候返回\n// errorfds 错误\n// timeout 传入NULL为阻塞, 设置为0秒0微秒则变为非阻塞函数\n// 返回值 负值为错误 等待超时说明文件无变化返回0 有变化返回正值\nint select(int maxfdp,fd_set *readfds,fd_set *writefds,fd_set *errorfds,struct timeval*timeout); \n\n#define exit_if(r, ...) \\\n{   \\\n    if (r)  \\\n    {   \\\n        printf(__VA_ARGS__);    \\\n        printf(\"errno no: %d, error msg is %s\", errno, strerror(errno));    \\\n        exit(1);    \\\n    }   \\\n}   \\\n\nint main(int argc, char* argv[])\n{\n    int keyboard_fd = open(\"/dev/tty\", O_RDONLY | O_NONBLOCK);\n    exit_if(keyboard_fd < 0, \"open keyboard fd error\\n\");\n    fd_set readfd;\n    char recv_buffer = 0;\n\n    while (true)\n    {\n        FD_ZERO(&readfd);\n        FD_SET(0, &readfd);\n\n        timeval timeout {5, 0};\n\n        int ret = select(keyboard_fd + 1, &readfd, nullptr, nullptr, &timeout);\n        exit_if(ret == -1, \"select error\\n\");\n        if (ret > 0)\n        {\n            if (FD_ISSET(keyboard_fd, &readfd))\n            {\n                recv_buffer = 0;\n                read(keyboard_fd, &recv_buffer, 1);\n                if ('\\n' == recv_buffer)\n                {\n                    continue;\n                }\n                if ('q' == recv_buffer)\n                {\n                    break;\n                }\n                printf(\"the input is %c\\n\", recv_buffer);\n            }\n\n        }\n        if (ret == 0)\n        {\n            printf(\"timeout\\n\");\n        }\n    }\n}\n```\n## 第七章Linux服务器程序规范\n\n- Linux程序服务器 一般以后台进程形式运行.  后台进程又称为守护进程(daemon). 他没有控制终端, 因而不会意外的接收到用户输入. 守护进程的父进程通常都是init进程(PID为1的进程)\n- Linux服务器程序有一套日志系统, 他至少能输出日志到文件. 日志这东西太重要了,排错对比全靠它.\n- Linux服务器程序一般以某个专门的非root身份运行. 比如mysqld有自己的账户mysql.\n- Linux服务器程序一般都有自己的配置文件, 而不是把所有配置都写死在代码里面, 方便后续的更改.\n- Linux服务器程序通常在启动的时候生成一个PID文件并存入/var/run 目录中, 以记录改后台进程的PID.\n- Linux服务器程序通常需要考虑系统资源和限制, 预测自己的承受能力\n\n### 日志\n\n```shell\nsudo service rsyslog restart // 启动守护进程\n```\n```c\n#include <syslog.h>\n// priority参数是所谓的设施值(记录日志信息来源, 默认为LOG_USER)与日志级别的按位或\n// - 0 LOG_EMERG  /* 系统不可用*/\n// - 1 LOG_ALERT   /* 报警需要立即采取行动*/\n// - 2 LOG_CRIT /* 非常严重的情况*/\n// - 3 LOG_ERR  /* 错误*/\n// - 4 LOG_WARNING /* 警告*/\n// - 5 LOG_NOTICE /* 通知*/\n// - 6 LOG_INFO /* 信息*/\n//  -7 LOG_DEBUG /* 调试*/\nvoid syslog(int priority, const char* message, .....);\n\n// ident 位于日志的时间后 通常为名字\n// logopt 对后续 syslog调用的行为进行配置\n// -  0x01 LOG_PID  /* 在日志信息中包含程序PID*/\n// -  0x02 LOG_CONS /* 如果信息不能记录到日志文件, 则打印到终端*/\n// -  0x04 LOG_ODELAY /* 延迟打开日志功能直到第一次调用syslog*/\n// -  0x08 LOG_NDELAY /* 不延迟打开日志功能*/\n// facility参数可以修改syslog函数中的默认设施值\nvoid openlog(const char* ident, int logopt, int facility);\n\n// maskpri 一共八位 0000-0000\n// 如果将最后一个0置为1 表示 记录0级别的日志\n// 如果将最后两个0都置为1 表示记录0和1级别的日志\n// 可以通过LOG_MASK() 宏设定 比如LOG_MASK(LOG_CRIT) 表示将倒数第三个0置为1, 表示只记录LOG_CRIT\n// 如果直接设置setlogmask(3); 3的二进制最后两个数均为1 则记录 0和1级别的日志\nint setlogmask(int maskpri);\n\n// 关闭日志功能\nvoid closelog();\n```\n\n### 用户信息, 切换用户\nUID - 真实用户ID\nEUID - 有效用户ID - 方便资源访问\nGID - 真实组ID\nEGID - 有效组ID\n```c\n#include <sys/types.h>\n#include <unistd.h>\n\nuid_t getuid();\nuid_t geteuid();\ngid_t getgid();\ngid_t getegid();\nint setuid(uid_t uid);\nint seteuid(uid_t euid);\nint setgid(gid_t gid);\nint setegid(gid_t gid);\n```\n\n可以通过 `setuid`和`setgid`切换用户 **root用户uid和gid均为0**\n\n### 进程间关系\nPGID - 进程组ID(Linux下每个进程隶属于一个进程组)\n\n#include <unistd.h>\npid_t getpgid(pid_t pid); 成功时返回pid所属的pgid 失败返回-1\nint setpgid(pid_t pid, pid_t pgid);\n\n**会话**\n一些有关联的进程组将形成一个会话\n略过\n\n**查看进程关系**\nps和less\n\n**资源限制**\n略\n**改变目录**\n略\n\n## 第八章高性能服务器程序框架\n\n**服务器模型-CS模型**\n\n**优点**\n- 实现起来简单\n**缺点**\n- 服务器是通信的中心, 访问过大的时候会导致响应过慢\n\n模式图\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E5%9B%BE8-2%20TCP%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png)\n\n编写的demo 没有用到fork函数. 后续待完善\n\n**服务器框架 IO模型**\n\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E6%9C%AC%E6%A1%86%E6%9E%B6.png)\n\n这个模型大概能够理解, 自己也算是学了半年的Javaweb.\n\nsocket在创建的时候默认是阻塞的, 不过可以通过传`SOCK_NONBLOCK`参解决\n非阻塞调用都会立即返回 但可能事件没有发生(recv没有接收到信息), 没有发生和出错都会`返回-1` 所以需要通过`errno`来区分这些错误.\n**事件未发生**\naccept, send,recv errno被设置为 `EAGAIN(再来一次)`或`EWOULDBLOCK(期望阻塞)`\nconnect 被设置为 `EINPROGRESS(正在处理中)`\n\n需要在事件已经发生的情况下 去调用非阻塞IO, 才能提高性能\n\n常用IO复用函数 `select` `poll` `epoll_wait` 将在第九章后面说明\n信号将在第十章说明\n\n**两种高效的事件处理模式和并发模式**\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/Reactor%E6%A8%A1%E5%BC%8F.png)\n\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/Proactor%E6%A8%A1%E5%BC%8F.png)\n\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E7%94%A8%E5%90%8C%E6%AD%A5IO%E6%A8%A1%E6%8B%9F%E5%87%BA%E7%9A%84Proactor%E6%A8%A1%E5%BC%8F.png)\n\n程序分为计算密集型(CPU使用很多, IO资源使用很少)和IO密集型(反过来).\n前者使用并发编程反而会降低效率, 后者则会提升效率\n并发编程有多进程和多线程两种方式\n\n并发模式 - IO单元和多个逻辑单元之间协调完成任务的方法.\n服务器主要有两种并发模式\n- 半同步/半异步模式\n- 领导者/追随者模式\n\n**半同步/半异步模式**\n在IO模型中, 异步和同步的区分是内核向应用程序通知的是何种IO事件(就绪事件还是完成事件), 以及由谁来完成IO读写(应用程序还是内核)\n\n而在这里(并发模式) \n同步指的是完全按照代码序列的顺序执行 - 按照同步方式运行的线程称为同步线程\n异步需要系统事件(中断, 信号)来驱动 - 按照异步方式运行的线程称为异步线程\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5%E5%92%8C%E5%90%8C%E6%AD%A5.png)\n\n服务器(需要较好的实时性且能同时处理多个客户请求) - 一般使用同步线程和异步线程来实现,即为半同步/半异步模式\n同步线程 - 处理客户逻辑, 处理请求队列中的对象\n异步线程 - 处理IO事件, 接收到客户请求后将其封装成请求对象并插入请求队列\n\n半同步/半异步模式 存在变体 `半同步/半反应堆模式`\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E5%8D%8A%E5%90%8C%E6%AD%A5%E5%8D%8A%E5%8F%8D%E5%BA%94%E5%A0%86%E6%A8%A1%E5%BC%8F.png)\n\n异步线程 - 主线程 - 负责监听所有socket上的事件\n\n**领导者/追随者模式**\n略\n\n**高效编程方法 - 有限状态机**\n```c\n// 状态独立的有限状态机\nSTATE_MACHINE(Package _pack) {\n\t\n\tPackageType _type = _pack.GetType();\n\tswitch(_type) {\n\t\tcase type_A:\n\t\t\txxxx;\n\t\t\tbreak;\n\t\tcase type_B:\n\t\t\txxxx;\n\t\t\tbreak;\n\t}\n}\n\n// 带状态转移的有限状态机\nSTATE_MACHINE() {\n\tState cur_State = type_A;\n\twhile(cur_State != type_C) {\n\t\n\t\tPackage _pack = getNewPackage();\n\t\tswitch(cur_State) {\n\t\t\t\n\t\t\tcase type_A:\n\t\t\t\tprocess_package_state_A(_pack);\n\t\t\t\tcur_State = type_B;\n\t\t\t\tbreak;\n\t\t\tcase type_B:\n\t\t\t\txxxx;\n\t\t\t\tcur_State = type_C;\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n```\n\n花了小一个小时 终于一个字母一个字母的抄完了那个5000多字的代码\n@2019年9月8日22:08:46@\n\n### 提高服务器性能的其他建议 池 数据复制 上下文切换和锁\n\n**池** - 用空间换取时间\n进程池和线程池\n\n**数据复制** - 高性能的服务器应该尽量避免不必要的复制\n\n**上下文切换和锁**\n减少`锁`的作用区域. 不应该创建太多的工作进程, 而是使用专门的业务逻辑线程.\n\n","source":"_posts/100CPP-读书记录-高性能服务器编程读书记录初级部分.md","raw":"---\ntitle: Linux高性能服务器编程读书记录-初级部分\ntags:\n  - null\ncategories:\n  - CPP\n  - 服务器编程-书籍记录\ndate: 2019-08-17 20:34:39\n\ntop: 100\nimg: https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%B0%81%E9%9D%A2/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B.jpg\n---\n开头选了这本书, 看到这本书是他人总结三大本后自己写的, 先求个理解大概.\n话说别人推荐的c++服务器咋都是c语言.....\n2019年8月17日20:37:53\n\n每学习一部分就写一个demo\n<!--more-->\n\n分了三篇\n# 第一篇TCP/IP协议详解\n## 第一章 TCP/IP协议族\n\n### TCP/IP协议族体系结构和主要协议\n协议族中协议众多, 这本书只选取了IP和TCP协议 - 对网络编程影响最直接\n\n见得最多就是这四层结构了, 不过这本书写得更加详细一些\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E5%9B%9B%E5%B1%82%E7%BB%93%E6%9E%84.jpg)\n\n同样七层是osi参考模型, 简化后得到四层\n![](https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=3a1768f4c6fc1e17e9b284632bf99d66/0dd7912397dda144d48ab350bbb7d0a20df48655.jpg)\n不同层次之间, 通过接口互相交流, 这样方便了各层次的修改\n\n**应用层**\n负责处理应用程序的逻辑\n\n**表示层**\n定义了数据的格式及加密\n\n**会话层**\n它定义了如何开始、控制和结束一个会话，包括对多个双向消息的控制和管理，以便在只完成连续消息的一部分时可以通知应用，从而使表示层看到的数据是连续的\n\n**传输层**\n为两台主机的应用提供端到端(end to end)的通信. 与网络层使用的下一跳不同, 他只关心起始和终止, 中转过程交给下层处理.\n此层存在两大协议TCP协议和UDP协议\n*TCP协议*\nTCP协议(Transmission Control Protocol 传输控制协议) - 为应用层提供`可靠的, 面向连接, 基于流的服`\n通过`超时重传`和`数据确认`等确保数据正常送达.\nTCP需要存储一些必要的状态, 可靠的协议\n*UDP协议*\nUPD协议(User Datagram Protocol 用户数据报协议) - 为应用层提供`不可靠的, 无连接的, 基于数据报的服务`\n一般需要自己处理`数据确认`和`超时重传`的问题\n通信两者不存储状态, 每次发送都需要指定地址信息. `有自己的长度`\n\n**网络层**\n实现了数据包的选路和转发.  只有数据包到不了目标地址, 就`下一跳`(hop by hop), 选择最近的.\n*IP协议(Internet Protocol)* 以及 *ICMP协议(Internet Control Message Protocol)* \n后者协议是IP协议的补充, 用来检测网络连接 1. 差错报文, 用来回应状态 2. 查询报文(ping程序就是使用的此报文来判断信息是否送达)\n\n**数据链路层**\n实现了网卡接口的网络驱动程序. 这里驱动程序方便了厂商的下层修改, 只需要向上层提供规定的接口即可.\n存在两个协议 *ARP协议(Address Resolve Protocol, 地址解析协议)*. 还有*RARP(Reverse ~, 逆地址解析协议)*.  由于网络层使用IP地址寻址机器, 但是数据链路层使用物理地址(通常为MAC地址), 之间的转化涉及到ARP协议**ARP欺骗, 可能与这个有关, 目前不去学习**\n\n**封装**\n上层协议发送到下层协议. 通过封装实现, 层与层之间传输的时候, 加上自己的头部信息.\n被TCP封装的数据成为 `TCP报文段`\n- 内核部分发送成功后删除数据\n\n被UDP封装的数据成为 `UDP数据报`\n- 发送后即删除\n\n再经IP封装后成为`IP数据报`\n最后经过数据链路层封装后为 `帧`\n\n下面的操作都将在如下环境进行\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C.png)\n\n**ARP**\nARP协议能实现任意网络层地址到任意物理地址的转换\n\n## 第二章 IP协议详解\nIP协议是TCP/IP协议簇的核心协议, 是socket网络编程的基础之一\nIP协议为上层协议提供无状态, 无连接, 不可靠的服务\n\n\n# 第二篇深入解析高性能服务器编程\n## 第五章Linux网络编程基础API\n\n\nsocket基础api位于 `sys/socket.h` 头文件中\nsocket最开始的含义是 一个IP地址和端口对. 唯一的表示了TCP通信的一段\n网络信息api `netdb.h`头文件中\n\n### 主机字节序和网络字节序\n字节序分为 `大端字节序`和`小端字节序`\n由于大多数PC采用小端字节序(高位存在高地址处), 所以小端字节序又称为主机字节序\n\n为了防止不同机器字节序不同导致的错乱问题. 规定传输的时候统一为 大端字节序(网络字节序).\n这样主机会根据自己的情况决定 - 是否转换接收到的数据的字节序\n\n\n### API\n\n**基础连接**\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E5%9C%B0%E5%9D%80%E7%BB%93%E6%9E%84%E4%BD%93.jpg)\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E5%8D%8F%E8%AE%AE%E7%BB%84%E5%90%88%E5%9C%B0%E5%9D%80%E6%97%8F.jpg)\n```c++\n// 主机序和网络字节序转换\n#include <netinet/in.h>\nunsigned long int htonl (unsigned long int hostlong); // host to network long\nunsigned short int htons (unsigned short int hostlong); // host to network short\n\nunsigned long int htonl (unsigned long int netlong);\nunsigned short int htons (unsigned short int netlong);\n\n// IP地址转换函数\n#include <arpa/inet.h>\n// 将点分十进制字符串的IPv4地址, 转换为网络字节序整数表示的IPv4地址. 失败返回INADDR_NONE\nin_addr_t  inet_addr( const char* strptr);\n\n// 功能相同不过转换结果存在 inp指向的结构体中. 成功返回1 反之返回0\nint inet_aton( const char* cp, struct in_addr* inp);\n\n// 函数返回一个静态变量地址值, 所以多次调用会导致覆盖\nchar* inet_ntoa(struct in_addr in); \n\n// src为 点分十进制字符串的IPv4地址 或 十六进制字符串表示的IPv6地址 存入dst的内存中 af指定地址族\n// 可以为 AF_INET AF_INET6 成功返回1 失败返回-1\nint inet_pton(int af, const char * src, void* dst);\n// 协议名, 需要转换的ip, 存储地址, 长度(有两个常量 INET_ADDRSTRLEN, INET6_ADDRSTRLEN)\nconst char* inet_ntop(int af, const void*  src, char* dst, socklen_t cnt);\n\n\n// 创建 命名 监听 socket\n# include <sys/types.h>\n# include <sys/socket.h>\n// domain指定使用那个协议族 PF_INET PF_INET6\n// type指定服务类型 SOCK_STREAM (TCP协议) SOCK_DGRAM(UDP协议)\n// protocol设置为默认的0\n// 成功返回socket文件描述符(linux一切皆文件), 失败返回-1\nint socket(int domain, int type, int protocol);\n\n// socket为socket文件描述符\n// my_addr 为地址信息\n// addrlen为socket地址长度\n// 成功返回0 失败返回 -1\nint bind(int socket, const struct sockaddr* my_addr, socklen_t addrlen);\n\n// backlog表示队列最大的长度\nint listen(int socket, int backlog);\n// 接受连接 失败返回-1 成功时返回socket\nint accept(int sockfd, struct sockaddr* addr, socklen_t* addrlen)\n```\n客户端\n```c\n// 发起连接\n#include <sys/types.h>\n#include <sys/socket.h>\n// 第三个参数为 地址指定的长度\n// 成功返回0 失败返回-1\nint connect(int sockfd, const struct sockaddr * serv_addr, socklen_t addrlen);\n\n// 关闭连接\n#include <unistd.h>\n// 参数为保存的socket\n// 并非立即关闭, 将socket的引用计数-1, 当fd的引用计数为0, 才能关闭(需要查阅)\nint close(int fd);\n\n// 立即关闭\n#include <sys/socket.h>\n// 第二个参数为可选值 \n//\tSHUT_RD 关闭读, socket的接收缓冲区的数据全部丢弃\n//\tSHUT_WR 关闭写 socket的发送缓冲区全部在关闭前发送出去\n//\tSHUT_RDWR 同时关闭读和写\n// 成功返回0 失败为-1 设置errno\nint shutdown(int sockfd, int howto)\n```\n**基础TCP**\n```c\n#include<sys/socket.h>\n#include<sys/types.h>\n\n// 读取sockfd的数据\n// buf 指定读缓冲区的位置\n// len 指定读缓冲区的大小\n// flags 参数较多\n// 成功的时候返回读取到的长度, 可能小于预期长度, 需要多次读取.   读取到0 通信对方已经关闭连接, 错误返回-1\nssize_t recv(int sockfd, void *buf, size_t len, int flags);\n// 发送\nssize_t send(int sockfd, const void *buf, size_t len, int flags);\n```\n\n| 选项名        | 含义                                                                                     | 可用于发送 | 可用于接收 |\n| ------------- | ---------------------------------------------------------------------------------------- | ---------- | ---------- |\n| MSG_CONFIRM   | 指示链路层协议持续监听, 直到得到答复.(仅能用于SOCK_DGRAM和SOCK_RAW类型的socket)          | Y          | N          |\n| MSG_DONTROUTE | 不查看路由表, 直接将数据发送给本地的局域网络的主机(代表发送者知道目标主机就在本地网络中) | Y          | N          |\n| MSG_DONTWAIT  | 非阻塞                                                                                   | Y          | Y          |\n| MSG_MORE      | 告知内核有更多的数据要发送, 等到数据写入缓冲区完毕后,一并发送.减少短小的报文提高传输效率 | Y          | N          |\n| MSG_WAITALL   | 读操作一直等待到读取到指定字节后才会返回                                                 | N          | Y          |\n| MSG_PEEK      | 看一下内缓存数据, 并不会影响数据                                                         | N          | Y          |\n| MSG_OOB       | 发送或接收紧急数据                                                                       | Y          | Y          |\n| MSG_NOSIGNAL  | 向读关闭的管道或者socket连接中写入数据不会触发SIGPIPE信号                                | Y          |        N    |\n\n**基础UDP**\n```c\n#include <sys/types.h>\n#include <sys/socket.h>\n// 由于UDP不保存状态, 每次发送数据都需要 加入目标地址.\n// 不过recvfrom和sendto 也可以用于 面向STREAM的连接, 这样可以省略发送和接收端的socket地址\nssize_t recvfrom(int sockfd, void *buf, size_t len, int flags, struct sockaddr* src_addr, socklen_t* addrlen);\nssize_t sendto(int sockfd, const void* buf, size_t len, ing flags, const struct sockaddr* dest_addr, socklen_t addrlen);\n\n```\n\n**通用读写函数**\n\n```c\n#inclued <sys/socket.h>\nssize_t recvmsg(int sockfd, struct msghdr* msg, int flags);\nssize_t sendmsg(int sockfd, struct msghdr* msg, int flags);\n\nstruct msghdr\n{\n/* socket address --- 指向socket地址结构变量, 对于TCP连接需要设置为NULL*/\n\tvoid* msg_name; \n\n\n\tsocklen_t msg_namelen;\n\t\n\t/* 分散的内存块 --- 对于 recvmsg来说数据被读取后将存放在这里的块内存中, 内存的位置和长度由\n     * msg_iov指向的数组指定, 称为分散读(scatter read)  ---对于sendmsg而言, msg_iovlen块的分散内存中\n     * 的数据将一并发送称为集中写(gather write);\n\t*/\n\tstruct iovec* msg_iov;\n\tint msg_iovlen; /* 分散内存块的数量*/\n\tvoid* msg_control; /* 指向辅助数据的起始位置*/\n\tsocklen_t msg_controllen; /* 辅助数据的大小*/\n\tint msg_flags; /* 复制函数的flags参数, 并在调用过程中更新*/\n};\n\nstruct iovec\n{\n\tvoid* iov_base /* 内存起始地址*/\n\tsize_t iov_len /* 这块内存长度*/\n}\n```\n**其他Api**\n```c\n#include <sys/socket.h>\n// 用于判断 sockfd是否处于带外标记, 即下一个被读取到的数据是否是带外数据, \n// 是的话返回1, 不是返回0\n// 这样就可以选择带MSG_OOB标志的recv调用来接收带外数据. \nint sockatmark(int sockfd);\n\n// getsockname 获取sockfd对应的本端socket地址, 存入address指定的内存中, 长度存入address_len中 成功返回0失败返回-1\n// getpeername 获取远端的信息, 同上\nint getsockname(int sockfd, struct sockaddr* address, socklen_t* address_len);\nint getpeername(int sockfd, struct sockaddr* address, socklen_t* address_len);\n\n/* 以下函数头文件均相同*/\n\n// sockfd 目标socket, level执行操作协议(IPv4, IPv6, TCP) option_name 参数指定了选项的名字. 后面值和长度\n// 成功时返回0 失败返回-1\nint getsockopt(int sockfd, int level, int option_name, void* option_value, \n\t\t\t\t\t\tsocklen_t restrict option_len);\nint setsockopt(int sockfd, int level, int option_name, void* option_value, \n\t\t\t\t\t\tsocklen_t restrict option_len);\n```\n\n| SO_REUSEADDR | 重用本地地址      | sock被设置此属性后, 即使sock在被bind()后处于TIME_WAIT状态, 此时与他绑定的socket地址依然能够立即重用来绑定新的sock        |\n| ------------ | ----------------- | ------------------------------------------------------------------------------------------------------------------------ |\n| SO_RCVBUF    | TCP接收缓冲区大小 | 最小值为256字节. 设置完后系统会自动加倍你所设定的值. 多出来的一倍将用用作空闲缓冲区处理拥塞                              |\n| SO_SNDBUF    | TCP发送缓冲区大小 | 最小值为2048字节                                                                                                         |\n| SO_RCVLOWAT  | 接收的低水位标记  | 默认为1字节, 当TCP接收缓冲区中可读数据的总数大于其低水位标记时, IO复用系统调用将通知应用程序可以从对应的socket上读取数据 |\n| SO_SNDLOWAT  | 发送的高水位标记  | 默认为1字节, 当TCP发送缓冲区中空闲空间大于低水位标记的时候可以写入数据                                                   |\n| SO_LINGER    |                   |                                                                                                                          |\n\n\n```c\nstruct linger\n{\n\tint l_onoff /* 开启非0, 关闭为0*/\n\tint l_linger; /* 滞留时间*/\n\t/*\n\t* 当onoff为0的时候此项不起作用, close调用默认行为关闭socket\n\t* 当onoff不为0 且linger为0, close将立即返回, TCP将丢弃发送缓冲区的残留数据, 同时发送一个复位报文段\n\t* 当onoff不为0 且linger大于0 . 当socket阻塞的时候close将会等待TCP模块发送完残留数据并得到确认后关 \n\t* 闭, 如果是处于非阻塞则立即关闭\n\t*/\n};\n```\n\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/socket%E9%80%89%E9%A1%B9.jpg)\n**网络信息API**\n```c\n#include <netdb.h>\n// 通过主机名查找ip\nstruct hostent* gethostbyname(const char* name);\n\n// 通过ip获取主机完整信息 \n// type为IP地址类型 AF_INET和AF_INET6\nstruct hostent* gethostbyaddr(const void* addr, size_t len, int type);\n\nstruct hostent\n{\n  char *h_name;\t\t\t/* Official name of host.  */\n  char **h_aliases;\t\t/* Alias list.  */\n  int h_addrtype;\t\t/* Host address type.  */\n  int h_length;\t\t\t/* Length of address.  */\n  char **h_addr_list;\t\t/* List of addresses from name server.  */\n}\n\nint main(int argc, char* argv[])\n{\n    if (argc != 2)\n    {\n        printf(\"非法输入\\n\");\n        exit(0);\n    }\n    char* name = argv[1];\n\n    struct hostent *hostptr{};\n\n    hostptr = gethostbyname(name);\n    if (hostptr == nullptr)\n    {\n        printf(\"输入存在错误 或无法获取\\n\");\n        exit(0);\n    }\n\n    printf(\"Official name of hostptr: %s\\n\", hostptr->h_name);\n\n    char **pptr;\n    char inet_addr[INET_ADDRSTRLEN];\n\n    printf(\"Alias list:\\n\");\n    for (pptr = hostptr->h_aliases; *pptr != nullptr; ++pptr)\n    {\n        printf(\"\\t%s\\n\", *pptr);\n    }\n\n    switch (hostptr->h_addrtype)\n    {\n        case AF_INET:\n        {\n            printf(\"List of addresses from name server:\\n\");\n            for (pptr = hostptr->h_addr_list; *pptr != nullptr; ++pptr)\n            {\n                printf(\"\\t%s\\n\",\n                        inet_ntop(hostptr->h_addrtype, *pptr, inet_addr, sizeof(inet_addr)));\n            }\n            break;\n        }\n        default:\n        {\n            printf(\"unknow address type\\n\");\n            exit(0);\n        }\n    }\n    return 0;\n}\n\n/*\n./run baidu.com\nOfficial name of hostptr: baidu.com\nAlias list:\nList of addresses from name server:\n\t39.156.69.79\n\t220.181.38.148\n*/\n```\n以下两个函数通过读取/etc/services文件 来获取服务信息 以下内容来自维基百科\n\nService文件是现代操作系统在etc目录下的一个配置文件，记录网络服务名对应的端口号与协议 其用途如下\n- 通过TCP/IP的API函数（声明在netdb.h中）直接查到网络服务名与端口号、使用协议的对应关系。如getservbyname(\"serve\",\"tcp\")获取端口号;getservbyport（htons（port），“tcp”）获取端口和协议上的服务名\n- 如果用户在这个文件中维护所有使用的网络服务名字、端口、协议，那么可以一目了然的获悉哪些端口号用于哪个服务，哪些端口号是空闲的\n```c\n#include <netdb.h>\n// 根据名称获取某个服务的完整信息\nstruct servent getservbyname(const char* name, const char* proto);\n\n// 根据端口号获取服务信息\nstruct servent getservbyport(int port, const char* proto);\n\nstruct servent\n{\n\tchar* s_name; /* 服务名称*/\n\tchar ** s_aliases; /* 服务的别名列表*/\n\tint s_port; /* 端口号*/\n\tchar* s_proto; /* 服务类型, 通常为TCP或UDP*/\n}\n```\n```c\n#include <netdb.h>\n// 内部使用的gethostbyname 和 getserverbyname\n// hostname 用于接收主机名, 也可以用来接收字符串表示的IP地址(点分十进制, 十六进制字符串)\n// service 用于接收服务名, 字符串表示的十进制端口号\n// hints参数 对getaddrinfo的输出进行更准确的控制, 可以设置为NULL, 允许反馈各种有用的结果\n// result 指向一个链表, 用于存储getaddrinfo的反馈结果\nint getaddrinfo(const char* hostname, const char* service, const struct addrinfo* hints, struct addrinfo** result)\n\nstruct addrinfo\n{\n\tint ai_flags;\n\tint ai_family;\n\tint ai_socktype; /* 服务类型, SOCK_STREAM或者SOCK_DGRAM*/\n\tint ai_protocol;\n\tsocklen_t ai_addrlen;\n\tchar* ai_canonname; /* 主机的别名*/\n\tstruct sockaddr* ai_addr; /* 指向socket地址*/\n\tstruct addrinfo* ai_next; /* 指向下一个结构体*/\n}\n\n// 需要手动的释放堆内存\nvoid freeaddrinfo(struct addrinfo* res);\n```\n![](https://ftp.bmp.ovh/imgs/2019/08/7ebedb14d8eedeac.png)\n\n```c\n#include <netdb.h>\n// host 存储返回的主机名\n// serv存储返回的服务名\n\nint getnameinfo(const struct sockaddr* sockaddr, socklen_t addrlen, char* host, socklen_t hostlen, char* serv\n\tsocklen_t servlen, int flags);\n\n```\n![](https://ftp.bmp.ovh/imgs/2019/08/bc7196e9a30d5152.png)\n\n测试\n使用\n```shell\ntelnet ip port #来连接服务器的此端口\nnetstat -nt | grep port #来查看此端口的监听\n```\n\n## 第六章高级IO函数\n\nLinux提供的高级IO函数, 自然是特定条件下能力更强, 不然要他干啥, 特定条件自然限制了他的使用频率\n*文件描述符*\n文件描述符在是一个非负整数。是一个索引值,指向内核为每一个进程所维护的该进程打开文件的记录表。\nSTDOUT_FILENO(值为1)- 值为1的文件描述符为标准输出, 关闭STDOUT_FILENO后用dup即可返回最小可用值(目前为, 1) 这样输出就重定向到了调用dup的参数指向的文件\n\n### 创建文件描述符 - pipe dup dup2 splice select\n**pipe函数**\n这个函数可用于创建一个管道, 实现进程间的通信. \n\n```c\n// 函数定义\n// 参数文件描述符数组 fd[0] 读出 fd[1]写入 单向管道\n// 成功返回0, 并将一对打开的文件描述符填入其参数指向的数组\n// 失败返回-1 errno\n#include <unistd.h>\nint pipe(int fd[2]);\n```\n```c\n// 双向管道\n// 第一个参数为 协议PF_UNIX(书上是AF_UNIX)感觉这里指明协议使用PF更好一些\n#include <sys/types.h>\n#include <sys/socket.h>\nint socketpair(int domain, int type, int protocol, int fd[2]);\n```\n学习了后面的内容了解到了进程间通信, 回来补上一个例子\n```c\nint main()\n{\n    int fds[2];\n    socketpair(PF_UNIX, SOCK_STREAM, 0, fds);\n    int pid = fork();\n    if (pid == 0)\n    {\n        close(fds[0]);\n        char a[] = \"123\";\n        send(fds[1], a, strlen(a), 0);\n    }\n    else if (pid > 0)\n    {\n        close(fds[1]);\n        char b[20] {};\n        recv(fds[0], b, 20, 0);\n        printf(\"%s\", b);\n    }\n}\n```\n**dup和dup2函数**\n复制一个现有的文件描述符\n```c\n#include <unistd.h>\n// 返回的文件描述符总是取系统当前可用的最小整数值\nint dup(int oldfd);\n// 可以用newfd来制定新的文件描述符, 如果newfd已经被打开则先关闭\n// 如果newfd==oldfd 则不关闭newfd直接返回\nint dup2(int oldfd, int newfd);\n```\ndup函数创建一个新的文件描述符, 新的文件描述符和原有的file_descriptor共同指向相同的目标.\n回来补上例子, 这个例子由于关掉了`STDOUT_FILENO`dup最小的即为`STDOUT_FILENO`所以\n标准输出都到了这个文件之中\n```c\nint main()\n{\n    int filefd = open(\"/home/lsmg/1.txt\", O_WRONLY);\n    close(STDOUT_FILENO);\n    dup(filefd);\n    printf(\"123\\n\");\n    exit(0);\n}\n```\n\n### 读写数据 - readv writev mmap munmap\n**readv/writev**\n```c\n#include <sys/uio.h>\n// count 为 vector的长度, 即为有多少块内存\n// 成功时返回写入\\读取的长度 失败返回-1\nssize_t readv(int fd, const struct iovec* vector, int count);\nssize_t writev(int fd, const struct iovec* vector, int count);\n\nstruct iovec {\n\tvoid* iov_base /* 内存起始地址*/\n\tsize_t iov_len /* 这块内存长度*/\n}\n```\n回来补上一个使用例子, 这个例子将一个int的内存表示写入到了文件之中\n使用hexdump查看这个文件`0000000 86a0 0001`可以看到`186a0`即为100000\n```c\n// 2020年1月7日16:52:11\nint main()\n{\n    int file = open(\"/home/lsmg/1.txt\", O_WRONLY);\n    int temp = 100000;\n    iovec temp_iovec{};\n    temp_iovec.iov_base = &temp;\n    temp_iovec.iov_len = sizeof(temp);\n    writev(file, &temp_iovec, 1);\n}\n```\nsendfile函数\n```c\n#include <sys/sendfile.h>\n// offset为指定输入流从哪里开始读, 如果为NULL 则从开头读取\nssize_t sendfile(int out_fd, int in_fd, off_t* offset, size_t count);\n\nO_RDONLY只读模式\nO_WRONLY只写模式\nO_RDWR读写模式\nint open(file_name, flag);\n```\nstat结构体, 可用fstat生成, **简直就是文件的身份证**\n```c\n#include <sys/stat.h>\nstruct stat\n{\n    dev_t       st_dev;     /* ID of device containing file -文件所在设备的ID*/\n    ino_t       st_ino;     /* inode number -inode节点号*/\n    mode_t      st_mode;    /* protection -保护模式?*/\n    nlink_t     st_nlink;   /* number of hard links -链向此文件的连接数(硬连接)*/\n    uid_t       st_uid;     /* user ID of owner -user id*/\n    gid_t       st_gid;     /* group ID of owner - group id*/\n    dev_t       st_rdev;    /* device ID (if special file) -设备号，针对设备文件*/\n    off_t       st_size;    /* total size, in bytes -文件大小，字节为单位*/\n    blksize_t   st_blksize; /* blocksize for filesystem I/O -系统块的大小*/\n    blkcnt_t    st_blocks;  /* number of blocks allocated -文件所占块数*/\n    time_t      st_atime;   /* time of last access -最近存取时间*/\n    time_t      st_mtime;   /* time of last modification -最近修改时间*/\n    time_t      st_ctime;   /* time of last status change - */\n};\n```\n**身份证**生成函数\n```c\n// 第一个参数需要调用open生成文件描述符\n// 下面其他两个为文件全路径\nint fstat(int filedes, struct stat *buf);\n\n// 当路径指向为符号链接的时候, lstat为符号链接的信息. stat为符号链接指向文件信息\nint stat(const char *path, struct stat *buf);\nint lstat(const char *path, struct stat *buf);\n\n/*\n* ln -s source dist  建立软连接, 类似快捷方式, 也叫符号链接\n* ln source dist  建立硬链接, 同一个文件使用多个不同的别名, 指向同一个文件数据块, 只要硬链接不被完全\n* 删除就可以正常访问\n* 文件数据块 - 文件的真正数据是一个文件数据块, 打开的`文件`指向这个数据块, 就是说\n* `文件`本身就类似快捷方式, 指向文件存在的区域.\n*/\n```\n **mmap和munmap函数**\n\n`mmap`创建一块进程通讯共享的内存(可以将文件映射入其中), `munmap`释放这块内存\n```c\n#include <sys/mman.h>\n\n// start 内存起始位置, 如果为NULL则系统分配一个地址 length为长度\n// port参数 PROT_READ(可读) PROT_WRITE(可写) PROT_EXEC(可执行), PROT_NONE(不可访问)\n// flag参数 内存被修改后的行为\n// - MAP_SHARED 进程间共享内存, 对内存的修改反映到映射文件中\n// - MAP_PRIVATE 为调用进程私有, 对该内存段的修改不会反映到文件中\n// - MAP_ANONUMOUS 不是从文件映射而来, 内容被初始化为0, 最后两个参数被忽略\n// 成功返回区域指针, 失败返回 -1\nvoid* mmap(void* start, size_t length, int port, int flags, int fd, off_t offset);\n// 成功返回0 失败返回-1\nint munmap(void* start, size_t length);\n```\n**splice函数**\n用于在两个文件名描述符之间移动数据, 0拷贝操作\n```c\n#include <fcntl.h>\n// fd_in 为文件描述符, 如果为管道文件描述符则 off_in必须为NULL, 否则为读取开始偏移位置\n// len为指定移动的数据长度, flags参数控制数据如何移动.\n// - SPLICE_F_NONBLOCK 非阻塞splice操作, 但会受文件描述符自身的阻塞\n// - SPLICE_F_MORE 给内核一个提示, 后续的splice调用将读取更多的数据???????\nssize_t splice(int fd_in, loff_t* off_in, int fd_out, loff_t* off_out, size_t len, unsigned int flags);\n\n// 使用splice函数  实现echo服务器\nint main(int argc, char* argv[])\n{\n    if (argc <= 2)\n    {\n        printf(\"the parmerters is wrong\\n\");\n        exit(errno);\n    }\n    char *ip = argv[1];\n\n    int port = atoi(argv[2]);\n    printf(\"the port is %d the ip is %s\\n\", port, ip);\n\n    int sockfd = socket(PF_INET, SOCK_STREAM, 0);\n    assert(sockfd >= 0);\n\n    struct sockaddr_in address{};\n    address.sin_family = AF_INET;\n    address.sin_port = htons(port);\n    inet_pton(AF_INET, ip, &address.sin_addr);\n\n    int ret = bind(sockfd, (sockaddr*)&address, sizeof(address));\n    assert(ret != -1);\n\n    ret = listen(sockfd, 5);\n\n    int clientfd{};\n    sockaddr_in client_address{};\n    socklen_t client_addrlen = sizeof(client_address);\n\n    clientfd = accept(sockfd, (sockaddr*)&client_address, &client_addrlen);\n    if (clientfd < 0)\n    {\n        printf(\"accept error\\n\");\n    }\n    else\n    {\n        printf(\"a new connection from %s:%d success\\n\", inet_ntoa(client_address.sin_addr), ntohs(client_address.sin_port));\n        int fds[2];\n        pipe(fds);\n        ret = splice(clientfd, nullptr, fds[1], nullptr, 32768, SPLICE_F_MORE);\n        assert(ret != -1);\n\n        ret = splice(fds[0], nullptr, clientfd, nullptr, 32768, SPLICE_F_MORE);\n        assert(ret != -1);\n\n        close(clientfd);\n    }\n    close(sockfd);\n    exit(0);\n}\n```\n\n**select 函数**\nselect函数在第二个参数列表 可读的时候返回\n或者是等到了规定的时间返回\n\n返回之后 第二个参数指向fdset的集合 被修改为可读的fd列表\n这就需要每次返回后都更新 fdset集合\n\n返回后 此函数的返回值为可读的fd数量, 遍历fdset集合 同时使用FD_ISSET判断fdset[i] 是否在其中\n然后判断此fd是否为listenfd 如果是则接受新的连接 如果不是说明是已经接受的其他fd 判断是有数据可读\n还是此连接断开\n\n```c\n#include <fcntl.h> \n// maxfdp 最大数 FD_SETSIZE\n// struct fd_set 一个集合,可以存储多个文件描述符\n// - FD_ZERO(&fd_set) 清空 -FD_SET(fd, &fd_set) 放入fd FD_CLR(fd, &fd_set)从其中清除fd\n// - FD_ISSET(fd, &fd_set) 判断是否在其中\n// readfds  需要监视的文件描述符读变化, 其中的文件描述符可读的时候返回\n// writefds 需要监视的文件描述符写变化, 其中的文件描述符可写的时候返回\n// errorfds 错误\n// timeout 传入NULL为阻塞, 设置为0秒0微秒则变为非阻塞函数\n// 返回值 负值为错误 等待超时说明文件无变化返回0 有变化返回正值\nint select(int maxfdp,fd_set *readfds,fd_set *writefds,fd_set *errorfds,struct timeval*timeout); \n\n#define exit_if(r, ...) \\\n{   \\\n    if (r)  \\\n    {   \\\n        printf(__VA_ARGS__);    \\\n        printf(\"errno no: %d, error msg is %s\", errno, strerror(errno));    \\\n        exit(1);    \\\n    }   \\\n}   \\\n\nint main(int argc, char* argv[])\n{\n    int keyboard_fd = open(\"/dev/tty\", O_RDONLY | O_NONBLOCK);\n    exit_if(keyboard_fd < 0, \"open keyboard fd error\\n\");\n    fd_set readfd;\n    char recv_buffer = 0;\n\n    while (true)\n    {\n        FD_ZERO(&readfd);\n        FD_SET(0, &readfd);\n\n        timeval timeout {5, 0};\n\n        int ret = select(keyboard_fd + 1, &readfd, nullptr, nullptr, &timeout);\n        exit_if(ret == -1, \"select error\\n\");\n        if (ret > 0)\n        {\n            if (FD_ISSET(keyboard_fd, &readfd))\n            {\n                recv_buffer = 0;\n                read(keyboard_fd, &recv_buffer, 1);\n                if ('\\n' == recv_buffer)\n                {\n                    continue;\n                }\n                if ('q' == recv_buffer)\n                {\n                    break;\n                }\n                printf(\"the input is %c\\n\", recv_buffer);\n            }\n\n        }\n        if (ret == 0)\n        {\n            printf(\"timeout\\n\");\n        }\n    }\n}\n```\n## 第七章Linux服务器程序规范\n\n- Linux程序服务器 一般以后台进程形式运行.  后台进程又称为守护进程(daemon). 他没有控制终端, 因而不会意外的接收到用户输入. 守护进程的父进程通常都是init进程(PID为1的进程)\n- Linux服务器程序有一套日志系统, 他至少能输出日志到文件. 日志这东西太重要了,排错对比全靠它.\n- Linux服务器程序一般以某个专门的非root身份运行. 比如mysqld有自己的账户mysql.\n- Linux服务器程序一般都有自己的配置文件, 而不是把所有配置都写死在代码里面, 方便后续的更改.\n- Linux服务器程序通常在启动的时候生成一个PID文件并存入/var/run 目录中, 以记录改后台进程的PID.\n- Linux服务器程序通常需要考虑系统资源和限制, 预测自己的承受能力\n\n### 日志\n\n```shell\nsudo service rsyslog restart // 启动守护进程\n```\n```c\n#include <syslog.h>\n// priority参数是所谓的设施值(记录日志信息来源, 默认为LOG_USER)与日志级别的按位或\n// - 0 LOG_EMERG  /* 系统不可用*/\n// - 1 LOG_ALERT   /* 报警需要立即采取行动*/\n// - 2 LOG_CRIT /* 非常严重的情况*/\n// - 3 LOG_ERR  /* 错误*/\n// - 4 LOG_WARNING /* 警告*/\n// - 5 LOG_NOTICE /* 通知*/\n// - 6 LOG_INFO /* 信息*/\n//  -7 LOG_DEBUG /* 调试*/\nvoid syslog(int priority, const char* message, .....);\n\n// ident 位于日志的时间后 通常为名字\n// logopt 对后续 syslog调用的行为进行配置\n// -  0x01 LOG_PID  /* 在日志信息中包含程序PID*/\n// -  0x02 LOG_CONS /* 如果信息不能记录到日志文件, 则打印到终端*/\n// -  0x04 LOG_ODELAY /* 延迟打开日志功能直到第一次调用syslog*/\n// -  0x08 LOG_NDELAY /* 不延迟打开日志功能*/\n// facility参数可以修改syslog函数中的默认设施值\nvoid openlog(const char* ident, int logopt, int facility);\n\n// maskpri 一共八位 0000-0000\n// 如果将最后一个0置为1 表示 记录0级别的日志\n// 如果将最后两个0都置为1 表示记录0和1级别的日志\n// 可以通过LOG_MASK() 宏设定 比如LOG_MASK(LOG_CRIT) 表示将倒数第三个0置为1, 表示只记录LOG_CRIT\n// 如果直接设置setlogmask(3); 3的二进制最后两个数均为1 则记录 0和1级别的日志\nint setlogmask(int maskpri);\n\n// 关闭日志功能\nvoid closelog();\n```\n\n### 用户信息, 切换用户\nUID - 真实用户ID\nEUID - 有效用户ID - 方便资源访问\nGID - 真实组ID\nEGID - 有效组ID\n```c\n#include <sys/types.h>\n#include <unistd.h>\n\nuid_t getuid();\nuid_t geteuid();\ngid_t getgid();\ngid_t getegid();\nint setuid(uid_t uid);\nint seteuid(uid_t euid);\nint setgid(gid_t gid);\nint setegid(gid_t gid);\n```\n\n可以通过 `setuid`和`setgid`切换用户 **root用户uid和gid均为0**\n\n### 进程间关系\nPGID - 进程组ID(Linux下每个进程隶属于一个进程组)\n\n#include <unistd.h>\npid_t getpgid(pid_t pid); 成功时返回pid所属的pgid 失败返回-1\nint setpgid(pid_t pid, pid_t pgid);\n\n**会话**\n一些有关联的进程组将形成一个会话\n略过\n\n**查看进程关系**\nps和less\n\n**资源限制**\n略\n**改变目录**\n略\n\n## 第八章高性能服务器程序框架\n\n**服务器模型-CS模型**\n\n**优点**\n- 实现起来简单\n**缺点**\n- 服务器是通信的中心, 访问过大的时候会导致响应过慢\n\n模式图\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E5%9B%BE8-2%20TCP%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png)\n\n编写的demo 没有用到fork函数. 后续待完善\n\n**服务器框架 IO模型**\n\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E6%9C%AC%E6%A1%86%E6%9E%B6.png)\n\n这个模型大概能够理解, 自己也算是学了半年的Javaweb.\n\nsocket在创建的时候默认是阻塞的, 不过可以通过传`SOCK_NONBLOCK`参解决\n非阻塞调用都会立即返回 但可能事件没有发生(recv没有接收到信息), 没有发生和出错都会`返回-1` 所以需要通过`errno`来区分这些错误.\n**事件未发生**\naccept, send,recv errno被设置为 `EAGAIN(再来一次)`或`EWOULDBLOCK(期望阻塞)`\nconnect 被设置为 `EINPROGRESS(正在处理中)`\n\n需要在事件已经发生的情况下 去调用非阻塞IO, 才能提高性能\n\n常用IO复用函数 `select` `poll` `epoll_wait` 将在第九章后面说明\n信号将在第十章说明\n\n**两种高效的事件处理模式和并发模式**\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/Reactor%E6%A8%A1%E5%BC%8F.png)\n\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/Proactor%E6%A8%A1%E5%BC%8F.png)\n\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E7%94%A8%E5%90%8C%E6%AD%A5IO%E6%A8%A1%E6%8B%9F%E5%87%BA%E7%9A%84Proactor%E6%A8%A1%E5%BC%8F.png)\n\n程序分为计算密集型(CPU使用很多, IO资源使用很少)和IO密集型(反过来).\n前者使用并发编程反而会降低效率, 后者则会提升效率\n并发编程有多进程和多线程两种方式\n\n并发模式 - IO单元和多个逻辑单元之间协调完成任务的方法.\n服务器主要有两种并发模式\n- 半同步/半异步模式\n- 领导者/追随者模式\n\n**半同步/半异步模式**\n在IO模型中, 异步和同步的区分是内核向应用程序通知的是何种IO事件(就绪事件还是完成事件), 以及由谁来完成IO读写(应用程序还是内核)\n\n而在这里(并发模式) \n同步指的是完全按照代码序列的顺序执行 - 按照同步方式运行的线程称为同步线程\n异步需要系统事件(中断, 信号)来驱动 - 按照异步方式运行的线程称为异步线程\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5%E5%92%8C%E5%90%8C%E6%AD%A5.png)\n\n服务器(需要较好的实时性且能同时处理多个客户请求) - 一般使用同步线程和异步线程来实现,即为半同步/半异步模式\n同步线程 - 处理客户逻辑, 处理请求队列中的对象\n异步线程 - 处理IO事件, 接收到客户请求后将其封装成请求对象并插入请求队列\n\n半同步/半异步模式 存在变体 `半同步/半反应堆模式`\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E5%8D%8A%E5%90%8C%E6%AD%A5%E5%8D%8A%E5%8F%8D%E5%BA%94%E5%A0%86%E6%A8%A1%E5%BC%8F.png)\n\n异步线程 - 主线程 - 负责监听所有socket上的事件\n\n**领导者/追随者模式**\n略\n\n**高效编程方法 - 有限状态机**\n```c\n// 状态独立的有限状态机\nSTATE_MACHINE(Package _pack) {\n\t\n\tPackageType _type = _pack.GetType();\n\tswitch(_type) {\n\t\tcase type_A:\n\t\t\txxxx;\n\t\t\tbreak;\n\t\tcase type_B:\n\t\t\txxxx;\n\t\t\tbreak;\n\t}\n}\n\n// 带状态转移的有限状态机\nSTATE_MACHINE() {\n\tState cur_State = type_A;\n\twhile(cur_State != type_C) {\n\t\n\t\tPackage _pack = getNewPackage();\n\t\tswitch(cur_State) {\n\t\t\t\n\t\t\tcase type_A:\n\t\t\t\tprocess_package_state_A(_pack);\n\t\t\t\tcur_State = type_B;\n\t\t\t\tbreak;\n\t\t\tcase type_B:\n\t\t\t\txxxx;\n\t\t\t\tcur_State = type_C;\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n```\n\n花了小一个小时 终于一个字母一个字母的抄完了那个5000多字的代码\n@2019年9月8日22:08:46@\n\n### 提高服务器性能的其他建议 池 数据复制 上下文切换和锁\n\n**池** - 用空间换取时间\n进程池和线程池\n\n**数据复制** - 高性能的服务器应该尽量避免不必要的复制\n\n**上下文切换和锁**\n减少`锁`的作用区域. 不应该创建太多的工作进程, 而是使用专门的业务逻辑线程.\n\n","slug":"100CPP-读书记录-高性能服务器编程读书记录初级部分","published":1,"updated":"2020-03-04T07:49:06.121Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucy20000souoer7ifula","content":"<p>开头选了这本书, 看到这本书是他人总结三大本后自己写的, 先求个理解大概.<br>话说别人推荐的c++服务器咋都是c语言…..<br>2019年8月17日20:37:53</p>\n<p>每学习一部分就写一个demo</p>\n<a id=\"more\"></a>\n\n<p>分了三篇</p>\n<h1 id=\"第一篇TCP-IP协议详解\"><a href=\"#第一篇TCP-IP协议详解\" class=\"headerlink\" title=\"第一篇TCP/IP协议详解\"></a>第一篇TCP/IP协议详解</h1><h2 id=\"第一章-TCP-IP协议族\"><a href=\"#第一章-TCP-IP协议族\" class=\"headerlink\" title=\"第一章 TCP/IP协议族\"></a>第一章 TCP/IP协议族</h2><h3 id=\"TCP-IP协议族体系结构和主要协议\"><a href=\"#TCP-IP协议族体系结构和主要协议\" class=\"headerlink\" title=\"TCP/IP协议族体系结构和主要协议\"></a>TCP/IP协议族体系结构和主要协议</h3><p>协议族中协议众多, 这本书只选取了IP和TCP协议 - 对网络编程影响最直接</p>\n<p>见得最多就是这四层结构了, 不过这本书写得更加详细一些<br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E5%9B%9B%E5%B1%82%E7%BB%93%E6%9E%84.jpg\" alt=\"\"></p>\n<p>同样七层是osi参考模型, 简化后得到四层<br><img src=\"https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=3a1768f4c6fc1e17e9b284632bf99d66/0dd7912397dda144d48ab350bbb7d0a20df48655.jpg\" alt=\"\"><br>不同层次之间, 通过接口互相交流, 这样方便了各层次的修改</p>\n<p><strong>应用层</strong><br>负责处理应用程序的逻辑</p>\n<p><strong>表示层</strong><br>定义了数据的格式及加密</p>\n<p><strong>会话层</strong><br>它定义了如何开始、控制和结束一个会话，包括对多个双向消息的控制和管理，以便在只完成连续消息的一部分时可以通知应用，从而使表示层看到的数据是连续的</p>\n<p><strong>传输层</strong><br>为两台主机的应用提供端到端(end to end)的通信. 与网络层使用的下一跳不同, 他只关心起始和终止, 中转过程交给下层处理.<br>此层存在两大协议TCP协议和UDP协议<br><em>TCP协议</em><br>TCP协议(Transmission Control Protocol 传输控制协议) - 为应用层提供<code>可靠的, 面向连接, 基于流的服</code><br>通过<code>超时重传</code>和<code>数据确认</code>等确保数据正常送达.<br>TCP需要存储一些必要的状态, 可靠的协议<br><em>UDP协议</em><br>UPD协议(User Datagram Protocol 用户数据报协议) - 为应用层提供<code>不可靠的, 无连接的, 基于数据报的服务</code><br>一般需要自己处理<code>数据确认</code>和<code>超时重传</code>的问题<br>通信两者不存储状态, 每次发送都需要指定地址信息. <code>有自己的长度</code></p>\n<p><strong>网络层</strong><br>实现了数据包的选路和转发.  只有数据包到不了目标地址, 就<code>下一跳</code>(hop by hop), 选择最近的.<br><em>IP协议(Internet Protocol)</em> 以及 <em>ICMP协议(Internet Control Message Protocol)</em><br>后者协议是IP协议的补充, 用来检测网络连接 1. 差错报文, 用来回应状态 2. 查询报文(ping程序就是使用的此报文来判断信息是否送达)</p>\n<p><strong>数据链路层</strong><br>实现了网卡接口的网络驱动程序. 这里驱动程序方便了厂商的下层修改, 只需要向上层提供规定的接口即可.<br>存在两个协议 <em>ARP协议(Address Resolve Protocol, 地址解析协议)</em>. 还有<em>RARP(Reverse ~, 逆地址解析协议)</em>.  由于网络层使用IP地址寻址机器, 但是数据链路层使用物理地址(通常为MAC地址), 之间的转化涉及到ARP协议<strong>ARP欺骗, 可能与这个有关, 目前不去学习</strong></p>\n<p><strong>封装</strong><br>上层协议发送到下层协议. 通过封装实现, 层与层之间传输的时候, 加上自己的头部信息.<br>被TCP封装的数据成为 <code>TCP报文段</code></p>\n<ul>\n<li>内核部分发送成功后删除数据</li>\n</ul>\n<p>被UDP封装的数据成为 <code>UDP数据报</code></p>\n<ul>\n<li>发送后即删除</li>\n</ul>\n<p>再经IP封装后成为<code>IP数据报</code><br>最后经过数据链路层封装后为 <code>帧</code></p>\n<p>下面的操作都将在如下环境进行<br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C.png\" alt=\"\"></p>\n<p><strong>ARP</strong><br>ARP协议能实现任意网络层地址到任意物理地址的转换</p>\n<h2 id=\"第二章-IP协议详解\"><a href=\"#第二章-IP协议详解\" class=\"headerlink\" title=\"第二章 IP协议详解\"></a>第二章 IP协议详解</h2><p>IP协议是TCP/IP协议簇的核心协议, 是socket网络编程的基础之一<br>IP协议为上层协议提供无状态, 无连接, 不可靠的服务</p>\n<h1 id=\"第二篇深入解析高性能服务器编程\"><a href=\"#第二篇深入解析高性能服务器编程\" class=\"headerlink\" title=\"第二篇深入解析高性能服务器编程\"></a>第二篇深入解析高性能服务器编程</h1><h2 id=\"第五章Linux网络编程基础API\"><a href=\"#第五章Linux网络编程基础API\" class=\"headerlink\" title=\"第五章Linux网络编程基础API\"></a>第五章Linux网络编程基础API</h2><p>socket基础api位于 <code>sys/socket.h</code> 头文件中<br>socket最开始的含义是 一个IP地址和端口对. 唯一的表示了TCP通信的一段<br>网络信息api <code>netdb.h</code>头文件中</p>\n<h3 id=\"主机字节序和网络字节序\"><a href=\"#主机字节序和网络字节序\" class=\"headerlink\" title=\"主机字节序和网络字节序\"></a>主机字节序和网络字节序</h3><p>字节序分为 <code>大端字节序</code>和<code>小端字节序</code><br>由于大多数PC采用小端字节序(高位存在高地址处), 所以小端字节序又称为主机字节序</p>\n<p>为了防止不同机器字节序不同导致的错乱问题. 规定传输的时候统一为 大端字节序(网络字节序).<br>这样主机会根据自己的情况决定 - 是否转换接收到的数据的字节序</p>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p><strong>基础连接</strong><br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E5%9C%B0%E5%9D%80%E7%BB%93%E6%9E%84%E4%BD%93.jpg\" alt=\"\"><br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E5%8D%8F%E8%AE%AE%E7%BB%84%E5%90%88%E5%9C%B0%E5%9D%80%E6%97%8F.jpg\" alt=\"\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主机序和网络字节序转换</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netinet/in.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">int</span> <span class=\"title\">htonl</span> <span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">int</span> hostlong)</span></span>; <span class=\"comment\">// host to network long</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> short <span class=\"keyword\">int</span> <span class=\"title\">htons</span> <span class=\"params\">(<span class=\"keyword\">unsigned</span> short <span class=\"keyword\">int</span> hostlong)</span></span>; <span class=\"comment\">// host to network short</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">int</span> <span class=\"title\">htonl</span> <span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">int</span> netlong)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> short <span class=\"keyword\">int</span> <span class=\"title\">htons</span> <span class=\"params\">(<span class=\"keyword\">unsigned</span> short <span class=\"keyword\">int</span> netlong)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// IP地址转换函数</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 将点分十进制字符串的IPv4地址, 转换为网络字节序整数表示的IPv4地址. 失败返回INADDR_NONE</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">in_addr_t</span>  <span class=\"title\">inet_addr</span><span class=\"params\">( <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* strptr)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 功能相同不过转换结果存在 inp指向的结构体中. 成功返回1 反之返回0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">inet_aton</span><span class=\"params\">( <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* cp, struct in_addr* inp)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数返回一个静态变量地址值, 所以多次调用会导致覆盖</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">inet_ntoa</span><span class=\"params\">(struct in_addr in)</span></span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// src为 点分十进制字符串的IPv4地址 或 十六进制字符串表示的IPv6地址 存入dst的内存中 af指定地址族</span></span><br><span class=\"line\"><span class=\"comment\">// 可以为 AF_INET AF_INET6 成功返回1 失败返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">inet_pton</span><span class=\"params\">(<span class=\"keyword\">int</span> af, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * src, <span class=\"keyword\">void</span>* dst)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 协议名, 需要转换的ip, 存储地址, 长度(有两个常量 INET_ADDRSTRLEN, INET6_ADDRSTRLEN)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"title\">inet_ntop</span><span class=\"params\">(<span class=\"keyword\">int</span> af, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span>*  src, <span class=\"keyword\">char</span>* dst, <span class=\"keyword\">socklen_t</span> cnt)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建 命名 监听 socket</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// domain指定使用那个协议族 PF_INET PF_INET6</span></span><br><span class=\"line\"><span class=\"comment\">// type指定服务类型 SOCK_STREAM (TCP协议) SOCK_DGRAM(UDP协议)</span></span><br><span class=\"line\"><span class=\"comment\">// protocol设置为默认的0</span></span><br><span class=\"line\"><span class=\"comment\">// 成功返回socket文件描述符(linux一切皆文件), 失败返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">socket</span><span class=\"params\">(<span class=\"keyword\">int</span> domain, <span class=\"keyword\">int</span> type, <span class=\"keyword\">int</span> protocol)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// socket为socket文件描述符</span></span><br><span class=\"line\"><span class=\"comment\">// my_addr 为地址信息</span></span><br><span class=\"line\"><span class=\"comment\">// addrlen为socket地址长度</span></span><br><span class=\"line\"><span class=\"comment\">// 成功返回0 失败返回 -1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bind</span><span class=\"params\">(<span class=\"keyword\">int</span> socket, <span class=\"keyword\">const</span> struct sockaddr* my_addr, <span class=\"keyword\">socklen_t</span> addrlen)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// backlog表示队列最大的长度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">listen</span><span class=\"params\">(<span class=\"keyword\">int</span> socket, <span class=\"keyword\">int</span> backlog)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 接受连接 失败返回-1 成功时返回socket</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">accept</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, struct sockaddr* addr, <span class=\"keyword\">socklen_t</span>* addrlen)</span></span></span><br></pre></td></tr></table></figure>\n<p>客户端</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发起连接</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 第三个参数为 地址指定的长度</span></span><br><span class=\"line\"><span class=\"comment\">// 成功返回0 失败返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">connect</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">const</span> struct sockaddr * serv_addr, <span class=\"keyword\">socklen_t</span> addrlen)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 关闭连接</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 参数为保存的socket</span></span><br><span class=\"line\"><span class=\"comment\">// 并非立即关闭, 将socket的引用计数-1, 当fd的引用计数为0, 才能关闭(需要查阅)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">close</span><span class=\"params\">(<span class=\"keyword\">int</span> fd)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 立即关闭</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 第二个参数为可选值 </span></span><br><span class=\"line\"><span class=\"comment\">//\tSHUT_RD 关闭读, socket的接收缓冲区的数据全部丢弃</span></span><br><span class=\"line\"><span class=\"comment\">//\tSHUT_WR 关闭写 socket的发送缓冲区全部在关闭前发送出去</span></span><br><span class=\"line\"><span class=\"comment\">//\tSHUT_RDWR 同时关闭读和写</span></span><br><span class=\"line\"><span class=\"comment\">// 成功返回0 失败为-1 设置errno</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">shutdown</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">int</span> howto)</span></span></span><br></pre></td></tr></table></figure>\n<p><strong>基础TCP</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读取sockfd的数据</span></span><br><span class=\"line\"><span class=\"comment\">// buf 指定读缓冲区的位置</span></span><br><span class=\"line\"><span class=\"comment\">// len 指定读缓冲区的大小</span></span><br><span class=\"line\"><span class=\"comment\">// flags 参数较多</span></span><br><span class=\"line\"><span class=\"comment\">// 成功的时候返回读取到的长度, 可能小于预期长度, 需要多次读取.   读取到0 通信对方已经关闭连接, 错误返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ssize_t</span> <span class=\"title\">recv</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">void</span> *buf, <span class=\"keyword\">size_t</span> len, <span class=\"keyword\">int</span> flags)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 发送</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ssize_t</span> <span class=\"title\">send</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *buf, <span class=\"keyword\">size_t</span> len, <span class=\"keyword\">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>选项名</th>\n<th>含义</th>\n<th>可用于发送</th>\n<th>可用于接收</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MSG_CONFIRM</td>\n<td>指示链路层协议持续监听, 直到得到答复.(仅能用于SOCK_DGRAM和SOCK_RAW类型的socket)</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>MSG_DONTROUTE</td>\n<td>不查看路由表, 直接将数据发送给本地的局域网络的主机(代表发送者知道目标主机就在本地网络中)</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>MSG_DONTWAIT</td>\n<td>非阻塞</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>MSG_MORE</td>\n<td>告知内核有更多的数据要发送, 等到数据写入缓冲区完毕后,一并发送.减少短小的报文提高传输效率</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>MSG_WAITALL</td>\n<td>读操作一直等待到读取到指定字节后才会返回</td>\n<td>N</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>MSG_PEEK</td>\n<td>看一下内缓存数据, 并不会影响数据</td>\n<td>N</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>MSG_OOB</td>\n<td>发送或接收紧急数据</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>MSG_NOSIGNAL</td>\n<td>向读关闭的管道或者socket连接中写入数据不会触发SIGPIPE信号</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n</tbody></table>\n<p><strong>基础UDP</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 由于UDP不保存状态, 每次发送数据都需要 加入目标地址.</span></span><br><span class=\"line\"><span class=\"comment\">// 不过recvfrom和sendto 也可以用于 面向STREAM的连接, 这样可以省略发送和接收端的socket地址</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ssize_t</span> <span class=\"title\">recvfrom</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">void</span> *buf, <span class=\"keyword\">size_t</span> len, <span class=\"keyword\">int</span> flags, struct sockaddr* src_addr, <span class=\"keyword\">socklen_t</span>* addrlen)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ssize_t</span> <span class=\"title\">sendto</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span>* buf, <span class=\"keyword\">size_t</span> len, ing flags, <span class=\"keyword\">const</span> struct sockaddr* dest_addr, <span class=\"keyword\">socklen_t</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>通用读写函数</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#inclued <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ssize_t</span> <span class=\"title\">recvmsg</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, struct msghdr* msg, <span class=\"keyword\">int</span> flags)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ssize_t</span> <span class=\"title\">sendmsg</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, struct msghdr* msg, <span class=\"keyword\">int</span> flags)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">msghdr</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">/* socket address --- 指向socket地址结构变量, 对于TCP连接需要设置为NULL*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>* msg_name; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">socklen_t</span> msg_namelen;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/* 分散的内存块 --- 对于 recvmsg来说数据被读取后将存放在这里的块内存中, 内存的位置和长度由</span></span><br><span class=\"line\"><span class=\"comment\">     * msg_iov指向的数组指定, 称为分散读(scatter read)  ---对于sendmsg而言, msg_iovlen块的分散内存中</span></span><br><span class=\"line\"><span class=\"comment\">     * 的数据将一并发送称为集中写(gather write);</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">iovec</span>* <span class=\"title\">msg_iov</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> msg_iovlen; <span class=\"comment\">/* 分散内存块的数量*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>* msg_control; <span class=\"comment\">/* 指向辅助数据的起始位置*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">socklen_t</span> msg_controllen; <span class=\"comment\">/* 辅助数据的大小*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> msg_flags; <span class=\"comment\">/* 复制函数的flags参数, 并在调用过程中更新*/</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">iovec</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>* iov_base <span class=\"comment\">/* 内存起始地址*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> iov_len <span class=\"comment\">/* 这块内存长度*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>其他Api</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 用于判断 sockfd是否处于带外标记, 即下一个被读取到的数据是否是带外数据, </span></span><br><span class=\"line\"><span class=\"comment\">// 是的话返回1, 不是返回0</span></span><br><span class=\"line\"><span class=\"comment\">// 这样就可以选择带MSG_OOB标志的recv调用来接收带外数据. </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sockatmark</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getsockname 获取sockfd对应的本端socket地址, 存入address指定的内存中, 长度存入address_len中 成功返回0失败返回-1</span></span><br><span class=\"line\"><span class=\"comment\">// getpeername 获取远端的信息, 同上</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getsockname</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, struct sockaddr* address, <span class=\"keyword\">socklen_t</span>* address_len)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getpeername</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, struct sockaddr* address, <span class=\"keyword\">socklen_t</span>* address_len)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 以下函数头文件均相同*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sockfd 目标socket, level执行操作协议(IPv4, IPv6, TCP) option_name 参数指定了选项的名字. 后面值和长度</span></span><br><span class=\"line\"><span class=\"comment\">// 成功时返回0 失败返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getsockopt</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">int</span> level, <span class=\"keyword\">int</span> option_name, <span class=\"keyword\">void</span>* option_value, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\t\t\t\t<span class=\"keyword\">socklen_t</span> <span class=\"keyword\">restrict</span> option_len)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setsockopt</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">int</span> level, <span class=\"keyword\">int</span> option_name, <span class=\"keyword\">void</span>* option_value, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\t\t\t\t<span class=\"keyword\">socklen_t</span> <span class=\"keyword\">restrict</span> option_len)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>SO_REUSEADDR</th>\n<th>重用本地地址</th>\n<th>sock被设置此属性后, 即使sock在被bind()后处于TIME_WAIT状态, 此时与他绑定的socket地址依然能够立即重用来绑定新的sock</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SO_RCVBUF</td>\n<td>TCP接收缓冲区大小</td>\n<td>最小值为256字节. 设置完后系统会自动加倍你所设定的值. 多出来的一倍将用用作空闲缓冲区处理拥塞</td>\n</tr>\n<tr>\n<td>SO_SNDBUF</td>\n<td>TCP发送缓冲区大小</td>\n<td>最小值为2048字节</td>\n</tr>\n<tr>\n<td>SO_RCVLOWAT</td>\n<td>接收的低水位标记</td>\n<td>默认为1字节, 当TCP接收缓冲区中可读数据的总数大于其低水位标记时, IO复用系统调用将通知应用程序可以从对应的socket上读取数据</td>\n</tr>\n<tr>\n<td>SO_SNDLOWAT</td>\n<td>发送的高水位标记</td>\n<td>默认为1字节, 当TCP发送缓冲区中空闲空间大于低水位标记的时候可以写入数据</td>\n</tr>\n<tr>\n<td>SO_LINGER</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">linger</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> l_onoff <span class=\"comment\">/* 开启非0, 关闭为0*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> l_linger; <span class=\"comment\">/* 滞留时间*/</span></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t* 当onoff为0的时候此项不起作用, close调用默认行为关闭socket</span></span><br><span class=\"line\"><span class=\"comment\">\t* 当onoff不为0 且linger为0, close将立即返回, TCP将丢弃发送缓冲区的残留数据, 同时发送一个复位报文段</span></span><br><span class=\"line\"><span class=\"comment\">\t* 当onoff不为0 且linger大于0 . 当socket阻塞的时候close将会等待TCP模块发送完残留数据并得到确认后关 </span></span><br><span class=\"line\"><span class=\"comment\">\t* 闭, 如果是处于非阻塞则立即关闭</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/socket%E9%80%89%E9%A1%B9.jpg\" alt=\"\"><br><strong>网络信息API</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netdb.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 通过主机名查找ip</span></span><br><span class=\"line\"><span class=\"function\">struct hostent* <span class=\"title\">gethostbyname</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* name)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过ip获取主机完整信息 </span></span><br><span class=\"line\"><span class=\"comment\">// type为IP地址类型 AF_INET和AF_INET6</span></span><br><span class=\"line\"><span class=\"function\">struct hostent* <span class=\"title\">gethostbyaddr</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span>* addr, <span class=\"keyword\">size_t</span> len, <span class=\"keyword\">int</span> type)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hostent</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> *h_name;\t\t\t<span class=\"comment\">/* Official name of host.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> **h_aliases;\t\t<span class=\"comment\">/* Alias list.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> h_addrtype;\t\t<span class=\"comment\">/* Host address type.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> h_length;\t\t\t<span class=\"comment\">/* Length of address.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> **h_addr_list;\t\t<span class=\"comment\">/* List of addresses from name server.  */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc != <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"非法输入\\n\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* name = argv[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hostent</span> *<span class=\"title\">hostptr</span>&#123;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    hostptr = gethostbyname(name);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hostptr == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"输入存在错误 或无法获取\\n\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Official name of hostptr: %s\\n\"</span>, hostptr-&gt;h_name);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span> **pptr;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> inet_addr[INET_ADDRSTRLEN];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Alias list:\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (pptr = hostptr-&gt;h_aliases; *pptr != <span class=\"literal\">nullptr</span>; ++pptr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\t%s\\n\"</span>, *pptr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (hostptr-&gt;h_addrtype)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> AF_INET:</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"List of addresses from name server:\\n\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (pptr = hostptr-&gt;h_addr_list; *pptr != <span class=\"literal\">nullptr</span>; ++pptr)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\t%s\\n\"</span>,</span><br><span class=\"line\">                        inet_ntop(hostptr-&gt;h_addrtype, *pptr, inet_addr, <span class=\"keyword\">sizeof</span>(inet_addr)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"unknow address type\\n\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">./run baidu.com</span></span><br><span class=\"line\"><span class=\"comment\">Official name of hostptr: baidu.com</span></span><br><span class=\"line\"><span class=\"comment\">Alias list:</span></span><br><span class=\"line\"><span class=\"comment\">List of addresses from name server:</span></span><br><span class=\"line\"><span class=\"comment\">\t39.156.69.79</span></span><br><span class=\"line\"><span class=\"comment\">\t220.181.38.148</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>以下两个函数通过读取/etc/services文件 来获取服务信息 以下内容来自维基百科</p>\n<p>Service文件是现代操作系统在etc目录下的一个配置文件，记录网络服务名对应的端口号与协议 其用途如下</p>\n<ul>\n<li>通过TCP/IP的API函数（声明在netdb.h中）直接查到网络服务名与端口号、使用协议的对应关系。如getservbyname(“serve”,”tcp”)获取端口号;getservbyport（htons（port），“tcp”）获取端口和协议上的服务名</li>\n<li>如果用户在这个文件中维护所有使用的网络服务名字、端口、协议，那么可以一目了然的获悉哪些端口号用于哪个服务，哪些端口号是空闲的<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netdb.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 根据名称获取某个服务的完整信息</span></span><br><span class=\"line\"><span class=\"function\">struct servent <span class=\"title\">getservbyname</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* name, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* proto)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据端口号获取服务信息</span></span><br><span class=\"line\"><span class=\"function\">struct servent <span class=\"title\">getservbyport</span><span class=\"params\">(<span class=\"keyword\">int</span> port, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* proto)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">servent</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* s_name; <span class=\"comment\">/* 服务名称*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> ** s_aliases; <span class=\"comment\">/* 服务的别名列表*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> s_port; <span class=\"comment\">/* 端口号*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* s_proto; <span class=\"comment\">/* 服务类型, 通常为TCP或UDP*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netdb.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 内部使用的gethostbyname 和 getserverbyname</span></span><br><span class=\"line\"><span class=\"comment\">// hostname 用于接收主机名, 也可以用来接收字符串表示的IP地址(点分十进制, 十六进制字符串)</span></span><br><span class=\"line\"><span class=\"comment\">// service 用于接收服务名, 字符串表示的十进制端口号</span></span><br><span class=\"line\"><span class=\"comment\">// hints参数 对getaddrinfo的输出进行更准确的控制, 可以设置为NULL, 允许反馈各种有用的结果</span></span><br><span class=\"line\"><span class=\"comment\">// result 指向一个链表, 用于存储getaddrinfo的反馈结果</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getaddrinfo</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* hostname, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* service, <span class=\"keyword\">const</span> struct addrinfo* hints, struct addrinfo** result)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">struct addrinfo</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ai_flags;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ai_family;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ai_socktype; <span class=\"comment\">/* 服务类型, SOCK_STREAM或者SOCK_DGRAM*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ai_protocol;</span><br><span class=\"line\">\t<span class=\"keyword\">socklen_t</span> ai_addrlen;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* ai_canonname; <span class=\"comment\">/* 主机的别名*/</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr</span>* <span class=\"title\">ai_addr</span>;</span> <span class=\"comment\">/* 指向socket地址*/</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">addrinfo</span>* <span class=\"title\">ai_next</span>;</span> <span class=\"comment\">/* 指向下一个结构体*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 需要手动的释放堆内存</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">freeaddrinfo</span><span class=\"params\">(struct addrinfo* res)</span></span>;</span><br></pre></td></tr></table></figure>\n<img src=\"https://ftp.bmp.ovh/imgs/2019/08/7ebedb14d8eedeac.png\" alt=\"\"></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netdb.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// host 存储返回的主机名</span></span><br><span class=\"line\"><span class=\"comment\">// serv存储返回的服务名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getnameinfo</span><span class=\"params\">(<span class=\"keyword\">const</span> struct sockaddr* sockaddr, <span class=\"keyword\">socklen_t</span> addrlen, <span class=\"keyword\">char</span>* host, <span class=\"keyword\">socklen_t</span> hostlen, <span class=\"keyword\">char</span>* serv</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t<span class=\"keyword\">socklen_t</span> servlen, <span class=\"keyword\">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ftp.bmp.ovh/imgs/2019/08/bc7196e9a30d5152.png\" alt=\"\"></p>\n<p>测试<br>使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">telnet ip port #来连接服务器的此端口</span><br><span class=\"line\">netstat -nt | grep port #来查看此端口的监听</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第六章高级IO函数\"><a href=\"#第六章高级IO函数\" class=\"headerlink\" title=\"第六章高级IO函数\"></a>第六章高级IO函数</h2><p>Linux提供的高级IO函数, 自然是特定条件下能力更强, 不然要他干啥, 特定条件自然限制了他的使用频率<br><em>文件描述符</em><br>文件描述符在是一个非负整数。是一个索引值,指向内核为每一个进程所维护的该进程打开文件的记录表。<br>STDOUT_FILENO(值为1)- 值为1的文件描述符为标准输出, 关闭STDOUT_FILENO后用dup即可返回最小可用值(目前为, 1) 这样输出就重定向到了调用dup的参数指向的文件</p>\n<h3 id=\"创建文件描述符-pipe-dup-dup2-splice-select\"><a href=\"#创建文件描述符-pipe-dup-dup2-splice-select\" class=\"headerlink\" title=\"创建文件描述符 - pipe dup dup2 splice select\"></a>创建文件描述符 - pipe dup dup2 splice select</h3><p><strong>pipe函数</strong><br>这个函数可用于创建一个管道, 实现进程间的通信. </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数定义</span></span><br><span class=\"line\"><span class=\"comment\">// 参数文件描述符数组 fd[0] 读出 fd[1]写入 单向管道</span></span><br><span class=\"line\"><span class=\"comment\">// 成功返回0, 并将一对打开的文件描述符填入其参数指向的数组</span></span><br><span class=\"line\"><span class=\"comment\">// 失败返回-1 errno</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pipe</span><span class=\"params\">(<span class=\"keyword\">int</span> fd[<span class=\"number\">2</span>])</span></span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 双向管道</span></span><br><span class=\"line\"><span class=\"comment\">// 第一个参数为 协议PF_UNIX(书上是AF_UNIX)感觉这里指明协议使用PF更好一些</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">socketpair</span><span class=\"params\">(<span class=\"keyword\">int</span> domain, <span class=\"keyword\">int</span> type, <span class=\"keyword\">int</span> protocol, <span class=\"keyword\">int</span> fd[<span class=\"number\">2</span>])</span></span>;</span><br></pre></td></tr></table></figure>\n<p>学习了后面的内容了解到了进程间通信, 回来补上一个例子</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> fds[<span class=\"number\">2</span>];</span><br><span class=\"line\">    socketpair(PF_UNIX, SOCK_STREAM, <span class=\"number\">0</span>, fds);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pid = fork();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">close</span>(fds[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">char</span> a[] = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\">        send(fds[<span class=\"number\">1</span>], a, <span class=\"built_in\">strlen</span>(a), <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pid &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">close</span>(fds[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">char</span> b[<span class=\"number\">20</span>] &#123;&#125;;</span><br><span class=\"line\">        recv(fds[<span class=\"number\">0</span>], b, <span class=\"number\">20</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>, b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>dup和dup2函数</strong><br>复制一个现有的文件描述符</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 返回的文件描述符总是取系统当前可用的最小整数值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dup</span><span class=\"params\">(<span class=\"keyword\">int</span> oldfd)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 可以用newfd来制定新的文件描述符, 如果newfd已经被打开则先关闭</span></span><br><span class=\"line\"><span class=\"comment\">// 如果newfd==oldfd 则不关闭newfd直接返回</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dup2</span><span class=\"params\">(<span class=\"keyword\">int</span> oldfd, <span class=\"keyword\">int</span> newfd)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>dup函数创建一个新的文件描述符, 新的文件描述符和原有的file_descriptor共同指向相同的目标.<br>回来补上例子, 这个例子由于关掉了<code>STDOUT_FILENO</code>dup最小的即为<code>STDOUT_FILENO</code>所以<br>标准输出都到了这个文件之中</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> filefd = <span class=\"built_in\">open</span>(<span class=\"string\">\"/home/lsmg/1.txt\"</span>, O_WRONLY);</span><br><span class=\"line\">    <span class=\"built_in\">close</span>(STDOUT_FILENO);</span><br><span class=\"line\">    dup(filefd);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"123\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"读写数据-readv-writev-mmap-munmap\"><a href=\"#读写数据-readv-writev-mmap-munmap\" class=\"headerlink\" title=\"读写数据 - readv writev mmap munmap\"></a>读写数据 - readv writev mmap munmap</h3><p><strong>readv/writev</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/uio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// count 为 vector的长度, 即为有多少块内存</span></span><br><span class=\"line\"><span class=\"comment\">// 成功时返回写入\\读取的长度 失败返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ssize_t</span> <span class=\"title\">readv</span><span class=\"params\">(<span class=\"keyword\">int</span> fd, <span class=\"keyword\">const</span> struct iovec* <span class=\"built_in\">vector</span>, <span class=\"keyword\">int</span> count)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ssize_t</span> <span class=\"title\">writev</span><span class=\"params\">(<span class=\"keyword\">int</span> fd, <span class=\"keyword\">const</span> struct iovec* <span class=\"built_in\">vector</span>, <span class=\"keyword\">int</span> count)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">iovec</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>* iov_base <span class=\"comment\">/* 内存起始地址*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> iov_len <span class=\"comment\">/* 这块内存长度*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>回来补上一个使用例子, 这个例子将一个int的内存表示写入到了文件之中<br>使用hexdump查看这个文件<code>0000000 86a0 0001</code>可以看到<code>186a0</code>即为100000</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2020年1月7日16:52:11</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> file = <span class=\"built_in\">open</span>(<span class=\"string\">\"/home/lsmg/1.txt\"</span>, O_WRONLY);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = <span class=\"number\">100000</span>;</span><br><span class=\"line\">    iovec temp_iovec&#123;&#125;;</span><br><span class=\"line\">    temp_iovec.iov_base = &amp;temp;</span><br><span class=\"line\">    temp_iovec.iov_len = <span class=\"keyword\">sizeof</span>(temp);</span><br><span class=\"line\">    writev(file, &amp;temp_iovec, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>sendfile函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/sendfile.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// offset为指定输入流从哪里开始读, 如果为NULL 则从开头读取</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ssize_t</span> <span class=\"title\">sendfile</span><span class=\"params\">(<span class=\"keyword\">int</span> out_fd, <span class=\"keyword\">int</span> in_fd, <span class=\"keyword\">off_t</span>* offset, <span class=\"keyword\">size_t</span> count)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">O_RDONLY只读模式</span><br><span class=\"line\">O_WRONLY只写模式</span><br><span class=\"line\">O_RDWR读写模式</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">open</span><span class=\"params\">(file_name, flag)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>stat结构体, 可用fstat生成, <strong>简直就是文件的身份证</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stat</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">dev_t</span>       st_dev;     <span class=\"comment\">/* ID of device containing file -文件所在设备的ID*/</span></span><br><span class=\"line\">    <span class=\"keyword\">ino_t</span>       st_ino;     <span class=\"comment\">/* inode number -inode节点号*/</span></span><br><span class=\"line\">    <span class=\"keyword\">mode_t</span>      st_mode;    <span class=\"comment\">/* protection -保护模式?*/</span></span><br><span class=\"line\">    <span class=\"keyword\">nlink_t</span>     st_nlink;   <span class=\"comment\">/* number of hard links -链向此文件的连接数(硬连接)*/</span></span><br><span class=\"line\">    <span class=\"keyword\">uid_t</span>       st_uid;     <span class=\"comment\">/* user ID of owner -user id*/</span></span><br><span class=\"line\">    <span class=\"keyword\">gid_t</span>       st_gid;     <span class=\"comment\">/* group ID of owner - group id*/</span></span><br><span class=\"line\">    <span class=\"keyword\">dev_t</span>       st_rdev;    <span class=\"comment\">/* device ID (if special file) -设备号，针对设备文件*/</span></span><br><span class=\"line\">    <span class=\"keyword\">off_t</span>       st_size;    <span class=\"comment\">/* total size, in bytes -文件大小，字节为单位*/</span></span><br><span class=\"line\">    <span class=\"keyword\">blksize_t</span>   st_blksize; <span class=\"comment\">/* blocksize for filesystem I/O -系统块的大小*/</span></span><br><span class=\"line\">    <span class=\"keyword\">blkcnt_t</span>    st_blocks;  <span class=\"comment\">/* number of blocks allocated -文件所占块数*/</span></span><br><span class=\"line\">    <span class=\"keyword\">time_t</span>      st_atime;   <span class=\"comment\">/* time of last access -最近存取时间*/</span></span><br><span class=\"line\">    <span class=\"keyword\">time_t</span>      st_mtime;   <span class=\"comment\">/* time of last modification -最近修改时间*/</span></span><br><span class=\"line\">    <span class=\"keyword\">time_t</span>      st_ctime;   <span class=\"comment\">/* time of last status change - */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>身份证</strong>生成函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一个参数需要调用open生成文件描述符</span></span><br><span class=\"line\"><span class=\"comment\">// 下面其他两个为文件全路径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fstat</span><span class=\"params\">(<span class=\"keyword\">int</span> filedes, struct stat *buf)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当路径指向为符号链接的时候, lstat为符号链接的信息. stat为符号链接指向文件信息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">stat</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *path, struct stat *buf)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lstat</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *path, struct stat *buf)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* ln -s source dist  建立软连接, 类似快捷方式, 也叫符号链接</span></span><br><span class=\"line\"><span class=\"comment\">* ln source dist  建立硬链接, 同一个文件使用多个不同的别名, 指向同一个文件数据块, 只要硬链接不被完全</span></span><br><span class=\"line\"><span class=\"comment\">* 删除就可以正常访问</span></span><br><span class=\"line\"><span class=\"comment\">* 文件数据块 - 文件的真正数据是一个文件数据块, 打开的`文件`指向这个数据块, 就是说</span></span><br><span class=\"line\"><span class=\"comment\">* `文件`本身就类似快捷方式, 指向文件存在的区域.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p> <strong>mmap和munmap函数</strong></p>\n<p><code>mmap</code>创建一块进程通讯共享的内存(可以将文件映射入其中), <code>munmap</code>释放这块内存</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// start 内存起始位置, 如果为NULL则系统分配一个地址 length为长度</span></span><br><span class=\"line\"><span class=\"comment\">// port参数 PROT_READ(可读) PROT_WRITE(可写) PROT_EXEC(可执行), PROT_NONE(不可访问)</span></span><br><span class=\"line\"><span class=\"comment\">// flag参数 内存被修改后的行为</span></span><br><span class=\"line\"><span class=\"comment\">// - MAP_SHARED 进程间共享内存, 对内存的修改反映到映射文件中</span></span><br><span class=\"line\"><span class=\"comment\">// - MAP_PRIVATE 为调用进程私有, 对该内存段的修改不会反映到文件中</span></span><br><span class=\"line\"><span class=\"comment\">// - MAP_ANONUMOUS 不是从文件映射而来, 内容被初始化为0, 最后两个参数被忽略</span></span><br><span class=\"line\"><span class=\"comment\">// 成功返回区域指针, 失败返回 -1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">mmap</span><span class=\"params\">(<span class=\"keyword\">void</span>* start, <span class=\"keyword\">size_t</span> length, <span class=\"keyword\">int</span> port, <span class=\"keyword\">int</span> flags, <span class=\"keyword\">int</span> fd, <span class=\"keyword\">off_t</span> offset)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 成功返回0 失败返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">munmap</span><span class=\"params\">(<span class=\"keyword\">void</span>* start, <span class=\"keyword\">size_t</span> length)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>splice函数</strong><br>用于在两个文件名描述符之间移动数据, 0拷贝操作</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// fd_in 为文件描述符, 如果为管道文件描述符则 off_in必须为NULL, 否则为读取开始偏移位置</span></span><br><span class=\"line\"><span class=\"comment\">// len为指定移动的数据长度, flags参数控制数据如何移动.</span></span><br><span class=\"line\"><span class=\"comment\">// - SPLICE_F_NONBLOCK 非阻塞splice操作, 但会受文件描述符自身的阻塞</span></span><br><span class=\"line\"><span class=\"comment\">// - SPLICE_F_MORE 给内核一个提示, 后续的splice调用将读取更多的数据???????</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ssize_t</span> <span class=\"title\">splice</span><span class=\"params\">(<span class=\"keyword\">int</span> fd_in, <span class=\"keyword\">loff_t</span>* off_in, <span class=\"keyword\">int</span> fd_out, <span class=\"keyword\">loff_t</span>* off_out, <span class=\"keyword\">size_t</span> len, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> flags)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用splice函数  实现echo服务器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc &lt;= <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"the parmerters is wrong\\n\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(errno);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *ip = argv[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> port = atoi(argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"the port is %d the ip is %s\\n\"</span>, port, ip);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sockfd = socket(PF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">    assert(sockfd &gt;= <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">address</span>&#123;</span>&#125;;</span><br><span class=\"line\">    address.sin_family = AF_INET;</span><br><span class=\"line\">    address.sin_port = htons(port);</span><br><span class=\"line\">    inet_pton(AF_INET, ip, &amp;address.sin_addr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret = bind(sockfd, (sockaddr*)&amp;address, <span class=\"keyword\">sizeof</span>(address));</span><br><span class=\"line\">    assert(ret != <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    ret = <span class=\"built_in\">listen</span>(sockfd, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> clientfd&#123;&#125;;</span><br><span class=\"line\">    sockaddr_in client_address&#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">socklen_t</span> client_addrlen = <span class=\"keyword\">sizeof</span>(client_address);</span><br><span class=\"line\"></span><br><span class=\"line\">    clientfd = accept(sockfd, (sockaddr*)&amp;client_address, &amp;client_addrlen);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clientfd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"accept error\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"a new connection from %s:%d success\\n\"</span>, inet_ntoa(client_address.sin_addr), ntohs(client_address.sin_port));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> fds[<span class=\"number\">2</span>];</span><br><span class=\"line\">        pipe(fds);</span><br><span class=\"line\">        ret = splice(clientfd, <span class=\"literal\">nullptr</span>, fds[<span class=\"number\">1</span>], <span class=\"literal\">nullptr</span>, <span class=\"number\">32768</span>, SPLICE_F_MORE);</span><br><span class=\"line\">        assert(ret != <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        ret = splice(fds[<span class=\"number\">0</span>], <span class=\"literal\">nullptr</span>, clientfd, <span class=\"literal\">nullptr</span>, <span class=\"number\">32768</span>, SPLICE_F_MORE);</span><br><span class=\"line\">        assert(ret != <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">close</span>(clientfd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">close</span>(sockfd);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>select 函数</strong><br>select函数在第二个参数列表 可读的时候返回<br>或者是等到了规定的时间返回</p>\n<p>返回之后 第二个参数指向fdset的集合 被修改为可读的fd列表<br>这就需要每次返回后都更新 fdset集合</p>\n<p>返回后 此函数的返回值为可读的fd数量, 遍历fdset集合 同时使用FD_ISSET判断fdset[i] 是否在其中<br>然后判断此fd是否为listenfd 如果是则接受新的连接 如果不是说明是已经接受的其他fd 判断是有数据可读<br>还是此连接断开</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt; </span></span></span><br><span class=\"line\"><span class=\"comment\">// maxfdp 最大数 FD_SETSIZE</span></span><br><span class=\"line\"><span class=\"comment\">// struct fd_set 一个集合,可以存储多个文件描述符</span></span><br><span class=\"line\"><span class=\"comment\">// - FD_ZERO(&amp;fd_set) 清空 -FD_SET(fd, &amp;fd_set) 放入fd FD_CLR(fd, &amp;fd_set)从其中清除fd</span></span><br><span class=\"line\"><span class=\"comment\">// - FD_ISSET(fd, &amp;fd_set) 判断是否在其中</span></span><br><span class=\"line\"><span class=\"comment\">// readfds  需要监视的文件描述符读变化, 其中的文件描述符可读的时候返回</span></span><br><span class=\"line\"><span class=\"comment\">// writefds 需要监视的文件描述符写变化, 其中的文件描述符可写的时候返回</span></span><br><span class=\"line\"><span class=\"comment\">// errorfds 错误</span></span><br><span class=\"line\"><span class=\"comment\">// timeout 传入NULL为阻塞, 设置为0秒0微秒则变为非阻塞函数</span></span><br><span class=\"line\"><span class=\"comment\">// 返回值 负值为错误 等待超时说明文件无变化返回0 有变化返回正值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">select</span><span class=\"params\">(<span class=\"keyword\">int</span> maxfdp,fd_set *readfds,fd_set *writefds,fd_set *errorfds,struct timeval*timeout)</span></span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> exit_if(r, ...) \\</span></span><br><span class=\"line\">&#123;   \\</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r)  \\</span><br><span class=\"line\">    &#123;   \\</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(__VA_ARGS__);    \\</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"errno no: %d, error msg is %s\"</span>, errno, strerror(errno));    \\</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);    \\</span><br><span class=\"line\">    &#125;   \\</span><br><span class=\"line\">&#125;   \\</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> keyboard_fd = <span class=\"built_in\">open</span>(<span class=\"string\">\"/dev/tty\"</span>, O_RDONLY | O_NONBLOCK);</span><br><span class=\"line\">    exit_if(keyboard_fd &lt; <span class=\"number\">0</span>, <span class=\"string\">\"open keyboard fd error\\n\"</span>);</span><br><span class=\"line\">    fd_set readfd;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> recv_buffer = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        FD_ZERO(&amp;readfd);</span><br><span class=\"line\">        FD_SET(<span class=\"number\">0</span>, &amp;readfd);</span><br><span class=\"line\"></span><br><span class=\"line\">        timeval timeout &#123;<span class=\"number\">5</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = select(keyboard_fd + <span class=\"number\">1</span>, &amp;readfd, <span class=\"literal\">nullptr</span>, <span class=\"literal\">nullptr</span>, &amp;timeout);</span><br><span class=\"line\">        exit_if(ret == <span class=\"number\">-1</span>, <span class=\"string\">\"select error\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ret &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (FD_ISSET(keyboard_fd, &amp;readfd))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                recv_buffer = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"built_in\">read</span>(keyboard_fd, &amp;recv_buffer, <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">'\\n'</span> == recv_buffer)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">'q'</span> == recv_buffer)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"the input is %c\\n\"</span>, recv_buffer);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ret == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"timeout\\n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"第七章Linux服务器程序规范\"><a href=\"#第七章Linux服务器程序规范\" class=\"headerlink\" title=\"第七章Linux服务器程序规范\"></a>第七章Linux服务器程序规范</h2><ul>\n<li>Linux程序服务器 一般以后台进程形式运行.  后台进程又称为守护进程(daemon). 他没有控制终端, 因而不会意外的接收到用户输入. 守护进程的父进程通常都是init进程(PID为1的进程)</li>\n<li>Linux服务器程序有一套日志系统, 他至少能输出日志到文件. 日志这东西太重要了,排错对比全靠它.</li>\n<li>Linux服务器程序一般以某个专门的非root身份运行. 比如mysqld有自己的账户mysql.</li>\n<li>Linux服务器程序一般都有自己的配置文件, 而不是把所有配置都写死在代码里面, 方便后续的更改.</li>\n<li>Linux服务器程序通常在启动的时候生成一个PID文件并存入/var/run 目录中, 以记录改后台进程的PID.</li>\n<li>Linux服务器程序通常需要考虑系统资源和限制, 预测自己的承受能力</li>\n</ul>\n<h3 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service rsyslog restart // 启动守护进程</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;syslog.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// priority参数是所谓的设施值(记录日志信息来源, 默认为LOG_USER)与日志级别的按位或</span></span><br><span class=\"line\"><span class=\"comment\">// - 0 LOG_EMERG  /* 系统不可用*/</span></span><br><span class=\"line\"><span class=\"comment\">// - 1 LOG_ALERT   /* 报警需要立即采取行动*/</span></span><br><span class=\"line\"><span class=\"comment\">// - 2 LOG_CRIT /* 非常严重的情况*/</span></span><br><span class=\"line\"><span class=\"comment\">// - 3 LOG_ERR  /* 错误*/</span></span><br><span class=\"line\"><span class=\"comment\">// - 4 LOG_WARNING /* 警告*/</span></span><br><span class=\"line\"><span class=\"comment\">// - 5 LOG_NOTICE /* 通知*/</span></span><br><span class=\"line\"><span class=\"comment\">// - 6 LOG_INFO /* 信息*/</span></span><br><span class=\"line\"><span class=\"comment\">//  -7 LOG_DEBUG /* 调试*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">syslog</span><span class=\"params\">(<span class=\"keyword\">int</span> priority, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* message, .....)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ident 位于日志的时间后 通常为名字</span></span><br><span class=\"line\"><span class=\"comment\">// logopt 对后续 syslog调用的行为进行配置</span></span><br><span class=\"line\"><span class=\"comment\">// -  0x01 LOG_PID  /* 在日志信息中包含程序PID*/</span></span><br><span class=\"line\"><span class=\"comment\">// -  0x02 LOG_CONS /* 如果信息不能记录到日志文件, 则打印到终端*/</span></span><br><span class=\"line\"><span class=\"comment\">// -  0x04 LOG_ODELAY /* 延迟打开日志功能直到第一次调用syslog*/</span></span><br><span class=\"line\"><span class=\"comment\">// -  0x08 LOG_NDELAY /* 不延迟打开日志功能*/</span></span><br><span class=\"line\"><span class=\"comment\">// facility参数可以修改syslog函数中的默认设施值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">openlog</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* ident, <span class=\"keyword\">int</span> logopt, <span class=\"keyword\">int</span> facility)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// maskpri 一共八位 0000-0000</span></span><br><span class=\"line\"><span class=\"comment\">// 如果将最后一个0置为1 表示 记录0级别的日志</span></span><br><span class=\"line\"><span class=\"comment\">// 如果将最后两个0都置为1 表示记录0和1级别的日志</span></span><br><span class=\"line\"><span class=\"comment\">// 可以通过LOG_MASK() 宏设定 比如LOG_MASK(LOG_CRIT) 表示将倒数第三个0置为1, 表示只记录LOG_CRIT</span></span><br><span class=\"line\"><span class=\"comment\">// 如果直接设置setlogmask(3); 3的二进制最后两个数均为1 则记录 0和1级别的日志</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setlogmask</span><span class=\"params\">(<span class=\"keyword\">int</span> maskpri)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 关闭日志功能</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">closelog</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用户信息-切换用户\"><a href=\"#用户信息-切换用户\" class=\"headerlink\" title=\"用户信息, 切换用户\"></a>用户信息, 切换用户</h3><p>UID - 真实用户ID<br>EUID - 有效用户ID - 方便资源访问<br>GID - 真实组ID<br>EGID - 有效组ID</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">uid_t</span> <span class=\"title\">getuid</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">uid_t</span> <span class=\"title\">geteuid</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">gid_t</span> <span class=\"title\">getgid</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">gid_t</span> <span class=\"title\">getegid</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setuid</span><span class=\"params\">(<span class=\"keyword\">uid_t</span> uid)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">seteuid</span><span class=\"params\">(<span class=\"keyword\">uid_t</span> euid)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setgid</span><span class=\"params\">(<span class=\"keyword\">gid_t</span> gid)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setegid</span><span class=\"params\">(<span class=\"keyword\">gid_t</span> gid)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>可以通过 <code>setuid</code>和<code>setgid</code>切换用户 <strong>root用户uid和gid均为0</strong></p>\n<h3 id=\"进程间关系\"><a href=\"#进程间关系\" class=\"headerlink\" title=\"进程间关系\"></a>进程间关系</h3><p>PGID - 进程组ID(Linux下每个进程隶属于一个进程组)</p>\n<p>#include &lt;unistd.h&gt;<br>pid_t getpgid(pid_t pid); 成功时返回pid所属的pgid 失败返回-1<br>int setpgid(pid_t pid, pid_t pgid);</p>\n<p><strong>会话</strong><br>一些有关联的进程组将形成一个会话<br>略过</p>\n<p><strong>查看进程关系</strong><br>ps和less</p>\n<p><strong>资源限制</strong><br>略<br><strong>改变目录</strong><br>略</p>\n<h2 id=\"第八章高性能服务器程序框架\"><a href=\"#第八章高性能服务器程序框架\" class=\"headerlink\" title=\"第八章高性能服务器程序框架\"></a>第八章高性能服务器程序框架</h2><p><strong>服务器模型-CS模型</strong></p>\n<p><strong>优点</strong></p>\n<ul>\n<li>实现起来简单</li>\n</ul>\n<p><strong>缺点</strong></p>\n<ul>\n<li>服务器是通信的中心, 访问过大的时候会导致响应过慢</li>\n</ul>\n<p>模式图<br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E5%9B%BE8-2%20TCP%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png\" alt=\"\"></p>\n<p>编写的demo 没有用到fork函数. 后续待完善</p>\n<p><strong>服务器框架 IO模型</strong></p>\n<p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E6%9C%AC%E6%A1%86%E6%9E%B6.png\" alt=\"\"></p>\n<p>这个模型大概能够理解, 自己也算是学了半年的Javaweb.</p>\n<p>socket在创建的时候默认是阻塞的, 不过可以通过传<code>SOCK_NONBLOCK</code>参解决<br>非阻塞调用都会立即返回 但可能事件没有发生(recv没有接收到信息), 没有发生和出错都会<code>返回-1</code> 所以需要通过<code>errno</code>来区分这些错误.<br><strong>事件未发生</strong><br>accept, send,recv errno被设置为 <code>EAGAIN(再来一次)</code>或<code>EWOULDBLOCK(期望阻塞)</code><br>connect 被设置为 <code>EINPROGRESS(正在处理中)</code></p>\n<p>需要在事件已经发生的情况下 去调用非阻塞IO, 才能提高性能</p>\n<p>常用IO复用函数 <code>select</code> <code>poll</code> <code>epoll_wait</code> 将在第九章后面说明<br>信号将在第十章说明</p>\n<p><strong>两种高效的事件处理模式和并发模式</strong><br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/Reactor%E6%A8%A1%E5%BC%8F.png\" alt=\"\"></p>\n<p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/Proactor%E6%A8%A1%E5%BC%8F.png\" alt=\"\"></p>\n<p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E7%94%A8%E5%90%8C%E6%AD%A5IO%E6%A8%A1%E6%8B%9F%E5%87%BA%E7%9A%84Proactor%E6%A8%A1%E5%BC%8F.png\" alt=\"\"></p>\n<p>程序分为计算密集型(CPU使用很多, IO资源使用很少)和IO密集型(反过来).<br>前者使用并发编程反而会降低效率, 后者则会提升效率<br>并发编程有多进程和多线程两种方式</p>\n<p>并发模式 - IO单元和多个逻辑单元之间协调完成任务的方法.<br>服务器主要有两种并发模式</p>\n<ul>\n<li>半同步/半异步模式</li>\n<li>领导者/追随者模式</li>\n</ul>\n<p><strong>半同步/半异步模式</strong><br>在IO模型中, 异步和同步的区分是内核向应用程序通知的是何种IO事件(就绪事件还是完成事件), 以及由谁来完成IO读写(应用程序还是内核)</p>\n<p>而在这里(并发模式)<br>同步指的是完全按照代码序列的顺序执行 - 按照同步方式运行的线程称为同步线程<br>异步需要系统事件(中断, 信号)来驱动 - 按照异步方式运行的线程称为异步线程<br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5%E5%92%8C%E5%90%8C%E6%AD%A5.png\" alt=\"\"></p>\n<p>服务器(需要较好的实时性且能同时处理多个客户请求) - 一般使用同步线程和异步线程来实现,即为半同步/半异步模式<br>同步线程 - 处理客户逻辑, 处理请求队列中的对象<br>异步线程 - 处理IO事件, 接收到客户请求后将其封装成请求对象并插入请求队列</p>\n<p>半同步/半异步模式 存在变体 <code>半同步/半反应堆模式</code><br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E5%8D%8A%E5%90%8C%E6%AD%A5%E5%8D%8A%E5%8F%8D%E5%BA%94%E5%A0%86%E6%A8%A1%E5%BC%8F.png\" alt=\"\"></p>\n<p>异步线程 - 主线程 - 负责监听所有socket上的事件</p>\n<p><strong>领导者/追随者模式</strong><br>略</p>\n<p><strong>高效编程方法 - 有限状态机</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 状态独立的有限状态机</span></span><br><span class=\"line\">STATE_MACHINE(Package _pack) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tPackageType _type = _pack.GetType();</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span>(_type) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> type_A:</span><br><span class=\"line\">\t\t\txxxx;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> type_B:</span><br><span class=\"line\">\t\t\txxxx;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 带状态转移的有限状态机</span></span><br><span class=\"line\">STATE_MACHINE() &#123;</span><br><span class=\"line\">\tState cur_State = type_A;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(cur_State != type_C) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tPackage _pack = getNewPackage();</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span>(cur_State) &#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> type_A:</span><br><span class=\"line\">\t\t\t\tprocess_package_state_A(_pack);</span><br><span class=\"line\">\t\t\t\tcur_State = type_B;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> type_B:</span><br><span class=\"line\">\t\t\t\txxxx;</span><br><span class=\"line\">\t\t\t\tcur_State = type_C;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>花了小一个小时 终于一个字母一个字母的抄完了那个5000多字的代码<br>@2019年9月8日22:08:46@</p>\n<h3 id=\"提高服务器性能的其他建议-池-数据复制-上下文切换和锁\"><a href=\"#提高服务器性能的其他建议-池-数据复制-上下文切换和锁\" class=\"headerlink\" title=\"提高服务器性能的其他建议 池 数据复制 上下文切换和锁\"></a>提高服务器性能的其他建议 池 数据复制 上下文切换和锁</h3><p><strong>池</strong> - 用空间换取时间<br>进程池和线程池</p>\n<p><strong>数据复制</strong> - 高性能的服务器应该尽量避免不必要的复制</p>\n<p><strong>上下文切换和锁</strong><br>减少<code>锁</code>的作用区域. 不应该创建太多的工作进程, 而是使用专门的业务逻辑线程.</p>\n","site":{"data":{}},"excerpt":"<p>开头选了这本书, 看到这本书是他人总结三大本后自己写的, 先求个理解大概.<br>话说别人推荐的c++服务器咋都是c语言…..<br>2019年8月17日20:37:53</p>\n<p>每学习一部分就写一个demo</p>","more":"<p>分了三篇</p>\n<h1 id=\"第一篇TCP-IP协议详解\"><a href=\"#第一篇TCP-IP协议详解\" class=\"headerlink\" title=\"第一篇TCP/IP协议详解\"></a>第一篇TCP/IP协议详解</h1><h2 id=\"第一章-TCP-IP协议族\"><a href=\"#第一章-TCP-IP协议族\" class=\"headerlink\" title=\"第一章 TCP/IP协议族\"></a>第一章 TCP/IP协议族</h2><h3 id=\"TCP-IP协议族体系结构和主要协议\"><a href=\"#TCP-IP协议族体系结构和主要协议\" class=\"headerlink\" title=\"TCP/IP协议族体系结构和主要协议\"></a>TCP/IP协议族体系结构和主要协议</h3><p>协议族中协议众多, 这本书只选取了IP和TCP协议 - 对网络编程影响最直接</p>\n<p>见得最多就是这四层结构了, 不过这本书写得更加详细一些<br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E5%9B%9B%E5%B1%82%E7%BB%93%E6%9E%84.jpg\" alt=\"\"></p>\n<p>同样七层是osi参考模型, 简化后得到四层<br><img src=\"https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=3a1768f4c6fc1e17e9b284632bf99d66/0dd7912397dda144d48ab350bbb7d0a20df48655.jpg\" alt=\"\"><br>不同层次之间, 通过接口互相交流, 这样方便了各层次的修改</p>\n<p><strong>应用层</strong><br>负责处理应用程序的逻辑</p>\n<p><strong>表示层</strong><br>定义了数据的格式及加密</p>\n<p><strong>会话层</strong><br>它定义了如何开始、控制和结束一个会话，包括对多个双向消息的控制和管理，以便在只完成连续消息的一部分时可以通知应用，从而使表示层看到的数据是连续的</p>\n<p><strong>传输层</strong><br>为两台主机的应用提供端到端(end to end)的通信. 与网络层使用的下一跳不同, 他只关心起始和终止, 中转过程交给下层处理.<br>此层存在两大协议TCP协议和UDP协议<br><em>TCP协议</em><br>TCP协议(Transmission Control Protocol 传输控制协议) - 为应用层提供<code>可靠的, 面向连接, 基于流的服</code><br>通过<code>超时重传</code>和<code>数据确认</code>等确保数据正常送达.<br>TCP需要存储一些必要的状态, 可靠的协议<br><em>UDP协议</em><br>UPD协议(User Datagram Protocol 用户数据报协议) - 为应用层提供<code>不可靠的, 无连接的, 基于数据报的服务</code><br>一般需要自己处理<code>数据确认</code>和<code>超时重传</code>的问题<br>通信两者不存储状态, 每次发送都需要指定地址信息. <code>有自己的长度</code></p>\n<p><strong>网络层</strong><br>实现了数据包的选路和转发.  只有数据包到不了目标地址, 就<code>下一跳</code>(hop by hop), 选择最近的.<br><em>IP协议(Internet Protocol)</em> 以及 <em>ICMP协议(Internet Control Message Protocol)</em><br>后者协议是IP协议的补充, 用来检测网络连接 1. 差错报文, 用来回应状态 2. 查询报文(ping程序就是使用的此报文来判断信息是否送达)</p>\n<p><strong>数据链路层</strong><br>实现了网卡接口的网络驱动程序. 这里驱动程序方便了厂商的下层修改, 只需要向上层提供规定的接口即可.<br>存在两个协议 <em>ARP协议(Address Resolve Protocol, 地址解析协议)</em>. 还有<em>RARP(Reverse ~, 逆地址解析协议)</em>.  由于网络层使用IP地址寻址机器, 但是数据链路层使用物理地址(通常为MAC地址), 之间的转化涉及到ARP协议<strong>ARP欺骗, 可能与这个有关, 目前不去学习</strong></p>\n<p><strong>封装</strong><br>上层协议发送到下层协议. 通过封装实现, 层与层之间传输的时候, 加上自己的头部信息.<br>被TCP封装的数据成为 <code>TCP报文段</code></p>\n<ul>\n<li>内核部分发送成功后删除数据</li>\n</ul>\n<p>被UDP封装的数据成为 <code>UDP数据报</code></p>\n<ul>\n<li>发送后即删除</li>\n</ul>\n<p>再经IP封装后成为<code>IP数据报</code><br>最后经过数据链路层封装后为 <code>帧</code></p>\n<p>下面的操作都将在如下环境进行<br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C.png\" alt=\"\"></p>\n<p><strong>ARP</strong><br>ARP协议能实现任意网络层地址到任意物理地址的转换</p>\n<h2 id=\"第二章-IP协议详解\"><a href=\"#第二章-IP协议详解\" class=\"headerlink\" title=\"第二章 IP协议详解\"></a>第二章 IP协议详解</h2><p>IP协议是TCP/IP协议簇的核心协议, 是socket网络编程的基础之一<br>IP协议为上层协议提供无状态, 无连接, 不可靠的服务</p>\n<h1 id=\"第二篇深入解析高性能服务器编程\"><a href=\"#第二篇深入解析高性能服务器编程\" class=\"headerlink\" title=\"第二篇深入解析高性能服务器编程\"></a>第二篇深入解析高性能服务器编程</h1><h2 id=\"第五章Linux网络编程基础API\"><a href=\"#第五章Linux网络编程基础API\" class=\"headerlink\" title=\"第五章Linux网络编程基础API\"></a>第五章Linux网络编程基础API</h2><p>socket基础api位于 <code>sys/socket.h</code> 头文件中<br>socket最开始的含义是 一个IP地址和端口对. 唯一的表示了TCP通信的一段<br>网络信息api <code>netdb.h</code>头文件中</p>\n<h3 id=\"主机字节序和网络字节序\"><a href=\"#主机字节序和网络字节序\" class=\"headerlink\" title=\"主机字节序和网络字节序\"></a>主机字节序和网络字节序</h3><p>字节序分为 <code>大端字节序</code>和<code>小端字节序</code><br>由于大多数PC采用小端字节序(高位存在高地址处), 所以小端字节序又称为主机字节序</p>\n<p>为了防止不同机器字节序不同导致的错乱问题. 规定传输的时候统一为 大端字节序(网络字节序).<br>这样主机会根据自己的情况决定 - 是否转换接收到的数据的字节序</p>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p><strong>基础连接</strong><br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E5%9C%B0%E5%9D%80%E7%BB%93%E6%9E%84%E4%BD%93.jpg\" alt=\"\"><br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E5%8D%8F%E8%AE%AE%E7%BB%84%E5%90%88%E5%9C%B0%E5%9D%80%E6%97%8F.jpg\" alt=\"\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主机序和网络字节序转换</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netinet/in.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">int</span> <span class=\"title\">htonl</span> <span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">int</span> hostlong)</span></span>; <span class=\"comment\">// host to network long</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> short <span class=\"keyword\">int</span> <span class=\"title\">htons</span> <span class=\"params\">(<span class=\"keyword\">unsigned</span> short <span class=\"keyword\">int</span> hostlong)</span></span>; <span class=\"comment\">// host to network short</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">int</span> <span class=\"title\">htonl</span> <span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">int</span> netlong)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> short <span class=\"keyword\">int</span> <span class=\"title\">htons</span> <span class=\"params\">(<span class=\"keyword\">unsigned</span> short <span class=\"keyword\">int</span> netlong)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// IP地址转换函数</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 将点分十进制字符串的IPv4地址, 转换为网络字节序整数表示的IPv4地址. 失败返回INADDR_NONE</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">in_addr_t</span>  <span class=\"title\">inet_addr</span><span class=\"params\">( <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* strptr)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 功能相同不过转换结果存在 inp指向的结构体中. 成功返回1 反之返回0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">inet_aton</span><span class=\"params\">( <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* cp, struct in_addr* inp)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数返回一个静态变量地址值, 所以多次调用会导致覆盖</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">inet_ntoa</span><span class=\"params\">(struct in_addr in)</span></span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// src为 点分十进制字符串的IPv4地址 或 十六进制字符串表示的IPv6地址 存入dst的内存中 af指定地址族</span></span><br><span class=\"line\"><span class=\"comment\">// 可以为 AF_INET AF_INET6 成功返回1 失败返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">inet_pton</span><span class=\"params\">(<span class=\"keyword\">int</span> af, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * src, <span class=\"keyword\">void</span>* dst)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 协议名, 需要转换的ip, 存储地址, 长度(有两个常量 INET_ADDRSTRLEN, INET6_ADDRSTRLEN)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"title\">inet_ntop</span><span class=\"params\">(<span class=\"keyword\">int</span> af, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span>*  src, <span class=\"keyword\">char</span>* dst, <span class=\"keyword\">socklen_t</span> cnt)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建 命名 监听 socket</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// domain指定使用那个协议族 PF_INET PF_INET6</span></span><br><span class=\"line\"><span class=\"comment\">// type指定服务类型 SOCK_STREAM (TCP协议) SOCK_DGRAM(UDP协议)</span></span><br><span class=\"line\"><span class=\"comment\">// protocol设置为默认的0</span></span><br><span class=\"line\"><span class=\"comment\">// 成功返回socket文件描述符(linux一切皆文件), 失败返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">socket</span><span class=\"params\">(<span class=\"keyword\">int</span> domain, <span class=\"keyword\">int</span> type, <span class=\"keyword\">int</span> protocol)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// socket为socket文件描述符</span></span><br><span class=\"line\"><span class=\"comment\">// my_addr 为地址信息</span></span><br><span class=\"line\"><span class=\"comment\">// addrlen为socket地址长度</span></span><br><span class=\"line\"><span class=\"comment\">// 成功返回0 失败返回 -1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bind</span><span class=\"params\">(<span class=\"keyword\">int</span> socket, <span class=\"keyword\">const</span> struct sockaddr* my_addr, <span class=\"keyword\">socklen_t</span> addrlen)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// backlog表示队列最大的长度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">listen</span><span class=\"params\">(<span class=\"keyword\">int</span> socket, <span class=\"keyword\">int</span> backlog)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 接受连接 失败返回-1 成功时返回socket</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">accept</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, struct sockaddr* addr, <span class=\"keyword\">socklen_t</span>* addrlen)</span></span></span><br></pre></td></tr></table></figure>\n<p>客户端</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发起连接</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 第三个参数为 地址指定的长度</span></span><br><span class=\"line\"><span class=\"comment\">// 成功返回0 失败返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">connect</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">const</span> struct sockaddr * serv_addr, <span class=\"keyword\">socklen_t</span> addrlen)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 关闭连接</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 参数为保存的socket</span></span><br><span class=\"line\"><span class=\"comment\">// 并非立即关闭, 将socket的引用计数-1, 当fd的引用计数为0, 才能关闭(需要查阅)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">close</span><span class=\"params\">(<span class=\"keyword\">int</span> fd)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 立即关闭</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 第二个参数为可选值 </span></span><br><span class=\"line\"><span class=\"comment\">//\tSHUT_RD 关闭读, socket的接收缓冲区的数据全部丢弃</span></span><br><span class=\"line\"><span class=\"comment\">//\tSHUT_WR 关闭写 socket的发送缓冲区全部在关闭前发送出去</span></span><br><span class=\"line\"><span class=\"comment\">//\tSHUT_RDWR 同时关闭读和写</span></span><br><span class=\"line\"><span class=\"comment\">// 成功返回0 失败为-1 设置errno</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">shutdown</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">int</span> howto)</span></span></span><br></pre></td></tr></table></figure>\n<p><strong>基础TCP</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读取sockfd的数据</span></span><br><span class=\"line\"><span class=\"comment\">// buf 指定读缓冲区的位置</span></span><br><span class=\"line\"><span class=\"comment\">// len 指定读缓冲区的大小</span></span><br><span class=\"line\"><span class=\"comment\">// flags 参数较多</span></span><br><span class=\"line\"><span class=\"comment\">// 成功的时候返回读取到的长度, 可能小于预期长度, 需要多次读取.   读取到0 通信对方已经关闭连接, 错误返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ssize_t</span> <span class=\"title\">recv</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">void</span> *buf, <span class=\"keyword\">size_t</span> len, <span class=\"keyword\">int</span> flags)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 发送</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ssize_t</span> <span class=\"title\">send</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *buf, <span class=\"keyword\">size_t</span> len, <span class=\"keyword\">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>选项名</th>\n<th>含义</th>\n<th>可用于发送</th>\n<th>可用于接收</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MSG_CONFIRM</td>\n<td>指示链路层协议持续监听, 直到得到答复.(仅能用于SOCK_DGRAM和SOCK_RAW类型的socket)</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>MSG_DONTROUTE</td>\n<td>不查看路由表, 直接将数据发送给本地的局域网络的主机(代表发送者知道目标主机就在本地网络中)</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>MSG_DONTWAIT</td>\n<td>非阻塞</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>MSG_MORE</td>\n<td>告知内核有更多的数据要发送, 等到数据写入缓冲区完毕后,一并发送.减少短小的报文提高传输效率</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>MSG_WAITALL</td>\n<td>读操作一直等待到读取到指定字节后才会返回</td>\n<td>N</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>MSG_PEEK</td>\n<td>看一下内缓存数据, 并不会影响数据</td>\n<td>N</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>MSG_OOB</td>\n<td>发送或接收紧急数据</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>MSG_NOSIGNAL</td>\n<td>向读关闭的管道或者socket连接中写入数据不会触发SIGPIPE信号</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n</tbody></table>\n<p><strong>基础UDP</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 由于UDP不保存状态, 每次发送数据都需要 加入目标地址.</span></span><br><span class=\"line\"><span class=\"comment\">// 不过recvfrom和sendto 也可以用于 面向STREAM的连接, 这样可以省略发送和接收端的socket地址</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ssize_t</span> <span class=\"title\">recvfrom</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">void</span> *buf, <span class=\"keyword\">size_t</span> len, <span class=\"keyword\">int</span> flags, struct sockaddr* src_addr, <span class=\"keyword\">socklen_t</span>* addrlen)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ssize_t</span> <span class=\"title\">sendto</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span>* buf, <span class=\"keyword\">size_t</span> len, ing flags, <span class=\"keyword\">const</span> struct sockaddr* dest_addr, <span class=\"keyword\">socklen_t</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>通用读写函数</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#inclued <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ssize_t</span> <span class=\"title\">recvmsg</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, struct msghdr* msg, <span class=\"keyword\">int</span> flags)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ssize_t</span> <span class=\"title\">sendmsg</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, struct msghdr* msg, <span class=\"keyword\">int</span> flags)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">msghdr</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">/* socket address --- 指向socket地址结构变量, 对于TCP连接需要设置为NULL*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>* msg_name; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">socklen_t</span> msg_namelen;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/* 分散的内存块 --- 对于 recvmsg来说数据被读取后将存放在这里的块内存中, 内存的位置和长度由</span></span><br><span class=\"line\"><span class=\"comment\">     * msg_iov指向的数组指定, 称为分散读(scatter read)  ---对于sendmsg而言, msg_iovlen块的分散内存中</span></span><br><span class=\"line\"><span class=\"comment\">     * 的数据将一并发送称为集中写(gather write);</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">iovec</span>* <span class=\"title\">msg_iov</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> msg_iovlen; <span class=\"comment\">/* 分散内存块的数量*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>* msg_control; <span class=\"comment\">/* 指向辅助数据的起始位置*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">socklen_t</span> msg_controllen; <span class=\"comment\">/* 辅助数据的大小*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> msg_flags; <span class=\"comment\">/* 复制函数的flags参数, 并在调用过程中更新*/</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">iovec</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>* iov_base <span class=\"comment\">/* 内存起始地址*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> iov_len <span class=\"comment\">/* 这块内存长度*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>其他Api</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 用于判断 sockfd是否处于带外标记, 即下一个被读取到的数据是否是带外数据, </span></span><br><span class=\"line\"><span class=\"comment\">// 是的话返回1, 不是返回0</span></span><br><span class=\"line\"><span class=\"comment\">// 这样就可以选择带MSG_OOB标志的recv调用来接收带外数据. </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sockatmark</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getsockname 获取sockfd对应的本端socket地址, 存入address指定的内存中, 长度存入address_len中 成功返回0失败返回-1</span></span><br><span class=\"line\"><span class=\"comment\">// getpeername 获取远端的信息, 同上</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getsockname</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, struct sockaddr* address, <span class=\"keyword\">socklen_t</span>* address_len)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getpeername</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, struct sockaddr* address, <span class=\"keyword\">socklen_t</span>* address_len)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 以下函数头文件均相同*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sockfd 目标socket, level执行操作协议(IPv4, IPv6, TCP) option_name 参数指定了选项的名字. 后面值和长度</span></span><br><span class=\"line\"><span class=\"comment\">// 成功时返回0 失败返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getsockopt</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">int</span> level, <span class=\"keyword\">int</span> option_name, <span class=\"keyword\">void</span>* option_value, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\t\t\t\t<span class=\"keyword\">socklen_t</span> <span class=\"keyword\">restrict</span> option_len)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setsockopt</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">int</span> level, <span class=\"keyword\">int</span> option_name, <span class=\"keyword\">void</span>* option_value, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\t\t\t\t<span class=\"keyword\">socklen_t</span> <span class=\"keyword\">restrict</span> option_len)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>SO_REUSEADDR</th>\n<th>重用本地地址</th>\n<th>sock被设置此属性后, 即使sock在被bind()后处于TIME_WAIT状态, 此时与他绑定的socket地址依然能够立即重用来绑定新的sock</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SO_RCVBUF</td>\n<td>TCP接收缓冲区大小</td>\n<td>最小值为256字节. 设置完后系统会自动加倍你所设定的值. 多出来的一倍将用用作空闲缓冲区处理拥塞</td>\n</tr>\n<tr>\n<td>SO_SNDBUF</td>\n<td>TCP发送缓冲区大小</td>\n<td>最小值为2048字节</td>\n</tr>\n<tr>\n<td>SO_RCVLOWAT</td>\n<td>接收的低水位标记</td>\n<td>默认为1字节, 当TCP接收缓冲区中可读数据的总数大于其低水位标记时, IO复用系统调用将通知应用程序可以从对应的socket上读取数据</td>\n</tr>\n<tr>\n<td>SO_SNDLOWAT</td>\n<td>发送的高水位标记</td>\n<td>默认为1字节, 当TCP发送缓冲区中空闲空间大于低水位标记的时候可以写入数据</td>\n</tr>\n<tr>\n<td>SO_LINGER</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">linger</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> l_onoff <span class=\"comment\">/* 开启非0, 关闭为0*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> l_linger; <span class=\"comment\">/* 滞留时间*/</span></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t* 当onoff为0的时候此项不起作用, close调用默认行为关闭socket</span></span><br><span class=\"line\"><span class=\"comment\">\t* 当onoff不为0 且linger为0, close将立即返回, TCP将丢弃发送缓冲区的残留数据, 同时发送一个复位报文段</span></span><br><span class=\"line\"><span class=\"comment\">\t* 当onoff不为0 且linger大于0 . 当socket阻塞的时候close将会等待TCP模块发送完残留数据并得到确认后关 </span></span><br><span class=\"line\"><span class=\"comment\">\t* 闭, 如果是处于非阻塞则立即关闭</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/socket%E9%80%89%E9%A1%B9.jpg\" alt=\"\"><br><strong>网络信息API</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netdb.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 通过主机名查找ip</span></span><br><span class=\"line\"><span class=\"function\">struct hostent* <span class=\"title\">gethostbyname</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* name)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过ip获取主机完整信息 </span></span><br><span class=\"line\"><span class=\"comment\">// type为IP地址类型 AF_INET和AF_INET6</span></span><br><span class=\"line\"><span class=\"function\">struct hostent* <span class=\"title\">gethostbyaddr</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span>* addr, <span class=\"keyword\">size_t</span> len, <span class=\"keyword\">int</span> type)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hostent</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> *h_name;\t\t\t<span class=\"comment\">/* Official name of host.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> **h_aliases;\t\t<span class=\"comment\">/* Alias list.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> h_addrtype;\t\t<span class=\"comment\">/* Host address type.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> h_length;\t\t\t<span class=\"comment\">/* Length of address.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> **h_addr_list;\t\t<span class=\"comment\">/* List of addresses from name server.  */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc != <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"非法输入\\n\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* name = argv[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hostent</span> *<span class=\"title\">hostptr</span>&#123;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    hostptr = gethostbyname(name);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hostptr == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"输入存在错误 或无法获取\\n\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Official name of hostptr: %s\\n\"</span>, hostptr-&gt;h_name);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span> **pptr;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> inet_addr[INET_ADDRSTRLEN];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Alias list:\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (pptr = hostptr-&gt;h_aliases; *pptr != <span class=\"literal\">nullptr</span>; ++pptr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\t%s\\n\"</span>, *pptr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (hostptr-&gt;h_addrtype)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> AF_INET:</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"List of addresses from name server:\\n\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (pptr = hostptr-&gt;h_addr_list; *pptr != <span class=\"literal\">nullptr</span>; ++pptr)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\t%s\\n\"</span>,</span><br><span class=\"line\">                        inet_ntop(hostptr-&gt;h_addrtype, *pptr, inet_addr, <span class=\"keyword\">sizeof</span>(inet_addr)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"unknow address type\\n\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">./run baidu.com</span></span><br><span class=\"line\"><span class=\"comment\">Official name of hostptr: baidu.com</span></span><br><span class=\"line\"><span class=\"comment\">Alias list:</span></span><br><span class=\"line\"><span class=\"comment\">List of addresses from name server:</span></span><br><span class=\"line\"><span class=\"comment\">\t39.156.69.79</span></span><br><span class=\"line\"><span class=\"comment\">\t220.181.38.148</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>以下两个函数通过读取/etc/services文件 来获取服务信息 以下内容来自维基百科</p>\n<p>Service文件是现代操作系统在etc目录下的一个配置文件，记录网络服务名对应的端口号与协议 其用途如下</p>\n<ul>\n<li>通过TCP/IP的API函数（声明在netdb.h中）直接查到网络服务名与端口号、使用协议的对应关系。如getservbyname(“serve”,”tcp”)获取端口号;getservbyport（htons（port），“tcp”）获取端口和协议上的服务名</li>\n<li>如果用户在这个文件中维护所有使用的网络服务名字、端口、协议，那么可以一目了然的获悉哪些端口号用于哪个服务，哪些端口号是空闲的<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netdb.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 根据名称获取某个服务的完整信息</span></span><br><span class=\"line\"><span class=\"function\">struct servent <span class=\"title\">getservbyname</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* name, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* proto)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据端口号获取服务信息</span></span><br><span class=\"line\"><span class=\"function\">struct servent <span class=\"title\">getservbyport</span><span class=\"params\">(<span class=\"keyword\">int</span> port, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* proto)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">servent</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* s_name; <span class=\"comment\">/* 服务名称*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> ** s_aliases; <span class=\"comment\">/* 服务的别名列表*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> s_port; <span class=\"comment\">/* 端口号*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* s_proto; <span class=\"comment\">/* 服务类型, 通常为TCP或UDP*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netdb.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 内部使用的gethostbyname 和 getserverbyname</span></span><br><span class=\"line\"><span class=\"comment\">// hostname 用于接收主机名, 也可以用来接收字符串表示的IP地址(点分十进制, 十六进制字符串)</span></span><br><span class=\"line\"><span class=\"comment\">// service 用于接收服务名, 字符串表示的十进制端口号</span></span><br><span class=\"line\"><span class=\"comment\">// hints参数 对getaddrinfo的输出进行更准确的控制, 可以设置为NULL, 允许反馈各种有用的结果</span></span><br><span class=\"line\"><span class=\"comment\">// result 指向一个链表, 用于存储getaddrinfo的反馈结果</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getaddrinfo</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* hostname, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* service, <span class=\"keyword\">const</span> struct addrinfo* hints, struct addrinfo** result)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">struct addrinfo</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ai_flags;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ai_family;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ai_socktype; <span class=\"comment\">/* 服务类型, SOCK_STREAM或者SOCK_DGRAM*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ai_protocol;</span><br><span class=\"line\">\t<span class=\"keyword\">socklen_t</span> ai_addrlen;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* ai_canonname; <span class=\"comment\">/* 主机的别名*/</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr</span>* <span class=\"title\">ai_addr</span>;</span> <span class=\"comment\">/* 指向socket地址*/</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">addrinfo</span>* <span class=\"title\">ai_next</span>;</span> <span class=\"comment\">/* 指向下一个结构体*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 需要手动的释放堆内存</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">freeaddrinfo</span><span class=\"params\">(struct addrinfo* res)</span></span>;</span><br></pre></td></tr></table></figure>\n<img src=\"https://ftp.bmp.ovh/imgs/2019/08/7ebedb14d8eedeac.png\" alt=\"\"></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netdb.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// host 存储返回的主机名</span></span><br><span class=\"line\"><span class=\"comment\">// serv存储返回的服务名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getnameinfo</span><span class=\"params\">(<span class=\"keyword\">const</span> struct sockaddr* sockaddr, <span class=\"keyword\">socklen_t</span> addrlen, <span class=\"keyword\">char</span>* host, <span class=\"keyword\">socklen_t</span> hostlen, <span class=\"keyword\">char</span>* serv</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t<span class=\"keyword\">socklen_t</span> servlen, <span class=\"keyword\">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ftp.bmp.ovh/imgs/2019/08/bc7196e9a30d5152.png\" alt=\"\"></p>\n<p>测试<br>使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">telnet ip port #来连接服务器的此端口</span><br><span class=\"line\">netstat -nt | grep port #来查看此端口的监听</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第六章高级IO函数\"><a href=\"#第六章高级IO函数\" class=\"headerlink\" title=\"第六章高级IO函数\"></a>第六章高级IO函数</h2><p>Linux提供的高级IO函数, 自然是特定条件下能力更强, 不然要他干啥, 特定条件自然限制了他的使用频率<br><em>文件描述符</em><br>文件描述符在是一个非负整数。是一个索引值,指向内核为每一个进程所维护的该进程打开文件的记录表。<br>STDOUT_FILENO(值为1)- 值为1的文件描述符为标准输出, 关闭STDOUT_FILENO后用dup即可返回最小可用值(目前为, 1) 这样输出就重定向到了调用dup的参数指向的文件</p>\n<h3 id=\"创建文件描述符-pipe-dup-dup2-splice-select\"><a href=\"#创建文件描述符-pipe-dup-dup2-splice-select\" class=\"headerlink\" title=\"创建文件描述符 - pipe dup dup2 splice select\"></a>创建文件描述符 - pipe dup dup2 splice select</h3><p><strong>pipe函数</strong><br>这个函数可用于创建一个管道, 实现进程间的通信. </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数定义</span></span><br><span class=\"line\"><span class=\"comment\">// 参数文件描述符数组 fd[0] 读出 fd[1]写入 单向管道</span></span><br><span class=\"line\"><span class=\"comment\">// 成功返回0, 并将一对打开的文件描述符填入其参数指向的数组</span></span><br><span class=\"line\"><span class=\"comment\">// 失败返回-1 errno</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pipe</span><span class=\"params\">(<span class=\"keyword\">int</span> fd[<span class=\"number\">2</span>])</span></span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 双向管道</span></span><br><span class=\"line\"><span class=\"comment\">// 第一个参数为 协议PF_UNIX(书上是AF_UNIX)感觉这里指明协议使用PF更好一些</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">socketpair</span><span class=\"params\">(<span class=\"keyword\">int</span> domain, <span class=\"keyword\">int</span> type, <span class=\"keyword\">int</span> protocol, <span class=\"keyword\">int</span> fd[<span class=\"number\">2</span>])</span></span>;</span><br></pre></td></tr></table></figure>\n<p>学习了后面的内容了解到了进程间通信, 回来补上一个例子</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> fds[<span class=\"number\">2</span>];</span><br><span class=\"line\">    socketpair(PF_UNIX, SOCK_STREAM, <span class=\"number\">0</span>, fds);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pid = fork();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">close</span>(fds[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">char</span> a[] = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\">        send(fds[<span class=\"number\">1</span>], a, <span class=\"built_in\">strlen</span>(a), <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pid &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">close</span>(fds[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">char</span> b[<span class=\"number\">20</span>] &#123;&#125;;</span><br><span class=\"line\">        recv(fds[<span class=\"number\">0</span>], b, <span class=\"number\">20</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>, b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>dup和dup2函数</strong><br>复制一个现有的文件描述符</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 返回的文件描述符总是取系统当前可用的最小整数值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dup</span><span class=\"params\">(<span class=\"keyword\">int</span> oldfd)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 可以用newfd来制定新的文件描述符, 如果newfd已经被打开则先关闭</span></span><br><span class=\"line\"><span class=\"comment\">// 如果newfd==oldfd 则不关闭newfd直接返回</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dup2</span><span class=\"params\">(<span class=\"keyword\">int</span> oldfd, <span class=\"keyword\">int</span> newfd)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>dup函数创建一个新的文件描述符, 新的文件描述符和原有的file_descriptor共同指向相同的目标.<br>回来补上例子, 这个例子由于关掉了<code>STDOUT_FILENO</code>dup最小的即为<code>STDOUT_FILENO</code>所以<br>标准输出都到了这个文件之中</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> filefd = <span class=\"built_in\">open</span>(<span class=\"string\">\"/home/lsmg/1.txt\"</span>, O_WRONLY);</span><br><span class=\"line\">    <span class=\"built_in\">close</span>(STDOUT_FILENO);</span><br><span class=\"line\">    dup(filefd);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"123\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"读写数据-readv-writev-mmap-munmap\"><a href=\"#读写数据-readv-writev-mmap-munmap\" class=\"headerlink\" title=\"读写数据 - readv writev mmap munmap\"></a>读写数据 - readv writev mmap munmap</h3><p><strong>readv/writev</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/uio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// count 为 vector的长度, 即为有多少块内存</span></span><br><span class=\"line\"><span class=\"comment\">// 成功时返回写入\\读取的长度 失败返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ssize_t</span> <span class=\"title\">readv</span><span class=\"params\">(<span class=\"keyword\">int</span> fd, <span class=\"keyword\">const</span> struct iovec* <span class=\"built_in\">vector</span>, <span class=\"keyword\">int</span> count)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ssize_t</span> <span class=\"title\">writev</span><span class=\"params\">(<span class=\"keyword\">int</span> fd, <span class=\"keyword\">const</span> struct iovec* <span class=\"built_in\">vector</span>, <span class=\"keyword\">int</span> count)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">iovec</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>* iov_base <span class=\"comment\">/* 内存起始地址*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> iov_len <span class=\"comment\">/* 这块内存长度*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>回来补上一个使用例子, 这个例子将一个int的内存表示写入到了文件之中<br>使用hexdump查看这个文件<code>0000000 86a0 0001</code>可以看到<code>186a0</code>即为100000</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2020年1月7日16:52:11</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> file = <span class=\"built_in\">open</span>(<span class=\"string\">\"/home/lsmg/1.txt\"</span>, O_WRONLY);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = <span class=\"number\">100000</span>;</span><br><span class=\"line\">    iovec temp_iovec&#123;&#125;;</span><br><span class=\"line\">    temp_iovec.iov_base = &amp;temp;</span><br><span class=\"line\">    temp_iovec.iov_len = <span class=\"keyword\">sizeof</span>(temp);</span><br><span class=\"line\">    writev(file, &amp;temp_iovec, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>sendfile函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/sendfile.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// offset为指定输入流从哪里开始读, 如果为NULL 则从开头读取</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ssize_t</span> <span class=\"title\">sendfile</span><span class=\"params\">(<span class=\"keyword\">int</span> out_fd, <span class=\"keyword\">int</span> in_fd, <span class=\"keyword\">off_t</span>* offset, <span class=\"keyword\">size_t</span> count)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">O_RDONLY只读模式</span><br><span class=\"line\">O_WRONLY只写模式</span><br><span class=\"line\">O_RDWR读写模式</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">open</span><span class=\"params\">(file_name, flag)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>stat结构体, 可用fstat生成, <strong>简直就是文件的身份证</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stat</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">dev_t</span>       st_dev;     <span class=\"comment\">/* ID of device containing file -文件所在设备的ID*/</span></span><br><span class=\"line\">    <span class=\"keyword\">ino_t</span>       st_ino;     <span class=\"comment\">/* inode number -inode节点号*/</span></span><br><span class=\"line\">    <span class=\"keyword\">mode_t</span>      st_mode;    <span class=\"comment\">/* protection -保护模式?*/</span></span><br><span class=\"line\">    <span class=\"keyword\">nlink_t</span>     st_nlink;   <span class=\"comment\">/* number of hard links -链向此文件的连接数(硬连接)*/</span></span><br><span class=\"line\">    <span class=\"keyword\">uid_t</span>       st_uid;     <span class=\"comment\">/* user ID of owner -user id*/</span></span><br><span class=\"line\">    <span class=\"keyword\">gid_t</span>       st_gid;     <span class=\"comment\">/* group ID of owner - group id*/</span></span><br><span class=\"line\">    <span class=\"keyword\">dev_t</span>       st_rdev;    <span class=\"comment\">/* device ID (if special file) -设备号，针对设备文件*/</span></span><br><span class=\"line\">    <span class=\"keyword\">off_t</span>       st_size;    <span class=\"comment\">/* total size, in bytes -文件大小，字节为单位*/</span></span><br><span class=\"line\">    <span class=\"keyword\">blksize_t</span>   st_blksize; <span class=\"comment\">/* blocksize for filesystem I/O -系统块的大小*/</span></span><br><span class=\"line\">    <span class=\"keyword\">blkcnt_t</span>    st_blocks;  <span class=\"comment\">/* number of blocks allocated -文件所占块数*/</span></span><br><span class=\"line\">    <span class=\"keyword\">time_t</span>      st_atime;   <span class=\"comment\">/* time of last access -最近存取时间*/</span></span><br><span class=\"line\">    <span class=\"keyword\">time_t</span>      st_mtime;   <span class=\"comment\">/* time of last modification -最近修改时间*/</span></span><br><span class=\"line\">    <span class=\"keyword\">time_t</span>      st_ctime;   <span class=\"comment\">/* time of last status change - */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>身份证</strong>生成函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一个参数需要调用open生成文件描述符</span></span><br><span class=\"line\"><span class=\"comment\">// 下面其他两个为文件全路径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fstat</span><span class=\"params\">(<span class=\"keyword\">int</span> filedes, struct stat *buf)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当路径指向为符号链接的时候, lstat为符号链接的信息. stat为符号链接指向文件信息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">stat</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *path, struct stat *buf)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lstat</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *path, struct stat *buf)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* ln -s source dist  建立软连接, 类似快捷方式, 也叫符号链接</span></span><br><span class=\"line\"><span class=\"comment\">* ln source dist  建立硬链接, 同一个文件使用多个不同的别名, 指向同一个文件数据块, 只要硬链接不被完全</span></span><br><span class=\"line\"><span class=\"comment\">* 删除就可以正常访问</span></span><br><span class=\"line\"><span class=\"comment\">* 文件数据块 - 文件的真正数据是一个文件数据块, 打开的`文件`指向这个数据块, 就是说</span></span><br><span class=\"line\"><span class=\"comment\">* `文件`本身就类似快捷方式, 指向文件存在的区域.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p> <strong>mmap和munmap函数</strong></p>\n<p><code>mmap</code>创建一块进程通讯共享的内存(可以将文件映射入其中), <code>munmap</code>释放这块内存</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// start 内存起始位置, 如果为NULL则系统分配一个地址 length为长度</span></span><br><span class=\"line\"><span class=\"comment\">// port参数 PROT_READ(可读) PROT_WRITE(可写) PROT_EXEC(可执行), PROT_NONE(不可访问)</span></span><br><span class=\"line\"><span class=\"comment\">// flag参数 内存被修改后的行为</span></span><br><span class=\"line\"><span class=\"comment\">// - MAP_SHARED 进程间共享内存, 对内存的修改反映到映射文件中</span></span><br><span class=\"line\"><span class=\"comment\">// - MAP_PRIVATE 为调用进程私有, 对该内存段的修改不会反映到文件中</span></span><br><span class=\"line\"><span class=\"comment\">// - MAP_ANONUMOUS 不是从文件映射而来, 内容被初始化为0, 最后两个参数被忽略</span></span><br><span class=\"line\"><span class=\"comment\">// 成功返回区域指针, 失败返回 -1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">mmap</span><span class=\"params\">(<span class=\"keyword\">void</span>* start, <span class=\"keyword\">size_t</span> length, <span class=\"keyword\">int</span> port, <span class=\"keyword\">int</span> flags, <span class=\"keyword\">int</span> fd, <span class=\"keyword\">off_t</span> offset)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 成功返回0 失败返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">munmap</span><span class=\"params\">(<span class=\"keyword\">void</span>* start, <span class=\"keyword\">size_t</span> length)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>splice函数</strong><br>用于在两个文件名描述符之间移动数据, 0拷贝操作</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// fd_in 为文件描述符, 如果为管道文件描述符则 off_in必须为NULL, 否则为读取开始偏移位置</span></span><br><span class=\"line\"><span class=\"comment\">// len为指定移动的数据长度, flags参数控制数据如何移动.</span></span><br><span class=\"line\"><span class=\"comment\">// - SPLICE_F_NONBLOCK 非阻塞splice操作, 但会受文件描述符自身的阻塞</span></span><br><span class=\"line\"><span class=\"comment\">// - SPLICE_F_MORE 给内核一个提示, 后续的splice调用将读取更多的数据???????</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ssize_t</span> <span class=\"title\">splice</span><span class=\"params\">(<span class=\"keyword\">int</span> fd_in, <span class=\"keyword\">loff_t</span>* off_in, <span class=\"keyword\">int</span> fd_out, <span class=\"keyword\">loff_t</span>* off_out, <span class=\"keyword\">size_t</span> len, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> flags)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用splice函数  实现echo服务器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc &lt;= <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"the parmerters is wrong\\n\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(errno);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *ip = argv[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> port = atoi(argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"the port is %d the ip is %s\\n\"</span>, port, ip);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sockfd = socket(PF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">    assert(sockfd &gt;= <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">address</span>&#123;</span>&#125;;</span><br><span class=\"line\">    address.sin_family = AF_INET;</span><br><span class=\"line\">    address.sin_port = htons(port);</span><br><span class=\"line\">    inet_pton(AF_INET, ip, &amp;address.sin_addr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret = bind(sockfd, (sockaddr*)&amp;address, <span class=\"keyword\">sizeof</span>(address));</span><br><span class=\"line\">    assert(ret != <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    ret = <span class=\"built_in\">listen</span>(sockfd, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> clientfd&#123;&#125;;</span><br><span class=\"line\">    sockaddr_in client_address&#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">socklen_t</span> client_addrlen = <span class=\"keyword\">sizeof</span>(client_address);</span><br><span class=\"line\"></span><br><span class=\"line\">    clientfd = accept(sockfd, (sockaddr*)&amp;client_address, &amp;client_addrlen);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clientfd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"accept error\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"a new connection from %s:%d success\\n\"</span>, inet_ntoa(client_address.sin_addr), ntohs(client_address.sin_port));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> fds[<span class=\"number\">2</span>];</span><br><span class=\"line\">        pipe(fds);</span><br><span class=\"line\">        ret = splice(clientfd, <span class=\"literal\">nullptr</span>, fds[<span class=\"number\">1</span>], <span class=\"literal\">nullptr</span>, <span class=\"number\">32768</span>, SPLICE_F_MORE);</span><br><span class=\"line\">        assert(ret != <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        ret = splice(fds[<span class=\"number\">0</span>], <span class=\"literal\">nullptr</span>, clientfd, <span class=\"literal\">nullptr</span>, <span class=\"number\">32768</span>, SPLICE_F_MORE);</span><br><span class=\"line\">        assert(ret != <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">close</span>(clientfd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">close</span>(sockfd);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>select 函数</strong><br>select函数在第二个参数列表 可读的时候返回<br>或者是等到了规定的时间返回</p>\n<p>返回之后 第二个参数指向fdset的集合 被修改为可读的fd列表<br>这就需要每次返回后都更新 fdset集合</p>\n<p>返回后 此函数的返回值为可读的fd数量, 遍历fdset集合 同时使用FD_ISSET判断fdset[i] 是否在其中<br>然后判断此fd是否为listenfd 如果是则接受新的连接 如果不是说明是已经接受的其他fd 判断是有数据可读<br>还是此连接断开</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt; </span></span></span><br><span class=\"line\"><span class=\"comment\">// maxfdp 最大数 FD_SETSIZE</span></span><br><span class=\"line\"><span class=\"comment\">// struct fd_set 一个集合,可以存储多个文件描述符</span></span><br><span class=\"line\"><span class=\"comment\">// - FD_ZERO(&amp;fd_set) 清空 -FD_SET(fd, &amp;fd_set) 放入fd FD_CLR(fd, &amp;fd_set)从其中清除fd</span></span><br><span class=\"line\"><span class=\"comment\">// - FD_ISSET(fd, &amp;fd_set) 判断是否在其中</span></span><br><span class=\"line\"><span class=\"comment\">// readfds  需要监视的文件描述符读变化, 其中的文件描述符可读的时候返回</span></span><br><span class=\"line\"><span class=\"comment\">// writefds 需要监视的文件描述符写变化, 其中的文件描述符可写的时候返回</span></span><br><span class=\"line\"><span class=\"comment\">// errorfds 错误</span></span><br><span class=\"line\"><span class=\"comment\">// timeout 传入NULL为阻塞, 设置为0秒0微秒则变为非阻塞函数</span></span><br><span class=\"line\"><span class=\"comment\">// 返回值 负值为错误 等待超时说明文件无变化返回0 有变化返回正值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">select</span><span class=\"params\">(<span class=\"keyword\">int</span> maxfdp,fd_set *readfds,fd_set *writefds,fd_set *errorfds,struct timeval*timeout)</span></span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> exit_if(r, ...) \\</span></span><br><span class=\"line\">&#123;   \\</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r)  \\</span><br><span class=\"line\">    &#123;   \\</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(__VA_ARGS__);    \\</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"errno no: %d, error msg is %s\"</span>, errno, strerror(errno));    \\</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);    \\</span><br><span class=\"line\">    &#125;   \\</span><br><span class=\"line\">&#125;   \\</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> keyboard_fd = <span class=\"built_in\">open</span>(<span class=\"string\">\"/dev/tty\"</span>, O_RDONLY | O_NONBLOCK);</span><br><span class=\"line\">    exit_if(keyboard_fd &lt; <span class=\"number\">0</span>, <span class=\"string\">\"open keyboard fd error\\n\"</span>);</span><br><span class=\"line\">    fd_set readfd;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> recv_buffer = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        FD_ZERO(&amp;readfd);</span><br><span class=\"line\">        FD_SET(<span class=\"number\">0</span>, &amp;readfd);</span><br><span class=\"line\"></span><br><span class=\"line\">        timeval timeout &#123;<span class=\"number\">5</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = select(keyboard_fd + <span class=\"number\">1</span>, &amp;readfd, <span class=\"literal\">nullptr</span>, <span class=\"literal\">nullptr</span>, &amp;timeout);</span><br><span class=\"line\">        exit_if(ret == <span class=\"number\">-1</span>, <span class=\"string\">\"select error\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ret &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (FD_ISSET(keyboard_fd, &amp;readfd))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                recv_buffer = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"built_in\">read</span>(keyboard_fd, &amp;recv_buffer, <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">'\\n'</span> == recv_buffer)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">'q'</span> == recv_buffer)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"the input is %c\\n\"</span>, recv_buffer);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ret == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"timeout\\n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"第七章Linux服务器程序规范\"><a href=\"#第七章Linux服务器程序规范\" class=\"headerlink\" title=\"第七章Linux服务器程序规范\"></a>第七章Linux服务器程序规范</h2><ul>\n<li>Linux程序服务器 一般以后台进程形式运行.  后台进程又称为守护进程(daemon). 他没有控制终端, 因而不会意外的接收到用户输入. 守护进程的父进程通常都是init进程(PID为1的进程)</li>\n<li>Linux服务器程序有一套日志系统, 他至少能输出日志到文件. 日志这东西太重要了,排错对比全靠它.</li>\n<li>Linux服务器程序一般以某个专门的非root身份运行. 比如mysqld有自己的账户mysql.</li>\n<li>Linux服务器程序一般都有自己的配置文件, 而不是把所有配置都写死在代码里面, 方便后续的更改.</li>\n<li>Linux服务器程序通常在启动的时候生成一个PID文件并存入/var/run 目录中, 以记录改后台进程的PID.</li>\n<li>Linux服务器程序通常需要考虑系统资源和限制, 预测自己的承受能力</li>\n</ul>\n<h3 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service rsyslog restart // 启动守护进程</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;syslog.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// priority参数是所谓的设施值(记录日志信息来源, 默认为LOG_USER)与日志级别的按位或</span></span><br><span class=\"line\"><span class=\"comment\">// - 0 LOG_EMERG  /* 系统不可用*/</span></span><br><span class=\"line\"><span class=\"comment\">// - 1 LOG_ALERT   /* 报警需要立即采取行动*/</span></span><br><span class=\"line\"><span class=\"comment\">// - 2 LOG_CRIT /* 非常严重的情况*/</span></span><br><span class=\"line\"><span class=\"comment\">// - 3 LOG_ERR  /* 错误*/</span></span><br><span class=\"line\"><span class=\"comment\">// - 4 LOG_WARNING /* 警告*/</span></span><br><span class=\"line\"><span class=\"comment\">// - 5 LOG_NOTICE /* 通知*/</span></span><br><span class=\"line\"><span class=\"comment\">// - 6 LOG_INFO /* 信息*/</span></span><br><span class=\"line\"><span class=\"comment\">//  -7 LOG_DEBUG /* 调试*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">syslog</span><span class=\"params\">(<span class=\"keyword\">int</span> priority, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* message, .....)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ident 位于日志的时间后 通常为名字</span></span><br><span class=\"line\"><span class=\"comment\">// logopt 对后续 syslog调用的行为进行配置</span></span><br><span class=\"line\"><span class=\"comment\">// -  0x01 LOG_PID  /* 在日志信息中包含程序PID*/</span></span><br><span class=\"line\"><span class=\"comment\">// -  0x02 LOG_CONS /* 如果信息不能记录到日志文件, 则打印到终端*/</span></span><br><span class=\"line\"><span class=\"comment\">// -  0x04 LOG_ODELAY /* 延迟打开日志功能直到第一次调用syslog*/</span></span><br><span class=\"line\"><span class=\"comment\">// -  0x08 LOG_NDELAY /* 不延迟打开日志功能*/</span></span><br><span class=\"line\"><span class=\"comment\">// facility参数可以修改syslog函数中的默认设施值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">openlog</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* ident, <span class=\"keyword\">int</span> logopt, <span class=\"keyword\">int</span> facility)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// maskpri 一共八位 0000-0000</span></span><br><span class=\"line\"><span class=\"comment\">// 如果将最后一个0置为1 表示 记录0级别的日志</span></span><br><span class=\"line\"><span class=\"comment\">// 如果将最后两个0都置为1 表示记录0和1级别的日志</span></span><br><span class=\"line\"><span class=\"comment\">// 可以通过LOG_MASK() 宏设定 比如LOG_MASK(LOG_CRIT) 表示将倒数第三个0置为1, 表示只记录LOG_CRIT</span></span><br><span class=\"line\"><span class=\"comment\">// 如果直接设置setlogmask(3); 3的二进制最后两个数均为1 则记录 0和1级别的日志</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setlogmask</span><span class=\"params\">(<span class=\"keyword\">int</span> maskpri)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 关闭日志功能</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">closelog</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用户信息-切换用户\"><a href=\"#用户信息-切换用户\" class=\"headerlink\" title=\"用户信息, 切换用户\"></a>用户信息, 切换用户</h3><p>UID - 真实用户ID<br>EUID - 有效用户ID - 方便资源访问<br>GID - 真实组ID<br>EGID - 有效组ID</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">uid_t</span> <span class=\"title\">getuid</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">uid_t</span> <span class=\"title\">geteuid</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">gid_t</span> <span class=\"title\">getgid</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">gid_t</span> <span class=\"title\">getegid</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setuid</span><span class=\"params\">(<span class=\"keyword\">uid_t</span> uid)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">seteuid</span><span class=\"params\">(<span class=\"keyword\">uid_t</span> euid)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setgid</span><span class=\"params\">(<span class=\"keyword\">gid_t</span> gid)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setegid</span><span class=\"params\">(<span class=\"keyword\">gid_t</span> gid)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>可以通过 <code>setuid</code>和<code>setgid</code>切换用户 <strong>root用户uid和gid均为0</strong></p>\n<h3 id=\"进程间关系\"><a href=\"#进程间关系\" class=\"headerlink\" title=\"进程间关系\"></a>进程间关系</h3><p>PGID - 进程组ID(Linux下每个进程隶属于一个进程组)</p>\n<p>#include &lt;unistd.h&gt;<br>pid_t getpgid(pid_t pid); 成功时返回pid所属的pgid 失败返回-1<br>int setpgid(pid_t pid, pid_t pgid);</p>\n<p><strong>会话</strong><br>一些有关联的进程组将形成一个会话<br>略过</p>\n<p><strong>查看进程关系</strong><br>ps和less</p>\n<p><strong>资源限制</strong><br>略<br><strong>改变目录</strong><br>略</p>\n<h2 id=\"第八章高性能服务器程序框架\"><a href=\"#第八章高性能服务器程序框架\" class=\"headerlink\" title=\"第八章高性能服务器程序框架\"></a>第八章高性能服务器程序框架</h2><p><strong>服务器模型-CS模型</strong></p>\n<p><strong>优点</strong></p>\n<ul>\n<li>实现起来简单</li>\n</ul>\n<p><strong>缺点</strong></p>\n<ul>\n<li>服务器是通信的中心, 访问过大的时候会导致响应过慢</li>\n</ul>\n<p>模式图<br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E5%9B%BE8-2%20TCP%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png\" alt=\"\"></p>\n<p>编写的demo 没有用到fork函数. 后续待完善</p>\n<p><strong>服务器框架 IO模型</strong></p>\n<p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E6%9C%AC%E6%A1%86%E6%9E%B6.png\" alt=\"\"></p>\n<p>这个模型大概能够理解, 自己也算是学了半年的Javaweb.</p>\n<p>socket在创建的时候默认是阻塞的, 不过可以通过传<code>SOCK_NONBLOCK</code>参解决<br>非阻塞调用都会立即返回 但可能事件没有发生(recv没有接收到信息), 没有发生和出错都会<code>返回-1</code> 所以需要通过<code>errno</code>来区分这些错误.<br><strong>事件未发生</strong><br>accept, send,recv errno被设置为 <code>EAGAIN(再来一次)</code>或<code>EWOULDBLOCK(期望阻塞)</code><br>connect 被设置为 <code>EINPROGRESS(正在处理中)</code></p>\n<p>需要在事件已经发生的情况下 去调用非阻塞IO, 才能提高性能</p>\n<p>常用IO复用函数 <code>select</code> <code>poll</code> <code>epoll_wait</code> 将在第九章后面说明<br>信号将在第十章说明</p>\n<p><strong>两种高效的事件处理模式和并发模式</strong><br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/Reactor%E6%A8%A1%E5%BC%8F.png\" alt=\"\"></p>\n<p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/Proactor%E6%A8%A1%E5%BC%8F.png\" alt=\"\"></p>\n<p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E7%94%A8%E5%90%8C%E6%AD%A5IO%E6%A8%A1%E6%8B%9F%E5%87%BA%E7%9A%84Proactor%E6%A8%A1%E5%BC%8F.png\" alt=\"\"></p>\n<p>程序分为计算密集型(CPU使用很多, IO资源使用很少)和IO密集型(反过来).<br>前者使用并发编程反而会降低效率, 后者则会提升效率<br>并发编程有多进程和多线程两种方式</p>\n<p>并发模式 - IO单元和多个逻辑单元之间协调完成任务的方法.<br>服务器主要有两种并发模式</p>\n<ul>\n<li>半同步/半异步模式</li>\n<li>领导者/追随者模式</li>\n</ul>\n<p><strong>半同步/半异步模式</strong><br>在IO模型中, 异步和同步的区分是内核向应用程序通知的是何种IO事件(就绪事件还是完成事件), 以及由谁来完成IO读写(应用程序还是内核)</p>\n<p>而在这里(并发模式)<br>同步指的是完全按照代码序列的顺序执行 - 按照同步方式运行的线程称为同步线程<br>异步需要系统事件(中断, 信号)来驱动 - 按照异步方式运行的线程称为异步线程<br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5%E5%92%8C%E5%90%8C%E6%AD%A5.png\" alt=\"\"></p>\n<p>服务器(需要较好的实时性且能同时处理多个客户请求) - 一般使用同步线程和异步线程来实现,即为半同步/半异步模式<br>同步线程 - 处理客户逻辑, 处理请求队列中的对象<br>异步线程 - 处理IO事件, 接收到客户请求后将其封装成请求对象并插入请求队列</p>\n<p>半同步/半异步模式 存在变体 <code>半同步/半反应堆模式</code><br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E5%8D%8A%E5%90%8C%E6%AD%A5%E5%8D%8A%E5%8F%8D%E5%BA%94%E5%A0%86%E6%A8%A1%E5%BC%8F.png\" alt=\"\"></p>\n<p>异步线程 - 主线程 - 负责监听所有socket上的事件</p>\n<p><strong>领导者/追随者模式</strong><br>略</p>\n<p><strong>高效编程方法 - 有限状态机</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 状态独立的有限状态机</span></span><br><span class=\"line\">STATE_MACHINE(Package _pack) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tPackageType _type = _pack.GetType();</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span>(_type) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> type_A:</span><br><span class=\"line\">\t\t\txxxx;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> type_B:</span><br><span class=\"line\">\t\t\txxxx;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 带状态转移的有限状态机</span></span><br><span class=\"line\">STATE_MACHINE() &#123;</span><br><span class=\"line\">\tState cur_State = type_A;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(cur_State != type_C) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tPackage _pack = getNewPackage();</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span>(cur_State) &#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> type_A:</span><br><span class=\"line\">\t\t\t\tprocess_package_state_A(_pack);</span><br><span class=\"line\">\t\t\t\tcur_State = type_B;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> type_B:</span><br><span class=\"line\">\t\t\t\txxxx;</span><br><span class=\"line\">\t\t\t\tcur_State = type_C;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>花了小一个小时 终于一个字母一个字母的抄完了那个5000多字的代码<br>@2019年9月8日22:08:46@</p>\n<h3 id=\"提高服务器性能的其他建议-池-数据复制-上下文切换和锁\"><a href=\"#提高服务器性能的其他建议-池-数据复制-上下文切换和锁\" class=\"headerlink\" title=\"提高服务器性能的其他建议 池 数据复制 上下文切换和锁\"></a>提高服务器性能的其他建议 池 数据复制 上下文切换和锁</h3><p><strong>池</strong> - 用空间换取时间<br>进程池和线程池</p>\n<p><strong>数据复制</strong> - 高性能的服务器应该尽量避免不必要的复制</p>\n<p><strong>上下文切换和锁</strong><br>减少<code>锁</code>的作用区域. 不应该创建太多的工作进程, 而是使用专门的业务逻辑线程.</p>"},{"title":"Linux高性能服务器编程读书记录-高级部分","date":"2019-08-18T12:34:39.000Z","top":101,"img":"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%B0%81%E9%9D%A2/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B.jpg","_content":"# 第九章 I/O复用\n\nI/O复用使得程序能同时监听多个文件描述符.\n- 客户端程序需要同时处理多个socket 非阻塞connect技术\n- 客户端程序同时处理用户输入和网络连接 聊天室程序\n- TCP服务器要同时处理监听socket和连接socket\n- 同时处理TCP和UDP请求 - 回射服务器\n- 同时监听多个端口, 或者处理多种服务 - xinetd服务器\n\n常用手段`select`, `poll`, `epoll`\n\n## select\n```c++\n#include <sys/select.h>\n// nfds - 被监听的文件描述符总数\n// 后面三个分别指向 可读, 可写, 异常等事件对应的文件描述符集合\n// timeval select超时时间 如果传递0 则为非阻塞, 设置为NULL则为阻塞\n// 成功返回就绪(可读, 可写, 异常)文件描述符的总数, 没有则返回0 失败返回-1\nint select (int nfds, fd_set* readfds, fd_set* writefds, fd_set* exceptfds, struct timeval* timeout);\n\n//操作fd_set的宏\nFD_ZERO(fd_set* fdset);\nFD_SET(int fd, fd_set* fdset);\nFD_CLR(int fd, fd_set* fdset);\nFD_ISSET(int fd, fd_set* fdset);\n// 设置 timeval 超时时间\nstruct timeval\n{\n\tlong tv_sec; // 秒\n\tlong tv_usec; // 微秒\n}\n```\n**select**\n\n文件描述符就绪条件\n- socket内核接收缓存区中的字节数大于或等于 其低水位标记\n- socket通信的对方关闭连接, 对socket的读操作返回0\n- 监听socket上有新的连接请求\n- socket上有未处理的错误, 可以使用getsockopt来读取和清除错误\n- socket内核的发送缓冲区的可用字节数大于或等于 其低水位标记\n- socket的写操作被关闭, 对被关闭的socket执行写操作将会触发一个SIGPIPE信号\n- socket使用非阻塞connect 连接成功或失败后\n## poll\n**poll**\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/poll%E6%97%B6%E9%97%B4%E7%B1%BB%E5%9E%8B1.png)\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/poll%E6%97%B6%E9%97%B4%E7%B1%BB%E5%9E%8B2.png)\n\n```c++\n#include <poll.h>\n// fds 结构体类型数组 指定我们感兴趣的文件描述符上发生的可读可写和异常事件\\\n// nfds 遍历结合大小 左闭右开\n// timeout 单位为毫秒 -1 为阻塞 0 为立即返回\nint poll(struct pollfd* fds, nfds_t nfds, int timeout);\n\nstruct pollfd\n{\n\tint fd;\n\tshort events;  //注册的事件, 告知poll监听fd上的哪些事件\n\tshort revents; // 实际发生的事件\n}\n```\n```c++\n#define exit_if(r, ...) \\\n{   \\\n    if (r)  \\\n    {   \\\n        printf(__VA_ARGS__);    \\\n        printf(\"errno no: %d, error msg is %s\", errno, strerror(errno));    \\\n        exit(1);    \\\n    }   \\\n}   \\\n\nstruct client_info\n{\n    char *ip_;\n    int port_;\n};\n\nint main(int argc, char* argv[])\n{\n    int port = 8001;\n    char ip[] = \"127.0.0.1\";\n\n    struct sockaddr_in address;\n    address.sin_port = htons(port);\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = htons(INADDR_ANY);\n\n    int listenfd = socket(PF_INET, SOCK_STREAM, 0);\n    exit_if(listenfd < 0, \"socket error\\n\");\n\n    int ret = bind(listenfd, (struct sockaddr*)&address, sizeof(address));\n    exit_if(ret == -1, \"bind error\\n\");\n\n    ret = listen(listenfd, 5);\n    exit_if(ret == -1, \"listen error\\n\");\n\n    constexpr int MAX_CLIENTS = 1024;\n    struct pollfd polls[MAX_CLIENTS] = {};\n    struct client_info clientsinfo[MAX_CLIENTS] = {};\n\n    polls[3].fd = listenfd;\n    polls[3].events = POLLIN | POLLRDHUP;\n\n\n    while (true)\n    {\n        ret = poll(polls, MAX_CLIENTS + 1, -1);\n        exit_if(ret == -1, \"poll error\\n\");\n\n        for (int i = 3; i <= MAX_CLIENTS; ++i)\n        {\n            int fd = polls[i].fd;\n\n            if (polls[i].revents & POLLRDHUP)\n            {\n                polls[i].events = 0;\n                printf(\"close fd-%d from %s:%d\\n\", fd, clientsinfo[fd].ip_, clientsinfo[fd].port_);\n            }\n\n            if (polls[i].revents & POLLIN)\n            {\n                if (fd == listenfd)\n                {\n                    struct sockaddr_in client_address;\n                    socklen_t client_addresslen = sizeof(client_address);\n\n                    int clientfd = accept(listenfd, (struct sockaddr*)&client_address,\n                            &client_addresslen);\n\n                    struct client_info *clientinfo = &clientsinfo[clientfd];\n\n                    clientinfo->ip_ = inet_ntoa(client_address.sin_addr);\n                    clientinfo->port_ = ntohs(client_address.sin_port);\n\n                    exit_if(clientfd < 0, \"accpet error, from %s:%d\\n\", clientinfo->ip_,\n                            clientinfo->port_);\n                    printf(\"accept from %s:%d\\n\", clientinfo->ip_, clientinfo->port_);\n\n                    polls[clientfd].fd = clientfd;\n                    polls[clientfd].events = POLLIN | POLLRDHUP;\n                }\n                else\n                {\n                    char buffer[1024];\n                    memset(buffer, '\\0', sizeof(buffer));\n\n                    ret = read(fd, buffer, 1024);\n                    if(ret == 0)\n                    {\n                        close(fd);\n                    }\n                    else\n                    {\n                        printf(\"recv from %s:%d:\\n%s\\n\", clientsinfo[fd].ip_,\n                               clientsinfo[fd].port_, buffer);\n                    }\n                }\n            }\n        }\n    }\n}\n```\n## epoll\n**epoll**\n\nepoll是Linux特有的I/O复用函数, 实现上与select,poll有很大的差异\n- epoll使用一组函数完成任务\n- epoll把用户关心的文件描述符上的事件放在内核里的一个事件表中\n- epoll无需每次调用都传入文件描述符集或事件集.\n\n有特定的文件描述符创建函数, 来标识这个事件表`epoll_create()`\n`epoll_ctl()` 用来操作这个内核事件表\n`epoll_wait()` 为主要函数 成功返回就绪的文件描述符个数 失败返回-1\n如果`epoll_wait()`函数检测到事件,就将所有就绪的事件从内核事件表(由第一个参数, epoll_create返回的结果) 中复制到第二个参数event指向的数组中, 这个数组只用于输出`epoll_wait`检测到的就绪事件.\n\n*event不同于select和poll的数组参数 既用于传入用户注册的事件, 又用于输出内核检测到的就绪事件, 提高了效率*\n\n```c++\n// 索引poll返回的就绪文件描述符\nint ret = poll(fds, MAX_EVENT_NUMBER - 1);\n// 遍历\nfor(int i = 0; i < MAX_EVENT_NUMBER; ++i) {\n\tif(fds[i].revents & POLLIN) {\n\t\tint sockfd = fds[i].fd;\n\t}\n}\n\n// 索引epoll返回的就绪文件描述符\nint ret = epoll_wait(epoll_fd, events, MAX_EVENT_NUMBER,  -1);\nfor(int i = 0; i < ret; i++) {\n\tint sockfd = events[i].data.fd;\n\t// sockfd 一定就绪 ?????\n}\n```\n\n**LT和ET模式**\nLT(电平触发, 默认的工作模式)\nLT模式下的epoll相当于一个效率较高的poll\nepoll_wait将会一只通知一个事件知道这个事件被处理\n\nET(边沿触发, epoll的高效工作模式)模式\n当向epoll内核事件表中注册一个文件描述符上的EPOLLET事件的时候, epoll将用ET模式来操作这个\n文件描述符\nepoll_wait只会通知一次, 不论这个事件有没有完成\n\nET模式\n```\n-> 123456789-123456789-123456789\nevent trigger once\nget 9bytes of content: 123456789\nget 9bytes of content: -12345678\nget 9bytes of content: 9-1234567\nget 4bytes of content: 89\nread later\n```\nLT模式\n```\n-> 123456789-123456789-123456789\nevent trigger once\nget 9bytes of contents: 123456789\nevent trigger once\nget 9bytes of contents: -12345678\nevent trigger once\nget 9bytes of contents: 9-1234567\nevent trigger once\nget 4bytes of contents: 89\n```\nET模式有任务到来就必须做完, 因为后续将不会继续通知这个事件, 所以ET是epoll的高效工作模式\nLT模式只要事件没被处理就会一直通知\n\n```c++\n#include <epoll.h>\n// size 参数只是给内核一个提示, 事件表需要多大\n// 函数返回其他所有epoll系统调用的第一个参数, 来指定要访问的内核事件表\nint epoll_create(int size);\n\n// epfd 为 epoll_create的返回值\n// op为操作类型\n// - EPOLL_CTL_ADD 向事件表中注册fd上的事件\n// - EPOLL_CTL_MOD 修改fd上的注册事件\n// - EPOLL_CTL_DEL 删除fd上的注册事件\n// fd 为要操作的文件描述符\nint epoll_ctl(int epfd, int op, int fd, struct epoll_event* event);\n\nstruct epoll_event\n{\n\t_uint32_t events; // epoll事件\n\tepoll_data_t data; // 用户数据 是一个联合体\n}\n\ntypedef union epoll_data\n{\n\tvoid* ptr; // ptr fd 不能同时使用\n\tint fd;\n\tuint32_t u32;\n\tuint64_t u64;\n}epoll_data_t\n\n// maxevents监听事件数 必须大于0\n// timeout 为-1 表示阻塞\n// 成功返回就绪的文件描述符个数 失败返回-1\nint epoll_wait(int epfd, struct epoll_event* events, int maxevents, int timeout);\n```\n\n## 三种IO复用的比较\n`select`以及`poll`和`epoll`\n相同\n- 都能同时监听多个文件描述符, 都将等待timeout参数指定的超时时间, 直到一个或多个文件描述符上有事件发生.\n- 返回值为就绪的文件描述符数量, 返回0则表示没有事件发生\n- ![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E4%B8%89%E7%A7%8DIO%E5%A4%8D%E7%94%A8%E6%AF%94%E8%BE%83.png)\n\n## I/O 复用的高级应用, 非阻塞connect\n\nconnect出错的时候会返回一个errno值 EINPROGRESS - 表示对非阻塞socket调用connect, 连接又没有立即建立的时候, 这时可以调用select和poll函数来监听这个连接失败的socket上的可写事件.\n\n当函数返回的时候, 可以用getsockopt来读取错误码, 并清楚该socket上的错误. 错误码为0表示成功\n\n\n# 第十章信号\n\n## Api\n发送信号Api\n```c++\n#include <sys/types.h>\n#include <signal.h>\n\n// pid > 0 发送给PID为pid标识的进程\n//  0 发送给本进程组的其他进程\n// -1 发送给进程以外的所有进程, 但发送者需要有对目标进程发送信号的权限\n// < -1 发送给组ID为 -pid 的进程组中的所有成员\n\n// 出错信息 EINVAL 无效信号, EPERM 该进程没有权限给任何一个目标进程 ESRCH 目标进程(组) 不存在\nint kill(pid_t pid, int sig);\n```\n接收信号Api\n```c++\n#include <signal.h>\ntypedef void(*_sighandler_t) (int);\n\n#include <bits/signum.h> // 此头文件中有所有的linux可用信号\n// 忽略目标信号\n#define SIG_DFL ((_sighandler_t) 0)\n// 使用信号的默认处理方式\n#define SIG_IGN ((_sighandler_t) 1)\n```\n常用信号\n```\nSIGHUP 控制终端挂起\nSIGPIPE 往读端被关闭的管道或者socket连接中写数据\nSIGURG socket连接上收到紧急数据\nSIGALRM 由alarm或setitimer设置的实时闹钟超时引起\nSIGCHLD 子进程状态变化\n```\n信号函数\n```c++\n// 为一个信号设置处理函数\n#include <signal.h>\n// _handler 指定sig的处理函数\n_sighandler_t signal(int sig, __sighandler_t _handler)\n\n\nint sigaction(int sig, struct sigaction* act, struct sigaction* oact)\n```\n## 概述\n\n信号是用户, 系统, 或者进程发送给目标进程的信息, 以通知目标进程某个状态的改变或者系统异常.\n产生条件\n- 对于前台进程\n用户可以通过输入特殊的终端字符来给它发送信号, CTRL+C 通常为一个中断信号 `SIGINT`\n- 系统异常\n浮点异常和非法内存段的访问\n- 系统状态变化\n由alarm定时器到期将引起`SIGALRM`信号\n- 运行kill命令或调用kill函数\n\n*服务器必须处理(至少忽略) 一些常见的信号, 以免异常终止*\n\n中断系统调用?\n\n# 第十一章定时器\n## socket选项`SO_RCVTIMEO` 和 `SO_SNDTIMEO`\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/SO_RCVTIMEO%E5%92%8CSO_SNDTIMEO%E9%80%89%E9%A1%B9%E7%9A%84%E4%BD%9C%E7%94%A8.png)\n\n使用示例, 通过设置对应的SO_SNDTIMEO 得到超时后的路线\n```c++\nint timeout_connect(const char* ip, const int port, const int sec)\n{\n    struct sockaddr_in address{};\n    address.sin_family = AF_INET;\n    address.sin_port = htons(port);\n    address.sin_addr.s_addr = inet_addr(ip);\n\n    int sockfd = socket(PF_INET, SOCK_STREAM, 0);\n    exit_if(sockfd < 0, \"socket error\\n\");\n\n    struct timeval timeout{};\n    timeout.tv_sec = sec;\n    timeout.tv_usec = 0;\n    socklen_t timeout_len = sizeof(timeout);\n\n    setsockopt(sockfd, SOL_SOCKET, SO_SNDTIMEO, &timeout, timeout_len);\n\n    int ret = connect(sockfd, (struct sockaddr*)&address, sizeof(address));\n    if (ret == -1)\n    {\n\t\t// 当 errno为EINPROGRESS 说明 等待了 10S后依然无法连接成功 实现了定时器\n        if (errno == EINPROGRESS)\n        {\n            printf(\"connecting timeout, process timeout logic\\n\");\n            return -1;\n        }\n        printf(\"error occur when connecting to server\\n\");\n        return -1;\n    }\n    return sockfd;\n}\n\nint main(int argc, char* argv[])\n{\n    exit_if(argc <= 2, \"wrong number of parameters\\n\")\n    const char* ip = argv[1];\n    const int port = atoi(argv[2]);\n\n    int sockfd = timeout_connect(ip, port, 10);\n    if (sockfd < 0)\n    {\n        return 1;\n    }\n    return 0;\n}\n```\n\n## SIGALRM信号-基于升序链表的定时器\n由alarm和setitimer函数设定的实时闹钟一旦超时, 将会触发SIGALRM信号, 用信号处理函数处理定时任务\n 相关的代码放在了github上 代码还是很多的就不放上来了[连接](https://github.com/rjd67441/Notes-HighPerformanceLinuxServerProgramming/tree/master/12.%20%E4%BB%A3%E7%A0%81%E6%B8%85%E5%8D%9511-2%E5%92%8C11-3%E5%8F%8A11-4%20%E9%93%BE%E8%A1%A8%E5%AE%9A%E6%97%B6%E5%99%A8%2C%20%E5%A4%84%E7%90%86%E9%9D%9E%E6%B4%BB%E5%8A%A8%E8%BF%9E%E6%8E%A5)\n\n总结放在了 日记的博客上 链接后面再甩出来\n## IO复用系统调用的超时参数\n\n## 高性能定时器\n## # 时间轮\n## # 时间堆\n\n# 第十二章高性能IO框架库\n另出一篇博客","source":"_posts/101CPP-读书记录-高性能服务器编程读书记录高级部分.md","raw":"---\ntitle: Linux高性能服务器编程读书记录-高级部分\ntags:\n  - null\ncategories:\n  - CPP\n  - 服务器编程-书籍记录\ndate: 2019-08-18 20:34:39\n\ntop: 101\nimg: https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%B0%81%E9%9D%A2/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B.jpg\n---\n# 第九章 I/O复用\n\nI/O复用使得程序能同时监听多个文件描述符.\n- 客户端程序需要同时处理多个socket 非阻塞connect技术\n- 客户端程序同时处理用户输入和网络连接 聊天室程序\n- TCP服务器要同时处理监听socket和连接socket\n- 同时处理TCP和UDP请求 - 回射服务器\n- 同时监听多个端口, 或者处理多种服务 - xinetd服务器\n\n常用手段`select`, `poll`, `epoll`\n\n## select\n```c++\n#include <sys/select.h>\n// nfds - 被监听的文件描述符总数\n// 后面三个分别指向 可读, 可写, 异常等事件对应的文件描述符集合\n// timeval select超时时间 如果传递0 则为非阻塞, 设置为NULL则为阻塞\n// 成功返回就绪(可读, 可写, 异常)文件描述符的总数, 没有则返回0 失败返回-1\nint select (int nfds, fd_set* readfds, fd_set* writefds, fd_set* exceptfds, struct timeval* timeout);\n\n//操作fd_set的宏\nFD_ZERO(fd_set* fdset);\nFD_SET(int fd, fd_set* fdset);\nFD_CLR(int fd, fd_set* fdset);\nFD_ISSET(int fd, fd_set* fdset);\n// 设置 timeval 超时时间\nstruct timeval\n{\n\tlong tv_sec; // 秒\n\tlong tv_usec; // 微秒\n}\n```\n**select**\n\n文件描述符就绪条件\n- socket内核接收缓存区中的字节数大于或等于 其低水位标记\n- socket通信的对方关闭连接, 对socket的读操作返回0\n- 监听socket上有新的连接请求\n- socket上有未处理的错误, 可以使用getsockopt来读取和清除错误\n- socket内核的发送缓冲区的可用字节数大于或等于 其低水位标记\n- socket的写操作被关闭, 对被关闭的socket执行写操作将会触发一个SIGPIPE信号\n- socket使用非阻塞connect 连接成功或失败后\n## poll\n**poll**\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/poll%E6%97%B6%E9%97%B4%E7%B1%BB%E5%9E%8B1.png)\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/poll%E6%97%B6%E9%97%B4%E7%B1%BB%E5%9E%8B2.png)\n\n```c++\n#include <poll.h>\n// fds 结构体类型数组 指定我们感兴趣的文件描述符上发生的可读可写和异常事件\\\n// nfds 遍历结合大小 左闭右开\n// timeout 单位为毫秒 -1 为阻塞 0 为立即返回\nint poll(struct pollfd* fds, nfds_t nfds, int timeout);\n\nstruct pollfd\n{\n\tint fd;\n\tshort events;  //注册的事件, 告知poll监听fd上的哪些事件\n\tshort revents; // 实际发生的事件\n}\n```\n```c++\n#define exit_if(r, ...) \\\n{   \\\n    if (r)  \\\n    {   \\\n        printf(__VA_ARGS__);    \\\n        printf(\"errno no: %d, error msg is %s\", errno, strerror(errno));    \\\n        exit(1);    \\\n    }   \\\n}   \\\n\nstruct client_info\n{\n    char *ip_;\n    int port_;\n};\n\nint main(int argc, char* argv[])\n{\n    int port = 8001;\n    char ip[] = \"127.0.0.1\";\n\n    struct sockaddr_in address;\n    address.sin_port = htons(port);\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = htons(INADDR_ANY);\n\n    int listenfd = socket(PF_INET, SOCK_STREAM, 0);\n    exit_if(listenfd < 0, \"socket error\\n\");\n\n    int ret = bind(listenfd, (struct sockaddr*)&address, sizeof(address));\n    exit_if(ret == -1, \"bind error\\n\");\n\n    ret = listen(listenfd, 5);\n    exit_if(ret == -1, \"listen error\\n\");\n\n    constexpr int MAX_CLIENTS = 1024;\n    struct pollfd polls[MAX_CLIENTS] = {};\n    struct client_info clientsinfo[MAX_CLIENTS] = {};\n\n    polls[3].fd = listenfd;\n    polls[3].events = POLLIN | POLLRDHUP;\n\n\n    while (true)\n    {\n        ret = poll(polls, MAX_CLIENTS + 1, -1);\n        exit_if(ret == -1, \"poll error\\n\");\n\n        for (int i = 3; i <= MAX_CLIENTS; ++i)\n        {\n            int fd = polls[i].fd;\n\n            if (polls[i].revents & POLLRDHUP)\n            {\n                polls[i].events = 0;\n                printf(\"close fd-%d from %s:%d\\n\", fd, clientsinfo[fd].ip_, clientsinfo[fd].port_);\n            }\n\n            if (polls[i].revents & POLLIN)\n            {\n                if (fd == listenfd)\n                {\n                    struct sockaddr_in client_address;\n                    socklen_t client_addresslen = sizeof(client_address);\n\n                    int clientfd = accept(listenfd, (struct sockaddr*)&client_address,\n                            &client_addresslen);\n\n                    struct client_info *clientinfo = &clientsinfo[clientfd];\n\n                    clientinfo->ip_ = inet_ntoa(client_address.sin_addr);\n                    clientinfo->port_ = ntohs(client_address.sin_port);\n\n                    exit_if(clientfd < 0, \"accpet error, from %s:%d\\n\", clientinfo->ip_,\n                            clientinfo->port_);\n                    printf(\"accept from %s:%d\\n\", clientinfo->ip_, clientinfo->port_);\n\n                    polls[clientfd].fd = clientfd;\n                    polls[clientfd].events = POLLIN | POLLRDHUP;\n                }\n                else\n                {\n                    char buffer[1024];\n                    memset(buffer, '\\0', sizeof(buffer));\n\n                    ret = read(fd, buffer, 1024);\n                    if(ret == 0)\n                    {\n                        close(fd);\n                    }\n                    else\n                    {\n                        printf(\"recv from %s:%d:\\n%s\\n\", clientsinfo[fd].ip_,\n                               clientsinfo[fd].port_, buffer);\n                    }\n                }\n            }\n        }\n    }\n}\n```\n## epoll\n**epoll**\n\nepoll是Linux特有的I/O复用函数, 实现上与select,poll有很大的差异\n- epoll使用一组函数完成任务\n- epoll把用户关心的文件描述符上的事件放在内核里的一个事件表中\n- epoll无需每次调用都传入文件描述符集或事件集.\n\n有特定的文件描述符创建函数, 来标识这个事件表`epoll_create()`\n`epoll_ctl()` 用来操作这个内核事件表\n`epoll_wait()` 为主要函数 成功返回就绪的文件描述符个数 失败返回-1\n如果`epoll_wait()`函数检测到事件,就将所有就绪的事件从内核事件表(由第一个参数, epoll_create返回的结果) 中复制到第二个参数event指向的数组中, 这个数组只用于输出`epoll_wait`检测到的就绪事件.\n\n*event不同于select和poll的数组参数 既用于传入用户注册的事件, 又用于输出内核检测到的就绪事件, 提高了效率*\n\n```c++\n// 索引poll返回的就绪文件描述符\nint ret = poll(fds, MAX_EVENT_NUMBER - 1);\n// 遍历\nfor(int i = 0; i < MAX_EVENT_NUMBER; ++i) {\n\tif(fds[i].revents & POLLIN) {\n\t\tint sockfd = fds[i].fd;\n\t}\n}\n\n// 索引epoll返回的就绪文件描述符\nint ret = epoll_wait(epoll_fd, events, MAX_EVENT_NUMBER,  -1);\nfor(int i = 0; i < ret; i++) {\n\tint sockfd = events[i].data.fd;\n\t// sockfd 一定就绪 ?????\n}\n```\n\n**LT和ET模式**\nLT(电平触发, 默认的工作模式)\nLT模式下的epoll相当于一个效率较高的poll\nepoll_wait将会一只通知一个事件知道这个事件被处理\n\nET(边沿触发, epoll的高效工作模式)模式\n当向epoll内核事件表中注册一个文件描述符上的EPOLLET事件的时候, epoll将用ET模式来操作这个\n文件描述符\nepoll_wait只会通知一次, 不论这个事件有没有完成\n\nET模式\n```\n-> 123456789-123456789-123456789\nevent trigger once\nget 9bytes of content: 123456789\nget 9bytes of content: -12345678\nget 9bytes of content: 9-1234567\nget 4bytes of content: 89\nread later\n```\nLT模式\n```\n-> 123456789-123456789-123456789\nevent trigger once\nget 9bytes of contents: 123456789\nevent trigger once\nget 9bytes of contents: -12345678\nevent trigger once\nget 9bytes of contents: 9-1234567\nevent trigger once\nget 4bytes of contents: 89\n```\nET模式有任务到来就必须做完, 因为后续将不会继续通知这个事件, 所以ET是epoll的高效工作模式\nLT模式只要事件没被处理就会一直通知\n\n```c++\n#include <epoll.h>\n// size 参数只是给内核一个提示, 事件表需要多大\n// 函数返回其他所有epoll系统调用的第一个参数, 来指定要访问的内核事件表\nint epoll_create(int size);\n\n// epfd 为 epoll_create的返回值\n// op为操作类型\n// - EPOLL_CTL_ADD 向事件表中注册fd上的事件\n// - EPOLL_CTL_MOD 修改fd上的注册事件\n// - EPOLL_CTL_DEL 删除fd上的注册事件\n// fd 为要操作的文件描述符\nint epoll_ctl(int epfd, int op, int fd, struct epoll_event* event);\n\nstruct epoll_event\n{\n\t_uint32_t events; // epoll事件\n\tepoll_data_t data; // 用户数据 是一个联合体\n}\n\ntypedef union epoll_data\n{\n\tvoid* ptr; // ptr fd 不能同时使用\n\tint fd;\n\tuint32_t u32;\n\tuint64_t u64;\n}epoll_data_t\n\n// maxevents监听事件数 必须大于0\n// timeout 为-1 表示阻塞\n// 成功返回就绪的文件描述符个数 失败返回-1\nint epoll_wait(int epfd, struct epoll_event* events, int maxevents, int timeout);\n```\n\n## 三种IO复用的比较\n`select`以及`poll`和`epoll`\n相同\n- 都能同时监听多个文件描述符, 都将等待timeout参数指定的超时时间, 直到一个或多个文件描述符上有事件发生.\n- 返回值为就绪的文件描述符数量, 返回0则表示没有事件发生\n- ![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E4%B8%89%E7%A7%8DIO%E5%A4%8D%E7%94%A8%E6%AF%94%E8%BE%83.png)\n\n## I/O 复用的高级应用, 非阻塞connect\n\nconnect出错的时候会返回一个errno值 EINPROGRESS - 表示对非阻塞socket调用connect, 连接又没有立即建立的时候, 这时可以调用select和poll函数来监听这个连接失败的socket上的可写事件.\n\n当函数返回的时候, 可以用getsockopt来读取错误码, 并清楚该socket上的错误. 错误码为0表示成功\n\n\n# 第十章信号\n\n## Api\n发送信号Api\n```c++\n#include <sys/types.h>\n#include <signal.h>\n\n// pid > 0 发送给PID为pid标识的进程\n//  0 发送给本进程组的其他进程\n// -1 发送给进程以外的所有进程, 但发送者需要有对目标进程发送信号的权限\n// < -1 发送给组ID为 -pid 的进程组中的所有成员\n\n// 出错信息 EINVAL 无效信号, EPERM 该进程没有权限给任何一个目标进程 ESRCH 目标进程(组) 不存在\nint kill(pid_t pid, int sig);\n```\n接收信号Api\n```c++\n#include <signal.h>\ntypedef void(*_sighandler_t) (int);\n\n#include <bits/signum.h> // 此头文件中有所有的linux可用信号\n// 忽略目标信号\n#define SIG_DFL ((_sighandler_t) 0)\n// 使用信号的默认处理方式\n#define SIG_IGN ((_sighandler_t) 1)\n```\n常用信号\n```\nSIGHUP 控制终端挂起\nSIGPIPE 往读端被关闭的管道或者socket连接中写数据\nSIGURG socket连接上收到紧急数据\nSIGALRM 由alarm或setitimer设置的实时闹钟超时引起\nSIGCHLD 子进程状态变化\n```\n信号函数\n```c++\n// 为一个信号设置处理函数\n#include <signal.h>\n// _handler 指定sig的处理函数\n_sighandler_t signal(int sig, __sighandler_t _handler)\n\n\nint sigaction(int sig, struct sigaction* act, struct sigaction* oact)\n```\n## 概述\n\n信号是用户, 系统, 或者进程发送给目标进程的信息, 以通知目标进程某个状态的改变或者系统异常.\n产生条件\n- 对于前台进程\n用户可以通过输入特殊的终端字符来给它发送信号, CTRL+C 通常为一个中断信号 `SIGINT`\n- 系统异常\n浮点异常和非法内存段的访问\n- 系统状态变化\n由alarm定时器到期将引起`SIGALRM`信号\n- 运行kill命令或调用kill函数\n\n*服务器必须处理(至少忽略) 一些常见的信号, 以免异常终止*\n\n中断系统调用?\n\n# 第十一章定时器\n## socket选项`SO_RCVTIMEO` 和 `SO_SNDTIMEO`\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/SO_RCVTIMEO%E5%92%8CSO_SNDTIMEO%E9%80%89%E9%A1%B9%E7%9A%84%E4%BD%9C%E7%94%A8.png)\n\n使用示例, 通过设置对应的SO_SNDTIMEO 得到超时后的路线\n```c++\nint timeout_connect(const char* ip, const int port, const int sec)\n{\n    struct sockaddr_in address{};\n    address.sin_family = AF_INET;\n    address.sin_port = htons(port);\n    address.sin_addr.s_addr = inet_addr(ip);\n\n    int sockfd = socket(PF_INET, SOCK_STREAM, 0);\n    exit_if(sockfd < 0, \"socket error\\n\");\n\n    struct timeval timeout{};\n    timeout.tv_sec = sec;\n    timeout.tv_usec = 0;\n    socklen_t timeout_len = sizeof(timeout);\n\n    setsockopt(sockfd, SOL_SOCKET, SO_SNDTIMEO, &timeout, timeout_len);\n\n    int ret = connect(sockfd, (struct sockaddr*)&address, sizeof(address));\n    if (ret == -1)\n    {\n\t\t// 当 errno为EINPROGRESS 说明 等待了 10S后依然无法连接成功 实现了定时器\n        if (errno == EINPROGRESS)\n        {\n            printf(\"connecting timeout, process timeout logic\\n\");\n            return -1;\n        }\n        printf(\"error occur when connecting to server\\n\");\n        return -1;\n    }\n    return sockfd;\n}\n\nint main(int argc, char* argv[])\n{\n    exit_if(argc <= 2, \"wrong number of parameters\\n\")\n    const char* ip = argv[1];\n    const int port = atoi(argv[2]);\n\n    int sockfd = timeout_connect(ip, port, 10);\n    if (sockfd < 0)\n    {\n        return 1;\n    }\n    return 0;\n}\n```\n\n## SIGALRM信号-基于升序链表的定时器\n由alarm和setitimer函数设定的实时闹钟一旦超时, 将会触发SIGALRM信号, 用信号处理函数处理定时任务\n 相关的代码放在了github上 代码还是很多的就不放上来了[连接](https://github.com/rjd67441/Notes-HighPerformanceLinuxServerProgramming/tree/master/12.%20%E4%BB%A3%E7%A0%81%E6%B8%85%E5%8D%9511-2%E5%92%8C11-3%E5%8F%8A11-4%20%E9%93%BE%E8%A1%A8%E5%AE%9A%E6%97%B6%E5%99%A8%2C%20%E5%A4%84%E7%90%86%E9%9D%9E%E6%B4%BB%E5%8A%A8%E8%BF%9E%E6%8E%A5)\n\n总结放在了 日记的博客上 链接后面再甩出来\n## IO复用系统调用的超时参数\n\n## 高性能定时器\n## # 时间轮\n## # 时间堆\n\n# 第十二章高性能IO框架库\n另出一篇博客","slug":"101CPP-读书记录-高性能服务器编程读书记录高级部分","published":1,"updated":"2020-03-04T07:49:27.553Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucy70001souo7ty93sdd","content":"<h1 id=\"第九章-I-O复用\"><a href=\"#第九章-I-O复用\" class=\"headerlink\" title=\"第九章 I/O复用\"></a>第九章 I/O复用</h1><p>I/O复用使得程序能同时监听多个文件描述符.</p>\n<ul>\n<li>客户端程序需要同时处理多个socket 非阻塞connect技术</li>\n<li>客户端程序同时处理用户输入和网络连接 聊天室程序</li>\n<li>TCP服务器要同时处理监听socket和连接socket</li>\n<li>同时处理TCP和UDP请求 - 回射服务器</li>\n<li>同时监听多个端口, 或者处理多种服务 - xinetd服务器</li>\n</ul>\n<p>常用手段<code>select</code>, <code>poll</code>, <code>epoll</code></p>\n<h2 id=\"select\"><a href=\"#select\" class=\"headerlink\" title=\"select\"></a>select</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/select.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// nfds - 被监听的文件描述符总数</span></span><br><span class=\"line\"><span class=\"comment\">// 后面三个分别指向 可读, 可写, 异常等事件对应的文件描述符集合</span></span><br><span class=\"line\"><span class=\"comment\">// timeval select超时时间 如果传递0 则为非阻塞, 设置为NULL则为阻塞</span></span><br><span class=\"line\"><span class=\"comment\">// 成功返回就绪(可读, 可写, 异常)文件描述符的总数, 没有则返回0 失败返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">select</span> <span class=\"params\">(<span class=\"keyword\">int</span> nfds, fd_set* readfds, fd_set* writefds, fd_set* exceptfds, struct timeval* timeout)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//操作fd_set的宏</span></span><br><span class=\"line\">FD_ZERO(fd_set* fdset);</span><br><span class=\"line\">FD_SET(<span class=\"keyword\">int</span> fd, fd_set* fdset);</span><br><span class=\"line\">FD_CLR(<span class=\"keyword\">int</span> fd, fd_set* fdset);</span><br><span class=\"line\">FD_ISSET(<span class=\"keyword\">int</span> fd, fd_set* fdset);</span><br><span class=\"line\"><span class=\"comment\">// 设置 timeval 超时时间</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> tv_sec; <span class=\"comment\">// 秒</span></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> tv_usec; <span class=\"comment\">// 微秒</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>select</strong></p>\n<p>文件描述符就绪条件</p>\n<ul>\n<li>socket内核接收缓存区中的字节数大于或等于 其低水位标记</li>\n<li>socket通信的对方关闭连接, 对socket的读操作返回0</li>\n<li>监听socket上有新的连接请求</li>\n<li>socket上有未处理的错误, 可以使用getsockopt来读取和清除错误</li>\n<li>socket内核的发送缓冲区的可用字节数大于或等于 其低水位标记</li>\n<li>socket的写操作被关闭, 对被关闭的socket执行写操作将会触发一个SIGPIPE信号</li>\n<li>socket使用非阻塞connect 连接成功或失败后<h2 id=\"poll\"><a href=\"#poll\" class=\"headerlink\" title=\"poll\"></a>poll</h2></li>\n</ul>\n<p><strong>poll</strong><br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/poll%E6%97%B6%E9%97%B4%E7%B1%BB%E5%9E%8B1.png\" alt=\"\"><br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/poll%E6%97%B6%E9%97%B4%E7%B1%BB%E5%9E%8B2.png\" alt=\"\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;poll.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// fds 结构体类型数组 指定我们感兴趣的文件描述符上发生的可读可写和异常事件\\</span></span><br><span class=\"line\"><span class=\"comment\">// nfds 遍历结合大小 左闭右开</span></span><br><span class=\"line\"><span class=\"comment\">// timeout 单位为毫秒 -1 为阻塞 0 为立即返回</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">poll</span><span class=\"params\">(struct pollfd* fds, <span class=\"keyword\">nfds_t</span> nfds, <span class=\"keyword\">int</span> timeout)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pollfd</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> fd;</span><br><span class=\"line\">\tshort events;  <span class=\"comment\">//注册的事件, 告知poll监听fd上的哪些事件</span></span><br><span class=\"line\">\tshort revents; <span class=\"comment\">// 实际发生的事件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> exit_if(r, ...) \\</span></span><br><span class=\"line\">&#123;   \\</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r)  \\</span><br><span class=\"line\">    &#123;   \\</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(__VA_ARGS__);    \\</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"errno no: %d, error msg is %s\"</span>, errno, strerror(errno));    \\</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);    \\</span><br><span class=\"line\">    &#125;   \\</span><br><span class=\"line\">&#125;   \\</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">client_info</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *ip_;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> port_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> port = <span class=\"number\">8001</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ip[] = <span class=\"string\">\"127.0.0.1\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">address</span>;</span></span><br><span class=\"line\">    address.sin_port = htons(port);</span><br><span class=\"line\">    address.sin_family = AF_INET;</span><br><span class=\"line\">    address.sin_addr.s_addr = htons(INADDR_ANY);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> listenfd = socket(PF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">    exit_if(listenfd &lt; <span class=\"number\">0</span>, <span class=\"string\">\"socket error\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret = bind(listenfd, (struct sockaddr*)&amp;address, <span class=\"keyword\">sizeof</span>(address));</span><br><span class=\"line\">    exit_if(ret == <span class=\"number\">-1</span>, <span class=\"string\">\"bind error\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    ret = <span class=\"built_in\">listen</span>(listenfd, <span class=\"number\">5</span>);</span><br><span class=\"line\">    exit_if(ret == <span class=\"number\">-1</span>, <span class=\"string\">\"listen error\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> <span class=\"keyword\">int</span> MAX_CLIENTS = <span class=\"number\">1024</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pollfd</span> <span class=\"title\">polls</span>[<span class=\"title\">MAX_CLIENTS</span>] = &#123;</span>&#125;;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">client_info</span> <span class=\"title\">clientsinfo</span>[<span class=\"title\">MAX_CLIENTS</span>] = &#123;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    polls[<span class=\"number\">3</span>].fd = listenfd;</span><br><span class=\"line\">    polls[<span class=\"number\">3</span>].events = POLLIN | POLLRDHUP;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ret = poll(polls, MAX_CLIENTS + <span class=\"number\">1</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">        exit_if(ret == <span class=\"number\">-1</span>, <span class=\"string\">\"poll error\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &lt;= MAX_CLIENTS; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> fd = polls[i].fd;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (polls[i].revents &amp; POLLRDHUP)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                polls[i].events = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"close fd-%d from %s:%d\\n\"</span>, fd, clientsinfo[fd].ip_, clientsinfo[fd].port_);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (polls[i].revents &amp; POLLIN)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fd == listenfd)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">client_address</span>;</span></span><br><span class=\"line\">                    <span class=\"keyword\">socklen_t</span> client_addresslen = <span class=\"keyword\">sizeof</span>(client_address);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">int</span> clientfd = accept(listenfd, (struct sockaddr*)&amp;client_address,</span><br><span class=\"line\">                            &amp;client_addresslen);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">client_info</span> *<span class=\"title\">clientinfo</span> = &amp;<span class=\"title\">clientsinfo</span>[<span class=\"title\">clientfd</span>];</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    clientinfo-&gt;ip_ = inet_ntoa(client_address.sin_addr);</span><br><span class=\"line\">                    clientinfo-&gt;port_ = ntohs(client_address.sin_port);</span><br><span class=\"line\"></span><br><span class=\"line\">                    exit_if(clientfd &lt; <span class=\"number\">0</span>, <span class=\"string\">\"accpet error, from %s:%d\\n\"</span>, clientinfo-&gt;ip_,</span><br><span class=\"line\">                            clientinfo-&gt;port_);</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">\"accept from %s:%d\\n\"</span>, clientinfo-&gt;ip_, clientinfo-&gt;port_);</span><br><span class=\"line\"></span><br><span class=\"line\">                    polls[clientfd].fd = clientfd;</span><br><span class=\"line\">                    polls[clientfd].events = POLLIN | POLLRDHUP;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">char</span> <span class=\"built_in\">buffer</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">                    <span class=\"built_in\">memset</span>(<span class=\"built_in\">buffer</span>, <span class=\"string\">'\\0'</span>, <span class=\"keyword\">sizeof</span>(<span class=\"built_in\">buffer</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">                    ret = <span class=\"built_in\">read</span>(fd, <span class=\"built_in\">buffer</span>, <span class=\"number\">1024</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(ret == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">close</span>(fd);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">printf</span>(<span class=\"string\">\"recv from %s:%d:\\n%s\\n\"</span>, clientsinfo[fd].ip_,</span><br><span class=\"line\">                               clientsinfo[fd].port_, <span class=\"built_in\">buffer</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"epoll\"><a href=\"#epoll\" class=\"headerlink\" title=\"epoll\"></a>epoll</h2><p><strong>epoll</strong></p>\n<p>epoll是Linux特有的I/O复用函数, 实现上与select,poll有很大的差异</p>\n<ul>\n<li>epoll使用一组函数完成任务</li>\n<li>epoll把用户关心的文件描述符上的事件放在内核里的一个事件表中</li>\n<li>epoll无需每次调用都传入文件描述符集或事件集.</li>\n</ul>\n<p>有特定的文件描述符创建函数, 来标识这个事件表<code>epoll_create()</code><br><code>epoll_ctl()</code> 用来操作这个内核事件表<br><code>epoll_wait()</code> 为主要函数 成功返回就绪的文件描述符个数 失败返回-1<br>如果<code>epoll_wait()</code>函数检测到事件,就将所有就绪的事件从内核事件表(由第一个参数, epoll_create返回的结果) 中复制到第二个参数event指向的数组中, 这个数组只用于输出<code>epoll_wait</code>检测到的就绪事件.</p>\n<p><em>event不同于select和poll的数组参数 既用于传入用户注册的事件, 又用于输出内核检测到的就绪事件, 提高了效率</em></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 索引poll返回的就绪文件描述符</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> ret = poll(fds, MAX_EVENT_NUMBER - <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// 遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; MAX_EVENT_NUMBER; ++i) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(fds[i].revents &amp; POLLIN) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sockfd = fds[i].fd;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 索引epoll返回的就绪文件描述符</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> ret = epoll_wait(epoll_fd, events, MAX_EVENT_NUMBER,  <span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ret; i++) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sockfd = events[i].data.fd;</span><br><span class=\"line\">\t<span class=\"comment\">// sockfd 一定就绪 ?????</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>LT和ET模式</strong><br>LT(电平触发, 默认的工作模式)<br>LT模式下的epoll相当于一个效率较高的poll<br>epoll_wait将会一只通知一个事件知道这个事件被处理</p>\n<p>ET(边沿触发, epoll的高效工作模式)模式<br>当向epoll内核事件表中注册一个文件描述符上的EPOLLET事件的时候, epoll将用ET模式来操作这个<br>文件描述符<br>epoll_wait只会通知一次, 不论这个事件有没有完成</p>\n<p>ET模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; 123456789-123456789-123456789</span><br><span class=\"line\">event trigger once</span><br><span class=\"line\">get 9bytes of content: 123456789</span><br><span class=\"line\">get 9bytes of content: -12345678</span><br><span class=\"line\">get 9bytes of content: 9-1234567</span><br><span class=\"line\">get 4bytes of content: 89</span><br><span class=\"line\">read later</span><br></pre></td></tr></table></figure>\n<p>LT模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; 123456789-123456789-123456789</span><br><span class=\"line\">event trigger once</span><br><span class=\"line\">get 9bytes of contents: 123456789</span><br><span class=\"line\">event trigger once</span><br><span class=\"line\">get 9bytes of contents: -12345678</span><br><span class=\"line\">event trigger once</span><br><span class=\"line\">get 9bytes of contents: 9-1234567</span><br><span class=\"line\">event trigger once</span><br><span class=\"line\">get 4bytes of contents: 89</span><br></pre></td></tr></table></figure>\n<p>ET模式有任务到来就必须做完, 因为后续将不会继续通知这个事件, 所以ET是epoll的高效工作模式<br>LT模式只要事件没被处理就会一直通知</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;epoll.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// size 参数只是给内核一个提示, 事件表需要多大</span></span><br><span class=\"line\"><span class=\"comment\">// 函数返回其他所有epoll系统调用的第一个参数, 来指定要访问的内核事件表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">epoll_create</span><span class=\"params\">(<span class=\"keyword\">int</span> <span class=\"built_in\">size</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// epfd 为 epoll_create的返回值</span></span><br><span class=\"line\"><span class=\"comment\">// op为操作类型</span></span><br><span class=\"line\"><span class=\"comment\">// - EPOLL_CTL_ADD 向事件表中注册fd上的事件</span></span><br><span class=\"line\"><span class=\"comment\">// - EPOLL_CTL_MOD 修改fd上的注册事件</span></span><br><span class=\"line\"><span class=\"comment\">// - EPOLL_CTL_DEL 删除fd上的注册事件</span></span><br><span class=\"line\"><span class=\"comment\">// fd 为要操作的文件描述符</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">epoll_ctl</span><span class=\"params\">(<span class=\"keyword\">int</span> epfd, <span class=\"keyword\">int</span> op, <span class=\"keyword\">int</span> fd, struct epoll_event* event)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epoll_event</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">_uint32_t</span> events; <span class=\"comment\">// epoll事件</span></span><br><span class=\"line\">\t<span class=\"keyword\">epoll_data_t</span> data; <span class=\"comment\">// 用户数据 是一个联合体</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">union</span> epoll_data</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span>* ptr; <span class=\"comment\">// ptr fd 不能同时使用</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> fd;</span><br><span class=\"line\">\t<span class=\"keyword\">uint32_t</span> u32;</span><br><span class=\"line\">\t<span class=\"keyword\">uint64_t</span> u64;</span><br><span class=\"line\">&#125;<span class=\"keyword\">epoll_data_t</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// maxevents监听事件数 必须大于0</span></span><br><span class=\"line\"><span class=\"comment\">// timeout 为-1 表示阻塞</span></span><br><span class=\"line\"><span class=\"comment\">// 成功返回就绪的文件描述符个数 失败返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">epoll_wait</span><span class=\"params\">(<span class=\"keyword\">int</span> epfd, struct epoll_event* events, <span class=\"keyword\">int</span> maxevents, <span class=\"keyword\">int</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三种IO复用的比较\"><a href=\"#三种IO复用的比较\" class=\"headerlink\" title=\"三种IO复用的比较\"></a>三种IO复用的比较</h2><p><code>select</code>以及<code>poll</code>和<code>epoll</code><br>相同</p>\n<ul>\n<li>都能同时监听多个文件描述符, 都将等待timeout参数指定的超时时间, 直到一个或多个文件描述符上有事件发生.</li>\n<li>返回值为就绪的文件描述符数量, 返回0则表示没有事件发生</li>\n<li><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E4%B8%89%E7%A7%8DIO%E5%A4%8D%E7%94%A8%E6%AF%94%E8%BE%83.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"I-O-复用的高级应用-非阻塞connect\"><a href=\"#I-O-复用的高级应用-非阻塞connect\" class=\"headerlink\" title=\"I/O 复用的高级应用, 非阻塞connect\"></a>I/O 复用的高级应用, 非阻塞connect</h2><p>connect出错的时候会返回一个errno值 EINPROGRESS - 表示对非阻塞socket调用connect, 连接又没有立即建立的时候, 这时可以调用select和poll函数来监听这个连接失败的socket上的可写事件.</p>\n<p>当函数返回的时候, 可以用getsockopt来读取错误码, 并清楚该socket上的错误. 错误码为0表示成功</p>\n<h1 id=\"第十章信号\"><a href=\"#第十章信号\" class=\"headerlink\" title=\"第十章信号\"></a>第十章信号</h1><h2 id=\"Api\"><a href=\"#Api\" class=\"headerlink\" title=\"Api\"></a>Api</h2><p>发送信号Api</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// pid &gt; 0 发送给PID为pid标识的进程</span></span><br><span class=\"line\"><span class=\"comment\">//  0 发送给本进程组的其他进程</span></span><br><span class=\"line\"><span class=\"comment\">// -1 发送给进程以外的所有进程, 但发送者需要有对目标进程发送信号的权限</span></span><br><span class=\"line\"><span class=\"comment\">// &lt; -1 发送给组ID为 -pid 的进程组中的所有成员</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 出错信息 EINVAL 无效信号, EPERM 该进程没有权限给任何一个目标进程 ESRCH 目标进程(组) 不存在</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">kill</span><span class=\"params\">(<span class=\"keyword\">pid_t</span> pid, <span class=\"keyword\">int</span> sig)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>接收信号Api</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span><span class=\"params\">(*<span class=\"keyword\">_sighandler_t</span>)</span> <span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/signum.h&gt; // 此头文件中有所有的linux可用信号</span></span></span><br><span class=\"line\"><span class=\"comment\">// 忽略目标信号</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SIG_DFL ((_sighandler_t) 0)</span></span><br><span class=\"line\"><span class=\"comment\">// 使用信号的默认处理方式</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SIG_IGN ((_sighandler_t) 1)</span></span><br></pre></td></tr></table></figure>\n<p>常用信号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SIGHUP 控制终端挂起</span><br><span class=\"line\">SIGPIPE 往读端被关闭的管道或者socket连接中写数据</span><br><span class=\"line\">SIGURG socket连接上收到紧急数据</span><br><span class=\"line\">SIGALRM 由alarm或setitimer设置的实时闹钟超时引起</span><br><span class=\"line\">SIGCHLD 子进程状态变化</span><br></pre></td></tr></table></figure>\n<p>信号函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 为一个信号设置处理函数</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// _handler 指定sig的处理函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">_sighandler_t</span> <span class=\"title\">signal</span><span class=\"params\">(<span class=\"keyword\">int</span> sig, <span class=\"keyword\">__sighandler_t</span> _handler)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sigaction</span><span class=\"params\">(<span class=\"keyword\">int</span> sig, struct sigaction* act, struct sigaction* oact)</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>信号是用户, 系统, 或者进程发送给目标进程的信息, 以通知目标进程某个状态的改变或者系统异常.<br>产生条件</p>\n<ul>\n<li>对于前台进程<br>用户可以通过输入特殊的终端字符来给它发送信号, CTRL+C 通常为一个中断信号 <code>SIGINT</code></li>\n<li>系统异常<br>浮点异常和非法内存段的访问</li>\n<li>系统状态变化<br>由alarm定时器到期将引起<code>SIGALRM</code>信号</li>\n<li>运行kill命令或调用kill函数</li>\n</ul>\n<p><em>服务器必须处理(至少忽略) 一些常见的信号, 以免异常终止</em></p>\n<p>中断系统调用?</p>\n<h1 id=\"第十一章定时器\"><a href=\"#第十一章定时器\" class=\"headerlink\" title=\"第十一章定时器\"></a>第十一章定时器</h1><h2 id=\"socket选项SO-RCVTIMEO-和-SO-SNDTIMEO\"><a href=\"#socket选项SO-RCVTIMEO-和-SO-SNDTIMEO\" class=\"headerlink\" title=\"socket选项SO_RCVTIMEO 和 SO_SNDTIMEO\"></a>socket选项<code>SO_RCVTIMEO</code> 和 <code>SO_SNDTIMEO</code></h2><p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/SO_RCVTIMEO%E5%92%8CSO_SNDTIMEO%E9%80%89%E9%A1%B9%E7%9A%84%E4%BD%9C%E7%94%A8.png\" alt=\"\"></p>\n<p>使用示例, 通过设置对应的SO_SNDTIMEO 得到超时后的路线</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">timeout_connect</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* ip, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> port, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> sec)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">address</span>&#123;</span>&#125;;</span><br><span class=\"line\">    address.sin_family = AF_INET;</span><br><span class=\"line\">    address.sin_port = htons(port);</span><br><span class=\"line\">    address.sin_addr.s_addr = inet_addr(ip);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sockfd = socket(PF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">    exit_if(sockfd &lt; <span class=\"number\">0</span>, <span class=\"string\">\"socket error\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">timeout</span>&#123;</span>&#125;;</span><br><span class=\"line\">    timeout.tv_sec = sec;</span><br><span class=\"line\">    timeout.tv_usec = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">socklen_t</span> timeout_len = <span class=\"keyword\">sizeof</span>(timeout);</span><br><span class=\"line\"></span><br><span class=\"line\">    setsockopt(sockfd, SOL_SOCKET, SO_SNDTIMEO, &amp;timeout, timeout_len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"built_in\">connect</span>(sockfd, (struct sockaddr*)&amp;address, <span class=\"keyword\">sizeof</span>(address));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 当 errno为EINPROGRESS 说明 等待了 10S后依然无法连接成功 实现了定时器</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (errno == EINPROGRESS)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"connecting timeout, process timeout logic\\n\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"error occur when connecting to server\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sockfd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    exit_if(argc &lt;= <span class=\"number\">2</span>, <span class=\"string\">\"wrong number of parameters\\n\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* ip = argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> port = atoi(argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sockfd = timeout_connect(ip, port, <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sockfd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SIGALRM信号-基于升序链表的定时器\"><a href=\"#SIGALRM信号-基于升序链表的定时器\" class=\"headerlink\" title=\"SIGALRM信号-基于升序链表的定时器\"></a>SIGALRM信号-基于升序链表的定时器</h2><p>由alarm和setitimer函数设定的实时闹钟一旦超时, 将会触发SIGALRM信号, 用信号处理函数处理定时任务<br> 相关的代码放在了github上 代码还是很多的就不放上来了<a href=\"https://github.com/rjd67441/Notes-HighPerformanceLinuxServerProgramming/tree/master/12.%20%E4%BB%A3%E7%A0%81%E6%B8%85%E5%8D%9511-2%E5%92%8C11-3%E5%8F%8A11-4%20%E9%93%BE%E8%A1%A8%E5%AE%9A%E6%97%B6%E5%99%A8%2C%20%E5%A4%84%E7%90%86%E9%9D%9E%E6%B4%BB%E5%8A%A8%E8%BF%9E%E6%8E%A5\" target=\"_blank\" rel=\"noopener\">连接</a></p>\n<p>总结放在了 日记的博客上 链接后面再甩出来</p>\n<h2 id=\"IO复用系统调用的超时参数\"><a href=\"#IO复用系统调用的超时参数\" class=\"headerlink\" title=\"IO复用系统调用的超时参数\"></a>IO复用系统调用的超时参数</h2><h2 id=\"高性能定时器\"><a href=\"#高性能定时器\" class=\"headerlink\" title=\"高性能定时器\"></a>高性能定时器</h2><h2 id=\"时间轮\"><a href=\"#时间轮\" class=\"headerlink\" title=\"# 时间轮\"></a># 时间轮</h2><h2 id=\"时间堆\"><a href=\"#时间堆\" class=\"headerlink\" title=\"# 时间堆\"></a># 时间堆</h2><h1 id=\"第十二章高性能IO框架库\"><a href=\"#第十二章高性能IO框架库\" class=\"headerlink\" title=\"第十二章高性能IO框架库\"></a>第十二章高性能IO框架库</h1><p>另出一篇博客</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"第九章-I-O复用\"><a href=\"#第九章-I-O复用\" class=\"headerlink\" title=\"第九章 I/O复用\"></a>第九章 I/O复用</h1><p>I/O复用使得程序能同时监听多个文件描述符.</p>\n<ul>\n<li>客户端程序需要同时处理多个socket 非阻塞connect技术</li>\n<li>客户端程序同时处理用户输入和网络连接 聊天室程序</li>\n<li>TCP服务器要同时处理监听socket和连接socket</li>\n<li>同时处理TCP和UDP请求 - 回射服务器</li>\n<li>同时监听多个端口, 或者处理多种服务 - xinetd服务器</li>\n</ul>\n<p>常用手段<code>select</code>, <code>poll</code>, <code>epoll</code></p>\n<h2 id=\"select\"><a href=\"#select\" class=\"headerlink\" title=\"select\"></a>select</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/select.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// nfds - 被监听的文件描述符总数</span></span><br><span class=\"line\"><span class=\"comment\">// 后面三个分别指向 可读, 可写, 异常等事件对应的文件描述符集合</span></span><br><span class=\"line\"><span class=\"comment\">// timeval select超时时间 如果传递0 则为非阻塞, 设置为NULL则为阻塞</span></span><br><span class=\"line\"><span class=\"comment\">// 成功返回就绪(可读, 可写, 异常)文件描述符的总数, 没有则返回0 失败返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">select</span> <span class=\"params\">(<span class=\"keyword\">int</span> nfds, fd_set* readfds, fd_set* writefds, fd_set* exceptfds, struct timeval* timeout)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//操作fd_set的宏</span></span><br><span class=\"line\">FD_ZERO(fd_set* fdset);</span><br><span class=\"line\">FD_SET(<span class=\"keyword\">int</span> fd, fd_set* fdset);</span><br><span class=\"line\">FD_CLR(<span class=\"keyword\">int</span> fd, fd_set* fdset);</span><br><span class=\"line\">FD_ISSET(<span class=\"keyword\">int</span> fd, fd_set* fdset);</span><br><span class=\"line\"><span class=\"comment\">// 设置 timeval 超时时间</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> tv_sec; <span class=\"comment\">// 秒</span></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> tv_usec; <span class=\"comment\">// 微秒</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>select</strong></p>\n<p>文件描述符就绪条件</p>\n<ul>\n<li>socket内核接收缓存区中的字节数大于或等于 其低水位标记</li>\n<li>socket通信的对方关闭连接, 对socket的读操作返回0</li>\n<li>监听socket上有新的连接请求</li>\n<li>socket上有未处理的错误, 可以使用getsockopt来读取和清除错误</li>\n<li>socket内核的发送缓冲区的可用字节数大于或等于 其低水位标记</li>\n<li>socket的写操作被关闭, 对被关闭的socket执行写操作将会触发一个SIGPIPE信号</li>\n<li>socket使用非阻塞connect 连接成功或失败后<h2 id=\"poll\"><a href=\"#poll\" class=\"headerlink\" title=\"poll\"></a>poll</h2></li>\n</ul>\n<p><strong>poll</strong><br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/poll%E6%97%B6%E9%97%B4%E7%B1%BB%E5%9E%8B1.png\" alt=\"\"><br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/poll%E6%97%B6%E9%97%B4%E7%B1%BB%E5%9E%8B2.png\" alt=\"\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;poll.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// fds 结构体类型数组 指定我们感兴趣的文件描述符上发生的可读可写和异常事件\\</span></span><br><span class=\"line\"><span class=\"comment\">// nfds 遍历结合大小 左闭右开</span></span><br><span class=\"line\"><span class=\"comment\">// timeout 单位为毫秒 -1 为阻塞 0 为立即返回</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">poll</span><span class=\"params\">(struct pollfd* fds, <span class=\"keyword\">nfds_t</span> nfds, <span class=\"keyword\">int</span> timeout)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pollfd</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> fd;</span><br><span class=\"line\">\tshort events;  <span class=\"comment\">//注册的事件, 告知poll监听fd上的哪些事件</span></span><br><span class=\"line\">\tshort revents; <span class=\"comment\">// 实际发生的事件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> exit_if(r, ...) \\</span></span><br><span class=\"line\">&#123;   \\</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r)  \\</span><br><span class=\"line\">    &#123;   \\</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(__VA_ARGS__);    \\</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"errno no: %d, error msg is %s\"</span>, errno, strerror(errno));    \\</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);    \\</span><br><span class=\"line\">    &#125;   \\</span><br><span class=\"line\">&#125;   \\</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">client_info</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *ip_;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> port_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> port = <span class=\"number\">8001</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ip[] = <span class=\"string\">\"127.0.0.1\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">address</span>;</span></span><br><span class=\"line\">    address.sin_port = htons(port);</span><br><span class=\"line\">    address.sin_family = AF_INET;</span><br><span class=\"line\">    address.sin_addr.s_addr = htons(INADDR_ANY);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> listenfd = socket(PF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">    exit_if(listenfd &lt; <span class=\"number\">0</span>, <span class=\"string\">\"socket error\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret = bind(listenfd, (struct sockaddr*)&amp;address, <span class=\"keyword\">sizeof</span>(address));</span><br><span class=\"line\">    exit_if(ret == <span class=\"number\">-1</span>, <span class=\"string\">\"bind error\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    ret = <span class=\"built_in\">listen</span>(listenfd, <span class=\"number\">5</span>);</span><br><span class=\"line\">    exit_if(ret == <span class=\"number\">-1</span>, <span class=\"string\">\"listen error\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> <span class=\"keyword\">int</span> MAX_CLIENTS = <span class=\"number\">1024</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pollfd</span> <span class=\"title\">polls</span>[<span class=\"title\">MAX_CLIENTS</span>] = &#123;</span>&#125;;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">client_info</span> <span class=\"title\">clientsinfo</span>[<span class=\"title\">MAX_CLIENTS</span>] = &#123;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    polls[<span class=\"number\">3</span>].fd = listenfd;</span><br><span class=\"line\">    polls[<span class=\"number\">3</span>].events = POLLIN | POLLRDHUP;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ret = poll(polls, MAX_CLIENTS + <span class=\"number\">1</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">        exit_if(ret == <span class=\"number\">-1</span>, <span class=\"string\">\"poll error\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &lt;= MAX_CLIENTS; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> fd = polls[i].fd;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (polls[i].revents &amp; POLLRDHUP)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                polls[i].events = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"close fd-%d from %s:%d\\n\"</span>, fd, clientsinfo[fd].ip_, clientsinfo[fd].port_);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (polls[i].revents &amp; POLLIN)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fd == listenfd)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">client_address</span>;</span></span><br><span class=\"line\">                    <span class=\"keyword\">socklen_t</span> client_addresslen = <span class=\"keyword\">sizeof</span>(client_address);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">int</span> clientfd = accept(listenfd, (struct sockaddr*)&amp;client_address,</span><br><span class=\"line\">                            &amp;client_addresslen);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">client_info</span> *<span class=\"title\">clientinfo</span> = &amp;<span class=\"title\">clientsinfo</span>[<span class=\"title\">clientfd</span>];</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    clientinfo-&gt;ip_ = inet_ntoa(client_address.sin_addr);</span><br><span class=\"line\">                    clientinfo-&gt;port_ = ntohs(client_address.sin_port);</span><br><span class=\"line\"></span><br><span class=\"line\">                    exit_if(clientfd &lt; <span class=\"number\">0</span>, <span class=\"string\">\"accpet error, from %s:%d\\n\"</span>, clientinfo-&gt;ip_,</span><br><span class=\"line\">                            clientinfo-&gt;port_);</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">\"accept from %s:%d\\n\"</span>, clientinfo-&gt;ip_, clientinfo-&gt;port_);</span><br><span class=\"line\"></span><br><span class=\"line\">                    polls[clientfd].fd = clientfd;</span><br><span class=\"line\">                    polls[clientfd].events = POLLIN | POLLRDHUP;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">char</span> <span class=\"built_in\">buffer</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">                    <span class=\"built_in\">memset</span>(<span class=\"built_in\">buffer</span>, <span class=\"string\">'\\0'</span>, <span class=\"keyword\">sizeof</span>(<span class=\"built_in\">buffer</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">                    ret = <span class=\"built_in\">read</span>(fd, <span class=\"built_in\">buffer</span>, <span class=\"number\">1024</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(ret == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">close</span>(fd);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">printf</span>(<span class=\"string\">\"recv from %s:%d:\\n%s\\n\"</span>, clientsinfo[fd].ip_,</span><br><span class=\"line\">                               clientsinfo[fd].port_, <span class=\"built_in\">buffer</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"epoll\"><a href=\"#epoll\" class=\"headerlink\" title=\"epoll\"></a>epoll</h2><p><strong>epoll</strong></p>\n<p>epoll是Linux特有的I/O复用函数, 实现上与select,poll有很大的差异</p>\n<ul>\n<li>epoll使用一组函数完成任务</li>\n<li>epoll把用户关心的文件描述符上的事件放在内核里的一个事件表中</li>\n<li>epoll无需每次调用都传入文件描述符集或事件集.</li>\n</ul>\n<p>有特定的文件描述符创建函数, 来标识这个事件表<code>epoll_create()</code><br><code>epoll_ctl()</code> 用来操作这个内核事件表<br><code>epoll_wait()</code> 为主要函数 成功返回就绪的文件描述符个数 失败返回-1<br>如果<code>epoll_wait()</code>函数检测到事件,就将所有就绪的事件从内核事件表(由第一个参数, epoll_create返回的结果) 中复制到第二个参数event指向的数组中, 这个数组只用于输出<code>epoll_wait</code>检测到的就绪事件.</p>\n<p><em>event不同于select和poll的数组参数 既用于传入用户注册的事件, 又用于输出内核检测到的就绪事件, 提高了效率</em></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 索引poll返回的就绪文件描述符</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> ret = poll(fds, MAX_EVENT_NUMBER - <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// 遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; MAX_EVENT_NUMBER; ++i) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(fds[i].revents &amp; POLLIN) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sockfd = fds[i].fd;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 索引epoll返回的就绪文件描述符</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> ret = epoll_wait(epoll_fd, events, MAX_EVENT_NUMBER,  <span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ret; i++) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sockfd = events[i].data.fd;</span><br><span class=\"line\">\t<span class=\"comment\">// sockfd 一定就绪 ?????</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>LT和ET模式</strong><br>LT(电平触发, 默认的工作模式)<br>LT模式下的epoll相当于一个效率较高的poll<br>epoll_wait将会一只通知一个事件知道这个事件被处理</p>\n<p>ET(边沿触发, epoll的高效工作模式)模式<br>当向epoll内核事件表中注册一个文件描述符上的EPOLLET事件的时候, epoll将用ET模式来操作这个<br>文件描述符<br>epoll_wait只会通知一次, 不论这个事件有没有完成</p>\n<p>ET模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; 123456789-123456789-123456789</span><br><span class=\"line\">event trigger once</span><br><span class=\"line\">get 9bytes of content: 123456789</span><br><span class=\"line\">get 9bytes of content: -12345678</span><br><span class=\"line\">get 9bytes of content: 9-1234567</span><br><span class=\"line\">get 4bytes of content: 89</span><br><span class=\"line\">read later</span><br></pre></td></tr></table></figure>\n<p>LT模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; 123456789-123456789-123456789</span><br><span class=\"line\">event trigger once</span><br><span class=\"line\">get 9bytes of contents: 123456789</span><br><span class=\"line\">event trigger once</span><br><span class=\"line\">get 9bytes of contents: -12345678</span><br><span class=\"line\">event trigger once</span><br><span class=\"line\">get 9bytes of contents: 9-1234567</span><br><span class=\"line\">event trigger once</span><br><span class=\"line\">get 4bytes of contents: 89</span><br></pre></td></tr></table></figure>\n<p>ET模式有任务到来就必须做完, 因为后续将不会继续通知这个事件, 所以ET是epoll的高效工作模式<br>LT模式只要事件没被处理就会一直通知</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;epoll.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// size 参数只是给内核一个提示, 事件表需要多大</span></span><br><span class=\"line\"><span class=\"comment\">// 函数返回其他所有epoll系统调用的第一个参数, 来指定要访问的内核事件表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">epoll_create</span><span class=\"params\">(<span class=\"keyword\">int</span> <span class=\"built_in\">size</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// epfd 为 epoll_create的返回值</span></span><br><span class=\"line\"><span class=\"comment\">// op为操作类型</span></span><br><span class=\"line\"><span class=\"comment\">// - EPOLL_CTL_ADD 向事件表中注册fd上的事件</span></span><br><span class=\"line\"><span class=\"comment\">// - EPOLL_CTL_MOD 修改fd上的注册事件</span></span><br><span class=\"line\"><span class=\"comment\">// - EPOLL_CTL_DEL 删除fd上的注册事件</span></span><br><span class=\"line\"><span class=\"comment\">// fd 为要操作的文件描述符</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">epoll_ctl</span><span class=\"params\">(<span class=\"keyword\">int</span> epfd, <span class=\"keyword\">int</span> op, <span class=\"keyword\">int</span> fd, struct epoll_event* event)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epoll_event</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">_uint32_t</span> events; <span class=\"comment\">// epoll事件</span></span><br><span class=\"line\">\t<span class=\"keyword\">epoll_data_t</span> data; <span class=\"comment\">// 用户数据 是一个联合体</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">union</span> epoll_data</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span>* ptr; <span class=\"comment\">// ptr fd 不能同时使用</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> fd;</span><br><span class=\"line\">\t<span class=\"keyword\">uint32_t</span> u32;</span><br><span class=\"line\">\t<span class=\"keyword\">uint64_t</span> u64;</span><br><span class=\"line\">&#125;<span class=\"keyword\">epoll_data_t</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// maxevents监听事件数 必须大于0</span></span><br><span class=\"line\"><span class=\"comment\">// timeout 为-1 表示阻塞</span></span><br><span class=\"line\"><span class=\"comment\">// 成功返回就绪的文件描述符个数 失败返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">epoll_wait</span><span class=\"params\">(<span class=\"keyword\">int</span> epfd, struct epoll_event* events, <span class=\"keyword\">int</span> maxevents, <span class=\"keyword\">int</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三种IO复用的比较\"><a href=\"#三种IO复用的比较\" class=\"headerlink\" title=\"三种IO复用的比较\"></a>三种IO复用的比较</h2><p><code>select</code>以及<code>poll</code>和<code>epoll</code><br>相同</p>\n<ul>\n<li>都能同时监听多个文件描述符, 都将等待timeout参数指定的超时时间, 直到一个或多个文件描述符上有事件发生.</li>\n<li>返回值为就绪的文件描述符数量, 返回0则表示没有事件发生</li>\n<li><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E4%B8%89%E7%A7%8DIO%E5%A4%8D%E7%94%A8%E6%AF%94%E8%BE%83.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"I-O-复用的高级应用-非阻塞connect\"><a href=\"#I-O-复用的高级应用-非阻塞connect\" class=\"headerlink\" title=\"I/O 复用的高级应用, 非阻塞connect\"></a>I/O 复用的高级应用, 非阻塞connect</h2><p>connect出错的时候会返回一个errno值 EINPROGRESS - 表示对非阻塞socket调用connect, 连接又没有立即建立的时候, 这时可以调用select和poll函数来监听这个连接失败的socket上的可写事件.</p>\n<p>当函数返回的时候, 可以用getsockopt来读取错误码, 并清楚该socket上的错误. 错误码为0表示成功</p>\n<h1 id=\"第十章信号\"><a href=\"#第十章信号\" class=\"headerlink\" title=\"第十章信号\"></a>第十章信号</h1><h2 id=\"Api\"><a href=\"#Api\" class=\"headerlink\" title=\"Api\"></a>Api</h2><p>发送信号Api</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// pid &gt; 0 发送给PID为pid标识的进程</span></span><br><span class=\"line\"><span class=\"comment\">//  0 发送给本进程组的其他进程</span></span><br><span class=\"line\"><span class=\"comment\">// -1 发送给进程以外的所有进程, 但发送者需要有对目标进程发送信号的权限</span></span><br><span class=\"line\"><span class=\"comment\">// &lt; -1 发送给组ID为 -pid 的进程组中的所有成员</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 出错信息 EINVAL 无效信号, EPERM 该进程没有权限给任何一个目标进程 ESRCH 目标进程(组) 不存在</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">kill</span><span class=\"params\">(<span class=\"keyword\">pid_t</span> pid, <span class=\"keyword\">int</span> sig)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>接收信号Api</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span><span class=\"params\">(*<span class=\"keyword\">_sighandler_t</span>)</span> <span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/signum.h&gt; // 此头文件中有所有的linux可用信号</span></span></span><br><span class=\"line\"><span class=\"comment\">// 忽略目标信号</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SIG_DFL ((_sighandler_t) 0)</span></span><br><span class=\"line\"><span class=\"comment\">// 使用信号的默认处理方式</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SIG_IGN ((_sighandler_t) 1)</span></span><br></pre></td></tr></table></figure>\n<p>常用信号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SIGHUP 控制终端挂起</span><br><span class=\"line\">SIGPIPE 往读端被关闭的管道或者socket连接中写数据</span><br><span class=\"line\">SIGURG socket连接上收到紧急数据</span><br><span class=\"line\">SIGALRM 由alarm或setitimer设置的实时闹钟超时引起</span><br><span class=\"line\">SIGCHLD 子进程状态变化</span><br></pre></td></tr></table></figure>\n<p>信号函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 为一个信号设置处理函数</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// _handler 指定sig的处理函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">_sighandler_t</span> <span class=\"title\">signal</span><span class=\"params\">(<span class=\"keyword\">int</span> sig, <span class=\"keyword\">__sighandler_t</span> _handler)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sigaction</span><span class=\"params\">(<span class=\"keyword\">int</span> sig, struct sigaction* act, struct sigaction* oact)</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>信号是用户, 系统, 或者进程发送给目标进程的信息, 以通知目标进程某个状态的改变或者系统异常.<br>产生条件</p>\n<ul>\n<li>对于前台进程<br>用户可以通过输入特殊的终端字符来给它发送信号, CTRL+C 通常为一个中断信号 <code>SIGINT</code></li>\n<li>系统异常<br>浮点异常和非法内存段的访问</li>\n<li>系统状态变化<br>由alarm定时器到期将引起<code>SIGALRM</code>信号</li>\n<li>运行kill命令或调用kill函数</li>\n</ul>\n<p><em>服务器必须处理(至少忽略) 一些常见的信号, 以免异常终止</em></p>\n<p>中断系统调用?</p>\n<h1 id=\"第十一章定时器\"><a href=\"#第十一章定时器\" class=\"headerlink\" title=\"第十一章定时器\"></a>第十一章定时器</h1><h2 id=\"socket选项SO-RCVTIMEO-和-SO-SNDTIMEO\"><a href=\"#socket选项SO-RCVTIMEO-和-SO-SNDTIMEO\" class=\"headerlink\" title=\"socket选项SO_RCVTIMEO 和 SO_SNDTIMEO\"></a>socket选项<code>SO_RCVTIMEO</code> 和 <code>SO_SNDTIMEO</code></h2><p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/SO_RCVTIMEO%E5%92%8CSO_SNDTIMEO%E9%80%89%E9%A1%B9%E7%9A%84%E4%BD%9C%E7%94%A8.png\" alt=\"\"></p>\n<p>使用示例, 通过设置对应的SO_SNDTIMEO 得到超时后的路线</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">timeout_connect</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* ip, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> port, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> sec)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">address</span>&#123;</span>&#125;;</span><br><span class=\"line\">    address.sin_family = AF_INET;</span><br><span class=\"line\">    address.sin_port = htons(port);</span><br><span class=\"line\">    address.sin_addr.s_addr = inet_addr(ip);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sockfd = socket(PF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">    exit_if(sockfd &lt; <span class=\"number\">0</span>, <span class=\"string\">\"socket error\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">timeout</span>&#123;</span>&#125;;</span><br><span class=\"line\">    timeout.tv_sec = sec;</span><br><span class=\"line\">    timeout.tv_usec = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">socklen_t</span> timeout_len = <span class=\"keyword\">sizeof</span>(timeout);</span><br><span class=\"line\"></span><br><span class=\"line\">    setsockopt(sockfd, SOL_SOCKET, SO_SNDTIMEO, &amp;timeout, timeout_len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"built_in\">connect</span>(sockfd, (struct sockaddr*)&amp;address, <span class=\"keyword\">sizeof</span>(address));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 当 errno为EINPROGRESS 说明 等待了 10S后依然无法连接成功 实现了定时器</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (errno == EINPROGRESS)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"connecting timeout, process timeout logic\\n\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"error occur when connecting to server\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sockfd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    exit_if(argc &lt;= <span class=\"number\">2</span>, <span class=\"string\">\"wrong number of parameters\\n\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* ip = argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> port = atoi(argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sockfd = timeout_connect(ip, port, <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sockfd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SIGALRM信号-基于升序链表的定时器\"><a href=\"#SIGALRM信号-基于升序链表的定时器\" class=\"headerlink\" title=\"SIGALRM信号-基于升序链表的定时器\"></a>SIGALRM信号-基于升序链表的定时器</h2><p>由alarm和setitimer函数设定的实时闹钟一旦超时, 将会触发SIGALRM信号, 用信号处理函数处理定时任务<br> 相关的代码放在了github上 代码还是很多的就不放上来了<a href=\"https://github.com/rjd67441/Notes-HighPerformanceLinuxServerProgramming/tree/master/12.%20%E4%BB%A3%E7%A0%81%E6%B8%85%E5%8D%9511-2%E5%92%8C11-3%E5%8F%8A11-4%20%E9%93%BE%E8%A1%A8%E5%AE%9A%E6%97%B6%E5%99%A8%2C%20%E5%A4%84%E7%90%86%E9%9D%9E%E6%B4%BB%E5%8A%A8%E8%BF%9E%E6%8E%A5\" target=\"_blank\" rel=\"noopener\">连接</a></p>\n<p>总结放在了 日记的博客上 链接后面再甩出来</p>\n<h2 id=\"IO复用系统调用的超时参数\"><a href=\"#IO复用系统调用的超时参数\" class=\"headerlink\" title=\"IO复用系统调用的超时参数\"></a>IO复用系统调用的超时参数</h2><h2 id=\"高性能定时器\"><a href=\"#高性能定时器\" class=\"headerlink\" title=\"高性能定时器\"></a>高性能定时器</h2><h2 id=\"时间轮\"><a href=\"#时间轮\" class=\"headerlink\" title=\"# 时间轮\"></a># 时间轮</h2><h2 id=\"时间堆\"><a href=\"#时间堆\" class=\"headerlink\" title=\"# 时间堆\"></a># 时间堆</h2><h1 id=\"第十二章高性能IO框架库\"><a href=\"#第十二章高性能IO框架库\" class=\"headerlink\" title=\"第十二章高性能IO框架库\"></a>第十二章高性能IO框架库</h1><p>另出一篇博客</p>\n"},{"title":"3DMAX快捷键及基础知识","date":"2020-02-16T08:37:08.000Z","img":"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%B0%81%E9%9D%A2/3dmax%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.jpg","_content":"\n由于自己日后可能需要使用3d建模, 所以今天学习了下. 为了速成 看的B站的一个视频. 感觉效果还行吧.\n基础的建模可以完成了, 后续需要的话 再继续学习\n\n|按键|功能|\n|---|---|\n|||\n|shift|绘制直线|\n|删除键|可以回退一次|\n|||\n|W|移动|\n|E|旋转|\n|R|缩放|\n|||\n|F3|线框显示模式|\n|F4|实体+线框限时模式|\n|||\n|Shift|按住可以复制|\n|||\n|Alt+T+A|阵列|\n|Alt+T+M|镜像|\n|Alt+A+对齐|\n|Shitf+I|间隔工具|\n|||\n|Ctrl+X|专家模式, 隐藏所有多余的东西 获得最大的空间|\n|Alt+X|半透明显示|\n|Ctrl+Shift+X|变换虚拟体显示切换 可以看到变换虚拟体的明显变化|\n|O|自适应降级|\n\n**编辑样条线->顶点**\n优化 在线上添加点\n焊接 连接两点\n自动焊接 两点在距离之内自动焊接\n\n**车削修改器**\n将二维图形 指定一个轴然后旋转 得到立体图形\n\n**可编辑多边形**\n*细分曲面*\n迭代次数2-3\n无需子层级修改后 可以勾选 等值线显示(勾选后 显示真实的渲染线? 不勾选显得线条少 利于编辑子层面)\n*细分置换-经常使用置换网格WSM修改器*\n需要给立体图形 设置好材质球 材质球需要置换这个属性的贴图\n*绘制变形-未学-用于雕刻地形*\n**倒角剖面和扫描的区别**\n1. 结合点不同\n2. 倒角剖面不能用三维轮廓, 扫描可以使用三维轮廓\n3. 倒角剖面不能将 图形包含图形(一个圆中再画一个圆) 的图形作为剖面,扫描可以.","source":"_posts/3DMAX-3dmax快捷键及基础知识.md","raw":"---\ntitle: 3DMAX快捷键及基础知识\ndate: 2020-02-16 16:37:08\ntags:\n  - 3DMAX\ncategories:\n  - 3DMAX\nimg: https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%B0%81%E9%9D%A2/3dmax%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.jpg\n---\n\n由于自己日后可能需要使用3d建模, 所以今天学习了下. 为了速成 看的B站的一个视频. 感觉效果还行吧.\n基础的建模可以完成了, 后续需要的话 再继续学习\n\n|按键|功能|\n|---|---|\n|||\n|shift|绘制直线|\n|删除键|可以回退一次|\n|||\n|W|移动|\n|E|旋转|\n|R|缩放|\n|||\n|F3|线框显示模式|\n|F4|实体+线框限时模式|\n|||\n|Shift|按住可以复制|\n|||\n|Alt+T+A|阵列|\n|Alt+T+M|镜像|\n|Alt+A+对齐|\n|Shitf+I|间隔工具|\n|||\n|Ctrl+X|专家模式, 隐藏所有多余的东西 获得最大的空间|\n|Alt+X|半透明显示|\n|Ctrl+Shift+X|变换虚拟体显示切换 可以看到变换虚拟体的明显变化|\n|O|自适应降级|\n\n**编辑样条线->顶点**\n优化 在线上添加点\n焊接 连接两点\n自动焊接 两点在距离之内自动焊接\n\n**车削修改器**\n将二维图形 指定一个轴然后旋转 得到立体图形\n\n**可编辑多边形**\n*细分曲面*\n迭代次数2-3\n无需子层级修改后 可以勾选 等值线显示(勾选后 显示真实的渲染线? 不勾选显得线条少 利于编辑子层面)\n*细分置换-经常使用置换网格WSM修改器*\n需要给立体图形 设置好材质球 材质球需要置换这个属性的贴图\n*绘制变形-未学-用于雕刻地形*\n**倒角剖面和扫描的区别**\n1. 结合点不同\n2. 倒角剖面不能用三维轮廓, 扫描可以使用三维轮廓\n3. 倒角剖面不能将 图形包含图形(一个圆中再画一个圆) 的图形作为剖面,扫描可以.","slug":"3DMAX-3dmax快捷键及基础知识","published":1,"updated":"2020-02-17T14:48:59.145Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucy90003souo2wid3vx6","content":"<p>由于自己日后可能需要使用3d建模, 所以今天学习了下. 为了速成 看的B站的一个视频. 感觉效果还行吧.<br>基础的建模可以完成了, 后续需要的话 再继续学习</p>\n<table>\n<thead>\n<tr>\n<th>按键</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>shift</td>\n<td>绘制直线</td>\n</tr>\n<tr>\n<td>删除键</td>\n<td>可以回退一次</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>W</td>\n<td>移动</td>\n</tr>\n<tr>\n<td>E</td>\n<td>旋转</td>\n</tr>\n<tr>\n<td>R</td>\n<td>缩放</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>F3</td>\n<td>线框显示模式</td>\n</tr>\n<tr>\n<td>F4</td>\n<td>实体+线框限时模式</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Shift</td>\n<td>按住可以复制</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Alt+T+A</td>\n<td>阵列</td>\n</tr>\n<tr>\n<td>Alt+T+M</td>\n<td>镜像</td>\n</tr>\n<tr>\n<td>Alt+A+对齐</td>\n<td></td>\n</tr>\n<tr>\n<td>Shitf+I</td>\n<td>间隔工具</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Ctrl+X</td>\n<td>专家模式, 隐藏所有多余的东西 获得最大的空间</td>\n</tr>\n<tr>\n<td>Alt+X</td>\n<td>半透明显示</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+X</td>\n<td>变换虚拟体显示切换 可以看到变换虚拟体的明显变化</td>\n</tr>\n<tr>\n<td>O</td>\n<td>自适应降级</td>\n</tr>\n</tbody></table>\n<p><strong>编辑样条线-&gt;顶点</strong><br>优化 在线上添加点<br>焊接 连接两点<br>自动焊接 两点在距离之内自动焊接</p>\n<p><strong>车削修改器</strong><br>将二维图形 指定一个轴然后旋转 得到立体图形</p>\n<p><strong>可编辑多边形</strong><br><em>细分曲面</em><br>迭代次数2-3<br>无需子层级修改后 可以勾选 等值线显示(勾选后 显示真实的渲染线? 不勾选显得线条少 利于编辑子层面)<br><em>细分置换-经常使用置换网格WSM修改器</em><br>需要给立体图形 设置好材质球 材质球需要置换这个属性的贴图<br><em>绘制变形-未学-用于雕刻地形</em><br><strong>倒角剖面和扫描的区别</strong></p>\n<ol>\n<li>结合点不同</li>\n<li>倒角剖面不能用三维轮廓, 扫描可以使用三维轮廓</li>\n<li>倒角剖面不能将 图形包含图形(一个圆中再画一个圆) 的图形作为剖面,扫描可以.</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>由于自己日后可能需要使用3d建模, 所以今天学习了下. 为了速成 看的B站的一个视频. 感觉效果还行吧.<br>基础的建模可以完成了, 后续需要的话 再继续学习</p>\n<table>\n<thead>\n<tr>\n<th>按键</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>shift</td>\n<td>绘制直线</td>\n</tr>\n<tr>\n<td>删除键</td>\n<td>可以回退一次</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>W</td>\n<td>移动</td>\n</tr>\n<tr>\n<td>E</td>\n<td>旋转</td>\n</tr>\n<tr>\n<td>R</td>\n<td>缩放</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>F3</td>\n<td>线框显示模式</td>\n</tr>\n<tr>\n<td>F4</td>\n<td>实体+线框限时模式</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Shift</td>\n<td>按住可以复制</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Alt+T+A</td>\n<td>阵列</td>\n</tr>\n<tr>\n<td>Alt+T+M</td>\n<td>镜像</td>\n</tr>\n<tr>\n<td>Alt+A+对齐</td>\n<td></td>\n</tr>\n<tr>\n<td>Shitf+I</td>\n<td>间隔工具</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Ctrl+X</td>\n<td>专家模式, 隐藏所有多余的东西 获得最大的空间</td>\n</tr>\n<tr>\n<td>Alt+X</td>\n<td>半透明显示</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+X</td>\n<td>变换虚拟体显示切换 可以看到变换虚拟体的明显变化</td>\n</tr>\n<tr>\n<td>O</td>\n<td>自适应降级</td>\n</tr>\n</tbody></table>\n<p><strong>编辑样条线-&gt;顶点</strong><br>优化 在线上添加点<br>焊接 连接两点<br>自动焊接 两点在距离之内自动焊接</p>\n<p><strong>车削修改器</strong><br>将二维图形 指定一个轴然后旋转 得到立体图形</p>\n<p><strong>可编辑多边形</strong><br><em>细分曲面</em><br>迭代次数2-3<br>无需子层级修改后 可以勾选 等值线显示(勾选后 显示真实的渲染线? 不勾选显得线条少 利于编辑子层面)<br><em>细分置换-经常使用置换网格WSM修改器</em><br>需要给立体图形 设置好材质球 材质球需要置换这个属性的贴图<br><em>绘制变形-未学-用于雕刻地形</em><br><strong>倒角剖面和扫描的区别</strong></p>\n<ol>\n<li>结合点不同</li>\n<li>倒角剖面不能用三维轮廓, 扫描可以使用三维轮廓</li>\n<li>倒角剖面不能将 图形包含图形(一个圆中再画一个圆) 的图形作为剖面,扫描可以.</li>\n</ol>\n"},{"title":"C++Primer学习","date":"2019-08-16T11:13:22.000Z","top":80,"img":"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%B0%81%E9%9D%A2/C%2B%2BPrimer.png","_content":"\n# 基础知识\n## c++11 的{}初始方式\n```c++\n// c++11 的初始化方式, 有助于防范类型转换错误.\nint a1 = { 24 };\nint b1 = {}; // 默认为0\n\n// 没有 = 同样可以\nint a2 { 24 };\nint b2 {}; // 默认为0\n\nreturn 0;\n```\n\n无符号的变量在 超出范围的时候对应变化\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/C%2B%2B%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/%E6%9C%89%E7%AC%A6%E5%8F%B7%E5%92%8C%E6%97%A0%E7%AC%A6%E5%8F%B7%E7%9A%84%E9%87%8D%E7%BD%AE%E7%82%B9.jpg)\n\n\n## 转义字符表\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/C%2B%2B%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/c%2B%2B%E8%BD%AC%E4%B9%89.jpg)\n\n**char 在默认情况下, 既不是有符号. 也不是无符号.**\n```c++\nchar a; // 此时a可能是 signed char 也可能是 unsigned char 可能会在不同系统之前产生错误\n// 可以显式声明, 来确保不会出现此错误\nsigned char a;\nunsigned char a; \n```\n\n**输入**\n```c++\n\nchar name[10];\ncin.getline(name, 10); // 可以读取换行符, 但不保存\ncin.get(name, 10); // 不读取换行符, 可能导致get到换行符\n\n// 空行和超出长度问题 将在后面说明\n```\n运算符优先级\n![](https://gss2.bdstatic.com/-fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=59a3e1017d3e6709aa0d4dad5aaef458/63d9f2d3572c11df57c9a205612762d0f703c2f8.jpg)\n\n**基础的数组**\n```c++\nint a[] = {1, 2, 3, 4};\n// 下方由于 new 只是返回一个地址所以用 int* 接收 \nint* b = new int[4];\ncout << a[0] << endl; // 1\ncout << *(a + 1) << endl;// 2\n```\n**对指针解引用**\n第一印象是 解除引用, 然而并不是\n```c++\n/*\n\"*\"的作用是引用指针指向的变量值，引用其实就是引用该变量的地址，“解”就是把该地址对应的东西解开，解出来，就像打开一个包裹一样，那就是该变量的值了，所以称为“解引用”。也就是说，解引用是返回内存地址中保存的值。\n比如int a=10; int *p=&a;\ncout<<*p<<endl; 输出a的值，就是解引用操作。\n*/\n```\n## c 风格字符串相关\n对字符数组的赋值, 不建议使用 = 赋值, 可能会导致内存覆盖\n建议使用 `strncpy(目标位置, 字符串, 长度)` 然后手动在目标字符数组最后一位写入`\\0`\n这样安全, 不过这是c风格的, 在c++中可以使用**string来代替字符数组**\n\n## 自动变量 静态存储 动态存储\n自动变量\n```c++\nchar * getInut() {\n\tchar temp[100]; // 局部变量(自动变量), 函数结束时自动释放 存入栈中\n\tcin >> temp;\n\tchar* pn = new char[strlen(temp) + 1];\n\tstrcpy(pn, temp);\n\n\treturn pn;\n}\n```\n动态存储 通过new 和 delete操作内存池(自由存储空间, 堆)\n\n## 宏 异常处理  函数相关\n| 定义 | 说明 |\n| ----- | ----- |\n| `__FILE__` | 存放文件名的字符串字面值 |\n| `__LINE__` | 存放当前行号的整形字面值 |\n| `__TIME__` | 存放文件编译时间的字符串字面量 |\n| `__DATE__` | 存放文件编译日期的字符串字面值 |\n| `__VA_ARGS__` | 用来接受函数参数中`...`, 类似printf函数 |\n\n**异常处理**\n代码可以使用throw来抛出异常\n*大部分*可以指定msg来初始化异常\nthrow exception_type(\"msg\")\n表中exception不能指定msg, 来初始化, 除此外表中其他都需要msg初始\n\n| 错误名称        | 对应原因                       |\n| ---------------- | ---------------------------------- |\n| exception        | 最常见的问题                       |\n| runtime_error    | 只有运行的时候才能查到错误         |\n| range_error      | 运行时错误: 超范围                 |\n| overflow_error   | 运行时错误: 上溢                   |\n| underflow_error  | 运行时错误: 下溢                   |\n| logic_error      | 程序逻辑错误                       |\n| domain_error     | 程序逻辑错误: 参数对应的结果不存在 |\n| invalid_argument | 程序逻辑错误: 无效参数             |\n| length_error     |                                    |\n| out_of_range     | 程序逻辑错误: 超范围               |\n\n**默认参数**\n函数可以设定默认参数.\n\n在调用设置有默认参数的函数时只能省略右边的带默认值参数\n如果一个参数设置了默认值, 则其右边的参数都需要设置默认值\n\n如果一个函数在头文件中已经声明了默认参数, 实现的时候不能更该已经设定的默认参数\n\n但可以将未设置默认参数的函数设置默认参数\n\n# 动态内存-自由空间(堆)\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/C%2B%2B%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A02/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88.png)\n\n## 动态内存与智能指针\n| 共同操作 | 描述 |\n| --- | --- |\n| shared_ptr\\<T\\> sp | 空智能指针, 指向类型为T的对象 |\n| unique_ptr\\<T\\> up | |\n| p | 将p作为一个条件判断 若p指向对象则为true |\n| \\*p | 解引用, 获得指向的对象 |\n| p->mem | 等价于 (\\*p).mem |\n| p.get() | 返回p中保存的指针, 若智能指针释放了对象, 这个函数返回的指针就成了垂悬指针|\n| swap(p, q) p.swap(q) | 交换p q中的指针|\n\n| shared_ptr 独有操作 | 描述 |\n| -- | --- |\n| make_shared\\<T\\>(args) | 返回一个shared_ptr 指向一个动态分配的T类型对象, 使用args初始化对象 |\n| shared_ptr\\<T\\> p (q) | p是shared_ptr的拷贝, 此操作会递增q中的计数器. q中的指针必须能转换为T* |\n| p = q | 两者均为shared_ptr 所保存的智能指针必须能相互转换, 此操作会递减p的引用计数, 增加q的引用计数, 当p的引用计数为0则其管理的原内存释放 |\n| p.unique() | return p.use_count() == 1 |\n\n**make_shared**\n最安全的分配和使用动态内存的方法\n```c++\n// p指向 \"pppppppppp\"的string\nshared_ptr<string> p = make_shared<string>(10, 'p');\n// 一般使用auto\nauto p = make_shared<string>(10, 'p');\n```\n**shared_ptr的拷贝和赋值**\n当进行拷贝或者赋值操作时候 shared_ptr都会记录有多少个其他的shared_ptr\n指向相同的对象\n引用计数增加的情况\n- 拷贝shared_ptr \n- 初始化其他shared_ptr指针\n- 作为参数传递给一个函数\n- 作为函数的返回值\n\n引用计数减少\n- 赋予新值\n- 被销毁(例如离开作用域)\n\n当引用计数为0的时候, 就会释放自己管理的对象\n```c++\nauto r = make_shared<int>(42);\nr = q; // 给r赋值, 令他指向另一个地址\n\t\t// q原来指向对象的引用计数 递增\n\t\t// r 原来指向对象的引用计数 递减\n\t\t// r的引用计数 为0 则自动释放\n```\n\n**使用动态内存的原因**\n\n\n使用unique_ptr的时候要注意\n1. 不要再函数调用传参的括号中 使用临时变量 这样一旦函数调用完成就会被销毁\n```c++\nvoid process(shared_ptr<int> ptr)\n\nshared_ptr<int> p(new int(42 )) ; // 引用 = 1\nprocess(p); // 拷贝 会递增它的引用计数 ;在 process 中引用计数位为2\nint i = *p; // 正确 引用计数为1\n\nint *x(new int(1024)); // 危险 这是一个普通指针，不是一个智能指针\nprocess(x) ; // 错误 不能将 int* 转换为 一个 shared_ptr<int> \nprocess(shared_ptr<int> (x)); // 合法的，但内存会被释放! 因为临时对象会被销毁\nint j =*x //未定义的 是一个空悬指针!\n```\n2. 如果使用unique_ptr不要使用get函数初始化另一个智能指针或为其赋值\n因为一旦新生成的智能指针离开作用域或者被释放, 会影响到原来的智能指针\n```c++\nstd::shared_ptr<int> p = new int(8); // 不能将一个int* 赋值给shared_ptr<int>\n\nstd::shared_ptr<int> p1;\np1.reset(new int(8)); // 可以\n\nstd::shared_ptr<int> p2(new int(8)); // OK\n\n// 使用make_share来创建shared_ptr指针\nstd::shared_ptr<int> p3 = std::make_shared<int>(20);\nauto p4 = std::make_shared<int>(20);\n\n// make_share不能用来创建unique_ptr\nstd::unique_ptr<int> d;\nstd::unique_ptr<int> d1 (new int(8)); \n```\nunique_ptr不支持普通的赋值和拷贝操作, 因为unique_ptr要独占所指向的对象\n\n```c++\nstd::unique_ptr<int> d1 (new int(1)); \nstd::unique_ptr<int> d2 (new int(8)); \n\nd1.release(); // 释放原来所指向的对象\nd1.reset(d2.release()); // d2释放后由d1获取\n```","source":"_posts/80CPP-读书记录-CPPPrimer.md","raw":"---\ntitle: C++Primer学习\ntags:\n  - null\ncategories:\n  - CPP\n  - 服务器编程-书籍记录\ndate: 2019-08-16 19:13:22\ntop: 80\n\nimg: https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%B0%81%E9%9D%A2/C%2B%2BPrimer.png\n---\n\n# 基础知识\n## c++11 的{}初始方式\n```c++\n// c++11 的初始化方式, 有助于防范类型转换错误.\nint a1 = { 24 };\nint b1 = {}; // 默认为0\n\n// 没有 = 同样可以\nint a2 { 24 };\nint b2 {}; // 默认为0\n\nreturn 0;\n```\n\n无符号的变量在 超出范围的时候对应变化\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/C%2B%2B%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/%E6%9C%89%E7%AC%A6%E5%8F%B7%E5%92%8C%E6%97%A0%E7%AC%A6%E5%8F%B7%E7%9A%84%E9%87%8D%E7%BD%AE%E7%82%B9.jpg)\n\n\n## 转义字符表\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/C%2B%2B%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/c%2B%2B%E8%BD%AC%E4%B9%89.jpg)\n\n**char 在默认情况下, 既不是有符号. 也不是无符号.**\n```c++\nchar a; // 此时a可能是 signed char 也可能是 unsigned char 可能会在不同系统之前产生错误\n// 可以显式声明, 来确保不会出现此错误\nsigned char a;\nunsigned char a; \n```\n\n**输入**\n```c++\n\nchar name[10];\ncin.getline(name, 10); // 可以读取换行符, 但不保存\ncin.get(name, 10); // 不读取换行符, 可能导致get到换行符\n\n// 空行和超出长度问题 将在后面说明\n```\n运算符优先级\n![](https://gss2.bdstatic.com/-fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=59a3e1017d3e6709aa0d4dad5aaef458/63d9f2d3572c11df57c9a205612762d0f703c2f8.jpg)\n\n**基础的数组**\n```c++\nint a[] = {1, 2, 3, 4};\n// 下方由于 new 只是返回一个地址所以用 int* 接收 \nint* b = new int[4];\ncout << a[0] << endl; // 1\ncout << *(a + 1) << endl;// 2\n```\n**对指针解引用**\n第一印象是 解除引用, 然而并不是\n```c++\n/*\n\"*\"的作用是引用指针指向的变量值，引用其实就是引用该变量的地址，“解”就是把该地址对应的东西解开，解出来，就像打开一个包裹一样，那就是该变量的值了，所以称为“解引用”。也就是说，解引用是返回内存地址中保存的值。\n比如int a=10; int *p=&a;\ncout<<*p<<endl; 输出a的值，就是解引用操作。\n*/\n```\n## c 风格字符串相关\n对字符数组的赋值, 不建议使用 = 赋值, 可能会导致内存覆盖\n建议使用 `strncpy(目标位置, 字符串, 长度)` 然后手动在目标字符数组最后一位写入`\\0`\n这样安全, 不过这是c风格的, 在c++中可以使用**string来代替字符数组**\n\n## 自动变量 静态存储 动态存储\n自动变量\n```c++\nchar * getInut() {\n\tchar temp[100]; // 局部变量(自动变量), 函数结束时自动释放 存入栈中\n\tcin >> temp;\n\tchar* pn = new char[strlen(temp) + 1];\n\tstrcpy(pn, temp);\n\n\treturn pn;\n}\n```\n动态存储 通过new 和 delete操作内存池(自由存储空间, 堆)\n\n## 宏 异常处理  函数相关\n| 定义 | 说明 |\n| ----- | ----- |\n| `__FILE__` | 存放文件名的字符串字面值 |\n| `__LINE__` | 存放当前行号的整形字面值 |\n| `__TIME__` | 存放文件编译时间的字符串字面量 |\n| `__DATE__` | 存放文件编译日期的字符串字面值 |\n| `__VA_ARGS__` | 用来接受函数参数中`...`, 类似printf函数 |\n\n**异常处理**\n代码可以使用throw来抛出异常\n*大部分*可以指定msg来初始化异常\nthrow exception_type(\"msg\")\n表中exception不能指定msg, 来初始化, 除此外表中其他都需要msg初始\n\n| 错误名称        | 对应原因                       |\n| ---------------- | ---------------------------------- |\n| exception        | 最常见的问题                       |\n| runtime_error    | 只有运行的时候才能查到错误         |\n| range_error      | 运行时错误: 超范围                 |\n| overflow_error   | 运行时错误: 上溢                   |\n| underflow_error  | 运行时错误: 下溢                   |\n| logic_error      | 程序逻辑错误                       |\n| domain_error     | 程序逻辑错误: 参数对应的结果不存在 |\n| invalid_argument | 程序逻辑错误: 无效参数             |\n| length_error     |                                    |\n| out_of_range     | 程序逻辑错误: 超范围               |\n\n**默认参数**\n函数可以设定默认参数.\n\n在调用设置有默认参数的函数时只能省略右边的带默认值参数\n如果一个参数设置了默认值, 则其右边的参数都需要设置默认值\n\n如果一个函数在头文件中已经声明了默认参数, 实现的时候不能更该已经设定的默认参数\n\n但可以将未设置默认参数的函数设置默认参数\n\n# 动态内存-自由空间(堆)\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/C%2B%2B%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A02/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88.png)\n\n## 动态内存与智能指针\n| 共同操作 | 描述 |\n| --- | --- |\n| shared_ptr\\<T\\> sp | 空智能指针, 指向类型为T的对象 |\n| unique_ptr\\<T\\> up | |\n| p | 将p作为一个条件判断 若p指向对象则为true |\n| \\*p | 解引用, 获得指向的对象 |\n| p->mem | 等价于 (\\*p).mem |\n| p.get() | 返回p中保存的指针, 若智能指针释放了对象, 这个函数返回的指针就成了垂悬指针|\n| swap(p, q) p.swap(q) | 交换p q中的指针|\n\n| shared_ptr 独有操作 | 描述 |\n| -- | --- |\n| make_shared\\<T\\>(args) | 返回一个shared_ptr 指向一个动态分配的T类型对象, 使用args初始化对象 |\n| shared_ptr\\<T\\> p (q) | p是shared_ptr的拷贝, 此操作会递增q中的计数器. q中的指针必须能转换为T* |\n| p = q | 两者均为shared_ptr 所保存的智能指针必须能相互转换, 此操作会递减p的引用计数, 增加q的引用计数, 当p的引用计数为0则其管理的原内存释放 |\n| p.unique() | return p.use_count() == 1 |\n\n**make_shared**\n最安全的分配和使用动态内存的方法\n```c++\n// p指向 \"pppppppppp\"的string\nshared_ptr<string> p = make_shared<string>(10, 'p');\n// 一般使用auto\nauto p = make_shared<string>(10, 'p');\n```\n**shared_ptr的拷贝和赋值**\n当进行拷贝或者赋值操作时候 shared_ptr都会记录有多少个其他的shared_ptr\n指向相同的对象\n引用计数增加的情况\n- 拷贝shared_ptr \n- 初始化其他shared_ptr指针\n- 作为参数传递给一个函数\n- 作为函数的返回值\n\n引用计数减少\n- 赋予新值\n- 被销毁(例如离开作用域)\n\n当引用计数为0的时候, 就会释放自己管理的对象\n```c++\nauto r = make_shared<int>(42);\nr = q; // 给r赋值, 令他指向另一个地址\n\t\t// q原来指向对象的引用计数 递增\n\t\t// r 原来指向对象的引用计数 递减\n\t\t// r的引用计数 为0 则自动释放\n```\n\n**使用动态内存的原因**\n\n\n使用unique_ptr的时候要注意\n1. 不要再函数调用传参的括号中 使用临时变量 这样一旦函数调用完成就会被销毁\n```c++\nvoid process(shared_ptr<int> ptr)\n\nshared_ptr<int> p(new int(42 )) ; // 引用 = 1\nprocess(p); // 拷贝 会递增它的引用计数 ;在 process 中引用计数位为2\nint i = *p; // 正确 引用计数为1\n\nint *x(new int(1024)); // 危险 这是一个普通指针，不是一个智能指针\nprocess(x) ; // 错误 不能将 int* 转换为 一个 shared_ptr<int> \nprocess(shared_ptr<int> (x)); // 合法的，但内存会被释放! 因为临时对象会被销毁\nint j =*x //未定义的 是一个空悬指针!\n```\n2. 如果使用unique_ptr不要使用get函数初始化另一个智能指针或为其赋值\n因为一旦新生成的智能指针离开作用域或者被释放, 会影响到原来的智能指针\n```c++\nstd::shared_ptr<int> p = new int(8); // 不能将一个int* 赋值给shared_ptr<int>\n\nstd::shared_ptr<int> p1;\np1.reset(new int(8)); // 可以\n\nstd::shared_ptr<int> p2(new int(8)); // OK\n\n// 使用make_share来创建shared_ptr指针\nstd::shared_ptr<int> p3 = std::make_shared<int>(20);\nauto p4 = std::make_shared<int>(20);\n\n// make_share不能用来创建unique_ptr\nstd::unique_ptr<int> d;\nstd::unique_ptr<int> d1 (new int(8)); \n```\nunique_ptr不支持普通的赋值和拷贝操作, 因为unique_ptr要独占所指向的对象\n\n```c++\nstd::unique_ptr<int> d1 (new int(1)); \nstd::unique_ptr<int> d2 (new int(8)); \n\nd1.release(); // 释放原来所指向的对象\nd1.reset(d2.release()); // d2释放后由d1获取\n```","slug":"80CPP-读书记录-CPPPrimer","published":1,"updated":"2020-03-04T07:49:41.794Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucya0004souodir324mi","content":"<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><h2 id=\"c-11-的-初始方式\"><a href=\"#c-11-的-初始方式\" class=\"headerlink\" title=\"c++11 的{}初始方式\"></a>c++11 的{}初始方式</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// c++11 的初始化方式, 有助于防范类型转换错误.</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a1 = &#123; <span class=\"number\">24</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b1 = &#123;&#125;; <span class=\"comment\">// 默认为0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 没有 = 同样可以</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a2 &#123; <span class=\"number\">24</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b2 &#123;&#125;; <span class=\"comment\">// 默认为0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<p>无符号的变量在 超出范围的时候对应变化<br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/C%2B%2B%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/%E6%9C%89%E7%AC%A6%E5%8F%B7%E5%92%8C%E6%97%A0%E7%AC%A6%E5%8F%B7%E7%9A%84%E9%87%8D%E7%BD%AE%E7%82%B9.jpg\" alt=\"\"></p>\n<h2 id=\"转义字符表\"><a href=\"#转义字符表\" class=\"headerlink\" title=\"转义字符表\"></a>转义字符表</h2><p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/C%2B%2B%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/c%2B%2B%E8%BD%AC%E4%B9%89.jpg\" alt=\"\"></p>\n<p><strong>char 在默认情况下, 既不是有符号. 也不是无符号.</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> a; <span class=\"comment\">// 此时a可能是 signed char 也可能是 unsigned char 可能会在不同系统之前产生错误</span></span><br><span class=\"line\"><span class=\"comment\">// 可以显式声明, 来确保不会出现此错误</span></span><br><span class=\"line\"><span class=\"keyword\">signed</span> <span class=\"keyword\">char</span> a;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> a;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"built_in\">cin</span>.getline(name, <span class=\"number\">10</span>); <span class=\"comment\">// 可以读取换行符, 但不保存</span></span><br><span class=\"line\"><span class=\"built_in\">cin</span>.<span class=\"built_in\">get</span>(name, <span class=\"number\">10</span>); <span class=\"comment\">// 不读取换行符, 可能导致get到换行符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 空行和超出长度问题 将在后面说明</span></span><br></pre></td></tr></table></figure>\n<p>运算符优先级<br><img src=\"https://gss2.bdstatic.com/-fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=59a3e1017d3e6709aa0d4dad5aaef458/63d9f2d3572c11df57c9a205612762d0f703c2f8.jpg\" alt=\"\"></p>\n<p><strong>基础的数组</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 下方由于 new 只是返回一个地址所以用 int* 接收 </span></span><br><span class=\"line\"><span class=\"keyword\">int</span>* b = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; a[<span class=\"number\">0</span>] &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; *(a + <span class=\"number\">1</span>) &lt;&lt; <span class=\"built_in\">endl</span>;<span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p><strong>对指针解引用</strong><br>第一印象是 解除引用, 然而并不是</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\"*\"的作用是引用指针指向的变量值，引用其实就是引用该变量的地址，“解”就是把该地址对应的东西解开，解出来，就像打开一个包裹一样，那就是该变量的值了，所以称为“解引用”。也就是说，解引用是返回内存地址中保存的值。</span></span><br><span class=\"line\"><span class=\"comment\">比如int a=10; int *p=&amp;a;</span></span><br><span class=\"line\"><span class=\"comment\">cout&lt;&lt;*p&lt;&lt;endl; 输出a的值，就是解引用操作。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"c-风格字符串相关\"><a href=\"#c-风格字符串相关\" class=\"headerlink\" title=\"c 风格字符串相关\"></a>c 风格字符串相关</h2><p>对字符数组的赋值, 不建议使用 = 赋值, 可能会导致内存覆盖<br>建议使用 <code>strncpy(目标位置, 字符串, 长度)</code> 然后手动在目标字符数组最后一位写入<code>\\0</code><br>这样安全, 不过这是c风格的, 在c++中可以使用<strong>string来代替字符数组</strong></p>\n<h2 id=\"自动变量-静态存储-动态存储\"><a href=\"#自动变量-静态存储-动态存储\" class=\"headerlink\" title=\"自动变量 静态存储 动态存储\"></a>自动变量 静态存储 动态存储</h2><p>自动变量</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> * <span class=\"title\">getInut</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> temp[<span class=\"number\">100</span>]; <span class=\"comment\">// 局部变量(自动变量), 函数结束时自动释放 存入栈中</span></span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; temp;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* pn = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"built_in\">strlen</span>(temp) + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(pn, temp);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> pn;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>动态存储 通过new 和 delete操作内存池(自由存储空间, 堆)</p>\n<h2 id=\"宏-异常处理-函数相关\"><a href=\"#宏-异常处理-函数相关\" class=\"headerlink\" title=\"宏 异常处理  函数相关\"></a>宏 异常处理  函数相关</h2><table>\n<thead>\n<tr>\n<th>定义</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>__FILE__</code></td>\n<td>存放文件名的字符串字面值</td>\n</tr>\n<tr>\n<td><code>__LINE__</code></td>\n<td>存放当前行号的整形字面值</td>\n</tr>\n<tr>\n<td><code>__TIME__</code></td>\n<td>存放文件编译时间的字符串字面量</td>\n</tr>\n<tr>\n<td><code>__DATE__</code></td>\n<td>存放文件编译日期的字符串字面值</td>\n</tr>\n<tr>\n<td><code>__VA_ARGS__</code></td>\n<td>用来接受函数参数中<code>...</code>, 类似printf函数</td>\n</tr>\n</tbody></table>\n<p><strong>异常处理</strong><br>代码可以使用throw来抛出异常<br><em>大部分</em>可以指定msg来初始化异常<br>throw exception_type(“msg”)<br>表中exception不能指定msg, 来初始化, 除此外表中其他都需要msg初始</p>\n<table>\n<thead>\n<tr>\n<th>错误名称</th>\n<th>对应原因</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>exception</td>\n<td>最常见的问题</td>\n</tr>\n<tr>\n<td>runtime_error</td>\n<td>只有运行的时候才能查到错误</td>\n</tr>\n<tr>\n<td>range_error</td>\n<td>运行时错误: 超范围</td>\n</tr>\n<tr>\n<td>overflow_error</td>\n<td>运行时错误: 上溢</td>\n</tr>\n<tr>\n<td>underflow_error</td>\n<td>运行时错误: 下溢</td>\n</tr>\n<tr>\n<td>logic_error</td>\n<td>程序逻辑错误</td>\n</tr>\n<tr>\n<td>domain_error</td>\n<td>程序逻辑错误: 参数对应的结果不存在</td>\n</tr>\n<tr>\n<td>invalid_argument</td>\n<td>程序逻辑错误: 无效参数</td>\n</tr>\n<tr>\n<td>length_error</td>\n<td></td>\n</tr>\n<tr>\n<td>out_of_range</td>\n<td>程序逻辑错误: 超范围</td>\n</tr>\n</tbody></table>\n<p><strong>默认参数</strong><br>函数可以设定默认参数.</p>\n<p>在调用设置有默认参数的函数时只能省略右边的带默认值参数<br>如果一个参数设置了默认值, 则其右边的参数都需要设置默认值</p>\n<p>如果一个函数在头文件中已经声明了默认参数, 实现的时候不能更该已经设定的默认参数</p>\n<p>但可以将未设置默认参数的函数设置默认参数</p>\n<h1 id=\"动态内存-自由空间-堆\"><a href=\"#动态内存-自由空间-堆\" class=\"headerlink\" title=\"动态内存-自由空间(堆)\"></a>动态内存-自由空间(堆)</h1><p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/C%2B%2B%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A02/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88.png\" alt=\"\"></p>\n<h2 id=\"动态内存与智能指针\"><a href=\"#动态内存与智能指针\" class=\"headerlink\" title=\"动态内存与智能指针\"></a>动态内存与智能指针</h2><table>\n<thead>\n<tr>\n<th>共同操作</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>shared_ptr&lt;T&gt; sp</td>\n<td>空智能指针, 指向类型为T的对象</td>\n</tr>\n<tr>\n<td>unique_ptr&lt;T&gt; up</td>\n<td></td>\n</tr>\n<tr>\n<td>p</td>\n<td>将p作为一个条件判断 若p指向对象则为true</td>\n</tr>\n<tr>\n<td>*p</td>\n<td>解引用, 获得指向的对象</td>\n</tr>\n<tr>\n<td>p-&gt;mem</td>\n<td>等价于 (*p).mem</td>\n</tr>\n<tr>\n<td>p.get()</td>\n<td>返回p中保存的指针, 若智能指针释放了对象, 这个函数返回的指针就成了垂悬指针</td>\n</tr>\n<tr>\n<td>swap(p, q) p.swap(q)</td>\n<td>交换p q中的指针</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>shared_ptr 独有操作</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>make_shared&lt;T&gt;(args)</td>\n<td>返回一个shared_ptr 指向一个动态分配的T类型对象, 使用args初始化对象</td>\n</tr>\n<tr>\n<td>shared_ptr&lt;T&gt; p (q)</td>\n<td>p是shared_ptr的拷贝, 此操作会递增q中的计数器. q中的指针必须能转换为T*</td>\n</tr>\n<tr>\n<td>p = q</td>\n<td>两者均为shared_ptr 所保存的智能指针必须能相互转换, 此操作会递减p的引用计数, 增加q的引用计数, 当p的引用计数为0则其管理的原内存释放</td>\n</tr>\n<tr>\n<td>p.unique()</td>\n<td>return p.use_count() == 1</td>\n</tr>\n</tbody></table>\n<p><strong>make_shared</strong><br>最安全的分配和使用动态内存的方法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// p指向 \"pppppppppp\"的string</span></span><br><span class=\"line\"><span class=\"built_in\">shared_ptr</span>&lt;<span class=\"built_in\">string</span>&gt; p = make_shared&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"number\">10</span>, <span class=\"string\">'p'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 一般使用auto</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> p = make_shared&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"number\">10</span>, <span class=\"string\">'p'</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>shared_ptr的拷贝和赋值</strong><br>当进行拷贝或者赋值操作时候 shared_ptr都会记录有多少个其他的shared_ptr<br>指向相同的对象<br>引用计数增加的情况</p>\n<ul>\n<li>拷贝shared_ptr </li>\n<li>初始化其他shared_ptr指针</li>\n<li>作为参数传递给一个函数</li>\n<li>作为函数的返回值</li>\n</ul>\n<p>引用计数减少</p>\n<ul>\n<li>赋予新值</li>\n<li>被销毁(例如离开作用域)</li>\n</ul>\n<p>当引用计数为0的时候, 就会释放自己管理的对象</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> r = make_shared&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">42</span>);</span><br><span class=\"line\">r = q; <span class=\"comment\">// 给r赋值, 令他指向另一个地址</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// q原来指向对象的引用计数 递增</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// r 原来指向对象的引用计数 递减</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// r的引用计数 为0 则自动释放</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>使用动态内存的原因</strong></p>\n<p>使用unique_ptr的时候要注意</p>\n<ol>\n<li>不要再函数调用传参的括号中 使用临时变量 这样一旦函数调用完成就会被销毁<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; ptr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">p</span><span class=\"params\">(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">42</span> ))</span> </span>; <span class=\"comment\">// 引用 = 1</span></span><br><span class=\"line\"><span class=\"built_in\">process</span>(p); <span class=\"comment\">// 拷贝 会递增它的引用计数 ;在 process 中引用计数位为2</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> i = *p; <span class=\"comment\">// 正确 引用计数为1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> *<span class=\"title\">x</span><span class=\"params\">(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">1024</span>))</span></span>; <span class=\"comment\">// 危险 这是一个普通指针，不是一个智能指针</span></span><br><span class=\"line\"><span class=\"built_in\">process</span>(x) ; <span class=\"comment\">// 错误 不能将 int* 转换为 一个 shared_ptr&lt;int&gt; </span></span><br><span class=\"line\"><span class=\"built_in\">process</span>(<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; (x)); <span class=\"comment\">// 合法的，但内存会被释放! 因为临时对象会被销毁</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> j =*x <span class=\"comment\">//未定义的 是一个空悬指针!</span></span><br></pre></td></tr></table></figure></li>\n<li>如果使用unique_ptr不要使用get函数初始化另一个智能指针或为其赋值<br>因为一旦新生成的智能指针离开作用域或者被释放, 会影响到原来的智能指针<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; p = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">8</span>); <span class=\"comment\">// 不能将一个int* 赋值给shared_ptr&lt;int&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; p1;</span><br><span class=\"line\">p1.reset(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">8</span>)); <span class=\"comment\">// 可以</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">p2</span><span class=\"params\">(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">8</span>))</span></span>; <span class=\"comment\">// OK</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用make_share来创建shared_ptr指针</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; p3 = <span class=\"built_in\">std</span>::make_shared&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">20</span>);</span><br><span class=\"line\"><span class=\"keyword\">auto</span> p4 = <span class=\"built_in\">std</span>::make_shared&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// make_share不能用来创建unique_ptr</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; d;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">d1</span> <span class=\"params\">(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">8</span>))</span></span>;</span><br></pre></td></tr></table></figure>\nunique_ptr不支持普通的赋值和拷贝操作, 因为unique_ptr要独占所指向的对象</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">d1</span> <span class=\"params\">(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">1</span>))</span></span>; </span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">d2</span> <span class=\"params\">(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">8</span>))</span></span>; </span><br><span class=\"line\"></span><br><span class=\"line\">d1.<span class=\"built_in\">release</span>(); <span class=\"comment\">// 释放原来所指向的对象</span></span><br><span class=\"line\">d1.reset(d2.<span class=\"built_in\">release</span>()); <span class=\"comment\">// d2释放后由d1获取</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><h2 id=\"c-11-的-初始方式\"><a href=\"#c-11-的-初始方式\" class=\"headerlink\" title=\"c++11 的{}初始方式\"></a>c++11 的{}初始方式</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// c++11 的初始化方式, 有助于防范类型转换错误.</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a1 = &#123; <span class=\"number\">24</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b1 = &#123;&#125;; <span class=\"comment\">// 默认为0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 没有 = 同样可以</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a2 &#123; <span class=\"number\">24</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b2 &#123;&#125;; <span class=\"comment\">// 默认为0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<p>无符号的变量在 超出范围的时候对应变化<br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/C%2B%2B%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/%E6%9C%89%E7%AC%A6%E5%8F%B7%E5%92%8C%E6%97%A0%E7%AC%A6%E5%8F%B7%E7%9A%84%E9%87%8D%E7%BD%AE%E7%82%B9.jpg\" alt=\"\"></p>\n<h2 id=\"转义字符表\"><a href=\"#转义字符表\" class=\"headerlink\" title=\"转义字符表\"></a>转义字符表</h2><p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/C%2B%2B%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/c%2B%2B%E8%BD%AC%E4%B9%89.jpg\" alt=\"\"></p>\n<p><strong>char 在默认情况下, 既不是有符号. 也不是无符号.</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> a; <span class=\"comment\">// 此时a可能是 signed char 也可能是 unsigned char 可能会在不同系统之前产生错误</span></span><br><span class=\"line\"><span class=\"comment\">// 可以显式声明, 来确保不会出现此错误</span></span><br><span class=\"line\"><span class=\"keyword\">signed</span> <span class=\"keyword\">char</span> a;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> a;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"built_in\">cin</span>.getline(name, <span class=\"number\">10</span>); <span class=\"comment\">// 可以读取换行符, 但不保存</span></span><br><span class=\"line\"><span class=\"built_in\">cin</span>.<span class=\"built_in\">get</span>(name, <span class=\"number\">10</span>); <span class=\"comment\">// 不读取换行符, 可能导致get到换行符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 空行和超出长度问题 将在后面说明</span></span><br></pre></td></tr></table></figure>\n<p>运算符优先级<br><img src=\"https://gss2.bdstatic.com/-fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=59a3e1017d3e6709aa0d4dad5aaef458/63d9f2d3572c11df57c9a205612762d0f703c2f8.jpg\" alt=\"\"></p>\n<p><strong>基础的数组</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 下方由于 new 只是返回一个地址所以用 int* 接收 </span></span><br><span class=\"line\"><span class=\"keyword\">int</span>* b = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; a[<span class=\"number\">0</span>] &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; *(a + <span class=\"number\">1</span>) &lt;&lt; <span class=\"built_in\">endl</span>;<span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p><strong>对指针解引用</strong><br>第一印象是 解除引用, 然而并不是</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\"*\"的作用是引用指针指向的变量值，引用其实就是引用该变量的地址，“解”就是把该地址对应的东西解开，解出来，就像打开一个包裹一样，那就是该变量的值了，所以称为“解引用”。也就是说，解引用是返回内存地址中保存的值。</span></span><br><span class=\"line\"><span class=\"comment\">比如int a=10; int *p=&amp;a;</span></span><br><span class=\"line\"><span class=\"comment\">cout&lt;&lt;*p&lt;&lt;endl; 输出a的值，就是解引用操作。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"c-风格字符串相关\"><a href=\"#c-风格字符串相关\" class=\"headerlink\" title=\"c 风格字符串相关\"></a>c 风格字符串相关</h2><p>对字符数组的赋值, 不建议使用 = 赋值, 可能会导致内存覆盖<br>建议使用 <code>strncpy(目标位置, 字符串, 长度)</code> 然后手动在目标字符数组最后一位写入<code>\\0</code><br>这样安全, 不过这是c风格的, 在c++中可以使用<strong>string来代替字符数组</strong></p>\n<h2 id=\"自动变量-静态存储-动态存储\"><a href=\"#自动变量-静态存储-动态存储\" class=\"headerlink\" title=\"自动变量 静态存储 动态存储\"></a>自动变量 静态存储 动态存储</h2><p>自动变量</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> * <span class=\"title\">getInut</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> temp[<span class=\"number\">100</span>]; <span class=\"comment\">// 局部变量(自动变量), 函数结束时自动释放 存入栈中</span></span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; temp;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* pn = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"built_in\">strlen</span>(temp) + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(pn, temp);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> pn;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>动态存储 通过new 和 delete操作内存池(自由存储空间, 堆)</p>\n<h2 id=\"宏-异常处理-函数相关\"><a href=\"#宏-异常处理-函数相关\" class=\"headerlink\" title=\"宏 异常处理  函数相关\"></a>宏 异常处理  函数相关</h2><table>\n<thead>\n<tr>\n<th>定义</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>__FILE__</code></td>\n<td>存放文件名的字符串字面值</td>\n</tr>\n<tr>\n<td><code>__LINE__</code></td>\n<td>存放当前行号的整形字面值</td>\n</tr>\n<tr>\n<td><code>__TIME__</code></td>\n<td>存放文件编译时间的字符串字面量</td>\n</tr>\n<tr>\n<td><code>__DATE__</code></td>\n<td>存放文件编译日期的字符串字面值</td>\n</tr>\n<tr>\n<td><code>__VA_ARGS__</code></td>\n<td>用来接受函数参数中<code>...</code>, 类似printf函数</td>\n</tr>\n</tbody></table>\n<p><strong>异常处理</strong><br>代码可以使用throw来抛出异常<br><em>大部分</em>可以指定msg来初始化异常<br>throw exception_type(“msg”)<br>表中exception不能指定msg, 来初始化, 除此外表中其他都需要msg初始</p>\n<table>\n<thead>\n<tr>\n<th>错误名称</th>\n<th>对应原因</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>exception</td>\n<td>最常见的问题</td>\n</tr>\n<tr>\n<td>runtime_error</td>\n<td>只有运行的时候才能查到错误</td>\n</tr>\n<tr>\n<td>range_error</td>\n<td>运行时错误: 超范围</td>\n</tr>\n<tr>\n<td>overflow_error</td>\n<td>运行时错误: 上溢</td>\n</tr>\n<tr>\n<td>underflow_error</td>\n<td>运行时错误: 下溢</td>\n</tr>\n<tr>\n<td>logic_error</td>\n<td>程序逻辑错误</td>\n</tr>\n<tr>\n<td>domain_error</td>\n<td>程序逻辑错误: 参数对应的结果不存在</td>\n</tr>\n<tr>\n<td>invalid_argument</td>\n<td>程序逻辑错误: 无效参数</td>\n</tr>\n<tr>\n<td>length_error</td>\n<td></td>\n</tr>\n<tr>\n<td>out_of_range</td>\n<td>程序逻辑错误: 超范围</td>\n</tr>\n</tbody></table>\n<p><strong>默认参数</strong><br>函数可以设定默认参数.</p>\n<p>在调用设置有默认参数的函数时只能省略右边的带默认值参数<br>如果一个参数设置了默认值, 则其右边的参数都需要设置默认值</p>\n<p>如果一个函数在头文件中已经声明了默认参数, 实现的时候不能更该已经设定的默认参数</p>\n<p>但可以将未设置默认参数的函数设置默认参数</p>\n<h1 id=\"动态内存-自由空间-堆\"><a href=\"#动态内存-自由空间-堆\" class=\"headerlink\" title=\"动态内存-自由空间(堆)\"></a>动态内存-自由空间(堆)</h1><p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/C%2B%2B%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A02/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88.png\" alt=\"\"></p>\n<h2 id=\"动态内存与智能指针\"><a href=\"#动态内存与智能指针\" class=\"headerlink\" title=\"动态内存与智能指针\"></a>动态内存与智能指针</h2><table>\n<thead>\n<tr>\n<th>共同操作</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>shared_ptr&lt;T&gt; sp</td>\n<td>空智能指针, 指向类型为T的对象</td>\n</tr>\n<tr>\n<td>unique_ptr&lt;T&gt; up</td>\n<td></td>\n</tr>\n<tr>\n<td>p</td>\n<td>将p作为一个条件判断 若p指向对象则为true</td>\n</tr>\n<tr>\n<td>*p</td>\n<td>解引用, 获得指向的对象</td>\n</tr>\n<tr>\n<td>p-&gt;mem</td>\n<td>等价于 (*p).mem</td>\n</tr>\n<tr>\n<td>p.get()</td>\n<td>返回p中保存的指针, 若智能指针释放了对象, 这个函数返回的指针就成了垂悬指针</td>\n</tr>\n<tr>\n<td>swap(p, q) p.swap(q)</td>\n<td>交换p q中的指针</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>shared_ptr 独有操作</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>make_shared&lt;T&gt;(args)</td>\n<td>返回一个shared_ptr 指向一个动态分配的T类型对象, 使用args初始化对象</td>\n</tr>\n<tr>\n<td>shared_ptr&lt;T&gt; p (q)</td>\n<td>p是shared_ptr的拷贝, 此操作会递增q中的计数器. q中的指针必须能转换为T*</td>\n</tr>\n<tr>\n<td>p = q</td>\n<td>两者均为shared_ptr 所保存的智能指针必须能相互转换, 此操作会递减p的引用计数, 增加q的引用计数, 当p的引用计数为0则其管理的原内存释放</td>\n</tr>\n<tr>\n<td>p.unique()</td>\n<td>return p.use_count() == 1</td>\n</tr>\n</tbody></table>\n<p><strong>make_shared</strong><br>最安全的分配和使用动态内存的方法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// p指向 \"pppppppppp\"的string</span></span><br><span class=\"line\"><span class=\"built_in\">shared_ptr</span>&lt;<span class=\"built_in\">string</span>&gt; p = make_shared&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"number\">10</span>, <span class=\"string\">'p'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 一般使用auto</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> p = make_shared&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"number\">10</span>, <span class=\"string\">'p'</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>shared_ptr的拷贝和赋值</strong><br>当进行拷贝或者赋值操作时候 shared_ptr都会记录有多少个其他的shared_ptr<br>指向相同的对象<br>引用计数增加的情况</p>\n<ul>\n<li>拷贝shared_ptr </li>\n<li>初始化其他shared_ptr指针</li>\n<li>作为参数传递给一个函数</li>\n<li>作为函数的返回值</li>\n</ul>\n<p>引用计数减少</p>\n<ul>\n<li>赋予新值</li>\n<li>被销毁(例如离开作用域)</li>\n</ul>\n<p>当引用计数为0的时候, 就会释放自己管理的对象</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> r = make_shared&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">42</span>);</span><br><span class=\"line\">r = q; <span class=\"comment\">// 给r赋值, 令他指向另一个地址</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// q原来指向对象的引用计数 递增</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// r 原来指向对象的引用计数 递减</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// r的引用计数 为0 则自动释放</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>使用动态内存的原因</strong></p>\n<p>使用unique_ptr的时候要注意</p>\n<ol>\n<li>不要再函数调用传参的括号中 使用临时变量 这样一旦函数调用完成就会被销毁<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; ptr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">p</span><span class=\"params\">(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">42</span> ))</span> </span>; <span class=\"comment\">// 引用 = 1</span></span><br><span class=\"line\"><span class=\"built_in\">process</span>(p); <span class=\"comment\">// 拷贝 会递增它的引用计数 ;在 process 中引用计数位为2</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> i = *p; <span class=\"comment\">// 正确 引用计数为1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> *<span class=\"title\">x</span><span class=\"params\">(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">1024</span>))</span></span>; <span class=\"comment\">// 危险 这是一个普通指针，不是一个智能指针</span></span><br><span class=\"line\"><span class=\"built_in\">process</span>(x) ; <span class=\"comment\">// 错误 不能将 int* 转换为 一个 shared_ptr&lt;int&gt; </span></span><br><span class=\"line\"><span class=\"built_in\">process</span>(<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; (x)); <span class=\"comment\">// 合法的，但内存会被释放! 因为临时对象会被销毁</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> j =*x <span class=\"comment\">//未定义的 是一个空悬指针!</span></span><br></pre></td></tr></table></figure></li>\n<li>如果使用unique_ptr不要使用get函数初始化另一个智能指针或为其赋值<br>因为一旦新生成的智能指针离开作用域或者被释放, 会影响到原来的智能指针<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; p = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">8</span>); <span class=\"comment\">// 不能将一个int* 赋值给shared_ptr&lt;int&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; p1;</span><br><span class=\"line\">p1.reset(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">8</span>)); <span class=\"comment\">// 可以</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">p2</span><span class=\"params\">(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">8</span>))</span></span>; <span class=\"comment\">// OK</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用make_share来创建shared_ptr指针</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; p3 = <span class=\"built_in\">std</span>::make_shared&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">20</span>);</span><br><span class=\"line\"><span class=\"keyword\">auto</span> p4 = <span class=\"built_in\">std</span>::make_shared&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// make_share不能用来创建unique_ptr</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; d;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">d1</span> <span class=\"params\">(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">8</span>))</span></span>;</span><br></pre></td></tr></table></figure>\nunique_ptr不支持普通的赋值和拷贝操作, 因为unique_ptr要独占所指向的对象</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">d1</span> <span class=\"params\">(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">1</span>))</span></span>; </span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">d2</span> <span class=\"params\">(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">8</span>))</span></span>; </span><br><span class=\"line\"></span><br><span class=\"line\">d1.<span class=\"built_in\">release</span>(); <span class=\"comment\">// 释放原来所指向的对象</span></span><br><span class=\"line\">d1.reset(d2.<span class=\"built_in\">release</span>()); <span class=\"comment\">// d2释放后由d1获取</span></span><br></pre></td></tr></table></figure>"},{"title":"LeetCode简单算法","date":"2020-03-03T02:38:28.000Z","top":90,"_content":"由于国内LeetCode解题时间有点微妙, 基本题目只在英文版做\n\n# unordered_map\n\n## Two Sum-哈希表建立快速索引, 一遍和两遍哈希的使用\nhttps://leetcode.com/problems/two-sum\n题目很简单\n```\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n```\n不是最差... 也差不多了 最简单粗暴的形式 O(n2) O(1)\n```c++\nvector<int> twoSum(vector<int>& nums, int target)\n{\n\tfor (int i = 0; i < nums.size(); ++i)\n\t{\n\t\t// 答案肯定是一个小数和一个大数 相加, 直接往后找 测试用例应该是排好序的\n\t\tfor (int j = i + 1; j < nums.size(); ++j)\n\t\t{\n\t\t\tif (nums[i] + nums[j] == target)\n\t\t\t{\n\t\t\t\treturn vector<int>{i, j};\n\t\t\t}\n\t\t}\n\t}\n\treturn vector<int>{0, 1};\n}\n```\n两边哈希 由于需要更快的找到 vector中某个元素的下标, 非常适合哈希表来做\n先放入哈希表中, 再寻找自己所需要的值是否存在以及下标 O(n) O(n)\n```c++\nvector<int> twoSum(vector<int>& nums, int target)\n{\n\tunordered_map<int, int> the_map;\n\tfor (int i = 0; i < nums.size(); ++i)\n\t{\n\t\tthe_map.insert({nums[i], i});\n\t}\n\t\n\tfor (int i = 0; i < nums.size(); ++i)\n\t{\n\t\tauto search = the_map.find(target - nums[i]);\n\t\t// unordered_map<int, int>::iterator search = the_map.find(target - nums[i]);\n\t\t\n\t\tif (search != the_map.end())\n\t\t{\n\t\t\tif (search->second == i)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn vector<int>{i, search->second};\n\t\t}\n\t}\n\treturn vector<int>{0, 0};\n}\n```\n一遍哈希, 既然是要在表中查找到需要数 还需要判断是否同一个数\n干脆直接在插入前就进行查找\n```c++\nvector<int> twoSum(vector<int>& nums, int target)\n{\n\tunordered_map<int, int> the_map;\n\tfor (int i = 0; i < nums.size(); ++i)\n\t{\n\t\tauto search = the_map.find(target - nums[i]);\n\t\tif (search != the_map.end())\n\t\t{\n\t\t\treturn vector<int>{i, search->second};\n\t\t}\n\t\tthe_map.insert({nums[i], i});\n\t}\n\treturn vector<int>{0, 0};\n}\n```\n\n# Vector\n\n## 合并排序的数组-双指针操作 拷贝到临时数组和直接写到原数组\nhttps://leetcode-cn.com/problems/sorted-merge-lcci/\n给定两个排序后的数组 A 和 B，其中 A 的末端有足够的缓冲空间容纳 B。 编写一个方法，将 B 合并入 A 并排序。\n初始化 A 和 B 的元素数量分别为 m 和 n。\n```c++\n输入:\nA = [1,2,3,0,0,0], m = 3\nB = [2,5,6],       n = 3\n\n输出: [1,2,2,3,5,6]\n```\n第一次太惨了, 看来我算法需要加倍的联系啊. 先不说考虑很久\n```c++\nvoid merge(vector<int>& A, int m, vector<int>& B, int n)\n{\n\tif (n == 0)\n\t{\n\t\treturn;\n\t}\n\tint temp = 0;\n\t// 这里的 m + n就有点问题, 后面会空转 改为m + temp合适\n\tfor (int i = 0; i < m + n; ++i)\n\t{\n\t\tif (A.at(i) < B.at(temp))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tA.insert(A.begin() + i, B.at(temp++));\n\t\tif (temp == n)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\n\tif (temp < n)\n\t{\n\t\tA.insert(A.begin() + m + temp, B.begin() + temp, B.end());\n\t}\n\tA.erase(A.begin() + n + m, A.end());\n}\n```\n使用插入再删除, 本身这个方法就不是很好. 后来看题解有双指针, 就去试了下. 这样需要额外的空间\n如果直接正序的修改A的值, 可能会导致A的值被覆盖掉.\n那么倒序呢? 倒序放上最大的值 就不会覆盖掉A中未读取的值了 继续修改\n```c++\nvoid merge(vector<int>& A, int m, vector<int>& B, int n)\n{\n\tint sorted[m + n];\n\tauto a = A.begin();\n\tauto b = B.begin();\n\tint index = 0;\n\twhile (index != m + n)\n\t{\n\t\tif (a - A.begin() == m)\n\t\t{\n\t\t\tsorted[index++] = *b++;\n\t\t}\n\t\telse if (b - B.begin() == n)\n\t\t{\n\t\t\tsorted[index++] = *a++;\n\t\t}\n\t\telse if (*a < *b)\n\t\t{\n\t\t\tsorted[index++] = *a++;\n\t\t}\n\t\telse if (*a == *b)\n\t\t{\n\t\t\tsorted[index++] = *a++;\n\t\t\tsorted[index++] = *b++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsorted[index++] = *b++;\n\t\t}\n\t}\n\tfor (int i = 0; i < m + n; ++i)\n\t{\n\t\tA[i] = sorted[i];\n\t}\n\t\n}\n```\n改正后的代码如下\n```c++\nvoid merge(vector<int>& A, int m, vector<int>& B, int n)\n{\n\tint index = m + n - 1;\n\tint a = m - 1;\n\tint b = n - 1;\n\twhile (index >= 0)\n\t{\n\t\tif (a == -1)\n\t\t{\n\t\t\tA[index--] = B[b--];\n\t\t}\n\t\telse if (b == -1)\n\t\t{\n\t\t\tA[index--] = A[a--];\n\t\t}\n\t\telse if (A[a] > B[b])\n\t\t{\n\t\t\tA[index--] = A[a--];\n\t\t}\n\t\telse if (A[a] == B[b])\n\t\t{\n\t\t\tA[index--] = A[a--];\n\t\t\tA[index--] = B[b--];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tA[index--] = B[b--];\n\t\t}\n\t}\t\n}\n```\n\n## Plus One-临时插入如果无效则删除\nhttps://leetcode.com/problems/plus-one/\n给定一个数组, [1, 2, 3]代表123 给这个数字+1 返回数组形式\n```c++\nInput: [1,2,3]\nOutput: [1,2,4]\nExplanation: The array represents the integer 123.\n```\n\n```c++\nvector<int> plusOne(vector<int>& digits)\n{\n\t// insert zero in case of like this [9]\n\tdigits.insert(digits.begin(), 0);\n\t\t\n\tauto end = digits.end() - 1;\n\t\n\t*end += 1;\n\twhile(*end == 10)\n\t{\n\t\t*end = 0;\n\t\t*(--end) += 1;\n\t}\n\t\n\t// if the zero is useless delete it\n\tif (digits[0] == 0)\n\t{\n\t\tdigits.erase(digits.begin(), digits.begin() + 1);\n\t}\n\treturn digits;\n}\n```\n\n# string\n## Length of Last Word-反向迭代器\nGiven a string s consists of upper/lower-case alphabets and empty space characters ' ', \nreturn the length of last word (last word means the last appearing word if we loop from left to right) in the string.\nIf the last word does not exist, return 0.\n```c++\nInput: \"Hello World\"\nOutput: 5\n```\n...出了问题 这个题目刚才写的解析全没了...... 只能保存下改正完的答案了\n赶紧下载了一个vscode来用用\n```c++\nint lengthOfLastWord(string s)\n{\n\tint len = 0;\n\tint sub = s.length() - 1;\n\twhile((sub >= 0) && (s[sub] == ' '))\n\t{\n\t\tsub--;\n\t}\n\twhile (sub >= 0 && (s[sub] != ' '))\n\t{\n\t\tsub--;\n\t\tlen++;\n\t}\n\treturn len;\n}\n```\n\n迭代器的使用\n```c++\nint lengthOfLastWord(string s)\n{\n\tauto it = s.rbegin(), piv = s.rbegin();\n\tfor(;it != s.rend() && *it == ' '; it++, piv = it);\n\tfor(;it != s.rend() && *it != ' '; it++);\n\treturn it - piv;\n}\n```","source":"_posts/90算法-简单算法.md","raw":"---\ntitle: LeetCode简单算法\ndate: 2020-03-03 10:38:28\ntags:\ncategories:\n - 算法\n - 简单算法\ntop: 90\n---\n由于国内LeetCode解题时间有点微妙, 基本题目只在英文版做\n\n# unordered_map\n\n## Two Sum-哈希表建立快速索引, 一遍和两遍哈希的使用\nhttps://leetcode.com/problems/two-sum\n题目很简单\n```\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n```\n不是最差... 也差不多了 最简单粗暴的形式 O(n2) O(1)\n```c++\nvector<int> twoSum(vector<int>& nums, int target)\n{\n\tfor (int i = 0; i < nums.size(); ++i)\n\t{\n\t\t// 答案肯定是一个小数和一个大数 相加, 直接往后找 测试用例应该是排好序的\n\t\tfor (int j = i + 1; j < nums.size(); ++j)\n\t\t{\n\t\t\tif (nums[i] + nums[j] == target)\n\t\t\t{\n\t\t\t\treturn vector<int>{i, j};\n\t\t\t}\n\t\t}\n\t}\n\treturn vector<int>{0, 1};\n}\n```\n两边哈希 由于需要更快的找到 vector中某个元素的下标, 非常适合哈希表来做\n先放入哈希表中, 再寻找自己所需要的值是否存在以及下标 O(n) O(n)\n```c++\nvector<int> twoSum(vector<int>& nums, int target)\n{\n\tunordered_map<int, int> the_map;\n\tfor (int i = 0; i < nums.size(); ++i)\n\t{\n\t\tthe_map.insert({nums[i], i});\n\t}\n\t\n\tfor (int i = 0; i < nums.size(); ++i)\n\t{\n\t\tauto search = the_map.find(target - nums[i]);\n\t\t// unordered_map<int, int>::iterator search = the_map.find(target - nums[i]);\n\t\t\n\t\tif (search != the_map.end())\n\t\t{\n\t\t\tif (search->second == i)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn vector<int>{i, search->second};\n\t\t}\n\t}\n\treturn vector<int>{0, 0};\n}\n```\n一遍哈希, 既然是要在表中查找到需要数 还需要判断是否同一个数\n干脆直接在插入前就进行查找\n```c++\nvector<int> twoSum(vector<int>& nums, int target)\n{\n\tunordered_map<int, int> the_map;\n\tfor (int i = 0; i < nums.size(); ++i)\n\t{\n\t\tauto search = the_map.find(target - nums[i]);\n\t\tif (search != the_map.end())\n\t\t{\n\t\t\treturn vector<int>{i, search->second};\n\t\t}\n\t\tthe_map.insert({nums[i], i});\n\t}\n\treturn vector<int>{0, 0};\n}\n```\n\n# Vector\n\n## 合并排序的数组-双指针操作 拷贝到临时数组和直接写到原数组\nhttps://leetcode-cn.com/problems/sorted-merge-lcci/\n给定两个排序后的数组 A 和 B，其中 A 的末端有足够的缓冲空间容纳 B。 编写一个方法，将 B 合并入 A 并排序。\n初始化 A 和 B 的元素数量分别为 m 和 n。\n```c++\n输入:\nA = [1,2,3,0,0,0], m = 3\nB = [2,5,6],       n = 3\n\n输出: [1,2,2,3,5,6]\n```\n第一次太惨了, 看来我算法需要加倍的联系啊. 先不说考虑很久\n```c++\nvoid merge(vector<int>& A, int m, vector<int>& B, int n)\n{\n\tif (n == 0)\n\t{\n\t\treturn;\n\t}\n\tint temp = 0;\n\t// 这里的 m + n就有点问题, 后面会空转 改为m + temp合适\n\tfor (int i = 0; i < m + n; ++i)\n\t{\n\t\tif (A.at(i) < B.at(temp))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tA.insert(A.begin() + i, B.at(temp++));\n\t\tif (temp == n)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\n\tif (temp < n)\n\t{\n\t\tA.insert(A.begin() + m + temp, B.begin() + temp, B.end());\n\t}\n\tA.erase(A.begin() + n + m, A.end());\n}\n```\n使用插入再删除, 本身这个方法就不是很好. 后来看题解有双指针, 就去试了下. 这样需要额外的空间\n如果直接正序的修改A的值, 可能会导致A的值被覆盖掉.\n那么倒序呢? 倒序放上最大的值 就不会覆盖掉A中未读取的值了 继续修改\n```c++\nvoid merge(vector<int>& A, int m, vector<int>& B, int n)\n{\n\tint sorted[m + n];\n\tauto a = A.begin();\n\tauto b = B.begin();\n\tint index = 0;\n\twhile (index != m + n)\n\t{\n\t\tif (a - A.begin() == m)\n\t\t{\n\t\t\tsorted[index++] = *b++;\n\t\t}\n\t\telse if (b - B.begin() == n)\n\t\t{\n\t\t\tsorted[index++] = *a++;\n\t\t}\n\t\telse if (*a < *b)\n\t\t{\n\t\t\tsorted[index++] = *a++;\n\t\t}\n\t\telse if (*a == *b)\n\t\t{\n\t\t\tsorted[index++] = *a++;\n\t\t\tsorted[index++] = *b++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsorted[index++] = *b++;\n\t\t}\n\t}\n\tfor (int i = 0; i < m + n; ++i)\n\t{\n\t\tA[i] = sorted[i];\n\t}\n\t\n}\n```\n改正后的代码如下\n```c++\nvoid merge(vector<int>& A, int m, vector<int>& B, int n)\n{\n\tint index = m + n - 1;\n\tint a = m - 1;\n\tint b = n - 1;\n\twhile (index >= 0)\n\t{\n\t\tif (a == -1)\n\t\t{\n\t\t\tA[index--] = B[b--];\n\t\t}\n\t\telse if (b == -1)\n\t\t{\n\t\t\tA[index--] = A[a--];\n\t\t}\n\t\telse if (A[a] > B[b])\n\t\t{\n\t\t\tA[index--] = A[a--];\n\t\t}\n\t\telse if (A[a] == B[b])\n\t\t{\n\t\t\tA[index--] = A[a--];\n\t\t\tA[index--] = B[b--];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tA[index--] = B[b--];\n\t\t}\n\t}\t\n}\n```\n\n## Plus One-临时插入如果无效则删除\nhttps://leetcode.com/problems/plus-one/\n给定一个数组, [1, 2, 3]代表123 给这个数字+1 返回数组形式\n```c++\nInput: [1,2,3]\nOutput: [1,2,4]\nExplanation: The array represents the integer 123.\n```\n\n```c++\nvector<int> plusOne(vector<int>& digits)\n{\n\t// insert zero in case of like this [9]\n\tdigits.insert(digits.begin(), 0);\n\t\t\n\tauto end = digits.end() - 1;\n\t\n\t*end += 1;\n\twhile(*end == 10)\n\t{\n\t\t*end = 0;\n\t\t*(--end) += 1;\n\t}\n\t\n\t// if the zero is useless delete it\n\tif (digits[0] == 0)\n\t{\n\t\tdigits.erase(digits.begin(), digits.begin() + 1);\n\t}\n\treturn digits;\n}\n```\n\n# string\n## Length of Last Word-反向迭代器\nGiven a string s consists of upper/lower-case alphabets and empty space characters ' ', \nreturn the length of last word (last word means the last appearing word if we loop from left to right) in the string.\nIf the last word does not exist, return 0.\n```c++\nInput: \"Hello World\"\nOutput: 5\n```\n...出了问题 这个题目刚才写的解析全没了...... 只能保存下改正完的答案了\n赶紧下载了一个vscode来用用\n```c++\nint lengthOfLastWord(string s)\n{\n\tint len = 0;\n\tint sub = s.length() - 1;\n\twhile((sub >= 0) && (s[sub] == ' '))\n\t{\n\t\tsub--;\n\t}\n\twhile (sub >= 0 && (s[sub] != ' '))\n\t{\n\t\tsub--;\n\t\tlen++;\n\t}\n\treturn len;\n}\n```\n\n迭代器的使用\n```c++\nint lengthOfLastWord(string s)\n{\n\tauto it = s.rbegin(), piv = s.rbegin();\n\tfor(;it != s.rend() && *it == ' '; it++, piv = it);\n\tfor(;it != s.rend() && *it != ' '; it++);\n\treturn it - piv;\n}\n```","slug":"90算法-简单算法","published":1,"updated":"2020-03-04T08:21:18.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucyb0006souoh5e814al","content":"<p>由于国内LeetCode解题时间有点微妙, 基本题目只在英文版做</p>\n<h1 id=\"unordered-map\"><a href=\"#unordered-map\" class=\"headerlink\" title=\"unordered_map\"></a>unordered_map</h1><h2 id=\"Two-Sum-哈希表建立快速索引-一遍和两遍哈希的使用\"><a href=\"#Two-Sum-哈希表建立快速索引-一遍和两遍哈希的使用\" class=\"headerlink\" title=\"Two Sum-哈希表建立快速索引, 一遍和两遍哈希的使用\"></a>Two Sum-哈希表建立快速索引, 一遍和两遍哈希的使用</h2><p><a href=\"https://leetcode.com/problems/two-sum\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/two-sum</a><br>题目很简单</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Given nums &#x3D; [2, 7, 11, 15], target &#x3D; 9,</span><br><span class=\"line\"></span><br><span class=\"line\">Because nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9,</span><br><span class=\"line\">return [0, 1].</span><br></pre></td></tr></table></figure>\n<p>不是最差… 也差不多了 最简单粗暴的形式 O(n2) O(1)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">twoSum</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> target)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 答案肯定是一个小数和一个大数 相加, 直接往后找 测试用例应该是排好序的</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; nums.<span class=\"built_in\">size</span>(); ++j)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (nums[i] + nums[j] == target)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&#123;i, j&#125;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>两边哈希 由于需要更快的找到 vector中某个元素的下标, 非常适合哈希表来做<br>先放入哈希表中, 再寻找自己所需要的值是否存在以及下标 O(n) O(n)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">twoSum</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> target)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">unordered_map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; the_map;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tthe_map.insert(&#123;nums[i], i&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> search = the_map.<span class=\"built_in\">find</span>(target - nums[i]);</span><br><span class=\"line\">\t\t<span class=\"comment\">// unordered_map&lt;int, int&gt;::iterator search = the_map.find(target - nums[i]);</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (search != the_map.<span class=\"built_in\">end</span>())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (search-&gt;second == i)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&#123;i, search-&gt;second&#125;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一遍哈希, 既然是要在表中查找到需要数 还需要判断是否同一个数<br>干脆直接在插入前就进行查找</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">twoSum</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> target)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">unordered_map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; the_map;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> search = the_map.<span class=\"built_in\">find</span>(target - nums[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (search != the_map.<span class=\"built_in\">end</span>())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&#123;i, search-&gt;second&#125;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tthe_map.insert(&#123;nums[i], i&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h1><h2 id=\"合并排序的数组-双指针操作-拷贝到临时数组和直接写到原数组\"><a href=\"#合并排序的数组-双指针操作-拷贝到临时数组和直接写到原数组\" class=\"headerlink\" title=\"合并排序的数组-双指针操作 拷贝到临时数组和直接写到原数组\"></a>合并排序的数组-双指针操作 拷贝到临时数组和直接写到原数组</h2><p><a href=\"https://leetcode-cn.com/problems/sorted-merge-lcci/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/sorted-merge-lcci/</a><br>给定两个排序后的数组 A 和 B，其中 A 的末端有足够的缓冲空间容纳 B。 编写一个方法，将 B 合并入 A 并排序。<br>初始化 A 和 B 的元素数量分别为 m 和 n。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">A = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>], m = <span class=\"number\">3</span></span><br><span class=\"line\">B = [<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>],       n = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">输出: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br></pre></td></tr></table></figure>\n<p>第一次太惨了, 看来我算法需要加倍的联系啊. 先不说考虑很久</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; A, <span class=\"keyword\">int</span> m, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; B, <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里的 m + n就有点问题, 后面会空转 改为m + temp合适</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m + n; ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (A.at(i) &lt; B.at(temp))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tA.insert(A.<span class=\"built_in\">begin</span>() + i, B.at(temp++));</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (temp == n)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (temp &lt; n)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tA.insert(A.<span class=\"built_in\">begin</span>() + m + temp, B.<span class=\"built_in\">begin</span>() + temp, B.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tA.erase(A.<span class=\"built_in\">begin</span>() + n + m, A.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用插入再删除, 本身这个方法就不是很好. 后来看题解有双指针, 就去试了下. 这样需要额外的空间<br>如果直接正序的修改A的值, 可能会导致A的值被覆盖掉.<br>那么倒序呢? 倒序放上最大的值 就不会覆盖掉A中未读取的值了 继续修改</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; A, <span class=\"keyword\">int</span> m, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; B, <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sorted[m + n];</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> a = A.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> b = B.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (index != m + n)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a - A.<span class=\"built_in\">begin</span>() == m)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tsorted[index++] = *b++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (b - B.<span class=\"built_in\">begin</span>() == n)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tsorted[index++] = *a++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*a &lt; *b)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tsorted[index++] = *a++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*a == *b)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tsorted[index++] = *a++;</span><br><span class=\"line\">\t\t\tsorted[index++] = *b++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tsorted[index++] = *b++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m + n; ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tA[i] = sorted[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>改正后的代码如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; A, <span class=\"keyword\">int</span> m, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; B, <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index = m + n - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = m - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (index &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tA[index--] = B[b--];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (b == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tA[index--] = A[a--];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (A[a] &gt; B[b])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tA[index--] = A[a--];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (A[a] == B[b])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tA[index--] = A[a--];</span><br><span class=\"line\">\t\t\tA[index--] = B[b--];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tA[index--] = B[b--];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Plus-One-临时插入如果无效则删除\"><a href=\"#Plus-One-临时插入如果无效则删除\" class=\"headerlink\" title=\"Plus One-临时插入如果无效则删除\"></a>Plus One-临时插入如果无效则删除</h2><p><a href=\"https://leetcode.com/problems/plus-one/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/plus-one/</a><br>给定一个数组, [1, 2, 3]代表123 给这个数字+1 返回数组形式</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">Output: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">Explanation: The <span class=\"built_in\">array</span> represents the integer <span class=\"number\">123.</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">plusOne</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; digits)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// insert zero in case of like this [9]</span></span><br><span class=\"line\">\tdigits.insert(digits.<span class=\"built_in\">begin</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> <span class=\"built_in\">end</span> = digits.<span class=\"built_in\">end</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t*<span class=\"built_in\">end</span> += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(*<span class=\"built_in\">end</span> == <span class=\"number\">10</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t*<span class=\"built_in\">end</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t*(--<span class=\"built_in\">end</span>) += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// if the zero is useless delete it</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (digits[<span class=\"number\">0</span>] == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tdigits.erase(digits.<span class=\"built_in\">begin</span>(), digits.<span class=\"built_in\">begin</span>() + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> digits;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h1><h2 id=\"Length-of-Last-Word-反向迭代器\"><a href=\"#Length-of-Last-Word-反向迭代器\" class=\"headerlink\" title=\"Length of Last Word-反向迭代器\"></a>Length of Last Word-反向迭代器</h2><p>Given a string s consists of upper/lower-case alphabets and empty space characters ‘ ‘,<br>return the length of last word (last word means the last appearing word if we loop from left to right) in the string.<br>If the last word does not exist, return 0.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: <span class=\"string\">\"Hello World\"</span></span><br><span class=\"line\">Output: <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<p>…出了问题 这个题目刚才写的解析全没了…… 只能保存下改正完的答案了<br>赶紧下载了一个vscode来用用</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lengthOfLastWord</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sub = s.length() - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>((sub &gt;= <span class=\"number\">0</span>) &amp;&amp; (s[sub] == <span class=\"string\">' '</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tsub--;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (sub &gt;= <span class=\"number\">0</span> &amp;&amp; (s[sub] != <span class=\"string\">' '</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tsub--;</span><br><span class=\"line\">\t\tlen++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> len;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>迭代器的使用</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lengthOfLastWord</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> it = s.rbegin(), piv = s.rbegin();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(;it != s.rend() &amp;&amp; *it == <span class=\"string\">' '</span>; it++, piv = it);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(;it != s.rend() &amp;&amp; *it != <span class=\"string\">' '</span>; it++);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> it - piv;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>由于国内LeetCode解题时间有点微妙, 基本题目只在英文版做</p>\n<h1 id=\"unordered-map\"><a href=\"#unordered-map\" class=\"headerlink\" title=\"unordered_map\"></a>unordered_map</h1><h2 id=\"Two-Sum-哈希表建立快速索引-一遍和两遍哈希的使用\"><a href=\"#Two-Sum-哈希表建立快速索引-一遍和两遍哈希的使用\" class=\"headerlink\" title=\"Two Sum-哈希表建立快速索引, 一遍和两遍哈希的使用\"></a>Two Sum-哈希表建立快速索引, 一遍和两遍哈希的使用</h2><p><a href=\"https://leetcode.com/problems/two-sum\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/two-sum</a><br>题目很简单</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Given nums &#x3D; [2, 7, 11, 15], target &#x3D; 9,</span><br><span class=\"line\"></span><br><span class=\"line\">Because nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9,</span><br><span class=\"line\">return [0, 1].</span><br></pre></td></tr></table></figure>\n<p>不是最差… 也差不多了 最简单粗暴的形式 O(n2) O(1)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">twoSum</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> target)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 答案肯定是一个小数和一个大数 相加, 直接往后找 测试用例应该是排好序的</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; nums.<span class=\"built_in\">size</span>(); ++j)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (nums[i] + nums[j] == target)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&#123;i, j&#125;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>两边哈希 由于需要更快的找到 vector中某个元素的下标, 非常适合哈希表来做<br>先放入哈希表中, 再寻找自己所需要的值是否存在以及下标 O(n) O(n)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">twoSum</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> target)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">unordered_map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; the_map;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tthe_map.insert(&#123;nums[i], i&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> search = the_map.<span class=\"built_in\">find</span>(target - nums[i]);</span><br><span class=\"line\">\t\t<span class=\"comment\">// unordered_map&lt;int, int&gt;::iterator search = the_map.find(target - nums[i]);</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (search != the_map.<span class=\"built_in\">end</span>())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (search-&gt;second == i)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&#123;i, search-&gt;second&#125;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一遍哈希, 既然是要在表中查找到需要数 还需要判断是否同一个数<br>干脆直接在插入前就进行查找</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">twoSum</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> target)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">unordered_map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; the_map;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> search = the_map.<span class=\"built_in\">find</span>(target - nums[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (search != the_map.<span class=\"built_in\">end</span>())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&#123;i, search-&gt;second&#125;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tthe_map.insert(&#123;nums[i], i&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h1><h2 id=\"合并排序的数组-双指针操作-拷贝到临时数组和直接写到原数组\"><a href=\"#合并排序的数组-双指针操作-拷贝到临时数组和直接写到原数组\" class=\"headerlink\" title=\"合并排序的数组-双指针操作 拷贝到临时数组和直接写到原数组\"></a>合并排序的数组-双指针操作 拷贝到临时数组和直接写到原数组</h2><p><a href=\"https://leetcode-cn.com/problems/sorted-merge-lcci/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/sorted-merge-lcci/</a><br>给定两个排序后的数组 A 和 B，其中 A 的末端有足够的缓冲空间容纳 B。 编写一个方法，将 B 合并入 A 并排序。<br>初始化 A 和 B 的元素数量分别为 m 和 n。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">A = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>], m = <span class=\"number\">3</span></span><br><span class=\"line\">B = [<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>],       n = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">输出: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br></pre></td></tr></table></figure>\n<p>第一次太惨了, 看来我算法需要加倍的联系啊. 先不说考虑很久</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; A, <span class=\"keyword\">int</span> m, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; B, <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里的 m + n就有点问题, 后面会空转 改为m + temp合适</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m + n; ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (A.at(i) &lt; B.at(temp))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tA.insert(A.<span class=\"built_in\">begin</span>() + i, B.at(temp++));</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (temp == n)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (temp &lt; n)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tA.insert(A.<span class=\"built_in\">begin</span>() + m + temp, B.<span class=\"built_in\">begin</span>() + temp, B.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tA.erase(A.<span class=\"built_in\">begin</span>() + n + m, A.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用插入再删除, 本身这个方法就不是很好. 后来看题解有双指针, 就去试了下. 这样需要额外的空间<br>如果直接正序的修改A的值, 可能会导致A的值被覆盖掉.<br>那么倒序呢? 倒序放上最大的值 就不会覆盖掉A中未读取的值了 继续修改</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; A, <span class=\"keyword\">int</span> m, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; B, <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sorted[m + n];</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> a = A.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> b = B.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (index != m + n)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a - A.<span class=\"built_in\">begin</span>() == m)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tsorted[index++] = *b++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (b - B.<span class=\"built_in\">begin</span>() == n)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tsorted[index++] = *a++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*a &lt; *b)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tsorted[index++] = *a++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*a == *b)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tsorted[index++] = *a++;</span><br><span class=\"line\">\t\t\tsorted[index++] = *b++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tsorted[index++] = *b++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m + n; ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tA[i] = sorted[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>改正后的代码如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; A, <span class=\"keyword\">int</span> m, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; B, <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index = m + n - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = m - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (index &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tA[index--] = B[b--];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (b == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tA[index--] = A[a--];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (A[a] &gt; B[b])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tA[index--] = A[a--];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (A[a] == B[b])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tA[index--] = A[a--];</span><br><span class=\"line\">\t\t\tA[index--] = B[b--];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tA[index--] = B[b--];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Plus-One-临时插入如果无效则删除\"><a href=\"#Plus-One-临时插入如果无效则删除\" class=\"headerlink\" title=\"Plus One-临时插入如果无效则删除\"></a>Plus One-临时插入如果无效则删除</h2><p><a href=\"https://leetcode.com/problems/plus-one/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/plus-one/</a><br>给定一个数组, [1, 2, 3]代表123 给这个数字+1 返回数组形式</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">Output: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">Explanation: The <span class=\"built_in\">array</span> represents the integer <span class=\"number\">123.</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">plusOne</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; digits)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// insert zero in case of like this [9]</span></span><br><span class=\"line\">\tdigits.insert(digits.<span class=\"built_in\">begin</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> <span class=\"built_in\">end</span> = digits.<span class=\"built_in\">end</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t*<span class=\"built_in\">end</span> += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(*<span class=\"built_in\">end</span> == <span class=\"number\">10</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t*<span class=\"built_in\">end</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t*(--<span class=\"built_in\">end</span>) += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// if the zero is useless delete it</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (digits[<span class=\"number\">0</span>] == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tdigits.erase(digits.<span class=\"built_in\">begin</span>(), digits.<span class=\"built_in\">begin</span>() + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> digits;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h1><h2 id=\"Length-of-Last-Word-反向迭代器\"><a href=\"#Length-of-Last-Word-反向迭代器\" class=\"headerlink\" title=\"Length of Last Word-反向迭代器\"></a>Length of Last Word-反向迭代器</h2><p>Given a string s consists of upper/lower-case alphabets and empty space characters ‘ ‘,<br>return the length of last word (last word means the last appearing word if we loop from left to right) in the string.<br>If the last word does not exist, return 0.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: <span class=\"string\">\"Hello World\"</span></span><br><span class=\"line\">Output: <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<p>…出了问题 这个题目刚才写的解析全没了…… 只能保存下改正完的答案了<br>赶紧下载了一个vscode来用用</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lengthOfLastWord</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sub = s.length() - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>((sub &gt;= <span class=\"number\">0</span>) &amp;&amp; (s[sub] == <span class=\"string\">' '</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tsub--;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (sub &gt;= <span class=\"number\">0</span> &amp;&amp; (s[sub] != <span class=\"string\">' '</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tsub--;</span><br><span class=\"line\">\t\tlen++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> len;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>迭代器的使用</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lengthOfLastWord</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> it = s.rbegin(), piv = s.rbegin();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(;it != s.rend() &amp;&amp; *it == <span class=\"string\">' '</span>; it++, piv = it);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(;it != s.rend() &amp;&amp; *it != <span class=\"string\">' '</span>; it++);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> it - piv;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Linux高性能服务器编程读书记录-进程线程","date":"2020-02-25T14:34:39.000Z","top":102,"img":"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%B0%81%E9%9D%A2/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B.jpg","_content":"# 第十三章多进程编程\n\n## exec系列系统调用\n```c++\n#include <unistd.h>\n// 声明这个是外部函数或外部变量\nextern char** environ;\n\n// path 参数指定可执行文件的完成路径 file接收文件名,具体位置在PATH中搜寻\n// arg 和 argv用于向新的程序传递参数\n// envp用于设置新程序的环境变量, 未设置则使用全局的环境变量\n// exec函数是不返回的, 除非出错\n// 如果未报错则源程序被新的程序完全替换\n\nint execl(const char* path, const char* arg, ....);\nint execlp(const char* file, const char* arg, ...0);\nint execle(const char* path, const char* arg, ...., char* const envp[])\nint execv(const char* path, char* const argv[]);\nint execvp(const char* file, char* const argv[]);\nint execve(const char* path, char* const argv[], char* const envp[]);\n```\n## fork系统调用-进程的创建\n```c++\n#include <sys/types.h>\n#include <unistd.h>\n// 每次调用都返回两次, 在父进程中返回的子进程的PID, 在子进程中返回0\n// 次返回值用于区分是父进程还是子进程\n// 失败返回-1\npid_t fork(viod);\n```\nfork系统调用\nfork() 函数复制当前的进程, 在内核进程表中创建一个新的进程表项, 新的进程表项有很多的属性和原进程相同\n`堆指针` `栈指针` `标志寄存器的值`.\n也存在不同的项目 该进程的PPID(父进程)被设置成原进程的PID,  信号位图被清除(原进程设置的信号处理函数对新进程无效)\n\n子进程代码与父进程完全相同, 同时复制(采用了写时复制, 父进程和子进程对数据执行了写操作才会复制)了父进程的数据(堆数据, 栈数据, 静态数据)\n创建子进程后, 父进程打开的文件描述符默认在子进程中也是打开的\n`文件描述符的引用计数`, `父进程的用户根目录, 当前工作目录等变量的引用计数` 均加1\n(引自维基百科-引用计数是计算机编程语言中的一种内存管理技术，是指将资源（可以是对象、内存或磁盘空间等等）的被引用次数保存起来，当被引用次数变为零时就将其释放的过程。)\n## 处理僵尸进程-进程的管理\n```c++\n#include <sys/types.h>\n#include <sys/wait.h>\n// wait进程将阻塞进程, 直到该进程的某个子进程结束运行为止. 他返回结束的子进程的PID, 并将该子进程的退出状态存储于stat_loc参数指向的内存中. sys/wait.h 头文件中定义了宏来帮助解释退出信息.\npid_t wait(int* stat_loc);\n\n// 非阻塞, 只等待由pid指定的目标子进程(-1为阻塞)\n// options函数取值WNOHANG-waitpid立即返回\n// 如果目标子进程正常退出, 则返回子进程的pid\n// 如果还没有结束或意外终止, 则立即返回0\n// 调用失败返回-1\npid_t waitpid(pid_t pid, int* stat_loc, int options);\n\nWIFEXITED(stat_val); // 子进程正常结束, 返回一个非0\nWEXITSTATUS(stat_val); // 如果WIFEXITED 非0, 它返回子进程的退出码\nWIFSIGNALED(stat_val);// 如果子进程是因为一个未捕获的信号而终止, 返回一个非0值\nWTERMSIG(stat_val);// 如果WIFSIGNALED非0 返回一个信号值\nWIFSTOPPED(stat_val);// 如果子进程意外终止, 它返回一个非0值\nWSTOPSIG(stat_val);// 如果WIFSTOPED非0, 它返回一个信号值\n```\n\n对于多进程程序而言, 父进程一般需要跟踪子进程的退出状态. 因此, 当子进程结束运行是, 内核不会立即释放该进程的进程表表项, 以满足父进程后续对孩子进程推出信息的查询\n- 在`子进程结束运行之后, 父进程读取其退出状态前`, 我们称该子进程处于`僵尸态`\n- 另外一使子进程进入僵尸态的情况 - 父进程结束或者异常终止, 而子进程继续运行. (子进程的PPID设置为1,init进程接管了子进程) `父进程结束运行之后, 子进程退出之前`, 处于`僵尸态`\n\n以上两种状态都是父进程没有正确处理子进程的返回信息, 子进程都停留在僵尸态, 占据着内核资源.\n\nwaitpid()虽然为非阻塞, 则需要在 waitpid所监视的进程结束后再调用.\nSIGCHLD信号- 子进程结束后将会给父进程发送此信号\n```c++\nstatic void handle_child(int sig)\n{\n\tpid_t pid;\n\tint stat;\n\twhile ((pid = waitpid(-1, &stat, WNOHANG)) > 0)\n\t{\n\t\t// 善后处理emmmm\n\t}\n}\n```\n**管道**\n管道可以在父,子进程间传递数据, 利用的是fork调用后两个文件描述符(fd[0]和fd[1])都保持打开. 一对这样的文件描述符只能保证\n父,子进程间一个方向的数据传输, 父进程和子进程必须有一个关闭fd[0], 另一个关闭fd[1].\n\n可以用两个管道来实现双向传输数据, 也可以用`socketpair`来创建管道\n\n## 信号量-进程的锁\n*信号量原语*\n只支持两种操作, 等待(wait)和信号(signal) , 在LInux中等待和信号有特殊的含义, 所以又称为P(passeren, 传递就好像进入临界区)V(vrijgeven, 释放就好像退出临界区)操作.\n假设有信号量SV(可取任何自然数, 这本书只讨论二进制信号量), 对它的PV操作含义为\n- P(SV), 如果SV的值大于0, 就将它减1, 如果sv的值为0 则挂起进程的执行\n- V(SV), 如果其他进程因为等待SV而挂起, 则唤醒之, 如果没有则将SV加1\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E4%BD%BF%E7%94%A8%E4%BF%A1%E5%8F%B7%E9%87%8F%E4%BF%9D%E6%8A%A4%E5%85%B3%E9%94%AE%E4%BB%A3%E7%A0%81%E6%AE%B5.png)\n\n创建信号量\n```c++\n// semeget 系统调用\n// 创建一个全局唯一的信号量集, 或者获取一个已经存在的信号量集\n// key 参数是一个键值, 用来标识一个全局唯一的信号量级, 就像文件名全局唯一地标识一个文件一样.\n// num_sems 参数指定要创建/获取的信号量集中信号量的数目. 如果是创建信号量-必须指定, 如果是获取-可以指定为0\n// sem_flags指定一组标志, 与调用open函数的mode参数相同用来控制权限\n// - 可以与IPC_CREAT 做或运算创建新的信号量集, 即使信号量集存在也不会报错\n// - 联合使用IPC_CREAT和IPC_EXCL来创建一组新的唯一额信号量集\n// - 如果已经存在则会返回错误 errno = EEXIST\n// 成功返回一个正整数, 是信号量集的标识符, 失败返回 -1\nint semget(key_t key, int num_sems, int sem_flags);\n```\nsemget成功时返回一个与之关联的内核结构体semid_ds\n```c++\nstruct semid_ds\n{\n\tstruct ipc_perm sem_perm;\n\tunsigned long int sem_nsems; // 被设置为num_sems\n\ttime_t sem_otime; // 被设置为0\n\ttime_t sem_ctime; // 被设置为当前的系统时间\n}\n// 用来描述权限\nstruct ipc_perm\n{\n\tuid_t uid; // 所有者的有效用户ID, 被semget设置为调用进程的有效用户ID\n\tgid_t gid; // 所有者的有效组ID, 被semget设置为调用进程的有效用户ID\n\tuid_t cuid; // 创建者的有效用户ID, 被semget设置为调用进程的有效用户ID\n\tgid_t cgid; // 创建者的有效组ID, 被semget设置为调用进程的有效用户ID\n\tmode_t mode;// 访问权限, 背着只为sem_flags参数的最低9位.\n}\n```\n---\n与semop信号量关联的一些重要的内核变量\n```c++\nunsigned short semval; // 信号量的值\nunsigned short semzcnt; // 等待信号量值变为0的进程数量\nunsigned short semncnt// 等待信号量值增加的进程数量\npid_t sempid; // 最后一次执行semop操作的进程ID\n```\n操作信号量, 实际上就是对上面的内核变量操作\n```c++\nstruct sembuf\n{\n\tunsigned short int sem_num;// 信号量集中信号量的编号, 0表示信号量集中的第一个信号量\n\tshort int sem_op; // 指定操作类型,\n\tshort int sem_flg;\n}\n```\n```c++\n// sem_id 是由semget调用返回的信号量集的标识符, 用以指定被操作的,目标信号量集.\n// sem_ops 参数指向一个sembuf结构体类型的数组\nint semop(int sem_id, struct sembuf* sem_ops, size_t num_sem_ops);\n\n// sem_op 每种类型的操作行为又受到sem_flags成员的影响\n// sem_flag 可选值是可选正整数 0 负整数. \n// - IPC_NOWAIT(无论信号量操作是否成功, 都立即返回), \n// - SEM_UNDO (当进程退出的时候, 取消正在进行的semop操作)\n// -- sem_op > 0\n// -- 则semop将被操作的信号量的值semval增加sem_op, 要求调用进程对被操作的信号量集有写权限\n// -- 如果此时设置了SEM_UNDO标志, 则系统将更新进程的semadj变量(用以跟踪进程对信号量的修改情况)\n// -- sem_op = 0\n// -- 标着这是一个`等待0`的操作, 要求调用进程对被操作信号量集有用读权限\n// -- 如果此时信号量的值是0, 则调用立即返回, 否则semop失败返回, 或者阻塞进程以等待信号量变为0\n// -- 此时如果IPC_NOWAIT 标志被设置, sem_op立即返回错误 errno=EAGAIN\n// -- 如果未指定此标志, 则信号量的semzcnt的值增加1, 这时进程被投入睡眠直到下列三个条件之一发生\n// -- 1 信号量的值samval变为0, 此时系统将该信号量的semzcnt减1\n// -- 2 被操作的信号量所在的信号量集被进程移除, 此时semop调用失败返回, errno=EIDRM\n// -- 3 调用被系统中断, 此时semop调用失败返回, errno=EINTR, 同时将该信号量的semzcnt减1\n// -- sem_op < 0\n// -- 表示对信号量的值进行减操作, 即期望获得信号量, 要求调用进程对被操作信号量集有写权限\n// -- 如果semval的值大于等于sem_op的绝对值, 则操作成功, 调用进程立即获得信号量\n// -- 且semval -= abs(sem_op)\n// -- 如果此时这定了SEM_UNDO的标志, 系统更新进程的semadj变量\n// -- 如果semval < abs(sem_op) 则在被指定IPC_NOWAIT的时候semop立即返回error, errno=EAGIN\n// -- 如果没有指定则阻塞进程等待信号量可用, 且 semzcnt +=1, 等到下面三种情况唤醒\n// -- 1 发生semval >= abs(sem_op), semzcnt-=1, semval -= abs(sem_op). 在SEM_UNDO设置时更新semadj\n// -- 2 被操作的信号量所在的信号量集被进程移除, 此时semop调用失败返回, errno=EIDRM (同 sem_op = 0)\n// -- 3 调用被系统中断, 此时semop调用失败返回, errno=EINTR, 同时将该信号量的semzcnt减1 (同 sem_op = 0)\n// num_sem_ops 指定要执行的操作个数, 即sem_ops数组中的元素个数, semop对sem_ops[] 中的每个成员按顺序操作,\n// 并且是原子操作\n// 成功返回0, 失败返回-1 errno. 失败的时候sem_ops[] 中的所有操作不执行\n```\n```c++\n// semctl 系统调用\n// sem_id 参数是由semget返回的信号量集标识符\n// sen_num指定被操作的信号量在信号集中的编号\n// command指定命令, 可以追加命令所需的参数, 不过有推荐格式\n// 成功返回对应command的参数, 失败返回-1 errno\nint semctl(int sem_id, int sem_num, int command, ...);\n```\n结构体\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/1.png)\n\ncommand参数\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/semctl%E7%9A%84command%E5%8F%82%E6%95%B0.png)\n除去GETALL以外的 其他GET都是操作的单个信号量, 由sem_id指定的第sem_num个信号量.\n其他操作针对整个信号量集, 此时semctl的参数sem_num被忽略\n\n\n*特殊键值IPC_PRIVATE*\nsemget的调用者可以给其key参数传递一个特殊的键值`IPC_PRIVATE`, 这样无论该信号量是否已经存在\nsemget都将创建一个新的信号量.\n\n\n**总结PV使用方法**\n使用`semget`获取到唯一的标识.\n使用`semctl`的`SETVAL`传入初始化val的`sem_un`联合体.来初始化val\n调用`semop` 传入唯一标识, `sem_op=-1`执行P(锁)操作`sem_op=1`执行V(开锁)操作\n开关锁通过当`sem_op=-1,semval=0 `\n且未指定`IPC_NOWAIT`\n等待`semval`被`sem_op=1`改为`semval=1`\n\n## 共享内存-进程间通信\n最高效的IPC(进程间通信)机制\n需要自己同步进程对其的访问, 否则会产生竞态条件\n\n```c++\n// key\n// 与semget相同 标识一段全局唯一的共享内存\n// size 内存区域大小 单位字节\n// shmflg\n// shmflg的参数与semget相同, 同时多了两个额外的参数\n// `SHM_HUGETLB`系统将使用\"大页面\"来为共享内存分配空间\n// `SHM_NORESERVE`不为共享内存保留swap空间, 如果物理内存不足\n// 在执行写操作的时候将会触发`SIGSEGV`信号\n// 成功返回唯一标识, 失败返回-1 errno\nint shmget(key_t key, size_t size, int shmflg)\n```\n同时会创建对应的`shmid_ds`结构体\n```c++\nstruct shmid_ds\n{\n\tstruct ipc_perm shm_per; // 权限相关\n\tsize_t shm_segsz; // 共享内存大小 单位字节\tsize\n\t__time_t shm_atime; // 对这段内存最后一次调用semat的时间 0\n\t__time_t shm_dtime; // 对这段内存最后一次调用semdt的时间 0\n\t__time_t shm_ctime; // 对这段内存最后一次调用semctl的时间 当前时间\n\t__pid_t shm_cpid; // 创建者PID\n\t__pid_t lpid; // 最后一次执行shmat或shmdt的进程PID\n\tshmatt_t shm_nattach // 关联到此共享内存空间的进程数量\n}\n```\n将共享内存关联到进程的地址空间\n调用成功之后, 修改shmid_ds的部分\nshm_nattach +1\n更新 shm_lpid和shm_atime设置为当前时间\n```c++\n// shm_id \n// shmget返回的唯一标识\n// shm_addr \n// 关联到进程的哪块地址空间, 其效果还受到shmflg的可选标识SHM_RND的影响\n// 如果shm_addr = NULL, 则关联地址由操作系统决定, 代码可移植性强\n// 如果 shm_addr 非空,且没有`SHM_RND`标志 则关联到指定的地址处\n// 如果 shm_addr 非空, 但是设置了标志 *这里还没用到, 暂时不写*\n// shmflg\n// SHM_RDONLY 设置后内存内容变成只读\n// SHM_REMAP 如果地址shmaddr已经关联到一段内存上则重新关联\n// SHM_EXEC 有执行权限 = 读权限\n// 成功返回关联到的地址, 失败返回 (void*)-1 errno\nvoid* shmat(int shm_id, const void* shm_addr, int shmflg)\n```\n\n将共享内存从进程地址空间中分离\n成功后\nshm_nattach -1\n更新 shm_lpid和shm_dtime设置为当前时间\n```c++\n// 成功返回0 失败返回-1 errno\nint shmdt(const void* shm_addr)\n```\n\n```c++\nint shm_ctl(int shm_id, int command, struct shmid_ds* buf)\n```\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/shmctl.png)\n\n# 第十四章 多线程编程\n根据运行环境和调度者身份, 线程可以分为两种\n内核线程\n运行在内核空间, 由内核来调度.\n用户线程\n运行在用空间, 由线程库来调用\n\n当内核线程获得CPU的使用权的时候, 他就加载并运行一个用户线程, 所以内核线程相当于用户线程的容器.\n\n线程有三种实现方式\n- 完全在用户空间实现-无需内核支持\n\t创建和调度线程无需内核干预, 速度很快.\n\t不占用额外的内核资源, 对系统影响较小\n\t但是无法运行在多个处理器上, 因为这些用户线程是是实现在一个内核线程上的\n- 完全由内核调度\n\t创建和调度线程的任务都交给了内核, 运行在用户空间的线程库无需管理\n\t优缺点正好与上一个相反\n- 双层调度\n\t结合了前两个的优点\n\t不会消耗过多的内核资源,而且线程切换快, 同时它可以充分利用多处理器的优势\n\n## 进程的创建和终止\n```c++\n#include <bits/pthreadtypes.h>\ntypedef unsigned long int pthread_t;\n\n#include <pthread.h>\nint pthread_create(pthread_t* thread, const pthread_attr_t* attr, void* (*start_routine)(void*), void* arg);\n// 成功返回0 失败返回错误码\n// thread 用来唯一的标识一个新线程\n// attr用来设置新县城的属性 传递NULL表示默认线程属性\n// start_routine 指定新线程运行的函数\n// arg指定函数的参数\n```\n```c++\nvoid pthread_exit(void* retval);\n用来保证线程安全干净的退出, 线程函数最好结束时调用.\n通过`retval`参数向线程的回收者传递其退出信息\n执行后不会返回到调用者, 而且永远不会失败\n\nint pthread_join(pthread_t thread, void** retval)\n可以调用这个函数来回收其他线程 不过线程必须是可回收的该函数会一直阻塞知道被回收的线程结束.\n成功时返回0, 失败返回错误码\n等待其他线程结束\nthread 线程标识符\nretval 目标线程的退出返回信息\n\n错误码如下\n`EDEADLK`引起死锁, 两个线程互相针对对方调用pthread_join 或者对自身调用\n`EINVAL`目标线程是不可回收的, 或是其他线程在回收目标线程\n`ESRCH`目标线程不存在\n\nint pthread_cancel(pthread_t thread)\n异常终止一个线程, 即为取消线程\n成功返回0, 失败返回错误码\n\n接收到取消请求的目标线程可以决定是否允许被取消以及如何取消.\n一下两个函数成功返回0 失败返回错误码\n```\n\n```c++\n// 启动线程取消\nint pthread_setcancelstart(int state, int* oldstate)\n第一个参数\nPTHREAD_CANCEL_ENABLE 允许线程被取消, 默认状态\nPTHREAD_CANCEL_DISABLE 不允许被取消, 如果这种线程接收到取消请求, 则会挂起请求指导\n这个线程允许被取消\n第二个参数 返回之前设定的状态\n\n// 设置线程取消类型\nint pthread_setcanceltype(int type, int* oldtype)\n第一个参数\nPTHREAD_CANCEL_ASYNCHRONOUS 线程可以随时被取消\nPTHREAD_CANCEL_DEFERRED 允许目标现成推迟行动, 知道调用了下面几个所谓的取消点函数\n最好使用`pthread_testcancel`函数设置取消点\n设置取消类型(如何取消)\n第二个参数\n原来的取消类型\n```\n\n## POSIX信号量-进程的同步\n多线程也必须考虑线程同步的问题.\n虽然`pthread_join`可以看做简单的线程同步方式不过它无法高效的实现复杂的同步需求\n比如无法实现共享资源独占式访问, 或者在某种条件下唤醒指定的指定线程.\n\n以下函数成功返回0 失败返回-1 errno\n`int sem_init(sem_t* sem, int pshared, unsigned int value)`\n用于初始化一个未命名的信号量.\n如果`pshared`为0 则表示是当前进程的局部信号量, 否则信号量可以在多个进程间共享\n`value`指定参数的初始值\n*初始化已经存在的信号量会导致无法预期的结果*\n\n`int sem_destory(sem_t* sem)`\n销毁信号量, 释放其占用的系统资源\n*销毁正被其他线程等待的信号量, 将会导致无法预期的结果*\n\n`int sem_wait(sem_t* sem)`\n以原子操作的形式将信号量的值 -1, 如果信号量的值为0, 则sem_wait将被阻塞, 知道信号量具有非0值\n\n`int sem_trywait(sem_t* sem)`\n跟上面的函数相同不过不会阻塞. 信号量不为0 则 -1, 为0 则返回-1 errno\n\n`int sem_post(sem_t sem)`\n原子操作将信号量的值 +1","source":"_posts/102CPP-读书记录-高性能服务器编程读书记录进程线程部分.md","raw":"---\ntitle: Linux高性能服务器编程读书记录-进程线程\ntags:\n  - null\ncategories:\n  - CPP\n  - 服务器编程-书籍记录\ndate: 2020-02-25 22:34:39\n\ntop: 102\nimg: https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%B0%81%E9%9D%A2/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B.jpg\n---\n# 第十三章多进程编程\n\n## exec系列系统调用\n```c++\n#include <unistd.h>\n// 声明这个是外部函数或外部变量\nextern char** environ;\n\n// path 参数指定可执行文件的完成路径 file接收文件名,具体位置在PATH中搜寻\n// arg 和 argv用于向新的程序传递参数\n// envp用于设置新程序的环境变量, 未设置则使用全局的环境变量\n// exec函数是不返回的, 除非出错\n// 如果未报错则源程序被新的程序完全替换\n\nint execl(const char* path, const char* arg, ....);\nint execlp(const char* file, const char* arg, ...0);\nint execle(const char* path, const char* arg, ...., char* const envp[])\nint execv(const char* path, char* const argv[]);\nint execvp(const char* file, char* const argv[]);\nint execve(const char* path, char* const argv[], char* const envp[]);\n```\n## fork系统调用-进程的创建\n```c++\n#include <sys/types.h>\n#include <unistd.h>\n// 每次调用都返回两次, 在父进程中返回的子进程的PID, 在子进程中返回0\n// 次返回值用于区分是父进程还是子进程\n// 失败返回-1\npid_t fork(viod);\n```\nfork系统调用\nfork() 函数复制当前的进程, 在内核进程表中创建一个新的进程表项, 新的进程表项有很多的属性和原进程相同\n`堆指针` `栈指针` `标志寄存器的值`.\n也存在不同的项目 该进程的PPID(父进程)被设置成原进程的PID,  信号位图被清除(原进程设置的信号处理函数对新进程无效)\n\n子进程代码与父进程完全相同, 同时复制(采用了写时复制, 父进程和子进程对数据执行了写操作才会复制)了父进程的数据(堆数据, 栈数据, 静态数据)\n创建子进程后, 父进程打开的文件描述符默认在子进程中也是打开的\n`文件描述符的引用计数`, `父进程的用户根目录, 当前工作目录等变量的引用计数` 均加1\n(引自维基百科-引用计数是计算机编程语言中的一种内存管理技术，是指将资源（可以是对象、内存或磁盘空间等等）的被引用次数保存起来，当被引用次数变为零时就将其释放的过程。)\n## 处理僵尸进程-进程的管理\n```c++\n#include <sys/types.h>\n#include <sys/wait.h>\n// wait进程将阻塞进程, 直到该进程的某个子进程结束运行为止. 他返回结束的子进程的PID, 并将该子进程的退出状态存储于stat_loc参数指向的内存中. sys/wait.h 头文件中定义了宏来帮助解释退出信息.\npid_t wait(int* stat_loc);\n\n// 非阻塞, 只等待由pid指定的目标子进程(-1为阻塞)\n// options函数取值WNOHANG-waitpid立即返回\n// 如果目标子进程正常退出, 则返回子进程的pid\n// 如果还没有结束或意外终止, 则立即返回0\n// 调用失败返回-1\npid_t waitpid(pid_t pid, int* stat_loc, int options);\n\nWIFEXITED(stat_val); // 子进程正常结束, 返回一个非0\nWEXITSTATUS(stat_val); // 如果WIFEXITED 非0, 它返回子进程的退出码\nWIFSIGNALED(stat_val);// 如果子进程是因为一个未捕获的信号而终止, 返回一个非0值\nWTERMSIG(stat_val);// 如果WIFSIGNALED非0 返回一个信号值\nWIFSTOPPED(stat_val);// 如果子进程意外终止, 它返回一个非0值\nWSTOPSIG(stat_val);// 如果WIFSTOPED非0, 它返回一个信号值\n```\n\n对于多进程程序而言, 父进程一般需要跟踪子进程的退出状态. 因此, 当子进程结束运行是, 内核不会立即释放该进程的进程表表项, 以满足父进程后续对孩子进程推出信息的查询\n- 在`子进程结束运行之后, 父进程读取其退出状态前`, 我们称该子进程处于`僵尸态`\n- 另外一使子进程进入僵尸态的情况 - 父进程结束或者异常终止, 而子进程继续运行. (子进程的PPID设置为1,init进程接管了子进程) `父进程结束运行之后, 子进程退出之前`, 处于`僵尸态`\n\n以上两种状态都是父进程没有正确处理子进程的返回信息, 子进程都停留在僵尸态, 占据着内核资源.\n\nwaitpid()虽然为非阻塞, 则需要在 waitpid所监视的进程结束后再调用.\nSIGCHLD信号- 子进程结束后将会给父进程发送此信号\n```c++\nstatic void handle_child(int sig)\n{\n\tpid_t pid;\n\tint stat;\n\twhile ((pid = waitpid(-1, &stat, WNOHANG)) > 0)\n\t{\n\t\t// 善后处理emmmm\n\t}\n}\n```\n**管道**\n管道可以在父,子进程间传递数据, 利用的是fork调用后两个文件描述符(fd[0]和fd[1])都保持打开. 一对这样的文件描述符只能保证\n父,子进程间一个方向的数据传输, 父进程和子进程必须有一个关闭fd[0], 另一个关闭fd[1].\n\n可以用两个管道来实现双向传输数据, 也可以用`socketpair`来创建管道\n\n## 信号量-进程的锁\n*信号量原语*\n只支持两种操作, 等待(wait)和信号(signal) , 在LInux中等待和信号有特殊的含义, 所以又称为P(passeren, 传递就好像进入临界区)V(vrijgeven, 释放就好像退出临界区)操作.\n假设有信号量SV(可取任何自然数, 这本书只讨论二进制信号量), 对它的PV操作含义为\n- P(SV), 如果SV的值大于0, 就将它减1, 如果sv的值为0 则挂起进程的执行\n- V(SV), 如果其他进程因为等待SV而挂起, 则唤醒之, 如果没有则将SV加1\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E4%BD%BF%E7%94%A8%E4%BF%A1%E5%8F%B7%E9%87%8F%E4%BF%9D%E6%8A%A4%E5%85%B3%E9%94%AE%E4%BB%A3%E7%A0%81%E6%AE%B5.png)\n\n创建信号量\n```c++\n// semeget 系统调用\n// 创建一个全局唯一的信号量集, 或者获取一个已经存在的信号量集\n// key 参数是一个键值, 用来标识一个全局唯一的信号量级, 就像文件名全局唯一地标识一个文件一样.\n// num_sems 参数指定要创建/获取的信号量集中信号量的数目. 如果是创建信号量-必须指定, 如果是获取-可以指定为0\n// sem_flags指定一组标志, 与调用open函数的mode参数相同用来控制权限\n// - 可以与IPC_CREAT 做或运算创建新的信号量集, 即使信号量集存在也不会报错\n// - 联合使用IPC_CREAT和IPC_EXCL来创建一组新的唯一额信号量集\n// - 如果已经存在则会返回错误 errno = EEXIST\n// 成功返回一个正整数, 是信号量集的标识符, 失败返回 -1\nint semget(key_t key, int num_sems, int sem_flags);\n```\nsemget成功时返回一个与之关联的内核结构体semid_ds\n```c++\nstruct semid_ds\n{\n\tstruct ipc_perm sem_perm;\n\tunsigned long int sem_nsems; // 被设置为num_sems\n\ttime_t sem_otime; // 被设置为0\n\ttime_t sem_ctime; // 被设置为当前的系统时间\n}\n// 用来描述权限\nstruct ipc_perm\n{\n\tuid_t uid; // 所有者的有效用户ID, 被semget设置为调用进程的有效用户ID\n\tgid_t gid; // 所有者的有效组ID, 被semget设置为调用进程的有效用户ID\n\tuid_t cuid; // 创建者的有效用户ID, 被semget设置为调用进程的有效用户ID\n\tgid_t cgid; // 创建者的有效组ID, 被semget设置为调用进程的有效用户ID\n\tmode_t mode;// 访问权限, 背着只为sem_flags参数的最低9位.\n}\n```\n---\n与semop信号量关联的一些重要的内核变量\n```c++\nunsigned short semval; // 信号量的值\nunsigned short semzcnt; // 等待信号量值变为0的进程数量\nunsigned short semncnt// 等待信号量值增加的进程数量\npid_t sempid; // 最后一次执行semop操作的进程ID\n```\n操作信号量, 实际上就是对上面的内核变量操作\n```c++\nstruct sembuf\n{\n\tunsigned short int sem_num;// 信号量集中信号量的编号, 0表示信号量集中的第一个信号量\n\tshort int sem_op; // 指定操作类型,\n\tshort int sem_flg;\n}\n```\n```c++\n// sem_id 是由semget调用返回的信号量集的标识符, 用以指定被操作的,目标信号量集.\n// sem_ops 参数指向一个sembuf结构体类型的数组\nint semop(int sem_id, struct sembuf* sem_ops, size_t num_sem_ops);\n\n// sem_op 每种类型的操作行为又受到sem_flags成员的影响\n// sem_flag 可选值是可选正整数 0 负整数. \n// - IPC_NOWAIT(无论信号量操作是否成功, 都立即返回), \n// - SEM_UNDO (当进程退出的时候, 取消正在进行的semop操作)\n// -- sem_op > 0\n// -- 则semop将被操作的信号量的值semval增加sem_op, 要求调用进程对被操作的信号量集有写权限\n// -- 如果此时设置了SEM_UNDO标志, 则系统将更新进程的semadj变量(用以跟踪进程对信号量的修改情况)\n// -- sem_op = 0\n// -- 标着这是一个`等待0`的操作, 要求调用进程对被操作信号量集有用读权限\n// -- 如果此时信号量的值是0, 则调用立即返回, 否则semop失败返回, 或者阻塞进程以等待信号量变为0\n// -- 此时如果IPC_NOWAIT 标志被设置, sem_op立即返回错误 errno=EAGAIN\n// -- 如果未指定此标志, 则信号量的semzcnt的值增加1, 这时进程被投入睡眠直到下列三个条件之一发生\n// -- 1 信号量的值samval变为0, 此时系统将该信号量的semzcnt减1\n// -- 2 被操作的信号量所在的信号量集被进程移除, 此时semop调用失败返回, errno=EIDRM\n// -- 3 调用被系统中断, 此时semop调用失败返回, errno=EINTR, 同时将该信号量的semzcnt减1\n// -- sem_op < 0\n// -- 表示对信号量的值进行减操作, 即期望获得信号量, 要求调用进程对被操作信号量集有写权限\n// -- 如果semval的值大于等于sem_op的绝对值, 则操作成功, 调用进程立即获得信号量\n// -- 且semval -= abs(sem_op)\n// -- 如果此时这定了SEM_UNDO的标志, 系统更新进程的semadj变量\n// -- 如果semval < abs(sem_op) 则在被指定IPC_NOWAIT的时候semop立即返回error, errno=EAGIN\n// -- 如果没有指定则阻塞进程等待信号量可用, 且 semzcnt +=1, 等到下面三种情况唤醒\n// -- 1 发生semval >= abs(sem_op), semzcnt-=1, semval -= abs(sem_op). 在SEM_UNDO设置时更新semadj\n// -- 2 被操作的信号量所在的信号量集被进程移除, 此时semop调用失败返回, errno=EIDRM (同 sem_op = 0)\n// -- 3 调用被系统中断, 此时semop调用失败返回, errno=EINTR, 同时将该信号量的semzcnt减1 (同 sem_op = 0)\n// num_sem_ops 指定要执行的操作个数, 即sem_ops数组中的元素个数, semop对sem_ops[] 中的每个成员按顺序操作,\n// 并且是原子操作\n// 成功返回0, 失败返回-1 errno. 失败的时候sem_ops[] 中的所有操作不执行\n```\n```c++\n// semctl 系统调用\n// sem_id 参数是由semget返回的信号量集标识符\n// sen_num指定被操作的信号量在信号集中的编号\n// command指定命令, 可以追加命令所需的参数, 不过有推荐格式\n// 成功返回对应command的参数, 失败返回-1 errno\nint semctl(int sem_id, int sem_num, int command, ...);\n```\n结构体\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/1.png)\n\ncommand参数\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/semctl%E7%9A%84command%E5%8F%82%E6%95%B0.png)\n除去GETALL以外的 其他GET都是操作的单个信号量, 由sem_id指定的第sem_num个信号量.\n其他操作针对整个信号量集, 此时semctl的参数sem_num被忽略\n\n\n*特殊键值IPC_PRIVATE*\nsemget的调用者可以给其key参数传递一个特殊的键值`IPC_PRIVATE`, 这样无论该信号量是否已经存在\nsemget都将创建一个新的信号量.\n\n\n**总结PV使用方法**\n使用`semget`获取到唯一的标识.\n使用`semctl`的`SETVAL`传入初始化val的`sem_un`联合体.来初始化val\n调用`semop` 传入唯一标识, `sem_op=-1`执行P(锁)操作`sem_op=1`执行V(开锁)操作\n开关锁通过当`sem_op=-1,semval=0 `\n且未指定`IPC_NOWAIT`\n等待`semval`被`sem_op=1`改为`semval=1`\n\n## 共享内存-进程间通信\n最高效的IPC(进程间通信)机制\n需要自己同步进程对其的访问, 否则会产生竞态条件\n\n```c++\n// key\n// 与semget相同 标识一段全局唯一的共享内存\n// size 内存区域大小 单位字节\n// shmflg\n// shmflg的参数与semget相同, 同时多了两个额外的参数\n// `SHM_HUGETLB`系统将使用\"大页面\"来为共享内存分配空间\n// `SHM_NORESERVE`不为共享内存保留swap空间, 如果物理内存不足\n// 在执行写操作的时候将会触发`SIGSEGV`信号\n// 成功返回唯一标识, 失败返回-1 errno\nint shmget(key_t key, size_t size, int shmflg)\n```\n同时会创建对应的`shmid_ds`结构体\n```c++\nstruct shmid_ds\n{\n\tstruct ipc_perm shm_per; // 权限相关\n\tsize_t shm_segsz; // 共享内存大小 单位字节\tsize\n\t__time_t shm_atime; // 对这段内存最后一次调用semat的时间 0\n\t__time_t shm_dtime; // 对这段内存最后一次调用semdt的时间 0\n\t__time_t shm_ctime; // 对这段内存最后一次调用semctl的时间 当前时间\n\t__pid_t shm_cpid; // 创建者PID\n\t__pid_t lpid; // 最后一次执行shmat或shmdt的进程PID\n\tshmatt_t shm_nattach // 关联到此共享内存空间的进程数量\n}\n```\n将共享内存关联到进程的地址空间\n调用成功之后, 修改shmid_ds的部分\nshm_nattach +1\n更新 shm_lpid和shm_atime设置为当前时间\n```c++\n// shm_id \n// shmget返回的唯一标识\n// shm_addr \n// 关联到进程的哪块地址空间, 其效果还受到shmflg的可选标识SHM_RND的影响\n// 如果shm_addr = NULL, 则关联地址由操作系统决定, 代码可移植性强\n// 如果 shm_addr 非空,且没有`SHM_RND`标志 则关联到指定的地址处\n// 如果 shm_addr 非空, 但是设置了标志 *这里还没用到, 暂时不写*\n// shmflg\n// SHM_RDONLY 设置后内存内容变成只读\n// SHM_REMAP 如果地址shmaddr已经关联到一段内存上则重新关联\n// SHM_EXEC 有执行权限 = 读权限\n// 成功返回关联到的地址, 失败返回 (void*)-1 errno\nvoid* shmat(int shm_id, const void* shm_addr, int shmflg)\n```\n\n将共享内存从进程地址空间中分离\n成功后\nshm_nattach -1\n更新 shm_lpid和shm_dtime设置为当前时间\n```c++\n// 成功返回0 失败返回-1 errno\nint shmdt(const void* shm_addr)\n```\n\n```c++\nint shm_ctl(int shm_id, int command, struct shmid_ds* buf)\n```\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/shmctl.png)\n\n# 第十四章 多线程编程\n根据运行环境和调度者身份, 线程可以分为两种\n内核线程\n运行在内核空间, 由内核来调度.\n用户线程\n运行在用空间, 由线程库来调用\n\n当内核线程获得CPU的使用权的时候, 他就加载并运行一个用户线程, 所以内核线程相当于用户线程的容器.\n\n线程有三种实现方式\n- 完全在用户空间实现-无需内核支持\n\t创建和调度线程无需内核干预, 速度很快.\n\t不占用额外的内核资源, 对系统影响较小\n\t但是无法运行在多个处理器上, 因为这些用户线程是是实现在一个内核线程上的\n- 完全由内核调度\n\t创建和调度线程的任务都交给了内核, 运行在用户空间的线程库无需管理\n\t优缺点正好与上一个相反\n- 双层调度\n\t结合了前两个的优点\n\t不会消耗过多的内核资源,而且线程切换快, 同时它可以充分利用多处理器的优势\n\n## 进程的创建和终止\n```c++\n#include <bits/pthreadtypes.h>\ntypedef unsigned long int pthread_t;\n\n#include <pthread.h>\nint pthread_create(pthread_t* thread, const pthread_attr_t* attr, void* (*start_routine)(void*), void* arg);\n// 成功返回0 失败返回错误码\n// thread 用来唯一的标识一个新线程\n// attr用来设置新县城的属性 传递NULL表示默认线程属性\n// start_routine 指定新线程运行的函数\n// arg指定函数的参数\n```\n```c++\nvoid pthread_exit(void* retval);\n用来保证线程安全干净的退出, 线程函数最好结束时调用.\n通过`retval`参数向线程的回收者传递其退出信息\n执行后不会返回到调用者, 而且永远不会失败\n\nint pthread_join(pthread_t thread, void** retval)\n可以调用这个函数来回收其他线程 不过线程必须是可回收的该函数会一直阻塞知道被回收的线程结束.\n成功时返回0, 失败返回错误码\n等待其他线程结束\nthread 线程标识符\nretval 目标线程的退出返回信息\n\n错误码如下\n`EDEADLK`引起死锁, 两个线程互相针对对方调用pthread_join 或者对自身调用\n`EINVAL`目标线程是不可回收的, 或是其他线程在回收目标线程\n`ESRCH`目标线程不存在\n\nint pthread_cancel(pthread_t thread)\n异常终止一个线程, 即为取消线程\n成功返回0, 失败返回错误码\n\n接收到取消请求的目标线程可以决定是否允许被取消以及如何取消.\n一下两个函数成功返回0 失败返回错误码\n```\n\n```c++\n// 启动线程取消\nint pthread_setcancelstart(int state, int* oldstate)\n第一个参数\nPTHREAD_CANCEL_ENABLE 允许线程被取消, 默认状态\nPTHREAD_CANCEL_DISABLE 不允许被取消, 如果这种线程接收到取消请求, 则会挂起请求指导\n这个线程允许被取消\n第二个参数 返回之前设定的状态\n\n// 设置线程取消类型\nint pthread_setcanceltype(int type, int* oldtype)\n第一个参数\nPTHREAD_CANCEL_ASYNCHRONOUS 线程可以随时被取消\nPTHREAD_CANCEL_DEFERRED 允许目标现成推迟行动, 知道调用了下面几个所谓的取消点函数\n最好使用`pthread_testcancel`函数设置取消点\n设置取消类型(如何取消)\n第二个参数\n原来的取消类型\n```\n\n## POSIX信号量-进程的同步\n多线程也必须考虑线程同步的问题.\n虽然`pthread_join`可以看做简单的线程同步方式不过它无法高效的实现复杂的同步需求\n比如无法实现共享资源独占式访问, 或者在某种条件下唤醒指定的指定线程.\n\n以下函数成功返回0 失败返回-1 errno\n`int sem_init(sem_t* sem, int pshared, unsigned int value)`\n用于初始化一个未命名的信号量.\n如果`pshared`为0 则表示是当前进程的局部信号量, 否则信号量可以在多个进程间共享\n`value`指定参数的初始值\n*初始化已经存在的信号量会导致无法预期的结果*\n\n`int sem_destory(sem_t* sem)`\n销毁信号量, 释放其占用的系统资源\n*销毁正被其他线程等待的信号量, 将会导致无法预期的结果*\n\n`int sem_wait(sem_t* sem)`\n以原子操作的形式将信号量的值 -1, 如果信号量的值为0, 则sem_wait将被阻塞, 知道信号量具有非0值\n\n`int sem_trywait(sem_t* sem)`\n跟上面的函数相同不过不会阻塞. 信号量不为0 则 -1, 为0 则返回-1 errno\n\n`int sem_post(sem_t sem)`\n原子操作将信号量的值 +1","slug":"102CPP-读书记录-高性能服务器编程读书记录进程线程部分","published":1,"updated":"2020-03-04T07:49:22.887Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucyd0008souoa1o9clxd","content":"<h1 id=\"第十三章多进程编程\"><a href=\"#第十三章多进程编程\" class=\"headerlink\" title=\"第十三章多进程编程\"></a>第十三章多进程编程</h1><h2 id=\"exec系列系统调用\"><a href=\"#exec系列系统调用\" class=\"headerlink\" title=\"exec系列系统调用\"></a>exec系列系统调用</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 声明这个是外部函数或外部变量</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">char</span>** environ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// path 参数指定可执行文件的完成路径 file接收文件名,具体位置在PATH中搜寻</span></span><br><span class=\"line\"><span class=\"comment\">// arg 和 argv用于向新的程序传递参数</span></span><br><span class=\"line\"><span class=\"comment\">// envp用于设置新程序的环境变量, 未设置则使用全局的环境变量</span></span><br><span class=\"line\"><span class=\"comment\">// exec函数是不返回的, 除非出错</span></span><br><span class=\"line\"><span class=\"comment\">// 如果未报错则源程序被新的程序完全替换</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execl</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* path, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* arg, ....)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execlp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* file, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* arg, ..<span class=\"number\">.0</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execle</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* path, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* arg, ...., <span class=\"keyword\">char</span>* <span class=\"keyword\">const</span> envp[])</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execv</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* path, <span class=\"keyword\">char</span>* <span class=\"keyword\">const</span> argv[])</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execvp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* file, <span class=\"keyword\">char</span>* <span class=\"keyword\">const</span> argv[])</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execve</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* path, <span class=\"keyword\">char</span>* <span class=\"keyword\">const</span> argv[], <span class=\"keyword\">char</span>* <span class=\"keyword\">const</span> envp[])</span></span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"fork系统调用-进程的创建\"><a href=\"#fork系统调用-进程的创建\" class=\"headerlink\" title=\"fork系统调用-进程的创建\"></a>fork系统调用-进程的创建</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 每次调用都返回两次, 在父进程中返回的子进程的PID, 在子进程中返回0</span></span><br><span class=\"line\"><span class=\"comment\">// 次返回值用于区分是父进程还是子进程</span></span><br><span class=\"line\"><span class=\"comment\">// 失败返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">pid_t</span> <span class=\"title\">fork</span><span class=\"params\">(viod)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>fork系统调用<br>fork() 函数复制当前的进程, 在内核进程表中创建一个新的进程表项, 新的进程表项有很多的属性和原进程相同<br><code>堆指针</code> <code>栈指针</code> <code>标志寄存器的值</code>.<br>也存在不同的项目 该进程的PPID(父进程)被设置成原进程的PID,  信号位图被清除(原进程设置的信号处理函数对新进程无效)</p>\n<p>子进程代码与父进程完全相同, 同时复制(采用了写时复制, 父进程和子进程对数据执行了写操作才会复制)了父进程的数据(堆数据, 栈数据, 静态数据)<br>创建子进程后, 父进程打开的文件描述符默认在子进程中也是打开的<br><code>文件描述符的引用计数</code>, <code>父进程的用户根目录, 当前工作目录等变量的引用计数</code> 均加1<br>(引自维基百科-引用计数是计算机编程语言中的一种内存管理技术，是指将资源（可以是对象、内存或磁盘空间等等）的被引用次数保存起来，当被引用次数变为零时就将其释放的过程。)</p>\n<h2 id=\"处理僵尸进程-进程的管理\"><a href=\"#处理僵尸进程-进程的管理\" class=\"headerlink\" title=\"处理僵尸进程-进程的管理\"></a>处理僵尸进程-进程的管理</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// wait进程将阻塞进程, 直到该进程的某个子进程结束运行为止. 他返回结束的子进程的PID, 并将该子进程的退出状态存储于stat_loc参数指向的内存中. sys/wait.h 头文件中定义了宏来帮助解释退出信息.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">pid_t</span> <span class=\"title\">wait</span><span class=\"params\">(<span class=\"keyword\">int</span>* stat_loc)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 非阻塞, 只等待由pid指定的目标子进程(-1为阻塞)</span></span><br><span class=\"line\"><span class=\"comment\">// options函数取值WNOHANG-waitpid立即返回</span></span><br><span class=\"line\"><span class=\"comment\">// 如果目标子进程正常退出, 则返回子进程的pid</span></span><br><span class=\"line\"><span class=\"comment\">// 如果还没有结束或意外终止, 则立即返回0</span></span><br><span class=\"line\"><span class=\"comment\">// 调用失败返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">pid_t</span> <span class=\"title\">waitpid</span><span class=\"params\">(<span class=\"keyword\">pid_t</span> pid, <span class=\"keyword\">int</span>* stat_loc, <span class=\"keyword\">int</span> options)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">WIFEXITED(stat_val); <span class=\"comment\">// 子进程正常结束, 返回一个非0</span></span><br><span class=\"line\">WEXITSTATUS(stat_val); <span class=\"comment\">// 如果WIFEXITED 非0, 它返回子进程的退出码</span></span><br><span class=\"line\">WIFSIGNALED(stat_val);<span class=\"comment\">// 如果子进程是因为一个未捕获的信号而终止, 返回一个非0值</span></span><br><span class=\"line\">WTERMSIG(stat_val);<span class=\"comment\">// 如果WIFSIGNALED非0 返回一个信号值</span></span><br><span class=\"line\">WIFSTOPPED(stat_val);<span class=\"comment\">// 如果子进程意外终止, 它返回一个非0值</span></span><br><span class=\"line\">WSTOPSIG(stat_val);<span class=\"comment\">// 如果WIFSTOPED非0, 它返回一个信号值</span></span><br></pre></td></tr></table></figure>\n\n<p>对于多进程程序而言, 父进程一般需要跟踪子进程的退出状态. 因此, 当子进程结束运行是, 内核不会立即释放该进程的进程表表项, 以满足父进程后续对孩子进程推出信息的查询</p>\n<ul>\n<li>在<code>子进程结束运行之后, 父进程读取其退出状态前</code>, 我们称该子进程处于<code>僵尸态</code></li>\n<li>另外一使子进程进入僵尸态的情况 - 父进程结束或者异常终止, 而子进程继续运行. (子进程的PPID设置为1,init进程接管了子进程) <code>父进程结束运行之后, 子进程退出之前</code>, 处于<code>僵尸态</code></li>\n</ul>\n<p>以上两种状态都是父进程没有正确处理子进程的返回信息, 子进程都停留在僵尸态, 占据着内核资源.</p>\n<p>waitpid()虽然为非阻塞, 则需要在 waitpid所监视的进程结束后再调用.<br>SIGCHLD信号- 子进程结束后将会给父进程发送此信号</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">handle_child</span><span class=\"params\">(<span class=\"keyword\">int</span> sig)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">pid_t</span> pid;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> stat;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> ((pid = waitpid(<span class=\"number\">-1</span>, &amp;stat, WNOHANG)) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 善后处理emmmm</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>管道</strong><br>管道可以在父,子进程间传递数据, 利用的是fork调用后两个文件描述符(fd[0]和fd[1])都保持打开. 一对这样的文件描述符只能保证<br>父,子进程间一个方向的数据传输, 父进程和子进程必须有一个关闭fd[0], 另一个关闭fd[1].</p>\n<p>可以用两个管道来实现双向传输数据, 也可以用<code>socketpair</code>来创建管道</p>\n<h2 id=\"信号量-进程的锁\"><a href=\"#信号量-进程的锁\" class=\"headerlink\" title=\"信号量-进程的锁\"></a>信号量-进程的锁</h2><p><em>信号量原语</em><br>只支持两种操作, 等待(wait)和信号(signal) , 在LInux中等待和信号有特殊的含义, 所以又称为P(passeren, 传递就好像进入临界区)V(vrijgeven, 释放就好像退出临界区)操作.<br>假设有信号量SV(可取任何自然数, 这本书只讨论二进制信号量), 对它的PV操作含义为</p>\n<ul>\n<li>P(SV), 如果SV的值大于0, 就将它减1, 如果sv的值为0 则挂起进程的执行</li>\n<li>V(SV), 如果其他进程因为等待SV而挂起, 则唤醒之, 如果没有则将SV加1<br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E4%BD%BF%E7%94%A8%E4%BF%A1%E5%8F%B7%E9%87%8F%E4%BF%9D%E6%8A%A4%E5%85%B3%E9%94%AE%E4%BB%A3%E7%A0%81%E6%AE%B5.png\" alt=\"\"></li>\n</ul>\n<p>创建信号量</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// semeget 系统调用</span></span><br><span class=\"line\"><span class=\"comment\">// 创建一个全局唯一的信号量集, 或者获取一个已经存在的信号量集</span></span><br><span class=\"line\"><span class=\"comment\">// key 参数是一个键值, 用来标识一个全局唯一的信号量级, 就像文件名全局唯一地标识一个文件一样.</span></span><br><span class=\"line\"><span class=\"comment\">// num_sems 参数指定要创建/获取的信号量集中信号量的数目. 如果是创建信号量-必须指定, 如果是获取-可以指定为0</span></span><br><span class=\"line\"><span class=\"comment\">// sem_flags指定一组标志, 与调用open函数的mode参数相同用来控制权限</span></span><br><span class=\"line\"><span class=\"comment\">// - 可以与IPC_CREAT 做或运算创建新的信号量集, 即使信号量集存在也不会报错</span></span><br><span class=\"line\"><span class=\"comment\">// - 联合使用IPC_CREAT和IPC_EXCL来创建一组新的唯一额信号量集</span></span><br><span class=\"line\"><span class=\"comment\">// - 如果已经存在则会返回错误 errno = EEXIST</span></span><br><span class=\"line\"><span class=\"comment\">// 成功返回一个正整数, 是信号量集的标识符, 失败返回 -1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">semget</span><span class=\"params\">(<span class=\"keyword\">key_t</span> key, <span class=\"keyword\">int</span> num_sems, <span class=\"keyword\">int</span> sem_flags)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>semget成功时返回一个与之关联的内核结构体semid_ds</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">semid_ds</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipc_perm</span> <span class=\"title\">sem_perm</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">int</span> sem_nsems; <span class=\"comment\">// 被设置为num_sems</span></span><br><span class=\"line\">\t<span class=\"keyword\">time_t</span> sem_otime; <span class=\"comment\">// 被设置为0</span></span><br><span class=\"line\">\t<span class=\"keyword\">time_t</span> sem_ctime; <span class=\"comment\">// 被设置为当前的系统时间</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 用来描述权限</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipc_perm</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">uid_t</span> uid; <span class=\"comment\">// 所有者的有效用户ID, 被semget设置为调用进程的有效用户ID</span></span><br><span class=\"line\">\t<span class=\"keyword\">gid_t</span> gid; <span class=\"comment\">// 所有者的有效组ID, 被semget设置为调用进程的有效用户ID</span></span><br><span class=\"line\">\t<span class=\"keyword\">uid_t</span> cuid; <span class=\"comment\">// 创建者的有效用户ID, 被semget设置为调用进程的有效用户ID</span></span><br><span class=\"line\">\t<span class=\"keyword\">gid_t</span> cgid; <span class=\"comment\">// 创建者的有效组ID, 被semget设置为调用进程的有效用户ID</span></span><br><span class=\"line\">\t<span class=\"keyword\">mode_t</span> mode;<span class=\"comment\">// 访问权限, 背着只为sem_flags参数的最低9位.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>与semop信号量关联的一些重要的内核变量</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> short semval; <span class=\"comment\">// 信号量的值</span></span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> short semzcnt; <span class=\"comment\">// 等待信号量值变为0的进程数量</span></span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> short semncnt<span class=\"comment\">// 等待信号量值增加的进程数量</span></span><br><span class=\"line\"><span class=\"keyword\">pid_t</span> sempid; <span class=\"comment\">// 最后一次执行semop操作的进程ID</span></span><br></pre></td></tr></table></figure>\n<p>操作信号量, 实际上就是对上面的内核变量操作</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sembuf</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> short <span class=\"keyword\">int</span> sem_num;<span class=\"comment\">// 信号量集中信号量的编号, 0表示信号量集中的第一个信号量</span></span><br><span class=\"line\">\tshort <span class=\"keyword\">int</span> sem_op; <span class=\"comment\">// 指定操作类型,</span></span><br><span class=\"line\">\tshort <span class=\"keyword\">int</span> sem_flg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sem_id 是由semget调用返回的信号量集的标识符, 用以指定被操作的,目标信号量集.</span></span><br><span class=\"line\"><span class=\"comment\">// sem_ops 参数指向一个sembuf结构体类型的数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">semop</span><span class=\"params\">(<span class=\"keyword\">int</span> sem_id, struct sembuf* sem_ops, <span class=\"keyword\">size_t</span> num_sem_ops)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sem_op 每种类型的操作行为又受到sem_flags成员的影响</span></span><br><span class=\"line\"><span class=\"comment\">// sem_flag 可选值是可选正整数 0 负整数. </span></span><br><span class=\"line\"><span class=\"comment\">// - IPC_NOWAIT(无论信号量操作是否成功, 都立即返回), </span></span><br><span class=\"line\"><span class=\"comment\">// - SEM_UNDO (当进程退出的时候, 取消正在进行的semop操作)</span></span><br><span class=\"line\"><span class=\"comment\">// -- sem_op &gt; 0</span></span><br><span class=\"line\"><span class=\"comment\">// -- 则semop将被操作的信号量的值semval增加sem_op, 要求调用进程对被操作的信号量集有写权限</span></span><br><span class=\"line\"><span class=\"comment\">// -- 如果此时设置了SEM_UNDO标志, 则系统将更新进程的semadj变量(用以跟踪进程对信号量的修改情况)</span></span><br><span class=\"line\"><span class=\"comment\">// -- sem_op = 0</span></span><br><span class=\"line\"><span class=\"comment\">// -- 标着这是一个`等待0`的操作, 要求调用进程对被操作信号量集有用读权限</span></span><br><span class=\"line\"><span class=\"comment\">// -- 如果此时信号量的值是0, 则调用立即返回, 否则semop失败返回, 或者阻塞进程以等待信号量变为0</span></span><br><span class=\"line\"><span class=\"comment\">// -- 此时如果IPC_NOWAIT 标志被设置, sem_op立即返回错误 errno=EAGAIN</span></span><br><span class=\"line\"><span class=\"comment\">// -- 如果未指定此标志, 则信号量的semzcnt的值增加1, 这时进程被投入睡眠直到下列三个条件之一发生</span></span><br><span class=\"line\"><span class=\"comment\">// -- 1 信号量的值samval变为0, 此时系统将该信号量的semzcnt减1</span></span><br><span class=\"line\"><span class=\"comment\">// -- 2 被操作的信号量所在的信号量集被进程移除, 此时semop调用失败返回, errno=EIDRM</span></span><br><span class=\"line\"><span class=\"comment\">// -- 3 调用被系统中断, 此时semop调用失败返回, errno=EINTR, 同时将该信号量的semzcnt减1</span></span><br><span class=\"line\"><span class=\"comment\">// -- sem_op &lt; 0</span></span><br><span class=\"line\"><span class=\"comment\">// -- 表示对信号量的值进行减操作, 即期望获得信号量, 要求调用进程对被操作信号量集有写权限</span></span><br><span class=\"line\"><span class=\"comment\">// -- 如果semval的值大于等于sem_op的绝对值, 则操作成功, 调用进程立即获得信号量</span></span><br><span class=\"line\"><span class=\"comment\">// -- 且semval -= abs(sem_op)</span></span><br><span class=\"line\"><span class=\"comment\">// -- 如果此时这定了SEM_UNDO的标志, 系统更新进程的semadj变量</span></span><br><span class=\"line\"><span class=\"comment\">// -- 如果semval &lt; abs(sem_op) 则在被指定IPC_NOWAIT的时候semop立即返回error, errno=EAGIN</span></span><br><span class=\"line\"><span class=\"comment\">// -- 如果没有指定则阻塞进程等待信号量可用, 且 semzcnt +=1, 等到下面三种情况唤醒</span></span><br><span class=\"line\"><span class=\"comment\">// -- 1 发生semval &gt;= abs(sem_op), semzcnt-=1, semval -= abs(sem_op). 在SEM_UNDO设置时更新semadj</span></span><br><span class=\"line\"><span class=\"comment\">// -- 2 被操作的信号量所在的信号量集被进程移除, 此时semop调用失败返回, errno=EIDRM (同 sem_op = 0)</span></span><br><span class=\"line\"><span class=\"comment\">// -- 3 调用被系统中断, 此时semop调用失败返回, errno=EINTR, 同时将该信号量的semzcnt减1 (同 sem_op = 0)</span></span><br><span class=\"line\"><span class=\"comment\">// num_sem_ops 指定要执行的操作个数, 即sem_ops数组中的元素个数, semop对sem_ops[] 中的每个成员按顺序操作,</span></span><br><span class=\"line\"><span class=\"comment\">// 并且是原子操作</span></span><br><span class=\"line\"><span class=\"comment\">// 成功返回0, 失败返回-1 errno. 失败的时候sem_ops[] 中的所有操作不执行</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// semctl 系统调用</span></span><br><span class=\"line\"><span class=\"comment\">// sem_id 参数是由semget返回的信号量集标识符</span></span><br><span class=\"line\"><span class=\"comment\">// sen_num指定被操作的信号量在信号集中的编号</span></span><br><span class=\"line\"><span class=\"comment\">// command指定命令, 可以追加命令所需的参数, 不过有推荐格式</span></span><br><span class=\"line\"><span class=\"comment\">// 成功返回对应command的参数, 失败返回-1 errno</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">semctl</span><span class=\"params\">(<span class=\"keyword\">int</span> sem_id, <span class=\"keyword\">int</span> sem_num, <span class=\"keyword\">int</span> command, ...)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>结构体<br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/1.png\" alt=\"\"></p>\n<p>command参数<br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/semctl%E7%9A%84command%E5%8F%82%E6%95%B0.png\" alt=\"\"><br>除去GETALL以外的 其他GET都是操作的单个信号量, 由sem_id指定的第sem_num个信号量.<br>其他操作针对整个信号量集, 此时semctl的参数sem_num被忽略</p>\n<p><em>特殊键值IPC_PRIVATE</em><br>semget的调用者可以给其key参数传递一个特殊的键值<code>IPC_PRIVATE</code>, 这样无论该信号量是否已经存在<br>semget都将创建一个新的信号量.</p>\n<p><strong>总结PV使用方法</strong><br>使用<code>semget</code>获取到唯一的标识.<br>使用<code>semctl</code>的<code>SETVAL</code>传入初始化val的<code>sem_un</code>联合体.来初始化val<br>调用<code>semop</code> 传入唯一标识, <code>sem_op=-1</code>执行P(锁)操作<code>sem_op=1</code>执行V(开锁)操作<br>开关锁通过当<code>sem_op=-1,semval=0</code><br>且未指定<code>IPC_NOWAIT</code><br>等待<code>semval</code>被<code>sem_op=1</code>改为<code>semval=1</code></p>\n<h2 id=\"共享内存-进程间通信\"><a href=\"#共享内存-进程间通信\" class=\"headerlink\" title=\"共享内存-进程间通信\"></a>共享内存-进程间通信</h2><p>最高效的IPC(进程间通信)机制<br>需要自己同步进程对其的访问, 否则会产生竞态条件</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// key</span></span><br><span class=\"line\"><span class=\"comment\">// 与semget相同 标识一段全局唯一的共享内存</span></span><br><span class=\"line\"><span class=\"comment\">// size 内存区域大小 单位字节</span></span><br><span class=\"line\"><span class=\"comment\">// shmflg</span></span><br><span class=\"line\"><span class=\"comment\">// shmflg的参数与semget相同, 同时多了两个额外的参数</span></span><br><span class=\"line\"><span class=\"comment\">// `SHM_HUGETLB`系统将使用\"大页面\"来为共享内存分配空间</span></span><br><span class=\"line\"><span class=\"comment\">// `SHM_NORESERVE`不为共享内存保留swap空间, 如果物理内存不足</span></span><br><span class=\"line\"><span class=\"comment\">// 在执行写操作的时候将会触发`SIGSEGV`信号</span></span><br><span class=\"line\"><span class=\"comment\">// 成功返回唯一标识, 失败返回-1 errno</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">shmget</span><span class=\"params\">(<span class=\"keyword\">key_t</span> key, <span class=\"keyword\">size_t</span> <span class=\"built_in\">size</span>, <span class=\"keyword\">int</span> shmflg)</span></span></span><br></pre></td></tr></table></figure>\n<p>同时会创建对应的<code>shmid_ds</code>结构体</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">shmid_ds</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipc_perm</span> <span class=\"title\">shm_per</span>;</span> <span class=\"comment\">// 权限相关</span></span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> shm_segsz; <span class=\"comment\">// 共享内存大小 单位字节\tsize</span></span><br><span class=\"line\">\t<span class=\"keyword\">__time_t</span> shm_atime; <span class=\"comment\">// 对这段内存最后一次调用semat的时间 0</span></span><br><span class=\"line\">\t<span class=\"keyword\">__time_t</span> shm_dtime; <span class=\"comment\">// 对这段内存最后一次调用semdt的时间 0</span></span><br><span class=\"line\">\t<span class=\"keyword\">__time_t</span> shm_ctime; <span class=\"comment\">// 对这段内存最后一次调用semctl的时间 当前时间</span></span><br><span class=\"line\">\t<span class=\"keyword\">__pid_t</span> shm_cpid; <span class=\"comment\">// 创建者PID</span></span><br><span class=\"line\">\t<span class=\"keyword\">__pid_t</span> lpid; <span class=\"comment\">// 最后一次执行shmat或shmdt的进程PID</span></span><br><span class=\"line\">\t<span class=\"keyword\">shmatt_t</span> shm_nattach <span class=\"comment\">// 关联到此共享内存空间的进程数量</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将共享内存关联到进程的地址空间<br>调用成功之后, 修改shmid_ds的部分<br>shm_nattach +1<br>更新 shm_lpid和shm_atime设置为当前时间</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// shm_id </span></span><br><span class=\"line\"><span class=\"comment\">// shmget返回的唯一标识</span></span><br><span class=\"line\"><span class=\"comment\">// shm_addr </span></span><br><span class=\"line\"><span class=\"comment\">// 关联到进程的哪块地址空间, 其效果还受到shmflg的可选标识SHM_RND的影响</span></span><br><span class=\"line\"><span class=\"comment\">// 如果shm_addr = NULL, 则关联地址由操作系统决定, 代码可移植性强</span></span><br><span class=\"line\"><span class=\"comment\">// 如果 shm_addr 非空,且没有`SHM_RND`标志 则关联到指定的地址处</span></span><br><span class=\"line\"><span class=\"comment\">// 如果 shm_addr 非空, 但是设置了标志 *这里还没用到, 暂时不写*</span></span><br><span class=\"line\"><span class=\"comment\">// shmflg</span></span><br><span class=\"line\"><span class=\"comment\">// SHM_RDONLY 设置后内存内容变成只读</span></span><br><span class=\"line\"><span class=\"comment\">// SHM_REMAP 如果地址shmaddr已经关联到一段内存上则重新关联</span></span><br><span class=\"line\"><span class=\"comment\">// SHM_EXEC 有执行权限 = 读权限</span></span><br><span class=\"line\"><span class=\"comment\">// 成功返回关联到的地址, 失败返回 (void*)-1 errno</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">shmat</span><span class=\"params\">(<span class=\"keyword\">int</span> shm_id, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span>* shm_addr, <span class=\"keyword\">int</span> shmflg)</span></span></span><br></pre></td></tr></table></figure>\n\n<p>将共享内存从进程地址空间中分离<br>成功后<br>shm_nattach -1<br>更新 shm_lpid和shm_dtime设置为当前时间</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 成功返回0 失败返回-1 errno</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">shmdt</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span>* shm_addr)</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">shm_ctl</span><span class=\"params\">(<span class=\"keyword\">int</span> shm_id, <span class=\"keyword\">int</span> command, struct shmid_ds* buf)</span></span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/shmctl.png\" alt=\"\"></p>\n<h1 id=\"第十四章-多线程编程\"><a href=\"#第十四章-多线程编程\" class=\"headerlink\" title=\"第十四章 多线程编程\"></a>第十四章 多线程编程</h1><p>根据运行环境和调度者身份, 线程可以分为两种<br>内核线程<br>运行在内核空间, 由内核来调度.<br>用户线程<br>运行在用空间, 由线程库来调用</p>\n<p>当内核线程获得CPU的使用权的时候, 他就加载并运行一个用户线程, 所以内核线程相当于用户线程的容器.</p>\n<p>线程有三种实现方式</p>\n<ul>\n<li>完全在用户空间实现-无需内核支持<br>  创建和调度线程无需内核干预, 速度很快.<br>  不占用额外的内核资源, 对系统影响较小<br>  但是无法运行在多个处理器上, 因为这些用户线程是是实现在一个内核线程上的</li>\n<li>完全由内核调度<br>  创建和调度线程的任务都交给了内核, 运行在用户空间的线程库无需管理<br>  优缺点正好与上一个相反</li>\n<li>双层调度<br>  结合了前两个的优点<br>  不会消耗过多的内核资源,而且线程切换快, 同时它可以充分利用多处理器的优势</li>\n</ul>\n<h2 id=\"进程的创建和终止\"><a href=\"#进程的创建和终止\" class=\"headerlink\" title=\"进程的创建和终止\"></a>进程的创建和终止</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/pthreadtypes.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">int</span> <span class=\"keyword\">pthread_t</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_create</span><span class=\"params\">(<span class=\"keyword\">pthread_t</span>* thread, <span class=\"keyword\">const</span> <span class=\"keyword\">pthread_attr_t</span>* attr, <span class=\"keyword\">void</span>* (*start_routine)(<span class=\"keyword\">void</span>*), <span class=\"keyword\">void</span>* arg)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 成功返回0 失败返回错误码</span></span><br><span class=\"line\"><span class=\"comment\">// thread 用来唯一的标识一个新线程</span></span><br><span class=\"line\"><span class=\"comment\">// attr用来设置新县城的属性 传递NULL表示默认线程属性</span></span><br><span class=\"line\"><span class=\"comment\">// start_routine 指定新线程运行的函数</span></span><br><span class=\"line\"><span class=\"comment\">// arg指定函数的参数</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pthread_exit</span><span class=\"params\">(<span class=\"keyword\">void</span>* retval)</span></span>;</span><br><span class=\"line\">用来保证线程安全干净的退出, 线程函数最好结束时调用.</span><br><span class=\"line\">通过`retval`参数向线程的回收者传递其退出信息</span><br><span class=\"line\">执行后不会返回到调用者, 而且永远不会失败</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_join</span><span class=\"params\">(<span class=\"keyword\">pthread_t</span> thread, <span class=\"keyword\">void</span>** retval)</span></span></span><br><span class=\"line\">可以调用这个函数来回收其他线程 不过线程必须是可回收的该函数会一直阻塞知道被回收的线程结束.</span><br><span class=\"line\">成功时返回<span class=\"number\">0</span>, 失败返回错误码</span><br><span class=\"line\">等待其他线程结束</span><br><span class=\"line\">thread 线程标识符</span><br><span class=\"line\">retval 目标线程的退出返回信息</span><br><span class=\"line\"></span><br><span class=\"line\">错误码如下</span><br><span class=\"line\">`EDEADLK`引起死锁, 两个线程互相针对对方调用pthread_join 或者对自身调用</span><br><span class=\"line\">`EINVAL`目标线程是不可回收的, 或是其他线程在回收目标线程</span><br><span class=\"line\">`ESRCH`目标线程不存在</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_cancel</span><span class=\"params\">(<span class=\"keyword\">pthread_t</span> thread)</span></span></span><br><span class=\"line\">异常终止一个线程, 即为取消线程</span><br><span class=\"line\">成功返回<span class=\"number\">0</span>, 失败返回错误码</span><br><span class=\"line\"></span><br><span class=\"line\">接收到取消请求的目标线程可以决定是否允许被取消以及如何取消.</span><br><span class=\"line\">一下两个函数成功返回<span class=\"number\">0</span> 失败返回错误码</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 启动线程取消</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_setcancelstart</span><span class=\"params\">(<span class=\"keyword\">int</span> state, <span class=\"keyword\">int</span>* oldstate)</span></span></span><br><span class=\"line\">第一个参数</span><br><span class=\"line\">PTHREAD_CANCEL_ENABLE 允许线程被取消, 默认状态</span><br><span class=\"line\">PTHREAD_CANCEL_DISABLE 不允许被取消, 如果这种线程接收到取消请求, 则会挂起请求指导</span><br><span class=\"line\">这个线程允许被取消</span><br><span class=\"line\">第二个参数 返回之前设定的状态</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置线程取消类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_setcanceltype</span><span class=\"params\">(<span class=\"keyword\">int</span> type, <span class=\"keyword\">int</span>* oldtype)</span></span></span><br><span class=\"line\">第一个参数</span><br><span class=\"line\">PTHREAD_CANCEL_ASYNCHRONOUS 线程可以随时被取消</span><br><span class=\"line\">PTHREAD_CANCEL_DEFERRED 允许目标现成推迟行动, 知道调用了下面几个所谓的取消点函数</span><br><span class=\"line\">最好使用`pthread_testcancel`函数设置取消点</span><br><span class=\"line\">设置取消类型(如何取消)</span><br><span class=\"line\">第二个参数</span><br><span class=\"line\">原来的取消类型</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"POSIX信号量-进程的同步\"><a href=\"#POSIX信号量-进程的同步\" class=\"headerlink\" title=\"POSIX信号量-进程的同步\"></a>POSIX信号量-进程的同步</h2><p>多线程也必须考虑线程同步的问题.<br>虽然<code>pthread_join</code>可以看做简单的线程同步方式不过它无法高效的实现复杂的同步需求<br>比如无法实现共享资源独占式访问, 或者在某种条件下唤醒指定的指定线程.</p>\n<p>以下函数成功返回0 失败返回-1 errno<br><code>int sem_init(sem_t* sem, int pshared, unsigned int value)</code><br>用于初始化一个未命名的信号量.<br>如果<code>pshared</code>为0 则表示是当前进程的局部信号量, 否则信号量可以在多个进程间共享<br><code>value</code>指定参数的初始值<br><em>初始化已经存在的信号量会导致无法预期的结果</em></p>\n<p><code>int sem_destory(sem_t* sem)</code><br>销毁信号量, 释放其占用的系统资源<br><em>销毁正被其他线程等待的信号量, 将会导致无法预期的结果</em></p>\n<p><code>int sem_wait(sem_t* sem)</code><br>以原子操作的形式将信号量的值 -1, 如果信号量的值为0, 则sem_wait将被阻塞, 知道信号量具有非0值</p>\n<p><code>int sem_trywait(sem_t* sem)</code><br>跟上面的函数相同不过不会阻塞. 信号量不为0 则 -1, 为0 则返回-1 errno</p>\n<p><code>int sem_post(sem_t sem)</code><br>原子操作将信号量的值 +1</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"第十三章多进程编程\"><a href=\"#第十三章多进程编程\" class=\"headerlink\" title=\"第十三章多进程编程\"></a>第十三章多进程编程</h1><h2 id=\"exec系列系统调用\"><a href=\"#exec系列系统调用\" class=\"headerlink\" title=\"exec系列系统调用\"></a>exec系列系统调用</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 声明这个是外部函数或外部变量</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">char</span>** environ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// path 参数指定可执行文件的完成路径 file接收文件名,具体位置在PATH中搜寻</span></span><br><span class=\"line\"><span class=\"comment\">// arg 和 argv用于向新的程序传递参数</span></span><br><span class=\"line\"><span class=\"comment\">// envp用于设置新程序的环境变量, 未设置则使用全局的环境变量</span></span><br><span class=\"line\"><span class=\"comment\">// exec函数是不返回的, 除非出错</span></span><br><span class=\"line\"><span class=\"comment\">// 如果未报错则源程序被新的程序完全替换</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execl</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* path, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* arg, ....)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execlp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* file, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* arg, ..<span class=\"number\">.0</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execle</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* path, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* arg, ...., <span class=\"keyword\">char</span>* <span class=\"keyword\">const</span> envp[])</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execv</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* path, <span class=\"keyword\">char</span>* <span class=\"keyword\">const</span> argv[])</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execvp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* file, <span class=\"keyword\">char</span>* <span class=\"keyword\">const</span> argv[])</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execve</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* path, <span class=\"keyword\">char</span>* <span class=\"keyword\">const</span> argv[], <span class=\"keyword\">char</span>* <span class=\"keyword\">const</span> envp[])</span></span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"fork系统调用-进程的创建\"><a href=\"#fork系统调用-进程的创建\" class=\"headerlink\" title=\"fork系统调用-进程的创建\"></a>fork系统调用-进程的创建</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 每次调用都返回两次, 在父进程中返回的子进程的PID, 在子进程中返回0</span></span><br><span class=\"line\"><span class=\"comment\">// 次返回值用于区分是父进程还是子进程</span></span><br><span class=\"line\"><span class=\"comment\">// 失败返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">pid_t</span> <span class=\"title\">fork</span><span class=\"params\">(viod)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>fork系统调用<br>fork() 函数复制当前的进程, 在内核进程表中创建一个新的进程表项, 新的进程表项有很多的属性和原进程相同<br><code>堆指针</code> <code>栈指针</code> <code>标志寄存器的值</code>.<br>也存在不同的项目 该进程的PPID(父进程)被设置成原进程的PID,  信号位图被清除(原进程设置的信号处理函数对新进程无效)</p>\n<p>子进程代码与父进程完全相同, 同时复制(采用了写时复制, 父进程和子进程对数据执行了写操作才会复制)了父进程的数据(堆数据, 栈数据, 静态数据)<br>创建子进程后, 父进程打开的文件描述符默认在子进程中也是打开的<br><code>文件描述符的引用计数</code>, <code>父进程的用户根目录, 当前工作目录等变量的引用计数</code> 均加1<br>(引自维基百科-引用计数是计算机编程语言中的一种内存管理技术，是指将资源（可以是对象、内存或磁盘空间等等）的被引用次数保存起来，当被引用次数变为零时就将其释放的过程。)</p>\n<h2 id=\"处理僵尸进程-进程的管理\"><a href=\"#处理僵尸进程-进程的管理\" class=\"headerlink\" title=\"处理僵尸进程-进程的管理\"></a>处理僵尸进程-进程的管理</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// wait进程将阻塞进程, 直到该进程的某个子进程结束运行为止. 他返回结束的子进程的PID, 并将该子进程的退出状态存储于stat_loc参数指向的内存中. sys/wait.h 头文件中定义了宏来帮助解释退出信息.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">pid_t</span> <span class=\"title\">wait</span><span class=\"params\">(<span class=\"keyword\">int</span>* stat_loc)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 非阻塞, 只等待由pid指定的目标子进程(-1为阻塞)</span></span><br><span class=\"line\"><span class=\"comment\">// options函数取值WNOHANG-waitpid立即返回</span></span><br><span class=\"line\"><span class=\"comment\">// 如果目标子进程正常退出, 则返回子进程的pid</span></span><br><span class=\"line\"><span class=\"comment\">// 如果还没有结束或意外终止, 则立即返回0</span></span><br><span class=\"line\"><span class=\"comment\">// 调用失败返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">pid_t</span> <span class=\"title\">waitpid</span><span class=\"params\">(<span class=\"keyword\">pid_t</span> pid, <span class=\"keyword\">int</span>* stat_loc, <span class=\"keyword\">int</span> options)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">WIFEXITED(stat_val); <span class=\"comment\">// 子进程正常结束, 返回一个非0</span></span><br><span class=\"line\">WEXITSTATUS(stat_val); <span class=\"comment\">// 如果WIFEXITED 非0, 它返回子进程的退出码</span></span><br><span class=\"line\">WIFSIGNALED(stat_val);<span class=\"comment\">// 如果子进程是因为一个未捕获的信号而终止, 返回一个非0值</span></span><br><span class=\"line\">WTERMSIG(stat_val);<span class=\"comment\">// 如果WIFSIGNALED非0 返回一个信号值</span></span><br><span class=\"line\">WIFSTOPPED(stat_val);<span class=\"comment\">// 如果子进程意外终止, 它返回一个非0值</span></span><br><span class=\"line\">WSTOPSIG(stat_val);<span class=\"comment\">// 如果WIFSTOPED非0, 它返回一个信号值</span></span><br></pre></td></tr></table></figure>\n\n<p>对于多进程程序而言, 父进程一般需要跟踪子进程的退出状态. 因此, 当子进程结束运行是, 内核不会立即释放该进程的进程表表项, 以满足父进程后续对孩子进程推出信息的查询</p>\n<ul>\n<li>在<code>子进程结束运行之后, 父进程读取其退出状态前</code>, 我们称该子进程处于<code>僵尸态</code></li>\n<li>另外一使子进程进入僵尸态的情况 - 父进程结束或者异常终止, 而子进程继续运行. (子进程的PPID设置为1,init进程接管了子进程) <code>父进程结束运行之后, 子进程退出之前</code>, 处于<code>僵尸态</code></li>\n</ul>\n<p>以上两种状态都是父进程没有正确处理子进程的返回信息, 子进程都停留在僵尸态, 占据着内核资源.</p>\n<p>waitpid()虽然为非阻塞, 则需要在 waitpid所监视的进程结束后再调用.<br>SIGCHLD信号- 子进程结束后将会给父进程发送此信号</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">handle_child</span><span class=\"params\">(<span class=\"keyword\">int</span> sig)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">pid_t</span> pid;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> stat;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> ((pid = waitpid(<span class=\"number\">-1</span>, &amp;stat, WNOHANG)) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 善后处理emmmm</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>管道</strong><br>管道可以在父,子进程间传递数据, 利用的是fork调用后两个文件描述符(fd[0]和fd[1])都保持打开. 一对这样的文件描述符只能保证<br>父,子进程间一个方向的数据传输, 父进程和子进程必须有一个关闭fd[0], 另一个关闭fd[1].</p>\n<p>可以用两个管道来实现双向传输数据, 也可以用<code>socketpair</code>来创建管道</p>\n<h2 id=\"信号量-进程的锁\"><a href=\"#信号量-进程的锁\" class=\"headerlink\" title=\"信号量-进程的锁\"></a>信号量-进程的锁</h2><p><em>信号量原语</em><br>只支持两种操作, 等待(wait)和信号(signal) , 在LInux中等待和信号有特殊的含义, 所以又称为P(passeren, 传递就好像进入临界区)V(vrijgeven, 释放就好像退出临界区)操作.<br>假设有信号量SV(可取任何自然数, 这本书只讨论二进制信号量), 对它的PV操作含义为</p>\n<ul>\n<li>P(SV), 如果SV的值大于0, 就将它减1, 如果sv的值为0 则挂起进程的执行</li>\n<li>V(SV), 如果其他进程因为等待SV而挂起, 则唤醒之, 如果没有则将SV加1<br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/%E4%BD%BF%E7%94%A8%E4%BF%A1%E5%8F%B7%E9%87%8F%E4%BF%9D%E6%8A%A4%E5%85%B3%E9%94%AE%E4%BB%A3%E7%A0%81%E6%AE%B5.png\" alt=\"\"></li>\n</ul>\n<p>创建信号量</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// semeget 系统调用</span></span><br><span class=\"line\"><span class=\"comment\">// 创建一个全局唯一的信号量集, 或者获取一个已经存在的信号量集</span></span><br><span class=\"line\"><span class=\"comment\">// key 参数是一个键值, 用来标识一个全局唯一的信号量级, 就像文件名全局唯一地标识一个文件一样.</span></span><br><span class=\"line\"><span class=\"comment\">// num_sems 参数指定要创建/获取的信号量集中信号量的数目. 如果是创建信号量-必须指定, 如果是获取-可以指定为0</span></span><br><span class=\"line\"><span class=\"comment\">// sem_flags指定一组标志, 与调用open函数的mode参数相同用来控制权限</span></span><br><span class=\"line\"><span class=\"comment\">// - 可以与IPC_CREAT 做或运算创建新的信号量集, 即使信号量集存在也不会报错</span></span><br><span class=\"line\"><span class=\"comment\">// - 联合使用IPC_CREAT和IPC_EXCL来创建一组新的唯一额信号量集</span></span><br><span class=\"line\"><span class=\"comment\">// - 如果已经存在则会返回错误 errno = EEXIST</span></span><br><span class=\"line\"><span class=\"comment\">// 成功返回一个正整数, 是信号量集的标识符, 失败返回 -1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">semget</span><span class=\"params\">(<span class=\"keyword\">key_t</span> key, <span class=\"keyword\">int</span> num_sems, <span class=\"keyword\">int</span> sem_flags)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>semget成功时返回一个与之关联的内核结构体semid_ds</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">semid_ds</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipc_perm</span> <span class=\"title\">sem_perm</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">int</span> sem_nsems; <span class=\"comment\">// 被设置为num_sems</span></span><br><span class=\"line\">\t<span class=\"keyword\">time_t</span> sem_otime; <span class=\"comment\">// 被设置为0</span></span><br><span class=\"line\">\t<span class=\"keyword\">time_t</span> sem_ctime; <span class=\"comment\">// 被设置为当前的系统时间</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 用来描述权限</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipc_perm</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">uid_t</span> uid; <span class=\"comment\">// 所有者的有效用户ID, 被semget设置为调用进程的有效用户ID</span></span><br><span class=\"line\">\t<span class=\"keyword\">gid_t</span> gid; <span class=\"comment\">// 所有者的有效组ID, 被semget设置为调用进程的有效用户ID</span></span><br><span class=\"line\">\t<span class=\"keyword\">uid_t</span> cuid; <span class=\"comment\">// 创建者的有效用户ID, 被semget设置为调用进程的有效用户ID</span></span><br><span class=\"line\">\t<span class=\"keyword\">gid_t</span> cgid; <span class=\"comment\">// 创建者的有效组ID, 被semget设置为调用进程的有效用户ID</span></span><br><span class=\"line\">\t<span class=\"keyword\">mode_t</span> mode;<span class=\"comment\">// 访问权限, 背着只为sem_flags参数的最低9位.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>与semop信号量关联的一些重要的内核变量</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> short semval; <span class=\"comment\">// 信号量的值</span></span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> short semzcnt; <span class=\"comment\">// 等待信号量值变为0的进程数量</span></span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> short semncnt<span class=\"comment\">// 等待信号量值增加的进程数量</span></span><br><span class=\"line\"><span class=\"keyword\">pid_t</span> sempid; <span class=\"comment\">// 最后一次执行semop操作的进程ID</span></span><br></pre></td></tr></table></figure>\n<p>操作信号量, 实际上就是对上面的内核变量操作</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sembuf</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> short <span class=\"keyword\">int</span> sem_num;<span class=\"comment\">// 信号量集中信号量的编号, 0表示信号量集中的第一个信号量</span></span><br><span class=\"line\">\tshort <span class=\"keyword\">int</span> sem_op; <span class=\"comment\">// 指定操作类型,</span></span><br><span class=\"line\">\tshort <span class=\"keyword\">int</span> sem_flg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sem_id 是由semget调用返回的信号量集的标识符, 用以指定被操作的,目标信号量集.</span></span><br><span class=\"line\"><span class=\"comment\">// sem_ops 参数指向一个sembuf结构体类型的数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">semop</span><span class=\"params\">(<span class=\"keyword\">int</span> sem_id, struct sembuf* sem_ops, <span class=\"keyword\">size_t</span> num_sem_ops)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sem_op 每种类型的操作行为又受到sem_flags成员的影响</span></span><br><span class=\"line\"><span class=\"comment\">// sem_flag 可选值是可选正整数 0 负整数. </span></span><br><span class=\"line\"><span class=\"comment\">// - IPC_NOWAIT(无论信号量操作是否成功, 都立即返回), </span></span><br><span class=\"line\"><span class=\"comment\">// - SEM_UNDO (当进程退出的时候, 取消正在进行的semop操作)</span></span><br><span class=\"line\"><span class=\"comment\">// -- sem_op &gt; 0</span></span><br><span class=\"line\"><span class=\"comment\">// -- 则semop将被操作的信号量的值semval增加sem_op, 要求调用进程对被操作的信号量集有写权限</span></span><br><span class=\"line\"><span class=\"comment\">// -- 如果此时设置了SEM_UNDO标志, 则系统将更新进程的semadj变量(用以跟踪进程对信号量的修改情况)</span></span><br><span class=\"line\"><span class=\"comment\">// -- sem_op = 0</span></span><br><span class=\"line\"><span class=\"comment\">// -- 标着这是一个`等待0`的操作, 要求调用进程对被操作信号量集有用读权限</span></span><br><span class=\"line\"><span class=\"comment\">// -- 如果此时信号量的值是0, 则调用立即返回, 否则semop失败返回, 或者阻塞进程以等待信号量变为0</span></span><br><span class=\"line\"><span class=\"comment\">// -- 此时如果IPC_NOWAIT 标志被设置, sem_op立即返回错误 errno=EAGAIN</span></span><br><span class=\"line\"><span class=\"comment\">// -- 如果未指定此标志, 则信号量的semzcnt的值增加1, 这时进程被投入睡眠直到下列三个条件之一发生</span></span><br><span class=\"line\"><span class=\"comment\">// -- 1 信号量的值samval变为0, 此时系统将该信号量的semzcnt减1</span></span><br><span class=\"line\"><span class=\"comment\">// -- 2 被操作的信号量所在的信号量集被进程移除, 此时semop调用失败返回, errno=EIDRM</span></span><br><span class=\"line\"><span class=\"comment\">// -- 3 调用被系统中断, 此时semop调用失败返回, errno=EINTR, 同时将该信号量的semzcnt减1</span></span><br><span class=\"line\"><span class=\"comment\">// -- sem_op &lt; 0</span></span><br><span class=\"line\"><span class=\"comment\">// -- 表示对信号量的值进行减操作, 即期望获得信号量, 要求调用进程对被操作信号量集有写权限</span></span><br><span class=\"line\"><span class=\"comment\">// -- 如果semval的值大于等于sem_op的绝对值, 则操作成功, 调用进程立即获得信号量</span></span><br><span class=\"line\"><span class=\"comment\">// -- 且semval -= abs(sem_op)</span></span><br><span class=\"line\"><span class=\"comment\">// -- 如果此时这定了SEM_UNDO的标志, 系统更新进程的semadj变量</span></span><br><span class=\"line\"><span class=\"comment\">// -- 如果semval &lt; abs(sem_op) 则在被指定IPC_NOWAIT的时候semop立即返回error, errno=EAGIN</span></span><br><span class=\"line\"><span class=\"comment\">// -- 如果没有指定则阻塞进程等待信号量可用, 且 semzcnt +=1, 等到下面三种情况唤醒</span></span><br><span class=\"line\"><span class=\"comment\">// -- 1 发生semval &gt;= abs(sem_op), semzcnt-=1, semval -= abs(sem_op). 在SEM_UNDO设置时更新semadj</span></span><br><span class=\"line\"><span class=\"comment\">// -- 2 被操作的信号量所在的信号量集被进程移除, 此时semop调用失败返回, errno=EIDRM (同 sem_op = 0)</span></span><br><span class=\"line\"><span class=\"comment\">// -- 3 调用被系统中断, 此时semop调用失败返回, errno=EINTR, 同时将该信号量的semzcnt减1 (同 sem_op = 0)</span></span><br><span class=\"line\"><span class=\"comment\">// num_sem_ops 指定要执行的操作个数, 即sem_ops数组中的元素个数, semop对sem_ops[] 中的每个成员按顺序操作,</span></span><br><span class=\"line\"><span class=\"comment\">// 并且是原子操作</span></span><br><span class=\"line\"><span class=\"comment\">// 成功返回0, 失败返回-1 errno. 失败的时候sem_ops[] 中的所有操作不执行</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// semctl 系统调用</span></span><br><span class=\"line\"><span class=\"comment\">// sem_id 参数是由semget返回的信号量集标识符</span></span><br><span class=\"line\"><span class=\"comment\">// sen_num指定被操作的信号量在信号集中的编号</span></span><br><span class=\"line\"><span class=\"comment\">// command指定命令, 可以追加命令所需的参数, 不过有推荐格式</span></span><br><span class=\"line\"><span class=\"comment\">// 成功返回对应command的参数, 失败返回-1 errno</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">semctl</span><span class=\"params\">(<span class=\"keyword\">int</span> sem_id, <span class=\"keyword\">int</span> sem_num, <span class=\"keyword\">int</span> command, ...)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>结构体<br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/1.png\" alt=\"\"></p>\n<p>command参数<br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/semctl%E7%9A%84command%E5%8F%82%E6%95%B0.png\" alt=\"\"><br>除去GETALL以外的 其他GET都是操作的单个信号量, 由sem_id指定的第sem_num个信号量.<br>其他操作针对整个信号量集, 此时semctl的参数sem_num被忽略</p>\n<p><em>特殊键值IPC_PRIVATE</em><br>semget的调用者可以给其key参数传递一个特殊的键值<code>IPC_PRIVATE</code>, 这样无论该信号量是否已经存在<br>semget都将创建一个新的信号量.</p>\n<p><strong>总结PV使用方法</strong><br>使用<code>semget</code>获取到唯一的标识.<br>使用<code>semctl</code>的<code>SETVAL</code>传入初始化val的<code>sem_un</code>联合体.来初始化val<br>调用<code>semop</code> 传入唯一标识, <code>sem_op=-1</code>执行P(锁)操作<code>sem_op=1</code>执行V(开锁)操作<br>开关锁通过当<code>sem_op=-1,semval=0</code><br>且未指定<code>IPC_NOWAIT</code><br>等待<code>semval</code>被<code>sem_op=1</code>改为<code>semval=1</code></p>\n<h2 id=\"共享内存-进程间通信\"><a href=\"#共享内存-进程间通信\" class=\"headerlink\" title=\"共享内存-进程间通信\"></a>共享内存-进程间通信</h2><p>最高效的IPC(进程间通信)机制<br>需要自己同步进程对其的访问, 否则会产生竞态条件</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// key</span></span><br><span class=\"line\"><span class=\"comment\">// 与semget相同 标识一段全局唯一的共享内存</span></span><br><span class=\"line\"><span class=\"comment\">// size 内存区域大小 单位字节</span></span><br><span class=\"line\"><span class=\"comment\">// shmflg</span></span><br><span class=\"line\"><span class=\"comment\">// shmflg的参数与semget相同, 同时多了两个额外的参数</span></span><br><span class=\"line\"><span class=\"comment\">// `SHM_HUGETLB`系统将使用\"大页面\"来为共享内存分配空间</span></span><br><span class=\"line\"><span class=\"comment\">// `SHM_NORESERVE`不为共享内存保留swap空间, 如果物理内存不足</span></span><br><span class=\"line\"><span class=\"comment\">// 在执行写操作的时候将会触发`SIGSEGV`信号</span></span><br><span class=\"line\"><span class=\"comment\">// 成功返回唯一标识, 失败返回-1 errno</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">shmget</span><span class=\"params\">(<span class=\"keyword\">key_t</span> key, <span class=\"keyword\">size_t</span> <span class=\"built_in\">size</span>, <span class=\"keyword\">int</span> shmflg)</span></span></span><br></pre></td></tr></table></figure>\n<p>同时会创建对应的<code>shmid_ds</code>结构体</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">shmid_ds</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipc_perm</span> <span class=\"title\">shm_per</span>;</span> <span class=\"comment\">// 权限相关</span></span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> shm_segsz; <span class=\"comment\">// 共享内存大小 单位字节\tsize</span></span><br><span class=\"line\">\t<span class=\"keyword\">__time_t</span> shm_atime; <span class=\"comment\">// 对这段内存最后一次调用semat的时间 0</span></span><br><span class=\"line\">\t<span class=\"keyword\">__time_t</span> shm_dtime; <span class=\"comment\">// 对这段内存最后一次调用semdt的时间 0</span></span><br><span class=\"line\">\t<span class=\"keyword\">__time_t</span> shm_ctime; <span class=\"comment\">// 对这段内存最后一次调用semctl的时间 当前时间</span></span><br><span class=\"line\">\t<span class=\"keyword\">__pid_t</span> shm_cpid; <span class=\"comment\">// 创建者PID</span></span><br><span class=\"line\">\t<span class=\"keyword\">__pid_t</span> lpid; <span class=\"comment\">// 最后一次执行shmat或shmdt的进程PID</span></span><br><span class=\"line\">\t<span class=\"keyword\">shmatt_t</span> shm_nattach <span class=\"comment\">// 关联到此共享内存空间的进程数量</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将共享内存关联到进程的地址空间<br>调用成功之后, 修改shmid_ds的部分<br>shm_nattach +1<br>更新 shm_lpid和shm_atime设置为当前时间</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// shm_id </span></span><br><span class=\"line\"><span class=\"comment\">// shmget返回的唯一标识</span></span><br><span class=\"line\"><span class=\"comment\">// shm_addr </span></span><br><span class=\"line\"><span class=\"comment\">// 关联到进程的哪块地址空间, 其效果还受到shmflg的可选标识SHM_RND的影响</span></span><br><span class=\"line\"><span class=\"comment\">// 如果shm_addr = NULL, 则关联地址由操作系统决定, 代码可移植性强</span></span><br><span class=\"line\"><span class=\"comment\">// 如果 shm_addr 非空,且没有`SHM_RND`标志 则关联到指定的地址处</span></span><br><span class=\"line\"><span class=\"comment\">// 如果 shm_addr 非空, 但是设置了标志 *这里还没用到, 暂时不写*</span></span><br><span class=\"line\"><span class=\"comment\">// shmflg</span></span><br><span class=\"line\"><span class=\"comment\">// SHM_RDONLY 设置后内存内容变成只读</span></span><br><span class=\"line\"><span class=\"comment\">// SHM_REMAP 如果地址shmaddr已经关联到一段内存上则重新关联</span></span><br><span class=\"line\"><span class=\"comment\">// SHM_EXEC 有执行权限 = 读权限</span></span><br><span class=\"line\"><span class=\"comment\">// 成功返回关联到的地址, 失败返回 (void*)-1 errno</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">shmat</span><span class=\"params\">(<span class=\"keyword\">int</span> shm_id, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span>* shm_addr, <span class=\"keyword\">int</span> shmflg)</span></span></span><br></pre></td></tr></table></figure>\n\n<p>将共享内存从进程地址空间中分离<br>成功后<br>shm_nattach -1<br>更新 shm_lpid和shm_dtime设置为当前时间</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 成功返回0 失败返回-1 errno</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">shmdt</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span>* shm_addr)</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">shm_ctl</span><span class=\"params\">(<span class=\"keyword\">int</span> shm_id, <span class=\"keyword\">int</span> command, struct shmid_ds* buf)</span></span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/shmctl.png\" alt=\"\"></p>\n<h1 id=\"第十四章-多线程编程\"><a href=\"#第十四章-多线程编程\" class=\"headerlink\" title=\"第十四章 多线程编程\"></a>第十四章 多线程编程</h1><p>根据运行环境和调度者身份, 线程可以分为两种<br>内核线程<br>运行在内核空间, 由内核来调度.<br>用户线程<br>运行在用空间, 由线程库来调用</p>\n<p>当内核线程获得CPU的使用权的时候, 他就加载并运行一个用户线程, 所以内核线程相当于用户线程的容器.</p>\n<p>线程有三种实现方式</p>\n<ul>\n<li>完全在用户空间实现-无需内核支持<br>  创建和调度线程无需内核干预, 速度很快.<br>  不占用额外的内核资源, 对系统影响较小<br>  但是无法运行在多个处理器上, 因为这些用户线程是是实现在一个内核线程上的</li>\n<li>完全由内核调度<br>  创建和调度线程的任务都交给了内核, 运行在用户空间的线程库无需管理<br>  优缺点正好与上一个相反</li>\n<li>双层调度<br>  结合了前两个的优点<br>  不会消耗过多的内核资源,而且线程切换快, 同时它可以充分利用多处理器的优势</li>\n</ul>\n<h2 id=\"进程的创建和终止\"><a href=\"#进程的创建和终止\" class=\"headerlink\" title=\"进程的创建和终止\"></a>进程的创建和终止</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/pthreadtypes.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">int</span> <span class=\"keyword\">pthread_t</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_create</span><span class=\"params\">(<span class=\"keyword\">pthread_t</span>* thread, <span class=\"keyword\">const</span> <span class=\"keyword\">pthread_attr_t</span>* attr, <span class=\"keyword\">void</span>* (*start_routine)(<span class=\"keyword\">void</span>*), <span class=\"keyword\">void</span>* arg)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 成功返回0 失败返回错误码</span></span><br><span class=\"line\"><span class=\"comment\">// thread 用来唯一的标识一个新线程</span></span><br><span class=\"line\"><span class=\"comment\">// attr用来设置新县城的属性 传递NULL表示默认线程属性</span></span><br><span class=\"line\"><span class=\"comment\">// start_routine 指定新线程运行的函数</span></span><br><span class=\"line\"><span class=\"comment\">// arg指定函数的参数</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pthread_exit</span><span class=\"params\">(<span class=\"keyword\">void</span>* retval)</span></span>;</span><br><span class=\"line\">用来保证线程安全干净的退出, 线程函数最好结束时调用.</span><br><span class=\"line\">通过`retval`参数向线程的回收者传递其退出信息</span><br><span class=\"line\">执行后不会返回到调用者, 而且永远不会失败</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_join</span><span class=\"params\">(<span class=\"keyword\">pthread_t</span> thread, <span class=\"keyword\">void</span>** retval)</span></span></span><br><span class=\"line\">可以调用这个函数来回收其他线程 不过线程必须是可回收的该函数会一直阻塞知道被回收的线程结束.</span><br><span class=\"line\">成功时返回<span class=\"number\">0</span>, 失败返回错误码</span><br><span class=\"line\">等待其他线程结束</span><br><span class=\"line\">thread 线程标识符</span><br><span class=\"line\">retval 目标线程的退出返回信息</span><br><span class=\"line\"></span><br><span class=\"line\">错误码如下</span><br><span class=\"line\">`EDEADLK`引起死锁, 两个线程互相针对对方调用pthread_join 或者对自身调用</span><br><span class=\"line\">`EINVAL`目标线程是不可回收的, 或是其他线程在回收目标线程</span><br><span class=\"line\">`ESRCH`目标线程不存在</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_cancel</span><span class=\"params\">(<span class=\"keyword\">pthread_t</span> thread)</span></span></span><br><span class=\"line\">异常终止一个线程, 即为取消线程</span><br><span class=\"line\">成功返回<span class=\"number\">0</span>, 失败返回错误码</span><br><span class=\"line\"></span><br><span class=\"line\">接收到取消请求的目标线程可以决定是否允许被取消以及如何取消.</span><br><span class=\"line\">一下两个函数成功返回<span class=\"number\">0</span> 失败返回错误码</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 启动线程取消</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_setcancelstart</span><span class=\"params\">(<span class=\"keyword\">int</span> state, <span class=\"keyword\">int</span>* oldstate)</span></span></span><br><span class=\"line\">第一个参数</span><br><span class=\"line\">PTHREAD_CANCEL_ENABLE 允许线程被取消, 默认状态</span><br><span class=\"line\">PTHREAD_CANCEL_DISABLE 不允许被取消, 如果这种线程接收到取消请求, 则会挂起请求指导</span><br><span class=\"line\">这个线程允许被取消</span><br><span class=\"line\">第二个参数 返回之前设定的状态</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置线程取消类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_setcanceltype</span><span class=\"params\">(<span class=\"keyword\">int</span> type, <span class=\"keyword\">int</span>* oldtype)</span></span></span><br><span class=\"line\">第一个参数</span><br><span class=\"line\">PTHREAD_CANCEL_ASYNCHRONOUS 线程可以随时被取消</span><br><span class=\"line\">PTHREAD_CANCEL_DEFERRED 允许目标现成推迟行动, 知道调用了下面几个所谓的取消点函数</span><br><span class=\"line\">最好使用`pthread_testcancel`函数设置取消点</span><br><span class=\"line\">设置取消类型(如何取消)</span><br><span class=\"line\">第二个参数</span><br><span class=\"line\">原来的取消类型</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"POSIX信号量-进程的同步\"><a href=\"#POSIX信号量-进程的同步\" class=\"headerlink\" title=\"POSIX信号量-进程的同步\"></a>POSIX信号量-进程的同步</h2><p>多线程也必须考虑线程同步的问题.<br>虽然<code>pthread_join</code>可以看做简单的线程同步方式不过它无法高效的实现复杂的同步需求<br>比如无法实现共享资源独占式访问, 或者在某种条件下唤醒指定的指定线程.</p>\n<p>以下函数成功返回0 失败返回-1 errno<br><code>int sem_init(sem_t* sem, int pshared, unsigned int value)</code><br>用于初始化一个未命名的信号量.<br>如果<code>pshared</code>为0 则表示是当前进程的局部信号量, 否则信号量可以在多个进程间共享<br><code>value</code>指定参数的初始值<br><em>初始化已经存在的信号量会导致无法预期的结果</em></p>\n<p><code>int sem_destory(sem_t* sem)</code><br>销毁信号量, 释放其占用的系统资源<br><em>销毁正被其他线程等待的信号量, 将会导致无法预期的结果</em></p>\n<p><code>int sem_wait(sem_t* sem)</code><br>以原子操作的形式将信号量的值 -1, 如果信号量的值为0, 则sem_wait将被阻塞, 知道信号量具有非0值</p>\n<p><code>int sem_trywait(sem_t* sem)</code><br>跟上面的函数相同不过不会阻塞. 信号量不为0 则 -1, 为0 则返回-1 errno</p>\n<p><code>int sem_post(sem_t sem)</code><br>原子操作将信号量的值 +1</p>\n"},{"title":"牛客整理","date":"2019-10-19T04:31:37.000Z","_content":"\n# 运算出结果类\n```c++\nchar a=101;\nint sum=200;\na+=27;sum+=a;\nprintf(\"%d\\n\",sum);\n```\na为 -128~127 \n 127  = 0111 1111\n\"128\"= 1000 0000 (-128的补码)\n\n关于1000 0000代表-128 我偶然发现一个博客有种恍然大悟的感觉\n[浅析为什么char类型的范围是 —128~+127](https://blog.csdn.net/daiyutage/article/details/8575248)\n这个博客实在是写的太好了\n\n---\n```c++\nchar a,b,c,d;\nscanf(\"%c,%c,%d,%d\",&a,&b,&c,&d);\nprintf(\"%c,%c,%c,%c\",a,b,c,d);\n}\n```\n%c进行输入会进行转化后存入\n输入 1 即认为输入 '1' 转换成49存入\n\n---\n\n# 类相关\n## 虚函数\n纯虚函数可以让类先具有一个操作名称，而没有操作内容，让派生类在继承时再去具体地给出定义。\n凡是含有纯虚函数的类叫做 抽象类 。这种类不能声明对象，只是作为基类为派生类服务.\n除非在派生类中完全实现基类中所有的的纯虚函数，否则，派生类也变成了抽象类，不能实例化对象。\n\n## 静态\n静态成员可以作为默认实参\n\n# 定义类\n\n# 基础中的基础\n这部分有些只保留题目, 不做解析 便于自己想象\n```c++\nunsigned int k = 20;\nwhile (k >= 0)\n{\n\t--k;\n}\n```\n\n下面三个函数全部错误\n```\nvoid test1()\n{\n    unsigned char array[MAX_CHAR+1],i; // 这个函数在于MAX_CHAR可能会大于255导致i永远无法达到\n    for(i=0;i<=MAX_CHAR;i++){\n        array[i]=i;\n    }\n}\nchar*test2()\n{\n    char p[] = \"hello world\";\n    return p;\n}\nchar *p =test2();\nvoid test3(){\n    char str[10];\n    str++;\n    *str='0';\n}\n```\n---\n\n# 基础中的Api\n虽然自己还没用过, 但还是要积累\n```c++\nfor(i=4;i>1;i--)\n{\n\tfor(j=1;j<i;j++)\n\t{\n\t\tputchar('#');\n\t}\n}\n```\n开始看到这个题目, 为putchar是放到缓冲区中, 结果就是正常的输出\n","source":"_posts/CPP-CPP基础-牛客.md","raw":"---\ntitle: 牛客整理\ntags:\n  - null\ncategories:\n  - CPP\n  - CPP基础\ndate: 2019-10-19 12:31:37\n---\n\n# 运算出结果类\n```c++\nchar a=101;\nint sum=200;\na+=27;sum+=a;\nprintf(\"%d\\n\",sum);\n```\na为 -128~127 \n 127  = 0111 1111\n\"128\"= 1000 0000 (-128的补码)\n\n关于1000 0000代表-128 我偶然发现一个博客有种恍然大悟的感觉\n[浅析为什么char类型的范围是 —128~+127](https://blog.csdn.net/daiyutage/article/details/8575248)\n这个博客实在是写的太好了\n\n---\n```c++\nchar a,b,c,d;\nscanf(\"%c,%c,%d,%d\",&a,&b,&c,&d);\nprintf(\"%c,%c,%c,%c\",a,b,c,d);\n}\n```\n%c进行输入会进行转化后存入\n输入 1 即认为输入 '1' 转换成49存入\n\n---\n\n# 类相关\n## 虚函数\n纯虚函数可以让类先具有一个操作名称，而没有操作内容，让派生类在继承时再去具体地给出定义。\n凡是含有纯虚函数的类叫做 抽象类 。这种类不能声明对象，只是作为基类为派生类服务.\n除非在派生类中完全实现基类中所有的的纯虚函数，否则，派生类也变成了抽象类，不能实例化对象。\n\n## 静态\n静态成员可以作为默认实参\n\n# 定义类\n\n# 基础中的基础\n这部分有些只保留题目, 不做解析 便于自己想象\n```c++\nunsigned int k = 20;\nwhile (k >= 0)\n{\n\t--k;\n}\n```\n\n下面三个函数全部错误\n```\nvoid test1()\n{\n    unsigned char array[MAX_CHAR+1],i; // 这个函数在于MAX_CHAR可能会大于255导致i永远无法达到\n    for(i=0;i<=MAX_CHAR;i++){\n        array[i]=i;\n    }\n}\nchar*test2()\n{\n    char p[] = \"hello world\";\n    return p;\n}\nchar *p =test2();\nvoid test3(){\n    char str[10];\n    str++;\n    *str='0';\n}\n```\n---\n\n# 基础中的Api\n虽然自己还没用过, 但还是要积累\n```c++\nfor(i=4;i>1;i--)\n{\n\tfor(j=1;j<i;j++)\n\t{\n\t\tputchar('#');\n\t}\n}\n```\n开始看到这个题目, 为putchar是放到缓冲区中, 结果就是正常的输出\n","slug":"CPP-CPP基础-牛客","published":1,"updated":"2020-01-23T11:35:08.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucye0009souoaufhd2t9","content":"<h1 id=\"运算出结果类\"><a href=\"#运算出结果类\" class=\"headerlink\" title=\"运算出结果类\"></a>运算出结果类</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> a=<span class=\"number\">101</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> sum=<span class=\"number\">200</span>;</span><br><span class=\"line\">a+=<span class=\"number\">27</span>;sum+=a;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,sum);</span><br></pre></td></tr></table></figure>\n<p>a为 -128~127<br> 127  = 0111 1111<br>“128”= 1000 0000 (-128的补码)</p>\n<p>关于1000 0000代表-128 我偶然发现一个博客有种恍然大悟的感觉<br><a href=\"https://blog.csdn.net/daiyutage/article/details/8575248\" target=\"_blank\" rel=\"noopener\">浅析为什么char类型的范围是 —128~+127</a><br>这个博客实在是写的太好了</p>\n<hr>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> a,b,c,d;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">\"%c,%c,%d,%d\"</span>,&amp;a,&amp;b,&amp;c,&amp;d);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%c,%c,%c,%c\"</span>,a,b,c,d);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>%c进行输入会进行转化后存入<br>输入 1 即认为输入 ‘1’ 转换成49存入</p>\n<hr>\n<h1 id=\"类相关\"><a href=\"#类相关\" class=\"headerlink\" title=\"类相关\"></a>类相关</h1><h2 id=\"虚函数\"><a href=\"#虚函数\" class=\"headerlink\" title=\"虚函数\"></a>虚函数</h2><p>纯虚函数可以让类先具有一个操作名称，而没有操作内容，让派生类在继承时再去具体地给出定义。<br>凡是含有纯虚函数的类叫做 抽象类 。这种类不能声明对象，只是作为基类为派生类服务.<br>除非在派生类中完全实现基类中所有的的纯虚函数，否则，派生类也变成了抽象类，不能实例化对象。</p>\n<h2 id=\"静态\"><a href=\"#静态\" class=\"headerlink\" title=\"静态\"></a>静态</h2><p>静态成员可以作为默认实参</p>\n<h1 id=\"定义类\"><a href=\"#定义类\" class=\"headerlink\" title=\"定义类\"></a>定义类</h1><h1 id=\"基础中的基础\"><a href=\"#基础中的基础\" class=\"headerlink\" title=\"基础中的基础\"></a>基础中的基础</h1><p>这部分有些只保留题目, 不做解析 便于自己想象</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> k = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (k &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t--k;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面三个函数全部错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void test1()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    unsigned char array[MAX_CHAR+1],i; &#x2F;&#x2F; 这个函数在于MAX_CHAR可能会大于255导致i永远无法达到</span><br><span class=\"line\">    for(i&#x3D;0;i&lt;&#x3D;MAX_CHAR;i++)&#123;</span><br><span class=\"line\">        array[i]&#x3D;i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">char*test2()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    char p[] &#x3D; &quot;hello world&quot;;</span><br><span class=\"line\">    return p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">char *p &#x3D;test2();</span><br><span class=\"line\">void test3()&#123;</span><br><span class=\"line\">    char str[10];</span><br><span class=\"line\">    str++;</span><br><span class=\"line\">    *str&#x3D;&#39;0&#39;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"基础中的Api\"><a href=\"#基础中的Api\" class=\"headerlink\" title=\"基础中的Api\"></a>基础中的Api</h1><p>虽然自己还没用过, 但还是要积累</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">4</span>;i&gt;<span class=\"number\">1</span>;i--)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(j=<span class=\"number\">1</span>;j&lt;i;j++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">'#'</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>开始看到这个题目, 为putchar是放到缓冲区中, 结果就是正常的输出</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"运算出结果类\"><a href=\"#运算出结果类\" class=\"headerlink\" title=\"运算出结果类\"></a>运算出结果类</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> a=<span class=\"number\">101</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> sum=<span class=\"number\">200</span>;</span><br><span class=\"line\">a+=<span class=\"number\">27</span>;sum+=a;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,sum);</span><br></pre></td></tr></table></figure>\n<p>a为 -128~127<br> 127  = 0111 1111<br>“128”= 1000 0000 (-128的补码)</p>\n<p>关于1000 0000代表-128 我偶然发现一个博客有种恍然大悟的感觉<br><a href=\"https://blog.csdn.net/daiyutage/article/details/8575248\" target=\"_blank\" rel=\"noopener\">浅析为什么char类型的范围是 —128~+127</a><br>这个博客实在是写的太好了</p>\n<hr>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> a,b,c,d;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">\"%c,%c,%d,%d\"</span>,&amp;a,&amp;b,&amp;c,&amp;d);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%c,%c,%c,%c\"</span>,a,b,c,d);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>%c进行输入会进行转化后存入<br>输入 1 即认为输入 ‘1’ 转换成49存入</p>\n<hr>\n<h1 id=\"类相关\"><a href=\"#类相关\" class=\"headerlink\" title=\"类相关\"></a>类相关</h1><h2 id=\"虚函数\"><a href=\"#虚函数\" class=\"headerlink\" title=\"虚函数\"></a>虚函数</h2><p>纯虚函数可以让类先具有一个操作名称，而没有操作内容，让派生类在继承时再去具体地给出定义。<br>凡是含有纯虚函数的类叫做 抽象类 。这种类不能声明对象，只是作为基类为派生类服务.<br>除非在派生类中完全实现基类中所有的的纯虚函数，否则，派生类也变成了抽象类，不能实例化对象。</p>\n<h2 id=\"静态\"><a href=\"#静态\" class=\"headerlink\" title=\"静态\"></a>静态</h2><p>静态成员可以作为默认实参</p>\n<h1 id=\"定义类\"><a href=\"#定义类\" class=\"headerlink\" title=\"定义类\"></a>定义类</h1><h1 id=\"基础中的基础\"><a href=\"#基础中的基础\" class=\"headerlink\" title=\"基础中的基础\"></a>基础中的基础</h1><p>这部分有些只保留题目, 不做解析 便于自己想象</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> k = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (k &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t--k;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面三个函数全部错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void test1()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    unsigned char array[MAX_CHAR+1],i; &#x2F;&#x2F; 这个函数在于MAX_CHAR可能会大于255导致i永远无法达到</span><br><span class=\"line\">    for(i&#x3D;0;i&lt;&#x3D;MAX_CHAR;i++)&#123;</span><br><span class=\"line\">        array[i]&#x3D;i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">char*test2()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    char p[] &#x3D; &quot;hello world&quot;;</span><br><span class=\"line\">    return p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">char *p &#x3D;test2();</span><br><span class=\"line\">void test3()&#123;</span><br><span class=\"line\">    char str[10];</span><br><span class=\"line\">    str++;</span><br><span class=\"line\">    *str&#x3D;&#39;0&#39;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"基础中的Api\"><a href=\"#基础中的Api\" class=\"headerlink\" title=\"基础中的Api\"></a>基础中的Api</h1><p>虽然自己还没用过, 但还是要积累</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">4</span>;i&gt;<span class=\"number\">1</span>;i--)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(j=<span class=\"number\">1</span>;j&lt;i;j++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">'#'</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>开始看到这个题目, 为putchar是放到缓冲区中, 结果就是正常的输出</p>\n"},{"title":"指针","date":"2019-11-07T14:26:22.000Z","_content":"\n指针的话, 自己是要学会自己去理解各种组合. 首先只要定义复杂指针肯定会涉及到运算符优先级\n根据运算符优先级判断这个定义的含义\n\n# 指针的定义识别\n## 由运算符优先级判断\n下面列出常见到的运算符\n\n`[]`中括号这个的优先级最高, 跟括号并列.(排除域运算符).\n\t从左到右的结合性 -意味着`p[]`中`[]`会先跟`p结合`而不是中括号右边的内容\n`()`与之结合成为函数\n\t从左到右的结合性\n`*`其次是这个符号\n\t从右到左的结合性\n\n两个大头\n`int *p[3]`和`int (*p)[3]`\n前者由于`[]`的优先级更高p与之结合说明p是**数组***得到p本质是什么 数组OR指针*\n再与`*`结合说明**数组中的元素**是**指针***第二次结合 如果第一次是数组-则为数组中的内容, 第一次是指针-则为指针的指向*\n再与int结合 说明数组中**指针指向**的是int\n\n后者`*`先与p结合说明p是一个**指针**\n再与`[]`结合说明**指针指向**的内容是**数组**\n再与int结合说明**数组中的内容**是int\n\n---\n本质上定义函数相关的也可以这样理解\n`int p(int)`和`int (*p)(int)`\n前者p先与`()`结合说明p是一个**函数**\n在**查看括号中的内容**说明有int的参数\n最后与左侧int结合说明返回类型\n\n后者p先与`*`结合说明p是一个**指针**\n与`()`结合说明**指针指向**的是**函数**\n在**查看括号中的内容**说明有int的参数\n最后与左侧int结合说明返回类型\n\n## 判断指针的类型\n去除指针声明语句中的指针名称, 剩下的部分就是指针的类型.\n`int* p`得到`int*`, 说明指针的类型是`int*`\n`int (*p)[3]` 说明指针的类型是`int (*)[3]`\n\n## 指针指向的类型\n去除指针声明语句中的指针名称, 以及名称左边的指针声明符*, 剩下的部分是指针指向的类型\n`int* p`得到`int`说明指针指向的类型就是`int`\n`int (*p)[3]`得到`int()[3]`说明指针指向的类型就是`int()[3]`\n\n## 指针的值\n指针存储的即为指向一个内存区域的地址值\n","source":"_posts/CPP-CPP基础-指针.md","raw":"---\ntitle: 指针\ntags:\n  - null\ncategories:\n  - CPP\n  - CPP基础\ndate: 2019-11-07 22:26:22\n---\n\n指针的话, 自己是要学会自己去理解各种组合. 首先只要定义复杂指针肯定会涉及到运算符优先级\n根据运算符优先级判断这个定义的含义\n\n# 指针的定义识别\n## 由运算符优先级判断\n下面列出常见到的运算符\n\n`[]`中括号这个的优先级最高, 跟括号并列.(排除域运算符).\n\t从左到右的结合性 -意味着`p[]`中`[]`会先跟`p结合`而不是中括号右边的内容\n`()`与之结合成为函数\n\t从左到右的结合性\n`*`其次是这个符号\n\t从右到左的结合性\n\n两个大头\n`int *p[3]`和`int (*p)[3]`\n前者由于`[]`的优先级更高p与之结合说明p是**数组***得到p本质是什么 数组OR指针*\n再与`*`结合说明**数组中的元素**是**指针***第二次结合 如果第一次是数组-则为数组中的内容, 第一次是指针-则为指针的指向*\n再与int结合 说明数组中**指针指向**的是int\n\n后者`*`先与p结合说明p是一个**指针**\n再与`[]`结合说明**指针指向**的内容是**数组**\n再与int结合说明**数组中的内容**是int\n\n---\n本质上定义函数相关的也可以这样理解\n`int p(int)`和`int (*p)(int)`\n前者p先与`()`结合说明p是一个**函数**\n在**查看括号中的内容**说明有int的参数\n最后与左侧int结合说明返回类型\n\n后者p先与`*`结合说明p是一个**指针**\n与`()`结合说明**指针指向**的是**函数**\n在**查看括号中的内容**说明有int的参数\n最后与左侧int结合说明返回类型\n\n## 判断指针的类型\n去除指针声明语句中的指针名称, 剩下的部分就是指针的类型.\n`int* p`得到`int*`, 说明指针的类型是`int*`\n`int (*p)[3]` 说明指针的类型是`int (*)[3]`\n\n## 指针指向的类型\n去除指针声明语句中的指针名称, 以及名称左边的指针声明符*, 剩下的部分是指针指向的类型\n`int* p`得到`int`说明指针指向的类型就是`int`\n`int (*p)[3]`得到`int()[3]`说明指针指向的类型就是`int()[3]`\n\n## 指针的值\n指针存储的即为指向一个内存区域的地址值\n","slug":"CPP-CPP基础-指针","published":1,"updated":"2020-01-23T11:35:12.218Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucyf000csouo0m63hy4c","content":"<p>指针的话, 自己是要学会自己去理解各种组合. 首先只要定义复杂指针肯定会涉及到运算符优先级<br>根据运算符优先级判断这个定义的含义</p>\n<h1 id=\"指针的定义识别\"><a href=\"#指针的定义识别\" class=\"headerlink\" title=\"指针的定义识别\"></a>指针的定义识别</h1><h2 id=\"由运算符优先级判断\"><a href=\"#由运算符优先级判断\" class=\"headerlink\" title=\"由运算符优先级判断\"></a>由运算符优先级判断</h2><p>下面列出常见到的运算符</p>\n<p><code>[]</code>中括号这个的优先级最高, 跟括号并列.(排除域运算符).<br>    从左到右的结合性 -意味着<code>p[]</code>中<code>[]</code>会先跟<code>p结合</code>而不是中括号右边的内容<br><code>()</code>与之结合成为函数<br>    从左到右的结合性<br><code>*</code>其次是这个符号<br>    从右到左的结合性</p>\n<p>两个大头<br><code>int *p[3]</code>和<code>int (*p)[3]</code><br>前者由于<code>[]</code>的优先级更高p与之结合说明p是<strong>数组*</strong>得到p本质是什么 数组OR指针*<br>再与<code>*</code>结合说明<strong>数组中的元素</strong>是<strong>指针*</strong>第二次结合 如果第一次是数组-则为数组中的内容, 第一次是指针-则为指针的指向*<br>再与int结合 说明数组中<strong>指针指向</strong>的是int</p>\n<p>后者<code>*</code>先与p结合说明p是一个<strong>指针</strong><br>再与<code>[]</code>结合说明<strong>指针指向</strong>的内容是<strong>数组</strong><br>再与int结合说明<strong>数组中的内容</strong>是int</p>\n<hr>\n<p>本质上定义函数相关的也可以这样理解<br><code>int p(int)</code>和<code>int (*p)(int)</code><br>前者p先与<code>()</code>结合说明p是一个<strong>函数</strong><br>在<strong>查看括号中的内容</strong>说明有int的参数<br>最后与左侧int结合说明返回类型</p>\n<p>后者p先与<code>*</code>结合说明p是一个<strong>指针</strong><br>与<code>()</code>结合说明<strong>指针指向</strong>的是<strong>函数</strong><br>在<strong>查看括号中的内容</strong>说明有int的参数<br>最后与左侧int结合说明返回类型</p>\n<h2 id=\"判断指针的类型\"><a href=\"#判断指针的类型\" class=\"headerlink\" title=\"判断指针的类型\"></a>判断指针的类型</h2><p>去除指针声明语句中的指针名称, 剩下的部分就是指针的类型.<br><code>int* p</code>得到<code>int*</code>, 说明指针的类型是<code>int*</code><br><code>int (*p)[3]</code> 说明指针的类型是<code>int (*)[3]</code></p>\n<h2 id=\"指针指向的类型\"><a href=\"#指针指向的类型\" class=\"headerlink\" title=\"指针指向的类型\"></a>指针指向的类型</h2><p>去除指针声明语句中的指针名称, 以及名称左边的指针声明符<em>, 剩下的部分是指针指向的类型<br>`int</em> p<code>得到</code>int<code>说明指针指向的类型就是</code>int<code></code>int (*p)[3]<code>得到</code>int()[3]<code>说明指针指向的类型就是</code>int()[3]`</p>\n<h2 id=\"指针的值\"><a href=\"#指针的值\" class=\"headerlink\" title=\"指针的值\"></a>指针的值</h2><p>指针存储的即为指向一个内存区域的地址值</p>\n","site":{"data":{}},"excerpt":"","more":"<p>指针的话, 自己是要学会自己去理解各种组合. 首先只要定义复杂指针肯定会涉及到运算符优先级<br>根据运算符优先级判断这个定义的含义</p>\n<h1 id=\"指针的定义识别\"><a href=\"#指针的定义识别\" class=\"headerlink\" title=\"指针的定义识别\"></a>指针的定义识别</h1><h2 id=\"由运算符优先级判断\"><a href=\"#由运算符优先级判断\" class=\"headerlink\" title=\"由运算符优先级判断\"></a>由运算符优先级判断</h2><p>下面列出常见到的运算符</p>\n<p><code>[]</code>中括号这个的优先级最高, 跟括号并列.(排除域运算符).<br>    从左到右的结合性 -意味着<code>p[]</code>中<code>[]</code>会先跟<code>p结合</code>而不是中括号右边的内容<br><code>()</code>与之结合成为函数<br>    从左到右的结合性<br><code>*</code>其次是这个符号<br>    从右到左的结合性</p>\n<p>两个大头<br><code>int *p[3]</code>和<code>int (*p)[3]</code><br>前者由于<code>[]</code>的优先级更高p与之结合说明p是<strong>数组*</strong>得到p本质是什么 数组OR指针*<br>再与<code>*</code>结合说明<strong>数组中的元素</strong>是<strong>指针*</strong>第二次结合 如果第一次是数组-则为数组中的内容, 第一次是指针-则为指针的指向*<br>再与int结合 说明数组中<strong>指针指向</strong>的是int</p>\n<p>后者<code>*</code>先与p结合说明p是一个<strong>指针</strong><br>再与<code>[]</code>结合说明<strong>指针指向</strong>的内容是<strong>数组</strong><br>再与int结合说明<strong>数组中的内容</strong>是int</p>\n<hr>\n<p>本质上定义函数相关的也可以这样理解<br><code>int p(int)</code>和<code>int (*p)(int)</code><br>前者p先与<code>()</code>结合说明p是一个<strong>函数</strong><br>在<strong>查看括号中的内容</strong>说明有int的参数<br>最后与左侧int结合说明返回类型</p>\n<p>后者p先与<code>*</code>结合说明p是一个<strong>指针</strong><br>与<code>()</code>结合说明<strong>指针指向</strong>的是<strong>函数</strong><br>在<strong>查看括号中的内容</strong>说明有int的参数<br>最后与左侧int结合说明返回类型</p>\n<h2 id=\"判断指针的类型\"><a href=\"#判断指针的类型\" class=\"headerlink\" title=\"判断指针的类型\"></a>判断指针的类型</h2><p>去除指针声明语句中的指针名称, 剩下的部分就是指针的类型.<br><code>int* p</code>得到<code>int*</code>, 说明指针的类型是<code>int*</code><br><code>int (*p)[3]</code> 说明指针的类型是<code>int (*)[3]</code></p>\n<h2 id=\"指针指向的类型\"><a href=\"#指针指向的类型\" class=\"headerlink\" title=\"指针指向的类型\"></a>指针指向的类型</h2><p>去除指针声明语句中的指针名称, 以及名称左边的指针声明符<em>, 剩下的部分是指针指向的类型<br>`int</em> p<code>得到</code>int<code>说明指针指向的类型就是</code>int<code></code>int (*p)[3]<code>得到</code>int()[3]<code>说明指针指向的类型就是</code>int()[3]`</p>\n<h2 id=\"指针的值\"><a href=\"#指针的值\" class=\"headerlink\" title=\"指针的值\"></a>指针的值</h2><p>指针存储的即为指向一个内存区域的地址值</p>\n"},{"title":"LeetCode中等算法","date":"2020-03-03T02:38:28.000Z","top":91,"_content":"# Jump Game-动态规划 贪婪\nhttps://leetcode.com/problems/jump-game/\n\nGiven an array of non-negative integers, you are initially positioned at the first index of the array.\nEach element in the array represents your maximum jump length at that position.\nDetermine if you are able to reach the last index.\n```c++\nExample 1:\nInput: [2,3,1,1,4]\nOutput: true\nExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n\nExample 2:\nInput: [3,2,1,0,4]\nOutput: false\nExplanation: You will always arrive at index 3 no matter what. Its maximum\n             jump length is 0, which makes it impossible to reach the last index.\n```\n这是我LeetCode第一道中等难度算法, 刚上来不知道怎么做. 然后瞟了一眼题解说是动态规划问题.我就去查了下动态规划的问题解法\n\n[什么是动态规划（Dynamic Programming）？动态规划的意义是什么？ - 阮行止的回答 - 知乎](https://www.zhihu.com/question/23995189/answer/613096905)\n\n这样算是有了个初步了解, 不过我上来先用了贪心... 因为简单一些, 动态规划暂时没有想到怎么解.\n结果运行时间超过 11%的人好吧 最坏的时间复杂度应该是O(n!)... 最优O(n)\n```c++\nbool canJump(vector<int>& nums)\n{\n    int sum_step = nums.size();\n    int now_sub = sum_step - 1;\n    int min_sub = now_sub;\n    \n    bool jumpout = true;\n    \n    while (true)\n    {\n        for (int i = now_sub - 1; i >= 0; --i)\n        {\n            if (nums[i] >= (now_sub - i))\n            {\n                min_sub = i;\n                jumpout = false;\n            }\n        }\n        now_sub = min_sub;\n        if (jumpout)\n        {\n            return now_sub == 0;\n        }\n        jumpout = true;\n    }\n}\n```\n我看了下题解的贪婪算法... 我的应该也是贪婪的一种. 不过题解的贪婪更加快.\n我的想法是从顶开始 每次遍历找到`最低的能跳过来的一层` 然后再从`最低的能跳过来的一层`遍历.直到到不能再跳就返回当前是不是底层\n\n题解的解法粗略看就是差在了第一个if的判断条件, 我判断的当前的层, 题解判断的`最低的能跳过来的一层`题解的解法是`能跳则跳` 我的解法是`跳最少的次数` 实际上针对此题`能跳则跳`就好\n```c++\nbool canJump(vector<int>& nums)\n{\n    int now_sub = nums.size() - 1;\n    int min_sub = now_sub;\n    for (int i = now_sub - 1; i >= 0; --i)\n    {\n        if (nums[i] + i >= min_sub)\n        {\n            min_sub = i;    \n        }\n    }  \n    return min_sub == 0;\n}\n```\n然后我猜测绝对有一道题输出最少的跳跃次数, 没想到真有. 结果试了下时间超限.....\n理论上我第一种解法能够完成emmm, 不过先不管那道题目了.","source":"_posts/91算法-中等算法.md","raw":"---\ntitle: LeetCode中等算法\ndate: 2020-03-03 10:38:28\ntags:\ncategories:\n - 算法\n - 中等算法\ntop: 91\n---\n# Jump Game-动态规划 贪婪\nhttps://leetcode.com/problems/jump-game/\n\nGiven an array of non-negative integers, you are initially positioned at the first index of the array.\nEach element in the array represents your maximum jump length at that position.\nDetermine if you are able to reach the last index.\n```c++\nExample 1:\nInput: [2,3,1,1,4]\nOutput: true\nExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n\nExample 2:\nInput: [3,2,1,0,4]\nOutput: false\nExplanation: You will always arrive at index 3 no matter what. Its maximum\n             jump length is 0, which makes it impossible to reach the last index.\n```\n这是我LeetCode第一道中等难度算法, 刚上来不知道怎么做. 然后瞟了一眼题解说是动态规划问题.我就去查了下动态规划的问题解法\n\n[什么是动态规划（Dynamic Programming）？动态规划的意义是什么？ - 阮行止的回答 - 知乎](https://www.zhihu.com/question/23995189/answer/613096905)\n\n这样算是有了个初步了解, 不过我上来先用了贪心... 因为简单一些, 动态规划暂时没有想到怎么解.\n结果运行时间超过 11%的人好吧 最坏的时间复杂度应该是O(n!)... 最优O(n)\n```c++\nbool canJump(vector<int>& nums)\n{\n    int sum_step = nums.size();\n    int now_sub = sum_step - 1;\n    int min_sub = now_sub;\n    \n    bool jumpout = true;\n    \n    while (true)\n    {\n        for (int i = now_sub - 1; i >= 0; --i)\n        {\n            if (nums[i] >= (now_sub - i))\n            {\n                min_sub = i;\n                jumpout = false;\n            }\n        }\n        now_sub = min_sub;\n        if (jumpout)\n        {\n            return now_sub == 0;\n        }\n        jumpout = true;\n    }\n}\n```\n我看了下题解的贪婪算法... 我的应该也是贪婪的一种. 不过题解的贪婪更加快.\n我的想法是从顶开始 每次遍历找到`最低的能跳过来的一层` 然后再从`最低的能跳过来的一层`遍历.直到到不能再跳就返回当前是不是底层\n\n题解的解法粗略看就是差在了第一个if的判断条件, 我判断的当前的层, 题解判断的`最低的能跳过来的一层`题解的解法是`能跳则跳` 我的解法是`跳最少的次数` 实际上针对此题`能跳则跳`就好\n```c++\nbool canJump(vector<int>& nums)\n{\n    int now_sub = nums.size() - 1;\n    int min_sub = now_sub;\n    for (int i = now_sub - 1; i >= 0; --i)\n    {\n        if (nums[i] + i >= min_sub)\n        {\n            min_sub = i;    \n        }\n    }  \n    return min_sub == 0;\n}\n```\n然后我猜测绝对有一道题输出最少的跳跃次数, 没想到真有. 结果试了下时间超限.....\n理论上我第一种解法能够完成emmm, 不过先不管那道题目了.","slug":"91算法-中等算法","published":1,"updated":"2020-03-04T10:20:02.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucyf000dsouo6hk5hjer","content":"<h1 id=\"Jump-Game-动态规划-贪婪\"><a href=\"#Jump-Game-动态规划-贪婪\" class=\"headerlink\" title=\"Jump Game-动态规划 贪婪\"></a>Jump Game-动态规划 贪婪</h1><p><a href=\"https://leetcode.com/problems/jump-game/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/jump-game/</a></p>\n<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.<br>Each element in the array represents your maximum jump length at that position.<br>Determine if you are able to reach the last index.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example <span class=\"number\">1</span>:</span><br><span class=\"line\">Input: [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">Output: <span class=\"literal\">true</span></span><br><span class=\"line\">Explanation: Jump <span class=\"number\">1</span> <span class=\"built_in\">step</span> from index <span class=\"number\">0</span> to <span class=\"number\">1</span>, then <span class=\"number\">3</span> steps to the last index.</span><br><span class=\"line\"></span><br><span class=\"line\">Example <span class=\"number\">2</span>:</span><br><span class=\"line\">Input: [<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">Output: <span class=\"literal\">false</span></span><br><span class=\"line\">Explanation: You will always arrive at index <span class=\"number\">3</span> no matter what. Its maximum</span><br><span class=\"line\">             jump length is <span class=\"number\">0</span>, which makes it impossible to reach the last index.</span><br></pre></td></tr></table></figure>\n<p>这是我LeetCode第一道中等难度算法, 刚上来不知道怎么做. 然后瞟了一眼题解说是动态规划问题.我就去查了下动态规划的问题解法</p>\n<p><a href=\"https://www.zhihu.com/question/23995189/answer/613096905\" target=\"_blank\" rel=\"noopener\">什么是动态规划（Dynamic Programming）？动态规划的意义是什么？ - 阮行止的回答 - 知乎</a></p>\n<p>这样算是有了个初步了解, 不过我上来先用了贪心… 因为简单一些, 动态规划暂时没有想到怎么解.<br>结果运行时间超过 11%的人好吧 最坏的时间复杂度应该是O(n!)… 最优O(n)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">canJump</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum_step = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> now_sub = sum_step - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> min_sub = now_sub;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">bool</span> jumpout = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = now_sub - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] &gt;= (now_sub - i))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                min_sub = i;</span><br><span class=\"line\">                jumpout = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        now_sub = min_sub;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (jumpout)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> now_sub == <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        jumpout = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我看了下题解的贪婪算法… 我的应该也是贪婪的一种. 不过题解的贪婪更加快.<br>我的想法是从顶开始 每次遍历找到<code>最低的能跳过来的一层</code> 然后再从<code>最低的能跳过来的一层</code>遍历.直到到不能再跳就返回当前是不是底层</p>\n<p>题解的解法粗略看就是差在了第一个if的判断条件, 我判断的当前的层, 题解判断的<code>最低的能跳过来的一层</code>题解的解法是<code>能跳则跳</code> 我的解法是<code>跳最少的次数</code> 实际上针对此题<code>能跳则跳</code>就好</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">canJump</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> now_sub = nums.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> min_sub = now_sub;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = now_sub - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] + i &gt;= min_sub)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            min_sub = i;    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> min_sub == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后我猜测绝对有一道题输出最少的跳跃次数, 没想到真有. 结果试了下时间超限…..<br>理论上我第一种解法能够完成emmm, 不过先不管那道题目了.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Jump-Game-动态规划-贪婪\"><a href=\"#Jump-Game-动态规划-贪婪\" class=\"headerlink\" title=\"Jump Game-动态规划 贪婪\"></a>Jump Game-动态规划 贪婪</h1><p><a href=\"https://leetcode.com/problems/jump-game/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/jump-game/</a></p>\n<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.<br>Each element in the array represents your maximum jump length at that position.<br>Determine if you are able to reach the last index.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example <span class=\"number\">1</span>:</span><br><span class=\"line\">Input: [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">Output: <span class=\"literal\">true</span></span><br><span class=\"line\">Explanation: Jump <span class=\"number\">1</span> <span class=\"built_in\">step</span> from index <span class=\"number\">0</span> to <span class=\"number\">1</span>, then <span class=\"number\">3</span> steps to the last index.</span><br><span class=\"line\"></span><br><span class=\"line\">Example <span class=\"number\">2</span>:</span><br><span class=\"line\">Input: [<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">Output: <span class=\"literal\">false</span></span><br><span class=\"line\">Explanation: You will always arrive at index <span class=\"number\">3</span> no matter what. Its maximum</span><br><span class=\"line\">             jump length is <span class=\"number\">0</span>, which makes it impossible to reach the last index.</span><br></pre></td></tr></table></figure>\n<p>这是我LeetCode第一道中等难度算法, 刚上来不知道怎么做. 然后瞟了一眼题解说是动态规划问题.我就去查了下动态规划的问题解法</p>\n<p><a href=\"https://www.zhihu.com/question/23995189/answer/613096905\" target=\"_blank\" rel=\"noopener\">什么是动态规划（Dynamic Programming）？动态规划的意义是什么？ - 阮行止的回答 - 知乎</a></p>\n<p>这样算是有了个初步了解, 不过我上来先用了贪心… 因为简单一些, 动态规划暂时没有想到怎么解.<br>结果运行时间超过 11%的人好吧 最坏的时间复杂度应该是O(n!)… 最优O(n)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">canJump</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum_step = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> now_sub = sum_step - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> min_sub = now_sub;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">bool</span> jumpout = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = now_sub - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] &gt;= (now_sub - i))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                min_sub = i;</span><br><span class=\"line\">                jumpout = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        now_sub = min_sub;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (jumpout)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> now_sub == <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        jumpout = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我看了下题解的贪婪算法… 我的应该也是贪婪的一种. 不过题解的贪婪更加快.<br>我的想法是从顶开始 每次遍历找到<code>最低的能跳过来的一层</code> 然后再从<code>最低的能跳过来的一层</code>遍历.直到到不能再跳就返回当前是不是底层</p>\n<p>题解的解法粗略看就是差在了第一个if的判断条件, 我判断的当前的层, 题解判断的<code>最低的能跳过来的一层</code>题解的解法是<code>能跳则跳</code> 我的解法是<code>跳最少的次数</code> 实际上针对此题<code>能跳则跳</code>就好</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">canJump</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> now_sub = nums.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> min_sub = now_sub;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = now_sub - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] + i &gt;= min_sub)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            min_sub = i;    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> min_sub == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后我猜测绝对有一道题输出最少的跳跃次数, 没想到真有. 结果试了下时间超限…..<br>理论上我第一种解法能够完成emmm, 不过先不管那道题目了.</p>\n"},{"title":"Effective读书记录","date":"2020-02-26T13:43:46.000Z","top":110,"img":"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Effective%20C%2B%2B/%E5%B0%81%E9%9D%A2.jpg","_content":"\n# 让自己习惯C++\n## 条款02 尽量用const, enum, inline 替换#define\n前言 我目前自己做的框架中大量用了#define.... 因为用enum涉及到转换才能到int. 来学习下这条\n\n**使用 const 常量来替换 #define**\n谨防机号表出错, 特殊情况下 还能减少字量\n\n#define无法限定作用域, 这点我已经感受到了\n\n定义C风格常量字符串\nconst char* const NAME = \"lsmg\"; 防止指向和指向内容改变\n定义C++风格常量字符串\nconst std::string NAME = \"lsmg\";\n\nclass专属常量, 使用如下方式. 可以限定作用域\n```c++\nclass Game\n{\nprivate:\n\tstatic const int MAX_ROOM = 10000; // 常量声明式 - 常量且只有一份\n\tGameroom* rooms[MAX_ROOM];\n}\n```\n如果要获取class专属常量的地址, 或者需要定义式. 则需要在`实现文件`而非`头文件`, 如下声明\n`const int Game::MAX_ROOM` - 未给定初值\n由于class常量已经在声明时获得初值, 所以不用在给定初值\n\n这里我发现一件事情, 这本书 不能只读一遍, 最少两边完整的\n前面就已经开始使用后面的条款了, 先着重本条款, 跨条款的等第二遍\n\n\n## 条款03 尽可能使用const\n**总结**\n- 将某些东西声明为const可帮助编译器探测到错误用法\nconst可以用作在任何作用域内的对象, 函数参数, 函数返回类型, 成员函数本体\n\n\n```c++\nchar greeting[] = \"Hello\";\nchar *p = greeting;\n// const 在 * 左边 被指物是常量 在右边自己是常量 两边都是常量\nconst char *p = greeting; // 指针指向可以变, 指向的值不能变\nchar* const p = greeting; // 指针指向不可以变, 指向的值可以变\nconst char* const p = greeting; // 都不可以变\n```\n**const 参数, 可你帮你检查 == 被写成=的情况**\n这本书看来挺有意思的2333333\n\n**const 函数, 这里看不太懂 没有原来如此的感觉**\n\n## 条款04 确定对象使用前已经被初始化\n**总结**\n- 为内置型对象进行手工初始化.\n- 构造函数对号食用成员初值列, 不要在构造函数中赋值. 初值列次数应该与声明次序相同\n- 为了免除 跨编译单元的初始化次数问题, 用`local static`对象替换`non-local static`对象\n\n永远在使用对象前, 进行初始化.\n在构造函数中, 对所有值进行初始化\n构造函数使用`成员初始列`进行`初始化操作`而非`赋值操作`\n\n\n**减少default构造函数不必要的调用**\n```c++\nClass A\n{\npublic:\n\tA(const std::string &name, const std::list<Gameroom> &room_list);\nprivate:\n\tstd::string name_;\n\tstd::list<Gameroom> room_list_;\n\tint roomnum_;\n}\n\nA::A(const std::string &name, const std::list<Gameroom> &room_list)\n{\n\tname_ = name; // 这些都是赋值 不是初始化\n\troom_list_ = room_list;\n\troomnum_ = 0;\n}\n// C++规定 对象的 成员变量  初始化动作  发生在  进入构造函数本体  之前\n// name_  room_list_  两个在构造函数中被赋值, 而初始化在进入构造函数之前\n// ---发生在这些成员的default构造函数被调用的时候, (发生在进入构造函数前)\n// ---roomnum_例外 int属于内置类型\n\n```\n上面的初始化方式, 浪费了default的构造函数 所以推荐使用下面的形式\n```c++\nA::A(const std::string &name, const std::list<Gameroom> &room_list)\n\t:name_(name), room_list_(room_list), roomnum_(0)\n{\n}\n```\n虽然最终结果相同, 但没有浪费default构造函数. 前两个调用的copy构造函数.\n\n**还可以使用成员初值列 来default构造一个成员变量.**\n```c++\nA::A()\n\t:name_(), room_list_(), roomnum_(0)\n{ // 前两个全部调用的default构造函数\n}\n```\n\n**const reference 内置类型(初始化与赋值等成本) 一定成员初始值列**\n\n**初始值列总是使用 声明次序进行初始化, 而非写的顺序, 所以最好按声明次序列出**\n\n**不同编译单元内定义之 non-local static对象 的初始化 次序**\nstatic对象: 虚构函数会在main() 结束时被自动调用\nlocal static对象: 函数内的static对象\nnon-local对象: 其他static对象\n\n编译单元: 产出单一目标文件的那些源码, 基本是单一源码文件和他包含的头文件\n\n```c++\n// filesystem.h\nclass FileSystem\n{\npublic:\n\tstd::size_t GetNum() const;\n}\nextern FIieSystem tfs;\n\n// directory.h\nclass Directory\n{\npublic:\n\tDirectory(params);\t\n}\nDirectory::Directory(params)\n{\n\tstd::size_t num = tfs.GetNum(); // 使用tfs对象\n}\n\n// main.cpp\nDirectory temp_dir(params);\n```\n只有当 tfs在temp_dir初始化之前被初始化 才能得到正确的结果. 否则会调用未初始化的对象\n\n但是这个次序无法保证\n因为C++ 对这种情况没有明确定义\n\n如何解决这个问题呢??\n将每个`non-local static`对象搬到自己的专属函数内(该对象在此函数内被声明为static)\n函数返回一个reference对象他所包含的对象\n用户调用这个函数而不是直接调用对象\n\n解决的原因呢?\nC++ 保证函数内的`local static`对象 会在`函数被调用期间`, `首次遇到该对象的定义式`被初始化\n\n```c++\n// filesystem.h\nclass FileSystem\n{\npublic:\n\tstd::size_t GetNum() const;\n}\nFileSystem& tfs()\n{\n\tstatic FileSystem fs;\n\treturn fs;\n}\n\n// directory.h\nclass Directory\n{\npublic:\n\tDirectory(params);\t\n}\nDirectory::Directory(params)\n{\n\tstd::size_t num = tfs().GetNum(); // 使用tfs对象\n}\nDirectory& temp_dir()\n{\n\tstatic Directory td;\n\treturn td;\n}\n```\n# 构造析构赋值运算\n## 条款0506 了解C++默认编写并调用哪些函数 并适当拒绝\n\n**夹带如下私货-public-inline**\n- 一个构造函数(如果你没有任何构造函数)\n- 一个拷贝构造函数\n- 一个析构函数\n- 一个拷贝\n\n拷贝构造函数和拷贝运算符 自动生成的只是单纯的将来源对象的每一个`non-static`成员变量\n拷贝到目标对象\n\n**遇到const 和 引用成员 默认的拷贝无法工作, 编译器会发出警告**\n\n**将不需要的成员函数声明为private, 并且不实现**\n\n## 条款07 为多态基类声明virtual析构函数\n返回指向子类的 父类型指针.\n如果delete这个指针, 在父类析构函数不是virtual的情况下, 很可能会导致\n父类的成分被销毁, 然而子类多出来的部分不被销毁. 造成局部销毁!!\n\n**防止局部销毁很简单, 将父类的析构函数声明为virtual**\n\n**任何class 只要带有virtual函数 几乎确定应该有一个virtual析构函数**\n\n**无端的声明virtual函数是错误的**\n如果class不含virtual函数, 通常表示这个class 不是想做为父类, 这时如果将其析构函数声明为virual\n是一个馊主意.............\n\n*class类的大小 = 成员变量占据大小 + vptr(vitual table pointer)指针大小(4~8 字节)*\n\n每一个带有virtual函数的class都有对应的vtbl\n\n当对象调用某一vitual函数的时候, 实际调用的函数取决于\nvptr(vitual table pointer)指针指向的vtbl(vitual table)\n\n无端的使用virtual函数 会导致占用空间的增大\n\n## 条款08 别让异常逃离析构函数\n\n**总结**\n- 析构函数绝对不要抛出异常, 如果被析构函数调用的函数可能抛出异常, 析构函数应该捕获所有异常\n然后吞下它们, 或者结束程序\n- 如果客户需要对某个操作函数运行期间抛出的异常做出反应, class应该提供一个普通函数(而非在析构函数中)\n执行操作\n\n**析构函数不要抛出异常**\n```c++\nclass Widget\n{\n\t...\n\t~Widget() {...}\n}\n\nvoid Foo()\n{\n\tstd::vector<Widget> v;\n}\n```\n当 `v`被销毁的时候, Widget的析构函数第一次抛出异常C++还能接受?\n第二次就会造成不明确行为\n\n## 条款09: 绝不在构造函数和析构过程中调用virtual函数\n**总结**\n- 在构造和析构期间不要调用virtual函数, 因为这类调用从不下降到`子类`\n\n```c++\nclass Transaction\n{\npublic:\n\tTransaction();\n\tvirtual void LogTransaction() const = 0;\n\t...\n}\nTransaction::Transaction()\n{\n\t...\n\tLogTransaction();\n}\n\nclass BuyTransaction: public Transaction\n{\npublic:\n\tvirtual void LogTransaction() const;\n\t...\n}\n\nclass SellTransaction: public Transaction\n{\npublic:\n\tvirtual void LogTransaction() const;\n\t...\n}\n\nBuyTransaction b;\n```\nBuyTransaction的构造函数会被调用, 但是父类的构造函数会更显被调用.\n然后父类构造函数调用`LogTransaction()`的版本是`父类`的版本!!! 不是子类的版本\n\n析构函数也是同样的道理, 当`子类`的析构函数执行后, `子类`中的属性值就成为未定义状态\n进入`父类`后对象就成为一个`父类`对象\n\n本例子中既然无法实现使用`virtual`函数从`父类`向下调用, 可以再构造期间, 将\n`子类`必要的构造信息向上传给`父类`的构造函数\n\n## 条款10: 另operator= 返回一个reference to *this\n\n注意这只是一个协议, 并无强制性. 如果不遵守代码依然可以通过编译, 然而这份 协议被所有内置类型\n和标准程序库提供的类型共同遵守.\n因此除非你有一个标新立异的好理由, 不然还是随众吧\n\n## 条款11: 在operator= 中处理\"自我赋值\"\n**总结**\n- 确保当对象自我赋值时operator=有良好的的行为. 其中技术包括比较\"来源对象\"\n和\"目标对象\"的地址, 精心周到的语句顺序, 以及copy-and-swap\n- 确认任何函数如果操作一个以上的对象, 而其中多个对象是同一个对象的时候, 进行仍未正确\n\n\n**自我赋值是什么**\n\n```c++\nclass Widget {...};\nWidget w;\n\nw=w; // 什么这个看起来不可能, 那下面呢?\n\na[i] = a[j]; // 这个怎么样?  潜在的自我赋值\n*px = *py // 这个呢? 潜在的自我赋值\n```\n**会出现的问题**\n```c++\nclass Gameroom{....};\nclass Game\n{\n\t...\nprivate:\n\tGameroom* room_;\n}\n\n// operator=的实现代码\nGame& Game::operator=(const Game& ths)\n{\n\tdelete room_;\n\troom_ = new Gameroom(*ths.room_);\n\treturn *this;\n}\n```\n上面的代码 如果 this和ths指向同一个对象就会造成 `room_`构造失败\n因为被`delete`的`room_`就是要传入的\n\n如何解决这个问题呢?\n*比较来源对象 整同测试*\n```c++\nGame& Game::operator=(const Game& ths)\n{\n\tif (this == &ths)\n\t{\n\t\treturn *this;\n\t}\n\tdelete room_;\n\troom_ = new Gameroom(*ths.room_);\n\treturn *this;\n}\n```\n但是如果 `new Gameroom(*ths.room_)`错误, 导致room_指向不安全的内存\n使用下面的代码, 可以导出异常安全, 以及自我赋值\n```c++\nGame& Game::operator=(const Game& ths)\n{\n\tGameroom* p_room = room_;\n\troom_ = new Gameroom(*ths.room_);\n\tdelete p_room;\n\tretutn *this;\n}\n```\n现在如果`new Gameroom`抛出异常, room_还可以保持原状.\n同时也能处理自我赋值\n\n*copy and swap*\n这一段描述我看完之后, 突然想到了上午看的Jsoncpp里面的代码!!!!! 就有这个\n下面的代码更加高效 但是牺牲了清晰性\n```c++\nclass Game\n{\n\tvoid swap(Game& rhs);\n}\nGame& Game::operator=(const Game& ths)\n{\n\tGame temp(this);\n\tswap(temp);\n\treturn *this;\n}\n```\n## 条款12: 复制对象时勿忘其每一个成分\n\n\n# 设计与声明\n\n## 条款19: 设计class犹如设计type\n\n如何设计高效的classes呢?\n- 新class的对象该如何被创建和销毁? 这会影响到构造析构函数内存分配释放函数\n- 对象的初始化和对象的赋值有什么样的差别? 决定构造函数和赋值运算符的行为.\n搞清初始化和赋值\n- 注意class对象被值传递 拷贝构造函数会被调用用来生成临时对象\n- 什么是新class的合法值? `setter`函数需要进行的范围检查\n- 你的新class需要配合某个继承图系吗? // TODO\n- 你的新class需要什么样的转换? 如果需要类型转换需要在class中编写`类型转换函数`\n- 什么样的操作运算符和函数对此class而言是合理的? 决定你为class声明哪些函数(条款 23 24 46)\n- 将需要驳回的标准函数设置为private\n- 你的新type有多么一般化? 或许应该定义一整个class家族. 也许模板能帮你\n\n","source":"_posts/110CPP-读书记录-Effective读书记录.md","raw":"---\ntitle: Effective读书记录\ndate: 2020-02-26 21:43:46\ntags:\ncategories:\n - CPP\n - 服务器编程-书籍记录\ntop: 110\nimg: https://lsmg-img.oss-cn-beijing.aliyuncs.com/Effective%20C%2B%2B/%E5%B0%81%E9%9D%A2.jpg\n---\n\n# 让自己习惯C++\n## 条款02 尽量用const, enum, inline 替换#define\n前言 我目前自己做的框架中大量用了#define.... 因为用enum涉及到转换才能到int. 来学习下这条\n\n**使用 const 常量来替换 #define**\n谨防机号表出错, 特殊情况下 还能减少字量\n\n#define无法限定作用域, 这点我已经感受到了\n\n定义C风格常量字符串\nconst char* const NAME = \"lsmg\"; 防止指向和指向内容改变\n定义C++风格常量字符串\nconst std::string NAME = \"lsmg\";\n\nclass专属常量, 使用如下方式. 可以限定作用域\n```c++\nclass Game\n{\nprivate:\n\tstatic const int MAX_ROOM = 10000; // 常量声明式 - 常量且只有一份\n\tGameroom* rooms[MAX_ROOM];\n}\n```\n如果要获取class专属常量的地址, 或者需要定义式. 则需要在`实现文件`而非`头文件`, 如下声明\n`const int Game::MAX_ROOM` - 未给定初值\n由于class常量已经在声明时获得初值, 所以不用在给定初值\n\n这里我发现一件事情, 这本书 不能只读一遍, 最少两边完整的\n前面就已经开始使用后面的条款了, 先着重本条款, 跨条款的等第二遍\n\n\n## 条款03 尽可能使用const\n**总结**\n- 将某些东西声明为const可帮助编译器探测到错误用法\nconst可以用作在任何作用域内的对象, 函数参数, 函数返回类型, 成员函数本体\n\n\n```c++\nchar greeting[] = \"Hello\";\nchar *p = greeting;\n// const 在 * 左边 被指物是常量 在右边自己是常量 两边都是常量\nconst char *p = greeting; // 指针指向可以变, 指向的值不能变\nchar* const p = greeting; // 指针指向不可以变, 指向的值可以变\nconst char* const p = greeting; // 都不可以变\n```\n**const 参数, 可你帮你检查 == 被写成=的情况**\n这本书看来挺有意思的2333333\n\n**const 函数, 这里看不太懂 没有原来如此的感觉**\n\n## 条款04 确定对象使用前已经被初始化\n**总结**\n- 为内置型对象进行手工初始化.\n- 构造函数对号食用成员初值列, 不要在构造函数中赋值. 初值列次数应该与声明次序相同\n- 为了免除 跨编译单元的初始化次数问题, 用`local static`对象替换`non-local static`对象\n\n永远在使用对象前, 进行初始化.\n在构造函数中, 对所有值进行初始化\n构造函数使用`成员初始列`进行`初始化操作`而非`赋值操作`\n\n\n**减少default构造函数不必要的调用**\n```c++\nClass A\n{\npublic:\n\tA(const std::string &name, const std::list<Gameroom> &room_list);\nprivate:\n\tstd::string name_;\n\tstd::list<Gameroom> room_list_;\n\tint roomnum_;\n}\n\nA::A(const std::string &name, const std::list<Gameroom> &room_list)\n{\n\tname_ = name; // 这些都是赋值 不是初始化\n\troom_list_ = room_list;\n\troomnum_ = 0;\n}\n// C++规定 对象的 成员变量  初始化动作  发生在  进入构造函数本体  之前\n// name_  room_list_  两个在构造函数中被赋值, 而初始化在进入构造函数之前\n// ---发生在这些成员的default构造函数被调用的时候, (发生在进入构造函数前)\n// ---roomnum_例外 int属于内置类型\n\n```\n上面的初始化方式, 浪费了default的构造函数 所以推荐使用下面的形式\n```c++\nA::A(const std::string &name, const std::list<Gameroom> &room_list)\n\t:name_(name), room_list_(room_list), roomnum_(0)\n{\n}\n```\n虽然最终结果相同, 但没有浪费default构造函数. 前两个调用的copy构造函数.\n\n**还可以使用成员初值列 来default构造一个成员变量.**\n```c++\nA::A()\n\t:name_(), room_list_(), roomnum_(0)\n{ // 前两个全部调用的default构造函数\n}\n```\n\n**const reference 内置类型(初始化与赋值等成本) 一定成员初始值列**\n\n**初始值列总是使用 声明次序进行初始化, 而非写的顺序, 所以最好按声明次序列出**\n\n**不同编译单元内定义之 non-local static对象 的初始化 次序**\nstatic对象: 虚构函数会在main() 结束时被自动调用\nlocal static对象: 函数内的static对象\nnon-local对象: 其他static对象\n\n编译单元: 产出单一目标文件的那些源码, 基本是单一源码文件和他包含的头文件\n\n```c++\n// filesystem.h\nclass FileSystem\n{\npublic:\n\tstd::size_t GetNum() const;\n}\nextern FIieSystem tfs;\n\n// directory.h\nclass Directory\n{\npublic:\n\tDirectory(params);\t\n}\nDirectory::Directory(params)\n{\n\tstd::size_t num = tfs.GetNum(); // 使用tfs对象\n}\n\n// main.cpp\nDirectory temp_dir(params);\n```\n只有当 tfs在temp_dir初始化之前被初始化 才能得到正确的结果. 否则会调用未初始化的对象\n\n但是这个次序无法保证\n因为C++ 对这种情况没有明确定义\n\n如何解决这个问题呢??\n将每个`non-local static`对象搬到自己的专属函数内(该对象在此函数内被声明为static)\n函数返回一个reference对象他所包含的对象\n用户调用这个函数而不是直接调用对象\n\n解决的原因呢?\nC++ 保证函数内的`local static`对象 会在`函数被调用期间`, `首次遇到该对象的定义式`被初始化\n\n```c++\n// filesystem.h\nclass FileSystem\n{\npublic:\n\tstd::size_t GetNum() const;\n}\nFileSystem& tfs()\n{\n\tstatic FileSystem fs;\n\treturn fs;\n}\n\n// directory.h\nclass Directory\n{\npublic:\n\tDirectory(params);\t\n}\nDirectory::Directory(params)\n{\n\tstd::size_t num = tfs().GetNum(); // 使用tfs对象\n}\nDirectory& temp_dir()\n{\n\tstatic Directory td;\n\treturn td;\n}\n```\n# 构造析构赋值运算\n## 条款0506 了解C++默认编写并调用哪些函数 并适当拒绝\n\n**夹带如下私货-public-inline**\n- 一个构造函数(如果你没有任何构造函数)\n- 一个拷贝构造函数\n- 一个析构函数\n- 一个拷贝\n\n拷贝构造函数和拷贝运算符 自动生成的只是单纯的将来源对象的每一个`non-static`成员变量\n拷贝到目标对象\n\n**遇到const 和 引用成员 默认的拷贝无法工作, 编译器会发出警告**\n\n**将不需要的成员函数声明为private, 并且不实现**\n\n## 条款07 为多态基类声明virtual析构函数\n返回指向子类的 父类型指针.\n如果delete这个指针, 在父类析构函数不是virtual的情况下, 很可能会导致\n父类的成分被销毁, 然而子类多出来的部分不被销毁. 造成局部销毁!!\n\n**防止局部销毁很简单, 将父类的析构函数声明为virtual**\n\n**任何class 只要带有virtual函数 几乎确定应该有一个virtual析构函数**\n\n**无端的声明virtual函数是错误的**\n如果class不含virtual函数, 通常表示这个class 不是想做为父类, 这时如果将其析构函数声明为virual\n是一个馊主意.............\n\n*class类的大小 = 成员变量占据大小 + vptr(vitual table pointer)指针大小(4~8 字节)*\n\n每一个带有virtual函数的class都有对应的vtbl\n\n当对象调用某一vitual函数的时候, 实际调用的函数取决于\nvptr(vitual table pointer)指针指向的vtbl(vitual table)\n\n无端的使用virtual函数 会导致占用空间的增大\n\n## 条款08 别让异常逃离析构函数\n\n**总结**\n- 析构函数绝对不要抛出异常, 如果被析构函数调用的函数可能抛出异常, 析构函数应该捕获所有异常\n然后吞下它们, 或者结束程序\n- 如果客户需要对某个操作函数运行期间抛出的异常做出反应, class应该提供一个普通函数(而非在析构函数中)\n执行操作\n\n**析构函数不要抛出异常**\n```c++\nclass Widget\n{\n\t...\n\t~Widget() {...}\n}\n\nvoid Foo()\n{\n\tstd::vector<Widget> v;\n}\n```\n当 `v`被销毁的时候, Widget的析构函数第一次抛出异常C++还能接受?\n第二次就会造成不明确行为\n\n## 条款09: 绝不在构造函数和析构过程中调用virtual函数\n**总结**\n- 在构造和析构期间不要调用virtual函数, 因为这类调用从不下降到`子类`\n\n```c++\nclass Transaction\n{\npublic:\n\tTransaction();\n\tvirtual void LogTransaction() const = 0;\n\t...\n}\nTransaction::Transaction()\n{\n\t...\n\tLogTransaction();\n}\n\nclass BuyTransaction: public Transaction\n{\npublic:\n\tvirtual void LogTransaction() const;\n\t...\n}\n\nclass SellTransaction: public Transaction\n{\npublic:\n\tvirtual void LogTransaction() const;\n\t...\n}\n\nBuyTransaction b;\n```\nBuyTransaction的构造函数会被调用, 但是父类的构造函数会更显被调用.\n然后父类构造函数调用`LogTransaction()`的版本是`父类`的版本!!! 不是子类的版本\n\n析构函数也是同样的道理, 当`子类`的析构函数执行后, `子类`中的属性值就成为未定义状态\n进入`父类`后对象就成为一个`父类`对象\n\n本例子中既然无法实现使用`virtual`函数从`父类`向下调用, 可以再构造期间, 将\n`子类`必要的构造信息向上传给`父类`的构造函数\n\n## 条款10: 另operator= 返回一个reference to *this\n\n注意这只是一个协议, 并无强制性. 如果不遵守代码依然可以通过编译, 然而这份 协议被所有内置类型\n和标准程序库提供的类型共同遵守.\n因此除非你有一个标新立异的好理由, 不然还是随众吧\n\n## 条款11: 在operator= 中处理\"自我赋值\"\n**总结**\n- 确保当对象自我赋值时operator=有良好的的行为. 其中技术包括比较\"来源对象\"\n和\"目标对象\"的地址, 精心周到的语句顺序, 以及copy-and-swap\n- 确认任何函数如果操作一个以上的对象, 而其中多个对象是同一个对象的时候, 进行仍未正确\n\n\n**自我赋值是什么**\n\n```c++\nclass Widget {...};\nWidget w;\n\nw=w; // 什么这个看起来不可能, 那下面呢?\n\na[i] = a[j]; // 这个怎么样?  潜在的自我赋值\n*px = *py // 这个呢? 潜在的自我赋值\n```\n**会出现的问题**\n```c++\nclass Gameroom{....};\nclass Game\n{\n\t...\nprivate:\n\tGameroom* room_;\n}\n\n// operator=的实现代码\nGame& Game::operator=(const Game& ths)\n{\n\tdelete room_;\n\troom_ = new Gameroom(*ths.room_);\n\treturn *this;\n}\n```\n上面的代码 如果 this和ths指向同一个对象就会造成 `room_`构造失败\n因为被`delete`的`room_`就是要传入的\n\n如何解决这个问题呢?\n*比较来源对象 整同测试*\n```c++\nGame& Game::operator=(const Game& ths)\n{\n\tif (this == &ths)\n\t{\n\t\treturn *this;\n\t}\n\tdelete room_;\n\troom_ = new Gameroom(*ths.room_);\n\treturn *this;\n}\n```\n但是如果 `new Gameroom(*ths.room_)`错误, 导致room_指向不安全的内存\n使用下面的代码, 可以导出异常安全, 以及自我赋值\n```c++\nGame& Game::operator=(const Game& ths)\n{\n\tGameroom* p_room = room_;\n\troom_ = new Gameroom(*ths.room_);\n\tdelete p_room;\n\tretutn *this;\n}\n```\n现在如果`new Gameroom`抛出异常, room_还可以保持原状.\n同时也能处理自我赋值\n\n*copy and swap*\n这一段描述我看完之后, 突然想到了上午看的Jsoncpp里面的代码!!!!! 就有这个\n下面的代码更加高效 但是牺牲了清晰性\n```c++\nclass Game\n{\n\tvoid swap(Game& rhs);\n}\nGame& Game::operator=(const Game& ths)\n{\n\tGame temp(this);\n\tswap(temp);\n\treturn *this;\n}\n```\n## 条款12: 复制对象时勿忘其每一个成分\n\n\n# 设计与声明\n\n## 条款19: 设计class犹如设计type\n\n如何设计高效的classes呢?\n- 新class的对象该如何被创建和销毁? 这会影响到构造析构函数内存分配释放函数\n- 对象的初始化和对象的赋值有什么样的差别? 决定构造函数和赋值运算符的行为.\n搞清初始化和赋值\n- 注意class对象被值传递 拷贝构造函数会被调用用来生成临时对象\n- 什么是新class的合法值? `setter`函数需要进行的范围检查\n- 你的新class需要配合某个继承图系吗? // TODO\n- 你的新class需要什么样的转换? 如果需要类型转换需要在class中编写`类型转换函数`\n- 什么样的操作运算符和函数对此class而言是合理的? 决定你为class声明哪些函数(条款 23 24 46)\n- 将需要驳回的标准函数设置为private\n- 你的新type有多么一般化? 或许应该定义一整个class家族. 也许模板能帮你\n\n","slug":"110CPP-读书记录-Effective读书记录","published":1,"updated":"2020-03-05T13:54:33.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucyg000fsouo6vqw41o8","content":"<h1 id=\"让自己习惯C\"><a href=\"#让自己习惯C\" class=\"headerlink\" title=\"让自己习惯C++\"></a>让自己习惯C++</h1><h2 id=\"条款02-尽量用const-enum-inline-替换-define\"><a href=\"#条款02-尽量用const-enum-inline-替换-define\" class=\"headerlink\" title=\"条款02 尽量用const, enum, inline 替换#define\"></a>条款02 尽量用const, enum, inline 替换#define</h2><p>前言 我目前自己做的框架中大量用了#define…. 因为用enum涉及到转换才能到int. 来学习下这条</p>\n<p><strong>使用 const 常量来替换 #define</strong><br>谨防机号表出错, 特殊情况下 还能减少字量</p>\n<p>#define无法限定作用域, 这点我已经感受到了</p>\n<p>定义C风格常量字符串<br>const char* const NAME = “lsmg”; 防止指向和指向内容改变<br>定义C++风格常量字符串<br>const std::string NAME = “lsmg”;</p>\n<p>class专属常量, 使用如下方式. 可以限定作用域</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Game</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_ROOM = <span class=\"number\">10000</span>; <span class=\"comment\">// 常量声明式 - 常量且只有一份</span></span><br><span class=\"line\">\tGameroom* rooms[MAX_ROOM];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果要获取class专属常量的地址, 或者需要定义式. 则需要在<code>实现文件</code>而非<code>头文件</code>, 如下声明<br><code>const int Game::MAX_ROOM</code> - 未给定初值<br>由于class常量已经在声明时获得初值, 所以不用在给定初值</p>\n<p>这里我发现一件事情, 这本书 不能只读一遍, 最少两边完整的<br>前面就已经开始使用后面的条款了, 先着重本条款, 跨条款的等第二遍</p>\n<h2 id=\"条款03-尽可能使用const\"><a href=\"#条款03-尽可能使用const\" class=\"headerlink\" title=\"条款03 尽可能使用const\"></a>条款03 尽可能使用const</h2><p><strong>总结</strong></p>\n<ul>\n<li>将某些东西声明为const可帮助编译器探测到错误用法<br>const可以用作在任何作用域内的对象, 函数参数, 函数返回类型, 成员函数本体</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> greeting[] = <span class=\"string\">\"Hello\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> *p = greeting;</span><br><span class=\"line\"><span class=\"comment\">// const 在 * 左边 被指物是常量 在右边自己是常量 两边都是常量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *p = greeting; <span class=\"comment\">// 指针指向可以变, 指向的值不能变</span></span><br><span class=\"line\"><span class=\"keyword\">char</span>* <span class=\"keyword\">const</span> p = greeting; <span class=\"comment\">// 指针指向不可以变, 指向的值可以变</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"keyword\">const</span> p = greeting; <span class=\"comment\">// 都不可以变</span></span><br></pre></td></tr></table></figure>\n<p><strong>const 参数, 可你帮你检查 == 被写成=的情况</strong><br>这本书看来挺有意思的2333333</p>\n<p><strong>const 函数, 这里看不太懂 没有原来如此的感觉</strong></p>\n<h2 id=\"条款04-确定对象使用前已经被初始化\"><a href=\"#条款04-确定对象使用前已经被初始化\" class=\"headerlink\" title=\"条款04 确定对象使用前已经被初始化\"></a>条款04 确定对象使用前已经被初始化</h2><p><strong>总结</strong></p>\n<ul>\n<li>为内置型对象进行手工初始化.</li>\n<li>构造函数对号食用成员初值列, 不要在构造函数中赋值. 初值列次数应该与声明次序相同</li>\n<li>为了免除 跨编译单元的初始化次数问题, 用<code>local static</code>对象替换<code>non-local static</code>对象</li>\n</ul>\n<p>永远在使用对象前, 进行初始化.<br>在构造函数中, 对所有值进行初始化<br>构造函数使用<code>成员初始列</code>进行<code>初始化操作</code>而非<code>赋值操作</code></p>\n<p><strong>减少default构造函数不必要的调用</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tA(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;name, <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">list</span>&lt;Gameroom&gt; &amp;room_list);</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> name_;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">list</span>&lt;Gameroom&gt; room_list_;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> roomnum_;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">A::A(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;name, <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">list</span>&lt;Gameroom&gt; &amp;room_list)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tname_ = name; <span class=\"comment\">// 这些都是赋值 不是初始化</span></span><br><span class=\"line\">\troom_list_ = room_list;</span><br><span class=\"line\">\troomnum_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// C++规定 对象的 成员变量  初始化动作  发生在  进入构造函数本体  之前</span></span><br><span class=\"line\"><span class=\"comment\">// name_  room_list_  两个在构造函数中被赋值, 而初始化在进入构造函数之前</span></span><br><span class=\"line\"><span class=\"comment\">// ---发生在这些成员的default构造函数被调用的时候, (发生在进入构造函数前)</span></span><br><span class=\"line\"><span class=\"comment\">// ---roomnum_例外 int属于内置类型</span></span><br></pre></td></tr></table></figure>\n<p>上面的初始化方式, 浪费了default的构造函数 所以推荐使用下面的形式</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::A(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;name, <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">list</span>&lt;Gameroom&gt; &amp;room_list)</span><br><span class=\"line\">\t:name_(name), room_list_(room_list), roomnum_(<span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>虽然最终结果相同, 但没有浪费default构造函数. 前两个调用的copy构造函数.</p>\n<p><strong>还可以使用成员初值列 来default构造一个成员变量.</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::A()</span><br><span class=\"line\">\t:name_(), room_list_(), roomnum_(<span class=\"number\">0</span>)</span><br><span class=\"line\">&#123; <span class=\"comment\">// 前两个全部调用的default构造函数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>const reference 内置类型(初始化与赋值等成本) 一定成员初始值列</strong></p>\n<p><strong>初始值列总是使用 声明次序进行初始化, 而非写的顺序, 所以最好按声明次序列出</strong></p>\n<p><strong>不同编译单元内定义之 non-local static对象 的初始化 次序</strong><br>static对象: 虚构函数会在main() 结束时被自动调用<br>local static对象: 函数内的static对象<br>non-local对象: 其他static对象</p>\n<p>编译单元: 产出单一目标文件的那些源码, 基本是单一源码文件和他包含的头文件</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// filesystem.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileSystem</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"keyword\">size_t</span> <span class=\"title\">GetNum</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> FIieSystem tfs;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// directory.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Directory</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tDirectory(params);\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Directory::Directory(params)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"keyword\">size_t</span> num = tfs.GetNum(); <span class=\"comment\">// 使用tfs对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.cpp</span></span><br><span class=\"line\"><span class=\"function\">Directory <span class=\"title\">temp_dir</span><span class=\"params\">(params)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>只有当 tfs在temp_dir初始化之前被初始化 才能得到正确的结果. 否则会调用未初始化的对象</p>\n<p>但是这个次序无法保证<br>因为C++ 对这种情况没有明确定义</p>\n<p>如何解决这个问题呢??<br>将每个<code>non-local static</code>对象搬到自己的专属函数内(该对象在此函数内被声明为static)<br>函数返回一个reference对象他所包含的对象<br>用户调用这个函数而不是直接调用对象</p>\n<p>解决的原因呢?<br>C++ 保证函数内的<code>local static</code>对象 会在<code>函数被调用期间</code>, <code>首次遇到该对象的定义式</code>被初始化</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// filesystem.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileSystem</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"keyword\">size_t</span> <span class=\"title\">GetNum</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">FileSystem</span>&amp; <span class=\"title\">tfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"built_in\">FileSystem</span> fs;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fs;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// directory.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Directory</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tDirectory(params);\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Directory::Directory(params)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"keyword\">size_t</span> num = tfs().GetNum(); <span class=\"comment\">// 使用tfs对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">Directory&amp; <span class=\"title\">temp_dir</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> Directory td;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> td;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"构造析构赋值运算\"><a href=\"#构造析构赋值运算\" class=\"headerlink\" title=\"构造析构赋值运算\"></a>构造析构赋值运算</h1><h2 id=\"条款0506-了解C-默认编写并调用哪些函数-并适当拒绝\"><a href=\"#条款0506-了解C-默认编写并调用哪些函数-并适当拒绝\" class=\"headerlink\" title=\"条款0506 了解C++默认编写并调用哪些函数 并适当拒绝\"></a>条款0506 了解C++默认编写并调用哪些函数 并适当拒绝</h2><p><strong>夹带如下私货-public-inline</strong></p>\n<ul>\n<li>一个构造函数(如果你没有任何构造函数)</li>\n<li>一个拷贝构造函数</li>\n<li>一个析构函数</li>\n<li>一个拷贝</li>\n</ul>\n<p>拷贝构造函数和拷贝运算符 自动生成的只是单纯的将来源对象的每一个<code>non-static</code>成员变量<br>拷贝到目标对象</p>\n<p><strong>遇到const 和 引用成员 默认的拷贝无法工作, 编译器会发出警告</strong></p>\n<p><strong>将不需要的成员函数声明为private, 并且不实现</strong></p>\n<h2 id=\"条款07-为多态基类声明virtual析构函数\"><a href=\"#条款07-为多态基类声明virtual析构函数\" class=\"headerlink\" title=\"条款07 为多态基类声明virtual析构函数\"></a>条款07 为多态基类声明virtual析构函数</h2><p>返回指向子类的 父类型指针.<br>如果delete这个指针, 在父类析构函数不是virtual的情况下, 很可能会导致<br>父类的成分被销毁, 然而子类多出来的部分不被销毁. 造成局部销毁!!</p>\n<p><strong>防止局部销毁很简单, 将父类的析构函数声明为virtual</strong></p>\n<p><strong>任何class 只要带有virtual函数 几乎确定应该有一个virtual析构函数</strong></p>\n<p><strong>无端的声明virtual函数是错误的</strong><br>如果class不含virtual函数, 通常表示这个class 不是想做为父类, 这时如果将其析构函数声明为virual<br>是一个馊主意………….</p>\n<p><em>class类的大小 = 成员变量占据大小 + vptr(vitual table pointer)指针大小(4~8 字节)</em></p>\n<p>每一个带有virtual函数的class都有对应的vtbl</p>\n<p>当对象调用某一vitual函数的时候, 实际调用的函数取决于<br>vptr(vitual table pointer)指针指向的vtbl(vitual table)</p>\n<p>无端的使用virtual函数 会导致占用空间的增大</p>\n<h2 id=\"条款08-别让异常逃离析构函数\"><a href=\"#条款08-别让异常逃离析构函数\" class=\"headerlink\" title=\"条款08 别让异常逃离析构函数\"></a>条款08 别让异常逃离析构函数</h2><p><strong>总结</strong></p>\n<ul>\n<li>析构函数绝对不要抛出异常, 如果被析构函数调用的函数可能抛出异常, 析构函数应该捕获所有异常<br>然后吞下它们, 或者结束程序</li>\n<li>如果客户需要对某个操作函数运行期间抛出的异常做出反应, class应该提供一个普通函数(而非在析构函数中)<br>执行操作</li>\n</ul>\n<p><strong>析构函数不要抛出异常</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Widget</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t~Widget() &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Foo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;Widget&gt; v;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当 <code>v</code>被销毁的时候, Widget的析构函数第一次抛出异常C++还能接受?<br>第二次就会造成不明确行为</p>\n<h2 id=\"条款09-绝不在构造函数和析构过程中调用virtual函数\"><a href=\"#条款09-绝不在构造函数和析构过程中调用virtual函数\" class=\"headerlink\" title=\"条款09: 绝不在构造函数和析构过程中调用virtual函数\"></a>条款09: 绝不在构造函数和析构过程中调用virtual函数</h2><p><strong>总结</strong></p>\n<ul>\n<li>在构造和析构期间不要调用virtual函数, 因为这类调用从不下降到<code>子类</code></li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Transaction</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tTransaction();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">LogTransaction</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Transaction::Transaction()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tLogTransaction();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuyTransaction</span>:</span> <span class=\"keyword\">public</span> Transaction</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">LogTransaction</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SellTransaction</span>:</span> <span class=\"keyword\">public</span> Transaction</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">LogTransaction</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BuyTransaction b;</span><br></pre></td></tr></table></figure>\n<p>BuyTransaction的构造函数会被调用, 但是父类的构造函数会更显被调用.<br>然后父类构造函数调用<code>LogTransaction()</code>的版本是<code>父类</code>的版本!!! 不是子类的版本</p>\n<p>析构函数也是同样的道理, 当<code>子类</code>的析构函数执行后, <code>子类</code>中的属性值就成为未定义状态<br>进入<code>父类</code>后对象就成为一个<code>父类</code>对象</p>\n<p>本例子中既然无法实现使用<code>virtual</code>函数从<code>父类</code>向下调用, 可以再构造期间, 将<br><code>子类</code>必要的构造信息向上传给<code>父类</code>的构造函数</p>\n<h2 id=\"条款10-另operator-返回一个reference-to-this\"><a href=\"#条款10-另operator-返回一个reference-to-this\" class=\"headerlink\" title=\"条款10: 另operator= 返回一个reference to *this\"></a>条款10: 另operator= 返回一个reference to *this</h2><p>注意这只是一个协议, 并无强制性. 如果不遵守代码依然可以通过编译, 然而这份 协议被所有内置类型<br>和标准程序库提供的类型共同遵守.<br>因此除非你有一个标新立异的好理由, 不然还是随众吧</p>\n<h2 id=\"条款11-在operator-中处理”自我赋值”\"><a href=\"#条款11-在operator-中处理”自我赋值”\" class=\"headerlink\" title=\"条款11: 在operator= 中处理”自我赋值”\"></a>条款11: 在operator= 中处理”自我赋值”</h2><p><strong>总结</strong></p>\n<ul>\n<li>确保当对象自我赋值时operator=有良好的的行为. 其中技术包括比较”来源对象”<br>和”目标对象”的地址, 精心周到的语句顺序, 以及copy-and-swap</li>\n<li>确认任何函数如果操作一个以上的对象, 而其中多个对象是同一个对象的时候, 进行仍未正确</li>\n</ul>\n<p><strong>自我赋值是什么</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Widget</span> &#123;</span>...&#125;;</span><br><span class=\"line\">Widget w;</span><br><span class=\"line\"></span><br><span class=\"line\">w=w; <span class=\"comment\">// 什么这个看起来不可能, 那下面呢?</span></span><br><span class=\"line\"></span><br><span class=\"line\">a[i] = a[j]; <span class=\"comment\">// 这个怎么样?  潜在的自我赋值</span></span><br><span class=\"line\">*px = *py <span class=\"comment\">// 这个呢? 潜在的自我赋值</span></span><br></pre></td></tr></table></figure>\n<p><strong>会出现的问题</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gameroom</span>&#123;</span>....&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Game</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tGameroom* room_;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// operator=的实现代码</span></span><br><span class=\"line\">Game&amp; Game::<span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Game&amp; ths)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> room_;</span><br><span class=\"line\">\troom_ = <span class=\"keyword\">new</span> Gameroom(*ths.room_);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码 如果 this和ths指向同一个对象就会造成 <code>room_</code>构造失败<br>因为被<code>delete</code>的<code>room_</code>就是要传入的</p>\n<p>如何解决这个问题呢?<br><em>比较来源对象 整同测试</em></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Game&amp; Game::<span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Game&amp; ths)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == &amp;ths)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> room_;</span><br><span class=\"line\">\troom_ = <span class=\"keyword\">new</span> Gameroom(*ths.room_);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是如果 <code>new Gameroom(*ths.room_)</code>错误, 导致room_指向不安全的内存<br>使用下面的代码, 可以导出异常安全, 以及自我赋值</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Game&amp; Game::<span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Game&amp; ths)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tGameroom* p_room = room_;</span><br><span class=\"line\">\troom_ = <span class=\"keyword\">new</span> Gameroom(*ths.room_);</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> p_room;</span><br><span class=\"line\">\tretutn *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在如果<code>new Gameroom</code>抛出异常, room_还可以保持原状.<br>同时也能处理自我赋值</p>\n<p><em>copy and swap</em><br>这一段描述我看完之后, 突然想到了上午看的Jsoncpp里面的代码!!!!! 就有这个<br>下面的代码更加高效 但是牺牲了清晰性</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Game</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(Game&amp; rhs)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Game&amp; Game::<span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Game&amp; ths)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tGame temp(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\tswap(temp);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"条款12-复制对象时勿忘其每一个成分\"><a href=\"#条款12-复制对象时勿忘其每一个成分\" class=\"headerlink\" title=\"条款12: 复制对象时勿忘其每一个成分\"></a>条款12: 复制对象时勿忘其每一个成分</h2><h1 id=\"设计与声明\"><a href=\"#设计与声明\" class=\"headerlink\" title=\"设计与声明\"></a>设计与声明</h1><h2 id=\"条款19-设计class犹如设计type\"><a href=\"#条款19-设计class犹如设计type\" class=\"headerlink\" title=\"条款19: 设计class犹如设计type\"></a>条款19: 设计class犹如设计type</h2><p>如何设计高效的classes呢?</p>\n<ul>\n<li>新class的对象该如何被创建和销毁? 这会影响到构造析构函数内存分配释放函数</li>\n<li>对象的初始化和对象的赋值有什么样的差别? 决定构造函数和赋值运算符的行为.<br>搞清初始化和赋值</li>\n<li>注意class对象被值传递 拷贝构造函数会被调用用来生成临时对象</li>\n<li>什么是新class的合法值? <code>setter</code>函数需要进行的范围检查</li>\n<li>你的新class需要配合某个继承图系吗? // TODO</li>\n<li>你的新class需要什么样的转换? 如果需要类型转换需要在class中编写<code>类型转换函数</code></li>\n<li>什么样的操作运算符和函数对此class而言是合理的? 决定你为class声明哪些函数(条款 23 24 46)</li>\n<li>将需要驳回的标准函数设置为private</li>\n<li>你的新type有多么一般化? 或许应该定义一整个class家族. 也许模板能帮你</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"让自己习惯C\"><a href=\"#让自己习惯C\" class=\"headerlink\" title=\"让自己习惯C++\"></a>让自己习惯C++</h1><h2 id=\"条款02-尽量用const-enum-inline-替换-define\"><a href=\"#条款02-尽量用const-enum-inline-替换-define\" class=\"headerlink\" title=\"条款02 尽量用const, enum, inline 替换#define\"></a>条款02 尽量用const, enum, inline 替换#define</h2><p>前言 我目前自己做的框架中大量用了#define…. 因为用enum涉及到转换才能到int. 来学习下这条</p>\n<p><strong>使用 const 常量来替换 #define</strong><br>谨防机号表出错, 特殊情况下 还能减少字量</p>\n<p>#define无法限定作用域, 这点我已经感受到了</p>\n<p>定义C风格常量字符串<br>const char* const NAME = “lsmg”; 防止指向和指向内容改变<br>定义C++风格常量字符串<br>const std::string NAME = “lsmg”;</p>\n<p>class专属常量, 使用如下方式. 可以限定作用域</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Game</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_ROOM = <span class=\"number\">10000</span>; <span class=\"comment\">// 常量声明式 - 常量且只有一份</span></span><br><span class=\"line\">\tGameroom* rooms[MAX_ROOM];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果要获取class专属常量的地址, 或者需要定义式. 则需要在<code>实现文件</code>而非<code>头文件</code>, 如下声明<br><code>const int Game::MAX_ROOM</code> - 未给定初值<br>由于class常量已经在声明时获得初值, 所以不用在给定初值</p>\n<p>这里我发现一件事情, 这本书 不能只读一遍, 最少两边完整的<br>前面就已经开始使用后面的条款了, 先着重本条款, 跨条款的等第二遍</p>\n<h2 id=\"条款03-尽可能使用const\"><a href=\"#条款03-尽可能使用const\" class=\"headerlink\" title=\"条款03 尽可能使用const\"></a>条款03 尽可能使用const</h2><p><strong>总结</strong></p>\n<ul>\n<li>将某些东西声明为const可帮助编译器探测到错误用法<br>const可以用作在任何作用域内的对象, 函数参数, 函数返回类型, 成员函数本体</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> greeting[] = <span class=\"string\">\"Hello\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> *p = greeting;</span><br><span class=\"line\"><span class=\"comment\">// const 在 * 左边 被指物是常量 在右边自己是常量 两边都是常量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *p = greeting; <span class=\"comment\">// 指针指向可以变, 指向的值不能变</span></span><br><span class=\"line\"><span class=\"keyword\">char</span>* <span class=\"keyword\">const</span> p = greeting; <span class=\"comment\">// 指针指向不可以变, 指向的值可以变</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"keyword\">const</span> p = greeting; <span class=\"comment\">// 都不可以变</span></span><br></pre></td></tr></table></figure>\n<p><strong>const 参数, 可你帮你检查 == 被写成=的情况</strong><br>这本书看来挺有意思的2333333</p>\n<p><strong>const 函数, 这里看不太懂 没有原来如此的感觉</strong></p>\n<h2 id=\"条款04-确定对象使用前已经被初始化\"><a href=\"#条款04-确定对象使用前已经被初始化\" class=\"headerlink\" title=\"条款04 确定对象使用前已经被初始化\"></a>条款04 确定对象使用前已经被初始化</h2><p><strong>总结</strong></p>\n<ul>\n<li>为内置型对象进行手工初始化.</li>\n<li>构造函数对号食用成员初值列, 不要在构造函数中赋值. 初值列次数应该与声明次序相同</li>\n<li>为了免除 跨编译单元的初始化次数问题, 用<code>local static</code>对象替换<code>non-local static</code>对象</li>\n</ul>\n<p>永远在使用对象前, 进行初始化.<br>在构造函数中, 对所有值进行初始化<br>构造函数使用<code>成员初始列</code>进行<code>初始化操作</code>而非<code>赋值操作</code></p>\n<p><strong>减少default构造函数不必要的调用</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tA(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;name, <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">list</span>&lt;Gameroom&gt; &amp;room_list);</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> name_;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">list</span>&lt;Gameroom&gt; room_list_;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> roomnum_;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">A::A(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;name, <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">list</span>&lt;Gameroom&gt; &amp;room_list)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tname_ = name; <span class=\"comment\">// 这些都是赋值 不是初始化</span></span><br><span class=\"line\">\troom_list_ = room_list;</span><br><span class=\"line\">\troomnum_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// C++规定 对象的 成员变量  初始化动作  发生在  进入构造函数本体  之前</span></span><br><span class=\"line\"><span class=\"comment\">// name_  room_list_  两个在构造函数中被赋值, 而初始化在进入构造函数之前</span></span><br><span class=\"line\"><span class=\"comment\">// ---发生在这些成员的default构造函数被调用的时候, (发生在进入构造函数前)</span></span><br><span class=\"line\"><span class=\"comment\">// ---roomnum_例外 int属于内置类型</span></span><br></pre></td></tr></table></figure>\n<p>上面的初始化方式, 浪费了default的构造函数 所以推荐使用下面的形式</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::A(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;name, <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">list</span>&lt;Gameroom&gt; &amp;room_list)</span><br><span class=\"line\">\t:name_(name), room_list_(room_list), roomnum_(<span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>虽然最终结果相同, 但没有浪费default构造函数. 前两个调用的copy构造函数.</p>\n<p><strong>还可以使用成员初值列 来default构造一个成员变量.</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::A()</span><br><span class=\"line\">\t:name_(), room_list_(), roomnum_(<span class=\"number\">0</span>)</span><br><span class=\"line\">&#123; <span class=\"comment\">// 前两个全部调用的default构造函数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>const reference 内置类型(初始化与赋值等成本) 一定成员初始值列</strong></p>\n<p><strong>初始值列总是使用 声明次序进行初始化, 而非写的顺序, 所以最好按声明次序列出</strong></p>\n<p><strong>不同编译单元内定义之 non-local static对象 的初始化 次序</strong><br>static对象: 虚构函数会在main() 结束时被自动调用<br>local static对象: 函数内的static对象<br>non-local对象: 其他static对象</p>\n<p>编译单元: 产出单一目标文件的那些源码, 基本是单一源码文件和他包含的头文件</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// filesystem.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileSystem</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"keyword\">size_t</span> <span class=\"title\">GetNum</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> FIieSystem tfs;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// directory.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Directory</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tDirectory(params);\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Directory::Directory(params)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"keyword\">size_t</span> num = tfs.GetNum(); <span class=\"comment\">// 使用tfs对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.cpp</span></span><br><span class=\"line\"><span class=\"function\">Directory <span class=\"title\">temp_dir</span><span class=\"params\">(params)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>只有当 tfs在temp_dir初始化之前被初始化 才能得到正确的结果. 否则会调用未初始化的对象</p>\n<p>但是这个次序无法保证<br>因为C++ 对这种情况没有明确定义</p>\n<p>如何解决这个问题呢??<br>将每个<code>non-local static</code>对象搬到自己的专属函数内(该对象在此函数内被声明为static)<br>函数返回一个reference对象他所包含的对象<br>用户调用这个函数而不是直接调用对象</p>\n<p>解决的原因呢?<br>C++ 保证函数内的<code>local static</code>对象 会在<code>函数被调用期间</code>, <code>首次遇到该对象的定义式</code>被初始化</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// filesystem.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileSystem</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"keyword\">size_t</span> <span class=\"title\">GetNum</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">FileSystem</span>&amp; <span class=\"title\">tfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"built_in\">FileSystem</span> fs;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fs;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// directory.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Directory</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tDirectory(params);\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Directory::Directory(params)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"keyword\">size_t</span> num = tfs().GetNum(); <span class=\"comment\">// 使用tfs对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">Directory&amp; <span class=\"title\">temp_dir</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> Directory td;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> td;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"构造析构赋值运算\"><a href=\"#构造析构赋值运算\" class=\"headerlink\" title=\"构造析构赋值运算\"></a>构造析构赋值运算</h1><h2 id=\"条款0506-了解C-默认编写并调用哪些函数-并适当拒绝\"><a href=\"#条款0506-了解C-默认编写并调用哪些函数-并适当拒绝\" class=\"headerlink\" title=\"条款0506 了解C++默认编写并调用哪些函数 并适当拒绝\"></a>条款0506 了解C++默认编写并调用哪些函数 并适当拒绝</h2><p><strong>夹带如下私货-public-inline</strong></p>\n<ul>\n<li>一个构造函数(如果你没有任何构造函数)</li>\n<li>一个拷贝构造函数</li>\n<li>一个析构函数</li>\n<li>一个拷贝</li>\n</ul>\n<p>拷贝构造函数和拷贝运算符 自动生成的只是单纯的将来源对象的每一个<code>non-static</code>成员变量<br>拷贝到目标对象</p>\n<p><strong>遇到const 和 引用成员 默认的拷贝无法工作, 编译器会发出警告</strong></p>\n<p><strong>将不需要的成员函数声明为private, 并且不实现</strong></p>\n<h2 id=\"条款07-为多态基类声明virtual析构函数\"><a href=\"#条款07-为多态基类声明virtual析构函数\" class=\"headerlink\" title=\"条款07 为多态基类声明virtual析构函数\"></a>条款07 为多态基类声明virtual析构函数</h2><p>返回指向子类的 父类型指针.<br>如果delete这个指针, 在父类析构函数不是virtual的情况下, 很可能会导致<br>父类的成分被销毁, 然而子类多出来的部分不被销毁. 造成局部销毁!!</p>\n<p><strong>防止局部销毁很简单, 将父类的析构函数声明为virtual</strong></p>\n<p><strong>任何class 只要带有virtual函数 几乎确定应该有一个virtual析构函数</strong></p>\n<p><strong>无端的声明virtual函数是错误的</strong><br>如果class不含virtual函数, 通常表示这个class 不是想做为父类, 这时如果将其析构函数声明为virual<br>是一个馊主意………….</p>\n<p><em>class类的大小 = 成员变量占据大小 + vptr(vitual table pointer)指针大小(4~8 字节)</em></p>\n<p>每一个带有virtual函数的class都有对应的vtbl</p>\n<p>当对象调用某一vitual函数的时候, 实际调用的函数取决于<br>vptr(vitual table pointer)指针指向的vtbl(vitual table)</p>\n<p>无端的使用virtual函数 会导致占用空间的增大</p>\n<h2 id=\"条款08-别让异常逃离析构函数\"><a href=\"#条款08-别让异常逃离析构函数\" class=\"headerlink\" title=\"条款08 别让异常逃离析构函数\"></a>条款08 别让异常逃离析构函数</h2><p><strong>总结</strong></p>\n<ul>\n<li>析构函数绝对不要抛出异常, 如果被析构函数调用的函数可能抛出异常, 析构函数应该捕获所有异常<br>然后吞下它们, 或者结束程序</li>\n<li>如果客户需要对某个操作函数运行期间抛出的异常做出反应, class应该提供一个普通函数(而非在析构函数中)<br>执行操作</li>\n</ul>\n<p><strong>析构函数不要抛出异常</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Widget</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t~Widget() &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Foo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;Widget&gt; v;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当 <code>v</code>被销毁的时候, Widget的析构函数第一次抛出异常C++还能接受?<br>第二次就会造成不明确行为</p>\n<h2 id=\"条款09-绝不在构造函数和析构过程中调用virtual函数\"><a href=\"#条款09-绝不在构造函数和析构过程中调用virtual函数\" class=\"headerlink\" title=\"条款09: 绝不在构造函数和析构过程中调用virtual函数\"></a>条款09: 绝不在构造函数和析构过程中调用virtual函数</h2><p><strong>总结</strong></p>\n<ul>\n<li>在构造和析构期间不要调用virtual函数, 因为这类调用从不下降到<code>子类</code></li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Transaction</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tTransaction();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">LogTransaction</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Transaction::Transaction()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tLogTransaction();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuyTransaction</span>:</span> <span class=\"keyword\">public</span> Transaction</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">LogTransaction</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SellTransaction</span>:</span> <span class=\"keyword\">public</span> Transaction</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">LogTransaction</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BuyTransaction b;</span><br></pre></td></tr></table></figure>\n<p>BuyTransaction的构造函数会被调用, 但是父类的构造函数会更显被调用.<br>然后父类构造函数调用<code>LogTransaction()</code>的版本是<code>父类</code>的版本!!! 不是子类的版本</p>\n<p>析构函数也是同样的道理, 当<code>子类</code>的析构函数执行后, <code>子类</code>中的属性值就成为未定义状态<br>进入<code>父类</code>后对象就成为一个<code>父类</code>对象</p>\n<p>本例子中既然无法实现使用<code>virtual</code>函数从<code>父类</code>向下调用, 可以再构造期间, 将<br><code>子类</code>必要的构造信息向上传给<code>父类</code>的构造函数</p>\n<h2 id=\"条款10-另operator-返回一个reference-to-this\"><a href=\"#条款10-另operator-返回一个reference-to-this\" class=\"headerlink\" title=\"条款10: 另operator= 返回一个reference to *this\"></a>条款10: 另operator= 返回一个reference to *this</h2><p>注意这只是一个协议, 并无强制性. 如果不遵守代码依然可以通过编译, 然而这份 协议被所有内置类型<br>和标准程序库提供的类型共同遵守.<br>因此除非你有一个标新立异的好理由, 不然还是随众吧</p>\n<h2 id=\"条款11-在operator-中处理”自我赋值”\"><a href=\"#条款11-在operator-中处理”自我赋值”\" class=\"headerlink\" title=\"条款11: 在operator= 中处理”自我赋值”\"></a>条款11: 在operator= 中处理”自我赋值”</h2><p><strong>总结</strong></p>\n<ul>\n<li>确保当对象自我赋值时operator=有良好的的行为. 其中技术包括比较”来源对象”<br>和”目标对象”的地址, 精心周到的语句顺序, 以及copy-and-swap</li>\n<li>确认任何函数如果操作一个以上的对象, 而其中多个对象是同一个对象的时候, 进行仍未正确</li>\n</ul>\n<p><strong>自我赋值是什么</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Widget</span> &#123;</span>...&#125;;</span><br><span class=\"line\">Widget w;</span><br><span class=\"line\"></span><br><span class=\"line\">w=w; <span class=\"comment\">// 什么这个看起来不可能, 那下面呢?</span></span><br><span class=\"line\"></span><br><span class=\"line\">a[i] = a[j]; <span class=\"comment\">// 这个怎么样?  潜在的自我赋值</span></span><br><span class=\"line\">*px = *py <span class=\"comment\">// 这个呢? 潜在的自我赋值</span></span><br></pre></td></tr></table></figure>\n<p><strong>会出现的问题</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gameroom</span>&#123;</span>....&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Game</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tGameroom* room_;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// operator=的实现代码</span></span><br><span class=\"line\">Game&amp; Game::<span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Game&amp; ths)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> room_;</span><br><span class=\"line\">\troom_ = <span class=\"keyword\">new</span> Gameroom(*ths.room_);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码 如果 this和ths指向同一个对象就会造成 <code>room_</code>构造失败<br>因为被<code>delete</code>的<code>room_</code>就是要传入的</p>\n<p>如何解决这个问题呢?<br><em>比较来源对象 整同测试</em></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Game&amp; Game::<span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Game&amp; ths)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == &amp;ths)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> room_;</span><br><span class=\"line\">\troom_ = <span class=\"keyword\">new</span> Gameroom(*ths.room_);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是如果 <code>new Gameroom(*ths.room_)</code>错误, 导致room_指向不安全的内存<br>使用下面的代码, 可以导出异常安全, 以及自我赋值</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Game&amp; Game::<span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Game&amp; ths)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tGameroom* p_room = room_;</span><br><span class=\"line\">\troom_ = <span class=\"keyword\">new</span> Gameroom(*ths.room_);</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> p_room;</span><br><span class=\"line\">\tretutn *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在如果<code>new Gameroom</code>抛出异常, room_还可以保持原状.<br>同时也能处理自我赋值</p>\n<p><em>copy and swap</em><br>这一段描述我看完之后, 突然想到了上午看的Jsoncpp里面的代码!!!!! 就有这个<br>下面的代码更加高效 但是牺牲了清晰性</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Game</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(Game&amp; rhs)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Game&amp; Game::<span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Game&amp; ths)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tGame temp(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\tswap(temp);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"条款12-复制对象时勿忘其每一个成分\"><a href=\"#条款12-复制对象时勿忘其每一个成分\" class=\"headerlink\" title=\"条款12: 复制对象时勿忘其每一个成分\"></a>条款12: 复制对象时勿忘其每一个成分</h2><h1 id=\"设计与声明\"><a href=\"#设计与声明\" class=\"headerlink\" title=\"设计与声明\"></a>设计与声明</h1><h2 id=\"条款19-设计class犹如设计type\"><a href=\"#条款19-设计class犹如设计type\" class=\"headerlink\" title=\"条款19: 设计class犹如设计type\"></a>条款19: 设计class犹如设计type</h2><p>如何设计高效的classes呢?</p>\n<ul>\n<li>新class的对象该如何被创建和销毁? 这会影响到构造析构函数内存分配释放函数</li>\n<li>对象的初始化和对象的赋值有什么样的差别? 决定构造函数和赋值运算符的行为.<br>搞清初始化和赋值</li>\n<li>注意class对象被值传递 拷贝构造函数会被调用用来生成临时对象</li>\n<li>什么是新class的合法值? <code>setter</code>函数需要进行的范围检查</li>\n<li>你的新class需要配合某个继承图系吗? // TODO</li>\n<li>你的新class需要什么样的转换? 如果需要类型转换需要在class中编写<code>类型转换函数</code></li>\n<li>什么样的操作运算符和函数对此class而言是合理的? 决定你为class声明哪些函数(条款 23 24 46)</li>\n<li>将需要驳回的标准函数设置为private</li>\n<li>你的新type有多么一般化? 或许应该定义一整个class家族. 也许模板能帮你</li>\n</ul>\n"},{"title":"CPP11特性","date":"2020-02-19T09:41:27.000Z","_content":"# Lambda\n参考资料\nhttps://zh.cppreference.com/w/cpp/language/lambda\nhttps://blog.csdn.net/qq_34199383/article/details/80469780\n\n```c++\n[ 捕获 ] ( 形参 ) -> ret { 函数体 }\n[ 捕获 ] ( 形参 ) { 函数体 }\n[ 捕获 ] { 函数体 }\n\n& 以引用隐式捕获被使用的自动变量\n= 以复制隐式捕获被使用的自动变量\n\n[&]{};          // OK：默认以引用捕获\n[&, i]{};       // OK：以引用捕获，但 i 以值捕获\n\n[=]{};          // OK：默认以复制捕获\n[=, &i]{};      // OK：以复制捕获，但 i 以引用捕获\n\n[this]{}; // 获取this指针, 如果使用了&和=则会默认包括this\n```\n**使用场景一**\n以sort为代表的函数 需要传入函数的函数\n```c++\n// 原版\nbool compare(int &a, int &b)\n{\n\treturn a > b;\n}\n\nxxx(compare);\n\n// 新版\nxxx([](int a, int b){return a > b;});\n```\n**使用场景二**\n```c++\nauto add = [](int a, int b){return a + b;};\nint bar = add(1, 2);\n```\n\n# 类型特性\nhttps://zh.cppreference.com/w/cpp/types#.E7.B1.BB.E5.9E.8B.E7.89.B9.E6.80.A7.28C.2B.2B11_.E8.B5.B7.29\n\n神仙的头文件<type_traits> 可以判断一个值是否是某个类型\n\n比如判断一个值\n是不是 整形\n是不是 void\n是不是 数组 等等\n\n目前不知道用在什么地方合适..... 留个连接备用吧\n\n# 花括号初始\n# 函数对象\n## std::function  functional\n```c++\n#include <functional>\n#include <iostream>\n\nvoid PrintA()\n{\n    std::cout << \"A\" << std::endl;\n}\nvoid PrintB(int bar)\n{\n    std::cout << \"B\" << std::endl;\n}\nint main()\n{\n    std::function<void()> FPrintA = PrintA;\n    FPrintA();\n\n    std::function<void(int)> FPrintB = PrintB;\n    FPrintB(1);\n\n// 感觉配合Lambad 挺不错, 在一个函数中经常使用的功能可以这样定义\n    std::function<void()> FLambad = [](){std::cout << \"Lambad\" << std::endl;};\n    FLambad();\n\t\n\t// 不过使用auto貌似更简单\n\tauto ALambad = [](){std::cout << \"Lambad\" << std::endl;};\n    ALambad();\n}\n\n$ A\n$ B\n$ Lambad\n```\n\n## std::pair utility std::tuple tuple\n\nhttps://zh.cppreference.com/w/cpp/utility/tuple\n\npair是 结构体模板, 可在一个单元中存储两个相异对象. pair是tuple拥有两个元素的特殊情况\n\ntuple是固定大小的异类值(啥是异类值??)汇集\n```c++\nstd::tuple<int, double > GetInfoById(int id)\n{\n    if (id == 0) return std::make_tuple(1, 1.1);\n    if (id == 1) return std::make_tuple(2, 2.2);\n\n    throw std::invalid_argument(\"id\");\n}\n\nint main()\n{\n    auto info = GetInfoById(0);\n\t// 获取指定位置\n    std::cout << \"1:\" << std::get<0>(info)\n            << \" 2:\" << std::get<1>(info) << std::endl;\n\n    int val1;\n    double val2;\n\t// 直接创建引用的tuple\n    std::tie(val1, val2) = GetInfoById(1);\n    std::cout << \"1:\" << val1\n              << \" 2:\" << val2 << std::endl;\n\t\t\t  \n$ 1:1 2:1.1\n$ 1:2 2:2.2\n}\n```","source":"_posts/CPP-CPP重点-CPP11特性.md","raw":"---\ntitle: CPP11特性\ndate: 2020-02-19 17:41:27\ntags:\ncategories:\n - CPP\n - CPP重点\n---\n# Lambda\n参考资料\nhttps://zh.cppreference.com/w/cpp/language/lambda\nhttps://blog.csdn.net/qq_34199383/article/details/80469780\n\n```c++\n[ 捕获 ] ( 形参 ) -> ret { 函数体 }\n[ 捕获 ] ( 形参 ) { 函数体 }\n[ 捕获 ] { 函数体 }\n\n& 以引用隐式捕获被使用的自动变量\n= 以复制隐式捕获被使用的自动变量\n\n[&]{};          // OK：默认以引用捕获\n[&, i]{};       // OK：以引用捕获，但 i 以值捕获\n\n[=]{};          // OK：默认以复制捕获\n[=, &i]{};      // OK：以复制捕获，但 i 以引用捕获\n\n[this]{}; // 获取this指针, 如果使用了&和=则会默认包括this\n```\n**使用场景一**\n以sort为代表的函数 需要传入函数的函数\n```c++\n// 原版\nbool compare(int &a, int &b)\n{\n\treturn a > b;\n}\n\nxxx(compare);\n\n// 新版\nxxx([](int a, int b){return a > b;});\n```\n**使用场景二**\n```c++\nauto add = [](int a, int b){return a + b;};\nint bar = add(1, 2);\n```\n\n# 类型特性\nhttps://zh.cppreference.com/w/cpp/types#.E7.B1.BB.E5.9E.8B.E7.89.B9.E6.80.A7.28C.2B.2B11_.E8.B5.B7.29\n\n神仙的头文件<type_traits> 可以判断一个值是否是某个类型\n\n比如判断一个值\n是不是 整形\n是不是 void\n是不是 数组 等等\n\n目前不知道用在什么地方合适..... 留个连接备用吧\n\n# 花括号初始\n# 函数对象\n## std::function  functional\n```c++\n#include <functional>\n#include <iostream>\n\nvoid PrintA()\n{\n    std::cout << \"A\" << std::endl;\n}\nvoid PrintB(int bar)\n{\n    std::cout << \"B\" << std::endl;\n}\nint main()\n{\n    std::function<void()> FPrintA = PrintA;\n    FPrintA();\n\n    std::function<void(int)> FPrintB = PrintB;\n    FPrintB(1);\n\n// 感觉配合Lambad 挺不错, 在一个函数中经常使用的功能可以这样定义\n    std::function<void()> FLambad = [](){std::cout << \"Lambad\" << std::endl;};\n    FLambad();\n\t\n\t// 不过使用auto貌似更简单\n\tauto ALambad = [](){std::cout << \"Lambad\" << std::endl;};\n    ALambad();\n}\n\n$ A\n$ B\n$ Lambad\n```\n\n## std::pair utility std::tuple tuple\n\nhttps://zh.cppreference.com/w/cpp/utility/tuple\n\npair是 结构体模板, 可在一个单元中存储两个相异对象. pair是tuple拥有两个元素的特殊情况\n\ntuple是固定大小的异类值(啥是异类值??)汇集\n```c++\nstd::tuple<int, double > GetInfoById(int id)\n{\n    if (id == 0) return std::make_tuple(1, 1.1);\n    if (id == 1) return std::make_tuple(2, 2.2);\n\n    throw std::invalid_argument(\"id\");\n}\n\nint main()\n{\n    auto info = GetInfoById(0);\n\t// 获取指定位置\n    std::cout << \"1:\" << std::get<0>(info)\n            << \" 2:\" << std::get<1>(info) << std::endl;\n\n    int val1;\n    double val2;\n\t// 直接创建引用的tuple\n    std::tie(val1, val2) = GetInfoById(1);\n    std::cout << \"1:\" << val1\n              << \" 2:\" << val2 << std::endl;\n\t\t\t  \n$ 1:1 2:1.1\n$ 1:2 2:2.2\n}\n```","slug":"CPP-CPP重点-CPP11特性","published":1,"updated":"2020-02-20T15:21:12.730Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucyh000gsouohb8zcyz3","content":"<h1 id=\"Lambda\"><a href=\"#Lambda\" class=\"headerlink\" title=\"Lambda\"></a>Lambda</h1><p>参考资料<br><a href=\"https://zh.cppreference.com/w/cpp/language/lambda\" target=\"_blank\" rel=\"noopener\">https://zh.cppreference.com/w/cpp/language/lambda</a><br><a href=\"https://blog.csdn.net/qq_34199383/article/details/80469780\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_34199383/article/details/80469780</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ 捕获 ] ( 形参 ) -&gt; ret &#123; 函数体 &#125;</span><br><span class=\"line\">[ 捕获 ] ( 形参 ) &#123; 函数体 &#125;</span><br><span class=\"line\">[ 捕获 ] &#123; 函数体 &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&amp; 以引用隐式捕获被使用的自动变量</span><br><span class=\"line\">= 以复制隐式捕获被使用的自动变量</span><br><span class=\"line\"></span><br><span class=\"line\">[&amp;]&#123;&#125;;          <span class=\"comment\">// OK：默认以引用捕获</span></span><br><span class=\"line\">[&amp;, i]&#123;&#125;;       <span class=\"comment\">// OK：以引用捕获，但 i 以值捕获</span></span><br><span class=\"line\"></span><br><span class=\"line\">[=]&#123;&#125;;          <span class=\"comment\">// OK：默认以复制捕获</span></span><br><span class=\"line\">[=, &amp;i]&#123;&#125;;      <span class=\"comment\">// OK：以复制捕获，但 i 以引用捕获</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"keyword\">this</span>]&#123;&#125;; <span class=\"comment\">// 获取this指针, 如果使用了&amp;和=则会默认包括this</span></span><br></pre></td></tr></table></figure>\n<p><strong>使用场景一</strong><br>以sort为代表的函数 需要传入函数的函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原版</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a &gt; b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">xxx(compare);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新版</span></span><br><span class=\"line\">xxx([](<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)&#123;<span class=\"keyword\">return</span> a &gt; b;&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>使用场景二</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> add = [](<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)&#123;<span class=\"keyword\">return</span> a + b;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> bar = add(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"类型特性\"><a href=\"#类型特性\" class=\"headerlink\" title=\"类型特性\"></a>类型特性</h1><p><a href=\"https://zh.cppreference.com/w/cpp/types#.E7.B1.BB.E5.9E.8B.E7.89.B9.E6.80.A7.28C.2B.2B11_.E8.B5.B7.29\" target=\"_blank\" rel=\"noopener\">https://zh.cppreference.com/w/cpp/types#.E7.B1.BB.E5.9E.8B.E7.89.B9.E6.80.A7.28C.2B.2B11_.E8.B5.B7.29</a></p>\n<p>神仙的头文件<type_traits> 可以判断一个值是否是某个类型</p>\n<p>比如判断一个值<br>是不是 整形<br>是不是 void<br>是不是 数组 等等</p>\n<p>目前不知道用在什么地方合适….. 留个连接备用吧</p>\n<h1 id=\"花括号初始\"><a href=\"#花括号初始\" class=\"headerlink\" title=\"花括号初始\"></a>花括号初始</h1><h1 id=\"函数对象\"><a href=\"#函数对象\" class=\"headerlink\" title=\"函数对象\"></a>函数对象</h1><h2 id=\"std-function-functional\"><a href=\"#std-function-functional\" class=\"headerlink\" title=\"std::function  functional\"></a>std::function  functional</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PrintA</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"A\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PrintB</span><span class=\"params\">(<span class=\"keyword\">int</span> bar)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"B\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::function&lt;<span class=\"keyword\">void</span>()&gt; FPrintA = PrintA;</span><br><span class=\"line\">    FPrintA();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::function&lt;<span class=\"keyword\">void</span>(<span class=\"keyword\">int</span>)&gt; FPrintB = PrintB;</span><br><span class=\"line\">    FPrintB(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 感觉配合Lambad 挺不错, 在一个函数中经常使用的功能可以这样定义</span></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::function&lt;<span class=\"keyword\">void</span>()&gt; FLambad = []()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Lambad\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;;</span><br><span class=\"line\">    FLambad();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 不过使用auto貌似更简单</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> ALambad = []()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Lambad\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;;</span><br><span class=\"line\">    ALambad();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ A</span><br><span class=\"line\">$ B</span><br><span class=\"line\">$ Lambad</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"std-pair-utility-std-tuple-tuple\"><a href=\"#std-pair-utility-std-tuple-tuple\" class=\"headerlink\" title=\"std::pair utility std::tuple tuple\"></a>std::pair utility std::tuple tuple</h2><p><a href=\"https://zh.cppreference.com/w/cpp/utility/tuple\" target=\"_blank\" rel=\"noopener\">https://zh.cppreference.com/w/cpp/utility/tuple</a></p>\n<p>pair是 结构体模板, 可在一个单元中存储两个相异对象. pair是tuple拥有两个元素的特殊情况</p>\n<p>tuple是固定大小的异类值(啥是异类值??)汇集</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::tuple&lt;int, double &gt; GetInfoById(int id)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (id == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">std</span>::make_tuple(<span class=\"number\">1</span>, <span class=\"number\">1.1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (id == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">std</span>::make_tuple(<span class=\"number\">2</span>, <span class=\"number\">2.2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"built_in\">std</span>::invalid_argument(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> info = GetInfoById(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 获取指定位置</span></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"1:\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(info)</span><br><span class=\"line\">            &lt;&lt; <span class=\"string\">\" 2:\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(info) &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val1;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> val2;</span><br><span class=\"line\">\t<span class=\"comment\">// 直接创建引用的tuple</span></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::tie(val1, val2) = GetInfoById(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"1:\"</span> &lt;&lt; val1</span><br><span class=\"line\">              &lt;&lt; <span class=\"string\">\" 2:\"</span> &lt;&lt; val2 &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t  </span><br><span class=\"line\">$ <span class=\"number\">1</span>:<span class=\"number\">1</span> <span class=\"number\">2</span>:<span class=\"number\">1.1</span></span><br><span class=\"line\">$ <span class=\"number\">1</span>:<span class=\"number\">2</span> <span class=\"number\">2</span>:<span class=\"number\">2.2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Lambda\"><a href=\"#Lambda\" class=\"headerlink\" title=\"Lambda\"></a>Lambda</h1><p>参考资料<br><a href=\"https://zh.cppreference.com/w/cpp/language/lambda\" target=\"_blank\" rel=\"noopener\">https://zh.cppreference.com/w/cpp/language/lambda</a><br><a href=\"https://blog.csdn.net/qq_34199383/article/details/80469780\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_34199383/article/details/80469780</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ 捕获 ] ( 形参 ) -&gt; ret &#123; 函数体 &#125;</span><br><span class=\"line\">[ 捕获 ] ( 形参 ) &#123; 函数体 &#125;</span><br><span class=\"line\">[ 捕获 ] &#123; 函数体 &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&amp; 以引用隐式捕获被使用的自动变量</span><br><span class=\"line\">= 以复制隐式捕获被使用的自动变量</span><br><span class=\"line\"></span><br><span class=\"line\">[&amp;]&#123;&#125;;          <span class=\"comment\">// OK：默认以引用捕获</span></span><br><span class=\"line\">[&amp;, i]&#123;&#125;;       <span class=\"comment\">// OK：以引用捕获，但 i 以值捕获</span></span><br><span class=\"line\"></span><br><span class=\"line\">[=]&#123;&#125;;          <span class=\"comment\">// OK：默认以复制捕获</span></span><br><span class=\"line\">[=, &amp;i]&#123;&#125;;      <span class=\"comment\">// OK：以复制捕获，但 i 以引用捕获</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"keyword\">this</span>]&#123;&#125;; <span class=\"comment\">// 获取this指针, 如果使用了&amp;和=则会默认包括this</span></span><br></pre></td></tr></table></figure>\n<p><strong>使用场景一</strong><br>以sort为代表的函数 需要传入函数的函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原版</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a &gt; b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">xxx(compare);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新版</span></span><br><span class=\"line\">xxx([](<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)&#123;<span class=\"keyword\">return</span> a &gt; b;&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>使用场景二</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> add = [](<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)&#123;<span class=\"keyword\">return</span> a + b;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> bar = add(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"类型特性\"><a href=\"#类型特性\" class=\"headerlink\" title=\"类型特性\"></a>类型特性</h1><p><a href=\"https://zh.cppreference.com/w/cpp/types#.E7.B1.BB.E5.9E.8B.E7.89.B9.E6.80.A7.28C.2B.2B11_.E8.B5.B7.29\" target=\"_blank\" rel=\"noopener\">https://zh.cppreference.com/w/cpp/types#.E7.B1.BB.E5.9E.8B.E7.89.B9.E6.80.A7.28C.2B.2B11_.E8.B5.B7.29</a></p>\n<p>神仙的头文件<type_traits> 可以判断一个值是否是某个类型</p>\n<p>比如判断一个值<br>是不是 整形<br>是不是 void<br>是不是 数组 等等</p>\n<p>目前不知道用在什么地方合适….. 留个连接备用吧</p>\n<h1 id=\"花括号初始\"><a href=\"#花括号初始\" class=\"headerlink\" title=\"花括号初始\"></a>花括号初始</h1><h1 id=\"函数对象\"><a href=\"#函数对象\" class=\"headerlink\" title=\"函数对象\"></a>函数对象</h1><h2 id=\"std-function-functional\"><a href=\"#std-function-functional\" class=\"headerlink\" title=\"std::function  functional\"></a>std::function  functional</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PrintA</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"A\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PrintB</span><span class=\"params\">(<span class=\"keyword\">int</span> bar)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"B\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::function&lt;<span class=\"keyword\">void</span>()&gt; FPrintA = PrintA;</span><br><span class=\"line\">    FPrintA();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::function&lt;<span class=\"keyword\">void</span>(<span class=\"keyword\">int</span>)&gt; FPrintB = PrintB;</span><br><span class=\"line\">    FPrintB(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 感觉配合Lambad 挺不错, 在一个函数中经常使用的功能可以这样定义</span></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::function&lt;<span class=\"keyword\">void</span>()&gt; FLambad = []()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Lambad\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;;</span><br><span class=\"line\">    FLambad();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 不过使用auto貌似更简单</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> ALambad = []()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Lambad\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;;</span><br><span class=\"line\">    ALambad();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ A</span><br><span class=\"line\">$ B</span><br><span class=\"line\">$ Lambad</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"std-pair-utility-std-tuple-tuple\"><a href=\"#std-pair-utility-std-tuple-tuple\" class=\"headerlink\" title=\"std::pair utility std::tuple tuple\"></a>std::pair utility std::tuple tuple</h2><p><a href=\"https://zh.cppreference.com/w/cpp/utility/tuple\" target=\"_blank\" rel=\"noopener\">https://zh.cppreference.com/w/cpp/utility/tuple</a></p>\n<p>pair是 结构体模板, 可在一个单元中存储两个相异对象. pair是tuple拥有两个元素的特殊情况</p>\n<p>tuple是固定大小的异类值(啥是异类值??)汇集</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::tuple&lt;int, double &gt; GetInfoById(int id)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (id == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">std</span>::make_tuple(<span class=\"number\">1</span>, <span class=\"number\">1.1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (id == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">std</span>::make_tuple(<span class=\"number\">2</span>, <span class=\"number\">2.2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"built_in\">std</span>::invalid_argument(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> info = GetInfoById(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 获取指定位置</span></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"1:\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(info)</span><br><span class=\"line\">            &lt;&lt; <span class=\"string\">\" 2:\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(info) &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val1;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> val2;</span><br><span class=\"line\">\t<span class=\"comment\">// 直接创建引用的tuple</span></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::tie(val1, val2) = GetInfoById(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"1:\"</span> &lt;&lt; val1</span><br><span class=\"line\">              &lt;&lt; <span class=\"string\">\" 2:\"</span> &lt;&lt; val2 &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t  </span><br><span class=\"line\">$ <span class=\"number\">1</span>:<span class=\"number\">1</span> <span class=\"number\">2</span>:<span class=\"number\">1.1</span></span><br><span class=\"line\">$ <span class=\"number\">1</span>:<span class=\"number\">2</span> <span class=\"number\">2</span>:<span class=\"number\">2.2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"C++薄书整理","date":"2019-10-20T11:13:22.000Z","_content":"\n# 定义新量\n\nauto 自动根据初始值的类型进行自动类型推导.\ndecltype 根据表达式的类型定义对象\n\n右值引用, 操纵右值对象\n`std::move()`, 可以将一个\n\n**枚举**\n不限定作用域的定义\nenum color {red, green, blue};\n限定在类型内部的作用域\nenum class color {red, green, blue};\n`color a = color::red`\n\n# 函数\n数组传参的长度处理\n- 直接传递数组长度\n- 使用C风格字符串(默认结尾有标志)\n- 使用C++11的新函数begin()和end()同时传递首尾地址\n\n函数指针\n`bool (*pf)(int, int)` 可以指向\n`bool max(int a,int b)`\n调用 `pf(1, 1)`即可\n常用于函数的参数是一个函数的返回值\n\n**Lambda**\n`[]() -> return type {statements}`\n中括号代表lambda引导, 其中的captures子句在同一作用域下lambda主体捕获(访问)哪些对象\n以及如何捕获这些对象\n- 可以为空, 不会访问外围对象\n- [=] 代表用值捕获的方式\n- [&] 代表引用捕获\n\n# 类\n**辅助函数**\n定义辅助函数, 有点像Java里面的重写toString()函数(最常见的代表的例子)\n```c++\nostream &print(ostream &os)\n{\n\tos << 1 << endl;\n\treturn os;\n}\n```\n**友元函数**\n一个类的辅助函数从概念上可以看成类的接口, 虽然和类的关系很密切, 但并不是类的成员, 所以不能直接访问私有成员\nC++ 中可以将该类函数声明为该类的友元.\n这样就能访问到类的非公有成员.\n在函数的前面加上`friend`关键字\n**友元类**\n如果A想访问B的私有成员, 可以在B内声明`friend class A`, 这样就可以在B内访问A的私有成员\n*友元关系是单向的, 不具有交换性, 同时也不具有传递性*\n\n**构造函数**\n默认构造函数没有参数, 或者所有的参数都具有默认值\nC++11允许在显示定义构造函数的情况下使用默认构造函数\n需要在默认构造函数后面加上`= default`\n*使用默认构造函数创建类对象时, 切忌在对象名后I使用圆括号, 成了一个函数声明*\n\n**初始值列表**\nT(int a, int b):a_(a), b_(b){}\n引用和const修饰的必须用初始值列表初始化, 初始的顺序取决于数据成员在类内的定义顺序,\n而非初始值列表的顺序\n\n**简化构造函数**\n实际将自己的带参构造函数, 给定默认值, 这样就实现了默认构造函数和带参构造函数的合并\n\n**复制构造函数**\n参数为该类的引用\n\n**委托构造函数**\n减少构造函数代码量\n实际就是一个构造函数后面加上`:`调用另一个构造函数, 同时传入参数\n```c++\nclass A\n{\n\tint bar1_;\n\tint bar2_;\n\tA(int b1):A(b1, 2){}\n\tA(int b1, int b2):bar1_(b1), bar2_(b2){}\n}\n```\n**运算符重载**\nT operator /(A, B);\n双目运算符两个参数\n单目运算符一个参数\n对于二元运算符, 左侧运算对象传递给第一个参数, 右侧运算对象传递给第二个参数.\n\n运算符重载的声明和定义的分离\n放在类成员中的运算符重载, 需要算入默认的this指针参数\n```c++\n// test.h\n#include <cstdio>\nclass Test\n{\npublic:\n    Test(int a, int b);\n    Test& operator+(const Test& right);\n\tvoid PrintAB();\nprivate:\n\tint a_;\n\tint b_;\n};\n// test.cpp\n#include \"test.h\"\nTest::Test(int a, int b)\n{\n    a_ = a;\n    b_ = b;\n}\nTest& Test::operator+(const Test& right)\n{\n    Test test(this->a_ + right.a_, this->b_ + right.b_);\n    return test;\n}\nvoid Test::PrintAB()\n{\n    printf(\"%d %d\\n\", a_, b_);\n}\n// main.cpp\nint main()\n{\n    Test test1(1, 1);\n    Test test2(2, 2);\n    Test test = test1 + test2;\n    test.PrintAB();\n    return 0;\n}\n\n// ++ -- \nTest& operator++(); // 前置版本\nTest operator++(int); // 后置版本\n```\n**类成员指针**\n*数据成员指针* (private不能通过指针访问)\n其值是数据成员所在地址相对于对象起始地址的偏移值\n```c++\nA T::*p1 = &T::x\nint A::*p1 = &A::value\nA a;\n// 使用方式\na.*p = ......................;\n```\np1指向T类中的 A类型的x数据成员\n`A T::`可以用`auto`\n\n*成员函数指针*\n```c++\nint (A::*pf)();\npf = &A::GetValue;\n// 当然可以使用auto 来简化\nauto pf2 = &A::GetValue;\n// 使用方式\n(a.*pf)();\n\n```\n\n----\n统一初始化\n`X x1 = {0} 和 X x2 {0}` 这两种是不同的实现!!, 大多数情况下这两个是相通的, 然而当\n`explicit构造函数`存在的时候`前者的初始化是错误的`\n\n`int x{0} int x= 0 int x(0)` 最后一个是错误的可能会和函数声明冲突\n```c++\nclass A\n{\n\ttypedef int x;\n\tint z(x);\n}\n```\n\n另外还存在一个\n```c++\nstd::atomic<int> a1{0}; // OK\nstd::atomic<int> a2(0); // OK\nstd::atomic<int> a3 = 0; // Error\n```\n这个错误的原因是copy-initialization引起的\n这个copy-initialization发生在`T x = a`的声明, 下面我把原博客的部分重要英文替换成中文或代码描述\n`std::atomic<int> a3 = 0` 从`int类型`赋值到`可能是 cv-qualified`的`class type`\n[cv-qualified](https://stackoverflow.com/questions/27527642/what-does-cv-qualified-mean)\n```c++\n// ***cv-qualified***\n// non cv_qualified\nint first; \nchar *second; \n\n// cv-qualified \nconst int third; \nvolatile char * fourth; \n```\n`std::atomic<int> a3 = 0` 满足了这个条件属于`copy-initialization`\n[copy-initialization](https://www.quora.com/What-is-the-difference-between-copy-initialization-and-direct-initialization-of-objects-in-c++)\n[直接初始化和复制初始化的区别](https://blog.csdn.net/ljianhui/article/details/9245661)\n直接初始化会直接用参数生成对象, 而复制初始化会`用参数生成临时对象, 然后将这个对象复制到正要创建的对象`\n```c++\nclass A\n{\npublic:\n        A () { } //直接初始化会调用这个构造函数\n        A (const A& a) { } //复制初始化会调用这个\n}\n```\n接下来需要通过`std::atomic<int>(int)`把0转换成成一个纯右值(prvalue)的临时对象\n[纯右值](https://zh.cppreference.com/w/cpp/language/value_category)\n[纯右值](https://www.cnblogs.com/zpcdbky/p/5275959.html)\n然后再将这个临时对象用直接初始化(调用复制构造函数), 然而`std::atomic<int>`把拷贝\n构造函数给禁用了, 就会出错\n`std::atomic<int> a3 {0}`这个会直接调用接收int的构造函数\n\n回到`X x1 = {0}`这里, 这个表达式是一个复制构造, 用一个braced-init-list(指的{0}). \n这里有两个阶段\n首先是会把单个参数的构造函数汇总起来(得到A-list)供选择, 如果其中没有合适的构造函数, 再将候选列表\n转换为所有构造函数\n\n如果如果A-list没有构造函数, 并且class T存在默认构造函数, 第一阶段就会被忽略\n如果在一个使用`{}`的初始化, 并且选择到了`explicit 构造函数头上`就会报错\n\n`explicit`可以防止在调用某个成员函数的时候, 实参类型(通过构造函数之一)自动转换成相应参数,\n但此时这个函数需要其他的成员变量参与到函数运行, 恰巧这时所需要的其他成员变量没有得到合适的初始化, 就会发生错误(没有得到合适初始化的原因就是, 自动调用了不合适的构造函数生成了这个函数所需要的参数(一般是对象))\n\n@2019年10月26日21:25:58@算是第一次解决一个环环相扣的问题, 精力有点不足了\nhttps://zhuanlan.zhihu.com/p/21102748 后续会继续进行理解\n[这里还发现一个](https://blog.csdn.net/spaceyqy/article/details/22730939)\n\n# 模板, 泛型 动态内存, 数据结构\n```c++\ntemplate <typename T>\nconst T& GetMax(const T& a, const T& b)\n{\n    return a > b ? a : b;\n}\nint main()\n{\n    std::cout << GetMax(1, 2);\n\tstd::cout << GetMax<int>(1, 2); // 显示指定模板类型\n    return 0; \n}\n```\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/C%2B%2B%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A02/C%2B%2B%E5%86%85%E5%AD%98.png)\nC++堆的内存需要手动new和delete, 如果一个对象new出来没有在能被释放的时候释放就会造成--**内存泄漏**(需要及时delete不需要的对象)\n一个指向动态内存的指针, 在动态内存被释放后, 指针依然指向原来的地址--**空悬指针**(释放内存后将相应的指针设置为nullptr)\n\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/C%2B%2B%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A02/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88.png)\n","source":"_posts/CPP-CPP基础-2.md","raw":"---\ntitle: C++薄书整理\ntags:\n  - null\ncategories:\n  - CPP\n  - CPP基础\ndate: 2019-10-20 19:13:22\n---\n\n# 定义新量\n\nauto 自动根据初始值的类型进行自动类型推导.\ndecltype 根据表达式的类型定义对象\n\n右值引用, 操纵右值对象\n`std::move()`, 可以将一个\n\n**枚举**\n不限定作用域的定义\nenum color {red, green, blue};\n限定在类型内部的作用域\nenum class color {red, green, blue};\n`color a = color::red`\n\n# 函数\n数组传参的长度处理\n- 直接传递数组长度\n- 使用C风格字符串(默认结尾有标志)\n- 使用C++11的新函数begin()和end()同时传递首尾地址\n\n函数指针\n`bool (*pf)(int, int)` 可以指向\n`bool max(int a,int b)`\n调用 `pf(1, 1)`即可\n常用于函数的参数是一个函数的返回值\n\n**Lambda**\n`[]() -> return type {statements}`\n中括号代表lambda引导, 其中的captures子句在同一作用域下lambda主体捕获(访问)哪些对象\n以及如何捕获这些对象\n- 可以为空, 不会访问外围对象\n- [=] 代表用值捕获的方式\n- [&] 代表引用捕获\n\n# 类\n**辅助函数**\n定义辅助函数, 有点像Java里面的重写toString()函数(最常见的代表的例子)\n```c++\nostream &print(ostream &os)\n{\n\tos << 1 << endl;\n\treturn os;\n}\n```\n**友元函数**\n一个类的辅助函数从概念上可以看成类的接口, 虽然和类的关系很密切, 但并不是类的成员, 所以不能直接访问私有成员\nC++ 中可以将该类函数声明为该类的友元.\n这样就能访问到类的非公有成员.\n在函数的前面加上`friend`关键字\n**友元类**\n如果A想访问B的私有成员, 可以在B内声明`friend class A`, 这样就可以在B内访问A的私有成员\n*友元关系是单向的, 不具有交换性, 同时也不具有传递性*\n\n**构造函数**\n默认构造函数没有参数, 或者所有的参数都具有默认值\nC++11允许在显示定义构造函数的情况下使用默认构造函数\n需要在默认构造函数后面加上`= default`\n*使用默认构造函数创建类对象时, 切忌在对象名后I使用圆括号, 成了一个函数声明*\n\n**初始值列表**\nT(int a, int b):a_(a), b_(b){}\n引用和const修饰的必须用初始值列表初始化, 初始的顺序取决于数据成员在类内的定义顺序,\n而非初始值列表的顺序\n\n**简化构造函数**\n实际将自己的带参构造函数, 给定默认值, 这样就实现了默认构造函数和带参构造函数的合并\n\n**复制构造函数**\n参数为该类的引用\n\n**委托构造函数**\n减少构造函数代码量\n实际就是一个构造函数后面加上`:`调用另一个构造函数, 同时传入参数\n```c++\nclass A\n{\n\tint bar1_;\n\tint bar2_;\n\tA(int b1):A(b1, 2){}\n\tA(int b1, int b2):bar1_(b1), bar2_(b2){}\n}\n```\n**运算符重载**\nT operator /(A, B);\n双目运算符两个参数\n单目运算符一个参数\n对于二元运算符, 左侧运算对象传递给第一个参数, 右侧运算对象传递给第二个参数.\n\n运算符重载的声明和定义的分离\n放在类成员中的运算符重载, 需要算入默认的this指针参数\n```c++\n// test.h\n#include <cstdio>\nclass Test\n{\npublic:\n    Test(int a, int b);\n    Test& operator+(const Test& right);\n\tvoid PrintAB();\nprivate:\n\tint a_;\n\tint b_;\n};\n// test.cpp\n#include \"test.h\"\nTest::Test(int a, int b)\n{\n    a_ = a;\n    b_ = b;\n}\nTest& Test::operator+(const Test& right)\n{\n    Test test(this->a_ + right.a_, this->b_ + right.b_);\n    return test;\n}\nvoid Test::PrintAB()\n{\n    printf(\"%d %d\\n\", a_, b_);\n}\n// main.cpp\nint main()\n{\n    Test test1(1, 1);\n    Test test2(2, 2);\n    Test test = test1 + test2;\n    test.PrintAB();\n    return 0;\n}\n\n// ++ -- \nTest& operator++(); // 前置版本\nTest operator++(int); // 后置版本\n```\n**类成员指针**\n*数据成员指针* (private不能通过指针访问)\n其值是数据成员所在地址相对于对象起始地址的偏移值\n```c++\nA T::*p1 = &T::x\nint A::*p1 = &A::value\nA a;\n// 使用方式\na.*p = ......................;\n```\np1指向T类中的 A类型的x数据成员\n`A T::`可以用`auto`\n\n*成员函数指针*\n```c++\nint (A::*pf)();\npf = &A::GetValue;\n// 当然可以使用auto 来简化\nauto pf2 = &A::GetValue;\n// 使用方式\n(a.*pf)();\n\n```\n\n----\n统一初始化\n`X x1 = {0} 和 X x2 {0}` 这两种是不同的实现!!, 大多数情况下这两个是相通的, 然而当\n`explicit构造函数`存在的时候`前者的初始化是错误的`\n\n`int x{0} int x= 0 int x(0)` 最后一个是错误的可能会和函数声明冲突\n```c++\nclass A\n{\n\ttypedef int x;\n\tint z(x);\n}\n```\n\n另外还存在一个\n```c++\nstd::atomic<int> a1{0}; // OK\nstd::atomic<int> a2(0); // OK\nstd::atomic<int> a3 = 0; // Error\n```\n这个错误的原因是copy-initialization引起的\n这个copy-initialization发生在`T x = a`的声明, 下面我把原博客的部分重要英文替换成中文或代码描述\n`std::atomic<int> a3 = 0` 从`int类型`赋值到`可能是 cv-qualified`的`class type`\n[cv-qualified](https://stackoverflow.com/questions/27527642/what-does-cv-qualified-mean)\n```c++\n// ***cv-qualified***\n// non cv_qualified\nint first; \nchar *second; \n\n// cv-qualified \nconst int third; \nvolatile char * fourth; \n```\n`std::atomic<int> a3 = 0` 满足了这个条件属于`copy-initialization`\n[copy-initialization](https://www.quora.com/What-is-the-difference-between-copy-initialization-and-direct-initialization-of-objects-in-c++)\n[直接初始化和复制初始化的区别](https://blog.csdn.net/ljianhui/article/details/9245661)\n直接初始化会直接用参数生成对象, 而复制初始化会`用参数生成临时对象, 然后将这个对象复制到正要创建的对象`\n```c++\nclass A\n{\npublic:\n        A () { } //直接初始化会调用这个构造函数\n        A (const A& a) { } //复制初始化会调用这个\n}\n```\n接下来需要通过`std::atomic<int>(int)`把0转换成成一个纯右值(prvalue)的临时对象\n[纯右值](https://zh.cppreference.com/w/cpp/language/value_category)\n[纯右值](https://www.cnblogs.com/zpcdbky/p/5275959.html)\n然后再将这个临时对象用直接初始化(调用复制构造函数), 然而`std::atomic<int>`把拷贝\n构造函数给禁用了, 就会出错\n`std::atomic<int> a3 {0}`这个会直接调用接收int的构造函数\n\n回到`X x1 = {0}`这里, 这个表达式是一个复制构造, 用一个braced-init-list(指的{0}). \n这里有两个阶段\n首先是会把单个参数的构造函数汇总起来(得到A-list)供选择, 如果其中没有合适的构造函数, 再将候选列表\n转换为所有构造函数\n\n如果如果A-list没有构造函数, 并且class T存在默认构造函数, 第一阶段就会被忽略\n如果在一个使用`{}`的初始化, 并且选择到了`explicit 构造函数头上`就会报错\n\n`explicit`可以防止在调用某个成员函数的时候, 实参类型(通过构造函数之一)自动转换成相应参数,\n但此时这个函数需要其他的成员变量参与到函数运行, 恰巧这时所需要的其他成员变量没有得到合适的初始化, 就会发生错误(没有得到合适初始化的原因就是, 自动调用了不合适的构造函数生成了这个函数所需要的参数(一般是对象))\n\n@2019年10月26日21:25:58@算是第一次解决一个环环相扣的问题, 精力有点不足了\nhttps://zhuanlan.zhihu.com/p/21102748 后续会继续进行理解\n[这里还发现一个](https://blog.csdn.net/spaceyqy/article/details/22730939)\n\n# 模板, 泛型 动态内存, 数据结构\n```c++\ntemplate <typename T>\nconst T& GetMax(const T& a, const T& b)\n{\n    return a > b ? a : b;\n}\nint main()\n{\n    std::cout << GetMax(1, 2);\n\tstd::cout << GetMax<int>(1, 2); // 显示指定模板类型\n    return 0; \n}\n```\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/C%2B%2B%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A02/C%2B%2B%E5%86%85%E5%AD%98.png)\nC++堆的内存需要手动new和delete, 如果一个对象new出来没有在能被释放的时候释放就会造成--**内存泄漏**(需要及时delete不需要的对象)\n一个指向动态内存的指针, 在动态内存被释放后, 指针依然指向原来的地址--**空悬指针**(释放内存后将相应的指针设置为nullptr)\n\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/C%2B%2B%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A02/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88.png)\n","slug":"CPP-CPP基础-2","published":1,"updated":"2020-01-31T08:07:47.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucyi000jsouob51d5zkw","content":"<h1 id=\"定义新量\"><a href=\"#定义新量\" class=\"headerlink\" title=\"定义新量\"></a>定义新量</h1><p>auto 自动根据初始值的类型进行自动类型推导.<br>decltype 根据表达式的类型定义对象</p>\n<p>右值引用, 操纵右值对象<br><code>std::move()</code>, 可以将一个</p>\n<p><strong>枚举</strong><br>不限定作用域的定义<br>enum color {red, green, blue};<br>限定在类型内部的作用域<br>enum class color {red, green, blue};<br><code>color a = color::red</code></p>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><p>数组传参的长度处理</p>\n<ul>\n<li>直接传递数组长度</li>\n<li>使用C风格字符串(默认结尾有标志)</li>\n<li>使用C++11的新函数begin()和end()同时传递首尾地址</li>\n</ul>\n<p>函数指针<br><code>bool (*pf)(int, int)</code> 可以指向<br><code>bool max(int a,int b)</code><br>调用 <code>pf(1, 1)</code>即可<br>常用于函数的参数是一个函数的返回值</p>\n<p><strong>Lambda</strong><br><code>[]() -&gt; return type {statements}</code><br>中括号代表lambda引导, 其中的captures子句在同一作用域下lambda主体捕获(访问)哪些对象<br>以及如何捕获这些对象</p>\n<ul>\n<li>可以为空, 不会访问外围对象</li>\n<li>[=] 代表用值捕获的方式</li>\n<li>[&amp;] 代表引用捕获</li>\n</ul>\n<h1 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h1><p><strong>辅助函数</strong><br>定义辅助函数, 有点像Java里面的重写toString()函数(最常见的代表的例子)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ostream &amp;<span class=\"title\">print</span><span class=\"params\">(ostream &amp;os)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tos &lt;&lt; <span class=\"number\">1</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> os;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>友元函数</strong><br>一个类的辅助函数从概念上可以看成类的接口, 虽然和类的关系很密切, 但并不是类的成员, 所以不能直接访问私有成员<br>C++ 中可以将该类函数声明为该类的友元.<br>这样就能访问到类的非公有成员.<br>在函数的前面加上<code>friend</code>关键字<br><strong>友元类</strong><br>如果A想访问B的私有成员, 可以在B内声明<code>friend class A</code>, 这样就可以在B内访问A的私有成员<br><em>友元关系是单向的, 不具有交换性, 同时也不具有传递性</em></p>\n<p><strong>构造函数</strong><br>默认构造函数没有参数, 或者所有的参数都具有默认值<br>C++11允许在显示定义构造函数的情况下使用默认构造函数<br>需要在默认构造函数后面加上<code>= default</code><br><em>使用默认构造函数创建类对象时, 切忌在对象名后I使用圆括号, 成了一个函数声明</em></p>\n<p><strong>初始值列表</strong><br>T(int a, int b):a_(a), b_(b){}<br>引用和const修饰的必须用初始值列表初始化, 初始的顺序取决于数据成员在类内的定义顺序,<br>而非初始值列表的顺序</p>\n<p><strong>简化构造函数</strong><br>实际将自己的带参构造函数, 给定默认值, 这样就实现了默认构造函数和带参构造函数的合并</p>\n<p><strong>复制构造函数</strong><br>参数为该类的引用</p>\n<p><strong>委托构造函数</strong><br>减少构造函数代码量<br>实际就是一个构造函数后面加上<code>:</code>调用另一个构造函数, 同时传入参数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> bar1_;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> bar2_;</span><br><span class=\"line\">\tA(<span class=\"keyword\">int</span> b1):A(b1, <span class=\"number\">2</span>)&#123;&#125;</span><br><span class=\"line\">\tA(<span class=\"keyword\">int</span> b1, <span class=\"keyword\">int</span> b2):bar1_(b1), bar2_(b2)&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>运算符重载</strong><br>T operator /(A, B);<br>双目运算符两个参数<br>单目运算符一个参数<br>对于二元运算符, 左侧运算对象传递给第一个参数, 右侧运算对象传递给第二个参数.</p>\n<p>运算符重载的声明和定义的分离<br>放在类成员中的运算符重载, 需要算入默认的this指针参数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Test(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b);</span><br><span class=\"line\">    Test&amp; <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Test&amp; right);</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PrintAB</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a_;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// test.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"test.h\"</span></span></span><br><span class=\"line\">Test::Test(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    a_ = a;</span><br><span class=\"line\">    b_ = b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Test&amp; Test::<span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Test&amp; right)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">Test <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">this</span>-&gt;a_ + right.a_, <span class=\"keyword\">this</span>-&gt;b_ + right.b_)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> test;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Test::PrintAB</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d\\n\"</span>, a_, b_);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// main.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Test <span class=\"title\">test1</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Test <span class=\"title\">test2</span><span class=\"params\">(<span class=\"number\">2</span>, <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">    Test test = test1 + test2;</span><br><span class=\"line\">    test.PrintAB();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ++ -- </span></span><br><span class=\"line\">Test&amp; <span class=\"keyword\">operator</span>++(); <span class=\"comment\">// 前置版本</span></span><br><span class=\"line\">Test <span class=\"keyword\">operator</span>++(<span class=\"keyword\">int</span>); <span class=\"comment\">// 后置版本</span></span><br></pre></td></tr></table></figure>\n<p><strong>类成员指针</strong><br><em>数据成员指针</em> (private不能通过指针访问)<br>其值是数据成员所在地址相对于对象起始地址的偏移值</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A T::*p1 = &amp;T::x</span><br><span class=\"line\"><span class=\"keyword\">int</span> A::*p1 = &amp;A::value</span><br><span class=\"line\">A a;</span><br><span class=\"line\"><span class=\"comment\">// 使用方式</span></span><br><span class=\"line\">a.*p = ......................;</span><br></pre></td></tr></table></figure>\n<p>p1指向T类中的 A类型的x数据成员<br><code>A T::</code>可以用<code>auto</code></p>\n<p><em>成员函数指针</em></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> (A::*pf)();</span><br><span class=\"line\">pf = &amp;A::GetValue;</span><br><span class=\"line\"><span class=\"comment\">// 当然可以使用auto 来简化</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> pf2 = &amp;A::GetValue;</span><br><span class=\"line\"><span class=\"comment\">// 使用方式</span></span><br><span class=\"line\">(a.*pf)();</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>统一初始化<br><code>X x1 = {0} 和 X x2 {0}</code> 这两种是不同的实现!!, 大多数情况下这两个是相通的, 然而当<br><code>explicit构造函数</code>存在的时候<code>前者的初始化是错误的</code></p>\n<p><code>int x{0} int x= 0 int x(0)</code> 最后一个是错误的可能会和函数声明冲突</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">z</span><span class=\"params\">(x)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外还存在一个</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::atomic&lt;<span class=\"keyword\">int</span>&gt; a1&#123;<span class=\"number\">0</span>&#125;; <span class=\"comment\">// OK</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::atomic&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">a2</span><span class=\"params\">(<span class=\"number\">0</span>)</span></span>; <span class=\"comment\">// OK</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::atomic&lt;<span class=\"keyword\">int</span>&gt; a3 = <span class=\"number\">0</span>; <span class=\"comment\">// Error</span></span><br></pre></td></tr></table></figure>\n<p>这个错误的原因是copy-initialization引起的<br>这个copy-initialization发生在<code>T x = a</code>的声明, 下面我把原博客的部分重要英文替换成中文或代码描述<br><code>std::atomic&lt;int&gt; a3 = 0</code> 从<code>int类型</code>赋值到<code>可能是 cv-qualified</code>的<code>class type</code><br><a href=\"https://stackoverflow.com/questions/27527642/what-does-cv-qualified-mean\" target=\"_blank\" rel=\"noopener\">cv-qualified</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ***cv-qualified***</span></span><br><span class=\"line\"><span class=\"comment\">// non cv_qualified</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> first; </span><br><span class=\"line\"><span class=\"keyword\">char</span> *second; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// cv-qualified </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> third; </span><br><span class=\"line\"><span class=\"keyword\">volatile</span> <span class=\"keyword\">char</span> * fourth;</span><br></pre></td></tr></table></figure>\n<p><code>std::atomic&lt;int&gt; a3 = 0</code> 满足了这个条件属于<code>copy-initialization</code><br><a href=\"https://www.quora.com/What-is-the-difference-between-copy-initialization-and-direct-initialization-of-objects-in-c++\" target=\"_blank\" rel=\"noopener\">copy-initialization</a><br><a href=\"https://blog.csdn.net/ljianhui/article/details/9245661\" target=\"_blank\" rel=\"noopener\">直接初始化和复制初始化的区别</a><br>直接初始化会直接用参数生成对象, 而复制初始化会<code>用参数生成临时对象, 然后将这个对象复制到正要创建的对象</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">        A () &#123; &#125; <span class=\"comment\">//直接初始化会调用这个构造函数</span></span><br><span class=\"line\">        A (<span class=\"keyword\">const</span> A&amp; a) &#123; &#125; <span class=\"comment\">//复制初始化会调用这个</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来需要通过<code>std::atomic&lt;int&gt;(int)</code>把0转换成成一个纯右值(prvalue)的临时对象<br><a href=\"https://zh.cppreference.com/w/cpp/language/value_category\" target=\"_blank\" rel=\"noopener\">纯右值</a><br><a href=\"https://www.cnblogs.com/zpcdbky/p/5275959.html\" target=\"_blank\" rel=\"noopener\">纯右值</a><br>然后再将这个临时对象用直接初始化(调用复制构造函数), 然而<code>std::atomic&lt;int&gt;</code>把拷贝<br>构造函数给禁用了, 就会出错<br><code>std::atomic&lt;int&gt; a3 {0}</code>这个会直接调用接收int的构造函数</p>\n<p>回到<code>X x1 = {0}</code>这里, 这个表达式是一个复制构造, 用一个braced-init-list(指的{0}).<br>这里有两个阶段<br>首先是会把单个参数的构造函数汇总起来(得到A-list)供选择, 如果其中没有合适的构造函数, 再将候选列表<br>转换为所有构造函数</p>\n<p>如果如果A-list没有构造函数, 并且class T存在默认构造函数, 第一阶段就会被忽略<br>如果在一个使用<code>{}</code>的初始化, 并且选择到了<code>explicit 构造函数头上</code>就会报错</p>\n<p><code>explicit</code>可以防止在调用某个成员函数的时候, 实参类型(通过构造函数之一)自动转换成相应参数,<br>但此时这个函数需要其他的成员变量参与到函数运行, 恰巧这时所需要的其他成员变量没有得到合适的初始化, 就会发生错误(没有得到合适初始化的原因就是, 自动调用了不合适的构造函数生成了这个函数所需要的参数(一般是对象))</p>\n<p>@2019年10月26日21:25:58@算是第一次解决一个环环相扣的问题, 精力有点不足了<br><a href=\"https://zhuanlan.zhihu.com/p/21102748\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/21102748</a> 后续会继续进行理解<br><a href=\"https://blog.csdn.net/spaceyqy/article/details/22730939\" target=\"_blank\" rel=\"noopener\">这里还发现一个</a></p>\n<h1 id=\"模板-泛型-动态内存-数据结构\"><a href=\"#模板-泛型-动态内存-数据结构\" class=\"headerlink\" title=\"模板, 泛型 动态内存, 数据结构\"></a>模板, 泛型 动态内存, 数据结构</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> T&amp; <span class=\"title\">GetMax</span><span class=\"params\">(<span class=\"keyword\">const</span> T&amp; a, <span class=\"keyword\">const</span> T&amp; b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &gt; b ? a : b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; GetMax(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; GetMax&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// 显示指定模板类型</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/C%2B%2B%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A02/C%2B%2B%E5%86%85%E5%AD%98.png\" alt=\"\"><br>C++堆的内存需要手动new和delete, 如果一个对象new出来没有在能被释放的时候释放就会造成–<strong>内存泄漏</strong>(需要及时delete不需要的对象)<br>一个指向动态内存的指针, 在动态内存被释放后, 指针依然指向原来的地址–<strong>空悬指针</strong>(释放内存后将相应的指针设置为nullptr)</p>\n<p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/C%2B%2B%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A02/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"定义新量\"><a href=\"#定义新量\" class=\"headerlink\" title=\"定义新量\"></a>定义新量</h1><p>auto 自动根据初始值的类型进行自动类型推导.<br>decltype 根据表达式的类型定义对象</p>\n<p>右值引用, 操纵右值对象<br><code>std::move()</code>, 可以将一个</p>\n<p><strong>枚举</strong><br>不限定作用域的定义<br>enum color {red, green, blue};<br>限定在类型内部的作用域<br>enum class color {red, green, blue};<br><code>color a = color::red</code></p>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><p>数组传参的长度处理</p>\n<ul>\n<li>直接传递数组长度</li>\n<li>使用C风格字符串(默认结尾有标志)</li>\n<li>使用C++11的新函数begin()和end()同时传递首尾地址</li>\n</ul>\n<p>函数指针<br><code>bool (*pf)(int, int)</code> 可以指向<br><code>bool max(int a,int b)</code><br>调用 <code>pf(1, 1)</code>即可<br>常用于函数的参数是一个函数的返回值</p>\n<p><strong>Lambda</strong><br><code>[]() -&gt; return type {statements}</code><br>中括号代表lambda引导, 其中的captures子句在同一作用域下lambda主体捕获(访问)哪些对象<br>以及如何捕获这些对象</p>\n<ul>\n<li>可以为空, 不会访问外围对象</li>\n<li>[=] 代表用值捕获的方式</li>\n<li>[&amp;] 代表引用捕获</li>\n</ul>\n<h1 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h1><p><strong>辅助函数</strong><br>定义辅助函数, 有点像Java里面的重写toString()函数(最常见的代表的例子)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ostream &amp;<span class=\"title\">print</span><span class=\"params\">(ostream &amp;os)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tos &lt;&lt; <span class=\"number\">1</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> os;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>友元函数</strong><br>一个类的辅助函数从概念上可以看成类的接口, 虽然和类的关系很密切, 但并不是类的成员, 所以不能直接访问私有成员<br>C++ 中可以将该类函数声明为该类的友元.<br>这样就能访问到类的非公有成员.<br>在函数的前面加上<code>friend</code>关键字<br><strong>友元类</strong><br>如果A想访问B的私有成员, 可以在B内声明<code>friend class A</code>, 这样就可以在B内访问A的私有成员<br><em>友元关系是单向的, 不具有交换性, 同时也不具有传递性</em></p>\n<p><strong>构造函数</strong><br>默认构造函数没有参数, 或者所有的参数都具有默认值<br>C++11允许在显示定义构造函数的情况下使用默认构造函数<br>需要在默认构造函数后面加上<code>= default</code><br><em>使用默认构造函数创建类对象时, 切忌在对象名后I使用圆括号, 成了一个函数声明</em></p>\n<p><strong>初始值列表</strong><br>T(int a, int b):a_(a), b_(b){}<br>引用和const修饰的必须用初始值列表初始化, 初始的顺序取决于数据成员在类内的定义顺序,<br>而非初始值列表的顺序</p>\n<p><strong>简化构造函数</strong><br>实际将自己的带参构造函数, 给定默认值, 这样就实现了默认构造函数和带参构造函数的合并</p>\n<p><strong>复制构造函数</strong><br>参数为该类的引用</p>\n<p><strong>委托构造函数</strong><br>减少构造函数代码量<br>实际就是一个构造函数后面加上<code>:</code>调用另一个构造函数, 同时传入参数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> bar1_;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> bar2_;</span><br><span class=\"line\">\tA(<span class=\"keyword\">int</span> b1):A(b1, <span class=\"number\">2</span>)&#123;&#125;</span><br><span class=\"line\">\tA(<span class=\"keyword\">int</span> b1, <span class=\"keyword\">int</span> b2):bar1_(b1), bar2_(b2)&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>运算符重载</strong><br>T operator /(A, B);<br>双目运算符两个参数<br>单目运算符一个参数<br>对于二元运算符, 左侧运算对象传递给第一个参数, 右侧运算对象传递给第二个参数.</p>\n<p>运算符重载的声明和定义的分离<br>放在类成员中的运算符重载, 需要算入默认的this指针参数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Test(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b);</span><br><span class=\"line\">    Test&amp; <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Test&amp; right);</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PrintAB</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a_;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// test.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"test.h\"</span></span></span><br><span class=\"line\">Test::Test(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    a_ = a;</span><br><span class=\"line\">    b_ = b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Test&amp; Test::<span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Test&amp; right)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">Test <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">this</span>-&gt;a_ + right.a_, <span class=\"keyword\">this</span>-&gt;b_ + right.b_)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> test;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Test::PrintAB</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d\\n\"</span>, a_, b_);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// main.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Test <span class=\"title\">test1</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Test <span class=\"title\">test2</span><span class=\"params\">(<span class=\"number\">2</span>, <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">    Test test = test1 + test2;</span><br><span class=\"line\">    test.PrintAB();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ++ -- </span></span><br><span class=\"line\">Test&amp; <span class=\"keyword\">operator</span>++(); <span class=\"comment\">// 前置版本</span></span><br><span class=\"line\">Test <span class=\"keyword\">operator</span>++(<span class=\"keyword\">int</span>); <span class=\"comment\">// 后置版本</span></span><br></pre></td></tr></table></figure>\n<p><strong>类成员指针</strong><br><em>数据成员指针</em> (private不能通过指针访问)<br>其值是数据成员所在地址相对于对象起始地址的偏移值</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A T::*p1 = &amp;T::x</span><br><span class=\"line\"><span class=\"keyword\">int</span> A::*p1 = &amp;A::value</span><br><span class=\"line\">A a;</span><br><span class=\"line\"><span class=\"comment\">// 使用方式</span></span><br><span class=\"line\">a.*p = ......................;</span><br></pre></td></tr></table></figure>\n<p>p1指向T类中的 A类型的x数据成员<br><code>A T::</code>可以用<code>auto</code></p>\n<p><em>成员函数指针</em></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> (A::*pf)();</span><br><span class=\"line\">pf = &amp;A::GetValue;</span><br><span class=\"line\"><span class=\"comment\">// 当然可以使用auto 来简化</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> pf2 = &amp;A::GetValue;</span><br><span class=\"line\"><span class=\"comment\">// 使用方式</span></span><br><span class=\"line\">(a.*pf)();</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>统一初始化<br><code>X x1 = {0} 和 X x2 {0}</code> 这两种是不同的实现!!, 大多数情况下这两个是相通的, 然而当<br><code>explicit构造函数</code>存在的时候<code>前者的初始化是错误的</code></p>\n<p><code>int x{0} int x= 0 int x(0)</code> 最后一个是错误的可能会和函数声明冲突</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">z</span><span class=\"params\">(x)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外还存在一个</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::atomic&lt;<span class=\"keyword\">int</span>&gt; a1&#123;<span class=\"number\">0</span>&#125;; <span class=\"comment\">// OK</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::atomic&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">a2</span><span class=\"params\">(<span class=\"number\">0</span>)</span></span>; <span class=\"comment\">// OK</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::atomic&lt;<span class=\"keyword\">int</span>&gt; a3 = <span class=\"number\">0</span>; <span class=\"comment\">// Error</span></span><br></pre></td></tr></table></figure>\n<p>这个错误的原因是copy-initialization引起的<br>这个copy-initialization发生在<code>T x = a</code>的声明, 下面我把原博客的部分重要英文替换成中文或代码描述<br><code>std::atomic&lt;int&gt; a3 = 0</code> 从<code>int类型</code>赋值到<code>可能是 cv-qualified</code>的<code>class type</code><br><a href=\"https://stackoverflow.com/questions/27527642/what-does-cv-qualified-mean\" target=\"_blank\" rel=\"noopener\">cv-qualified</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ***cv-qualified***</span></span><br><span class=\"line\"><span class=\"comment\">// non cv_qualified</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> first; </span><br><span class=\"line\"><span class=\"keyword\">char</span> *second; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// cv-qualified </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> third; </span><br><span class=\"line\"><span class=\"keyword\">volatile</span> <span class=\"keyword\">char</span> * fourth;</span><br></pre></td></tr></table></figure>\n<p><code>std::atomic&lt;int&gt; a3 = 0</code> 满足了这个条件属于<code>copy-initialization</code><br><a href=\"https://www.quora.com/What-is-the-difference-between-copy-initialization-and-direct-initialization-of-objects-in-c++\" target=\"_blank\" rel=\"noopener\">copy-initialization</a><br><a href=\"https://blog.csdn.net/ljianhui/article/details/9245661\" target=\"_blank\" rel=\"noopener\">直接初始化和复制初始化的区别</a><br>直接初始化会直接用参数生成对象, 而复制初始化会<code>用参数生成临时对象, 然后将这个对象复制到正要创建的对象</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">        A () &#123; &#125; <span class=\"comment\">//直接初始化会调用这个构造函数</span></span><br><span class=\"line\">        A (<span class=\"keyword\">const</span> A&amp; a) &#123; &#125; <span class=\"comment\">//复制初始化会调用这个</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来需要通过<code>std::atomic&lt;int&gt;(int)</code>把0转换成成一个纯右值(prvalue)的临时对象<br><a href=\"https://zh.cppreference.com/w/cpp/language/value_category\" target=\"_blank\" rel=\"noopener\">纯右值</a><br><a href=\"https://www.cnblogs.com/zpcdbky/p/5275959.html\" target=\"_blank\" rel=\"noopener\">纯右值</a><br>然后再将这个临时对象用直接初始化(调用复制构造函数), 然而<code>std::atomic&lt;int&gt;</code>把拷贝<br>构造函数给禁用了, 就会出错<br><code>std::atomic&lt;int&gt; a3 {0}</code>这个会直接调用接收int的构造函数</p>\n<p>回到<code>X x1 = {0}</code>这里, 这个表达式是一个复制构造, 用一个braced-init-list(指的{0}).<br>这里有两个阶段<br>首先是会把单个参数的构造函数汇总起来(得到A-list)供选择, 如果其中没有合适的构造函数, 再将候选列表<br>转换为所有构造函数</p>\n<p>如果如果A-list没有构造函数, 并且class T存在默认构造函数, 第一阶段就会被忽略<br>如果在一个使用<code>{}</code>的初始化, 并且选择到了<code>explicit 构造函数头上</code>就会报错</p>\n<p><code>explicit</code>可以防止在调用某个成员函数的时候, 实参类型(通过构造函数之一)自动转换成相应参数,<br>但此时这个函数需要其他的成员变量参与到函数运行, 恰巧这时所需要的其他成员变量没有得到合适的初始化, 就会发生错误(没有得到合适初始化的原因就是, 自动调用了不合适的构造函数生成了这个函数所需要的参数(一般是对象))</p>\n<p>@2019年10月26日21:25:58@算是第一次解决一个环环相扣的问题, 精力有点不足了<br><a href=\"https://zhuanlan.zhihu.com/p/21102748\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/21102748</a> 后续会继续进行理解<br><a href=\"https://blog.csdn.net/spaceyqy/article/details/22730939\" target=\"_blank\" rel=\"noopener\">这里还发现一个</a></p>\n<h1 id=\"模板-泛型-动态内存-数据结构\"><a href=\"#模板-泛型-动态内存-数据结构\" class=\"headerlink\" title=\"模板, 泛型 动态内存, 数据结构\"></a>模板, 泛型 动态内存, 数据结构</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> T&amp; <span class=\"title\">GetMax</span><span class=\"params\">(<span class=\"keyword\">const</span> T&amp; a, <span class=\"keyword\">const</span> T&amp; b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &gt; b ? a : b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; GetMax(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; GetMax&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// 显示指定模板类型</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/C%2B%2B%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A02/C%2B%2B%E5%86%85%E5%AD%98.png\" alt=\"\"><br>C++堆的内存需要手动new和delete, 如果一个对象new出来没有在能被释放的时候释放就会造成–<strong>内存泄漏</strong>(需要及时delete不需要的对象)<br>一个指向动态内存的指针, 在动态内存被释放后, 指针依然指向原来的地址–<strong>空悬指针</strong>(释放内存后将相应的指针设置为nullptr)</p>\n<p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/C%2B%2B%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A02/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88.png\" alt=\"\"></p>\n"},{"title":"CMAKE","date":"2020-02-06T09:07:45.000Z","_content":"CMAKE并不打算专门去学, 所以就用到哪里学到哪里\n\n今天clion写项目 遇到一个问题 明明写了aux_source_directory 却依然提示没有加入. 后来查了下, 并不推荐使用那个命令.\n可能会存在一些问题\nhttps://cmake.org/cmake/help/latest/command/aux_source_directory.html\n\n\n```cmake\n# 必须片段\n# CMake 最低版本号要求\ncmake_minimum_required (VERSION 2.8)\n# 项目信息\nproject (Demo1)\n# 指定生成目标\nadd_executable(Demo main.cc)\n\n# 多文件\n# 如果一味地在add_executable中添加源文件, 会导致太长了\n# 将dir目录中所有源文件保存在变量中\naux_source_directory(. DIR_SOURCE)\n# 将变量赋值给Demo\nadd_executable(Demo ${DIR_SOURCE})\n\n# 多文件多目录\n# 需要在主目录和子文件夹中都编写CMakeLists.txt文件\n\n# 主文件添加子目录\nadd_subdirectory(dir1)\n# 添加链接库\ntarget_link_libraries(Demo Foo)\n\n# dir1目录中\naux_source_directory(. DIR1_SOURCE)\n# 生成链接库 Foo 在主文件中添加即可\nadd_library(Foo ${DIR1_SOURCE})\n```\n\n# CMAKE和MAKE之间的区别\n[博客原文](https://my.oschina.net/xunxun/blog/86781)\n\n自己的理解\n通过为cmake编写CMakeList文件, cmake即可按照规则生成相应的Makefile文件\n然后make读取Makefile文件就可以按照规则将源代码编译\n\n总的来说cmake就是为make生成Makefile文件, (Makefile文件可以自己编写, 也可以用Cmake生成)\n应该是编写CMakeList的代码量少于或者简单于Makefile, 简化了操作","source":"_posts/CPP-CPP重点-CMAKE.md","raw":"---\ntitle: CMAKE\ndate: 2020-02-06 17:07:45\ntags:\ncategories:\n  - CPP\n  - CPP重点\n---\nCMAKE并不打算专门去学, 所以就用到哪里学到哪里\n\n今天clion写项目 遇到一个问题 明明写了aux_source_directory 却依然提示没有加入. 后来查了下, 并不推荐使用那个命令.\n可能会存在一些问题\nhttps://cmake.org/cmake/help/latest/command/aux_source_directory.html\n\n\n```cmake\n# 必须片段\n# CMake 最低版本号要求\ncmake_minimum_required (VERSION 2.8)\n# 项目信息\nproject (Demo1)\n# 指定生成目标\nadd_executable(Demo main.cc)\n\n# 多文件\n# 如果一味地在add_executable中添加源文件, 会导致太长了\n# 将dir目录中所有源文件保存在变量中\naux_source_directory(. DIR_SOURCE)\n# 将变量赋值给Demo\nadd_executable(Demo ${DIR_SOURCE})\n\n# 多文件多目录\n# 需要在主目录和子文件夹中都编写CMakeLists.txt文件\n\n# 主文件添加子目录\nadd_subdirectory(dir1)\n# 添加链接库\ntarget_link_libraries(Demo Foo)\n\n# dir1目录中\naux_source_directory(. DIR1_SOURCE)\n# 生成链接库 Foo 在主文件中添加即可\nadd_library(Foo ${DIR1_SOURCE})\n```\n\n# CMAKE和MAKE之间的区别\n[博客原文](https://my.oschina.net/xunxun/blog/86781)\n\n自己的理解\n通过为cmake编写CMakeList文件, cmake即可按照规则生成相应的Makefile文件\n然后make读取Makefile文件就可以按照规则将源代码编译\n\n总的来说cmake就是为make生成Makefile文件, (Makefile文件可以自己编写, 也可以用Cmake生成)\n应该是编写CMakeList的代码量少于或者简单于Makefile, 简化了操作","slug":"CPP-CPP重点-CMAKE","published":1,"updated":"2020-02-19T14:35:15.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucyj000ksouo70kbfy0s","content":"<p>CMAKE并不打算专门去学, 所以就用到哪里学到哪里</p>\n<p>今天clion写项目 遇到一个问题 明明写了aux_source_directory 却依然提示没有加入. 后来查了下, 并不推荐使用那个命令.<br>可能会存在一些问题<br><a href=\"https://cmake.org/cmake/help/latest/command/aux_source_directory.html\" target=\"_blank\" rel=\"noopener\">https://cmake.org/cmake/help/latest/command/aux_source_directory.html</a></p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 必须片段</span></span><br><span class=\"line\"><span class=\"comment\"># CMake 最低版本号要求</span></span><br><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span> (VERSION <span class=\"number\">2.8</span>)</span><br><span class=\"line\"><span class=\"comment\"># 项目信息</span></span><br><span class=\"line\"><span class=\"keyword\">project</span> (Demo1)</span><br><span class=\"line\"><span class=\"comment\"># 指定生成目标</span></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(Demo main.cc)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多文件</span></span><br><span class=\"line\"><span class=\"comment\"># 如果一味地在add_executable中添加源文件, 会导致太长了</span></span><br><span class=\"line\"><span class=\"comment\"># 将dir目录中所有源文件保存在变量中</span></span><br><span class=\"line\"><span class=\"keyword\">aux_source_directory</span>(. DIR_SOURCE)</span><br><span class=\"line\"><span class=\"comment\"># 将变量赋值给Demo</span></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(Demo <span class=\"variable\">$&#123;DIR_SOURCE&#125;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多文件多目录</span></span><br><span class=\"line\"><span class=\"comment\"># 需要在主目录和子文件夹中都编写CMakeLists.txt文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 主文件添加子目录</span></span><br><span class=\"line\"><span class=\"keyword\">add_subdirectory</span>(dir1)</span><br><span class=\"line\"><span class=\"comment\"># 添加链接库</span></span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(Demo Foo)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># dir1目录中</span></span><br><span class=\"line\"><span class=\"keyword\">aux_source_directory</span>(. DIR1_SOURCE)</span><br><span class=\"line\"><span class=\"comment\"># 生成链接库 Foo 在主文件中添加即可</span></span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(Foo <span class=\"variable\">$&#123;DIR1_SOURCE&#125;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"CMAKE和MAKE之间的区别\"><a href=\"#CMAKE和MAKE之间的区别\" class=\"headerlink\" title=\"CMAKE和MAKE之间的区别\"></a>CMAKE和MAKE之间的区别</h1><p><a href=\"https://my.oschina.net/xunxun/blog/86781\" target=\"_blank\" rel=\"noopener\">博客原文</a></p>\n<p>自己的理解<br>通过为cmake编写CMakeList文件, cmake即可按照规则生成相应的Makefile文件<br>然后make读取Makefile文件就可以按照规则将源代码编译</p>\n<p>总的来说cmake就是为make生成Makefile文件, (Makefile文件可以自己编写, 也可以用Cmake生成)<br>应该是编写CMakeList的代码量少于或者简单于Makefile, 简化了操作</p>\n","site":{"data":{}},"excerpt":"","more":"<p>CMAKE并不打算专门去学, 所以就用到哪里学到哪里</p>\n<p>今天clion写项目 遇到一个问题 明明写了aux_source_directory 却依然提示没有加入. 后来查了下, 并不推荐使用那个命令.<br>可能会存在一些问题<br><a href=\"https://cmake.org/cmake/help/latest/command/aux_source_directory.html\" target=\"_blank\" rel=\"noopener\">https://cmake.org/cmake/help/latest/command/aux_source_directory.html</a></p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 必须片段</span></span><br><span class=\"line\"><span class=\"comment\"># CMake 最低版本号要求</span></span><br><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span> (VERSION <span class=\"number\">2.8</span>)</span><br><span class=\"line\"><span class=\"comment\"># 项目信息</span></span><br><span class=\"line\"><span class=\"keyword\">project</span> (Demo1)</span><br><span class=\"line\"><span class=\"comment\"># 指定生成目标</span></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(Demo main.cc)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多文件</span></span><br><span class=\"line\"><span class=\"comment\"># 如果一味地在add_executable中添加源文件, 会导致太长了</span></span><br><span class=\"line\"><span class=\"comment\"># 将dir目录中所有源文件保存在变量中</span></span><br><span class=\"line\"><span class=\"keyword\">aux_source_directory</span>(. DIR_SOURCE)</span><br><span class=\"line\"><span class=\"comment\"># 将变量赋值给Demo</span></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(Demo <span class=\"variable\">$&#123;DIR_SOURCE&#125;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多文件多目录</span></span><br><span class=\"line\"><span class=\"comment\"># 需要在主目录和子文件夹中都编写CMakeLists.txt文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 主文件添加子目录</span></span><br><span class=\"line\"><span class=\"keyword\">add_subdirectory</span>(dir1)</span><br><span class=\"line\"><span class=\"comment\"># 添加链接库</span></span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(Demo Foo)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># dir1目录中</span></span><br><span class=\"line\"><span class=\"keyword\">aux_source_directory</span>(. DIR1_SOURCE)</span><br><span class=\"line\"><span class=\"comment\"># 生成链接库 Foo 在主文件中添加即可</span></span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(Foo <span class=\"variable\">$&#123;DIR1_SOURCE&#125;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"CMAKE和MAKE之间的区别\"><a href=\"#CMAKE和MAKE之间的区别\" class=\"headerlink\" title=\"CMAKE和MAKE之间的区别\"></a>CMAKE和MAKE之间的区别</h1><p><a href=\"https://my.oschina.net/xunxun/blog/86781\" target=\"_blank\" rel=\"noopener\">博客原文</a></p>\n<p>自己的理解<br>通过为cmake编写CMakeList文件, cmake即可按照规则生成相应的Makefile文件<br>然后make读取Makefile文件就可以按照规则将源代码编译</p>\n<p>总的来说cmake就是为make生成Makefile文件, (Makefile文件可以自己编写, 也可以用Cmake生成)<br>应该是编写CMakeList的代码量少于或者简单于Makefile, 简化了操作</p>\n"},{"title":"STL与实现记录","date":"2020-03-01T02:26:55.000Z","img":"https://lsmg-img.oss-cn-beijing.aliyuncs.com/STL%E8%AE%B0%E5%BD%95/%E5%B0%81%E9%9D%A2.jpg","_content":"\n# Map\n\n## lower_bound()和 upper_bound()\n**lower_bound(const Key& key)**\nhttps://zh.cppreference.com/w/cpp/container/map/lower_bound\n返回指向首个不小于 key 的元素的迭代器。若找不到这种元素，则返回尾后迭代器\n\n\n\n**upper_bound()**\n返回指向首个大于 key 的元素的迭代器。\n\n# std::vertor\n| 函数名称 | 使用详解 |\n| --- | --- |\n| at [] | 获取指定位置的元素 有边界检查 |\n| insert | 在指定位置的前面插入, 可以插入单项, vector和数组 |\n| max_size | 理论最大容量 |\n| capacity | 实际最大容量 |\n","source":"_posts/CPP-CPP重点-STL记录.md","raw":"---\ntitle: STL与实现记录\ndate: 2020-03-01 10:26:55\ntags:\ncategories:\n  - CPP\n  - CPP重点\nimg: https://lsmg-img.oss-cn-beijing.aliyuncs.com/STL%E8%AE%B0%E5%BD%95/%E5%B0%81%E9%9D%A2.jpg\n---\n\n# Map\n\n## lower_bound()和 upper_bound()\n**lower_bound(const Key& key)**\nhttps://zh.cppreference.com/w/cpp/container/map/lower_bound\n返回指向首个不小于 key 的元素的迭代器。若找不到这种元素，则返回尾后迭代器\n\n\n\n**upper_bound()**\n返回指向首个大于 key 的元素的迭代器。\n\n# std::vertor\n| 函数名称 | 使用详解 |\n| --- | --- |\n| at [] | 获取指定位置的元素 有边界检查 |\n| insert | 在指定位置的前面插入, 可以插入单项, vector和数组 |\n| max_size | 理论最大容量 |\n| capacity | 实际最大容量 |\n","slug":"CPP-CPP重点-STL记录","published":1,"updated":"2020-03-04T07:52:46.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucyk000nsouo2jm1czht","content":"<h1 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h1><h2 id=\"lower-bound-和-upper-bound\"><a href=\"#lower-bound-和-upper-bound\" class=\"headerlink\" title=\"lower_bound()和 upper_bound()\"></a>lower_bound()和 upper_bound()</h2><p><strong>lower_bound(const Key&amp; key)</strong><br><a href=\"https://zh.cppreference.com/w/cpp/container/map/lower_bound\" target=\"_blank\" rel=\"noopener\">https://zh.cppreference.com/w/cpp/container/map/lower_bound</a><br>返回指向首个不小于 key 的元素的迭代器。若找不到这种元素，则返回尾后迭代器</p>\n<p><strong>upper_bound()</strong><br>返回指向首个大于 key 的元素的迭代器。</p>\n<h1 id=\"std-vertor\"><a href=\"#std-vertor\" class=\"headerlink\" title=\"std::vertor\"></a>std::vertor</h1><table>\n<thead>\n<tr>\n<th>函数名称</th>\n<th>使用详解</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>at []</td>\n<td>获取指定位置的元素 有边界检查</td>\n</tr>\n<tr>\n<td>insert</td>\n<td>在指定位置的前面插入, 可以插入单项, vector和数组</td>\n</tr>\n<tr>\n<td>max_size</td>\n<td>理论最大容量</td>\n</tr>\n<tr>\n<td>capacity</td>\n<td>实际最大容量</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h1><h2 id=\"lower-bound-和-upper-bound\"><a href=\"#lower-bound-和-upper-bound\" class=\"headerlink\" title=\"lower_bound()和 upper_bound()\"></a>lower_bound()和 upper_bound()</h2><p><strong>lower_bound(const Key&amp; key)</strong><br><a href=\"https://zh.cppreference.com/w/cpp/container/map/lower_bound\" target=\"_blank\" rel=\"noopener\">https://zh.cppreference.com/w/cpp/container/map/lower_bound</a><br>返回指向首个不小于 key 的元素的迭代器。若找不到这种元素，则返回尾后迭代器</p>\n<p><strong>upper_bound()</strong><br>返回指向首个大于 key 的元素的迭代器。</p>\n<h1 id=\"std-vertor\"><a href=\"#std-vertor\" class=\"headerlink\" title=\"std::vertor\"></a>std::vertor</h1><table>\n<thead>\n<tr>\n<th>函数名称</th>\n<th>使用详解</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>at []</td>\n<td>获取指定位置的元素 有边界检查</td>\n</tr>\n<tr>\n<td>insert</td>\n<td>在指定位置的前面插入, 可以插入单项, vector和数组</td>\n</tr>\n<tr>\n<td>max_size</td>\n<td>理论最大容量</td>\n</tr>\n<tr>\n<td>capacity</td>\n<td>实际最大容量</td>\n</tr>\n</tbody></table>\n"},{"title":"头文件互相引用","date":"2020-02-07T08:37:08.000Z","_content":"写在前头 本文中的**编译**二字基本都带加粗, 因为目前为止我还没做学到过**编译**器相关的东西, \n姑且将`那个执行过程`称为**编译**, 所以加粗\n# 现象\n二月六号的时候 我在写那个小游戏, 写头文件`a.h`发现即使引用了一个头文件`b.h`, 也没有办法使用定义在那个头文件之中的结构体.\n\n其实有点我没在意: 当我在`a.h`文件中引用`b.h`的时候`b.h`会变成`invaild`, 这里其实就已经提示了\n```c++\n// a.h\n#ifndef UNTITLED1_A_H\n#define UNTITLED1_A_H\n#include \"b.h\"\nclass A\n{\n    B *b;\n};\n#endif //UNTITLED1_A_H\n\n// b.h\n#ifndef UNTITLED1_B_H\n#define UNTITLED1_B_H\n#include \"a.h\"\nclass B\n{\n    A *a;\n};\n\n#endif //UNTITLED1_B_H\n// main.cpp\n#include \"a.h\" // a.h中有b.h就只include a.h\nint main()\n{\n    A a{};\n    B b{};\n}\n\nerror: ‘A’ does not name a type\nerror: ‘B’ does not name a type\n```\n# 原因\n## 先说一下 #ifndef #endif\n`ifndef`全称`if not defined`\n意思是如果`#ifndef`后面的宏没有被定义 就继续**编译**其中的内容\n继续**编译**`#ifndef`的下一句就是`#define`这个宏, 这样这个宏就被定义了\n第二次**编译**遇到这个头文件的时候, `#ifndef`后面的宏已经被定义了就跳过了if中的内容\n\n## #include的作用\n将 #include右边的文件展开到此文件中\n\n## 问题解释\n这样当你在main函数中 `#include \"a.h\"`的时候`a.h`之中的内容就被展开\n变成如下\n```c++\n// main.cpp\n#ifndef UNTITLED1_A_H\n#define UNTITLED1_A_H\n#include \"b.h\"\nclass A\n{\n    B *b;\n};\n#endif //UNTITLED1_A_H\n\nint main()\n{\n    A a{};\n    B b{};\n}\n```\n还有一个include同样操作得到如下\n```c++\n// main.cpp\n#ifndef UNTITLED1_A_H\n#define UNTITLED1_A_H\n#ifndef UNTITLED1_B_H\n#define UNTITLED1_B_H\n#include \"a.h\"\nclass B\n{\n    A *a;\n};\n\n#endif //UNTITLED1_B_H\nclass A\n{\n    B *b;\n};\n#endif //UNTITLED1_A_H\nint main()\n{\n    A a{};\n    B b{};\n}\n```\n我猜测**编译**的时候是逐行执行的, 至少在头文件的这部分是逐行执行\n这样执行完了`行号为2 3 4 5`的四个宏 准备执行`行号为6`的这一行`#include \"a.h\"`继续展开\n得到如下\n```c++\n// main.cpp\n#ifndef UNTITLED1_A_H\n#define UNTITLED1_A_H\n#ifndef UNTITLED1_B_H\n#define UNTITLED1_B_H\n#ifndef UNTITLED1_A_H\n#define UNTITLED1_A_H\n#include \"b.h\"\nclass A\n{\n    B *b;\n};\n#endif //UNTITLED1_A_H\nclass B\n{\n    A *a;\n};\n\n#endif //UNTITLED1_B_H\nclass A\n{\n    B *b;\n};\n#endif //UNTITLED1_A_H\nint main()\n{\n    A a{};\n    B b{};\n}\n```\n可能有些乱 但仔细理解还是能到这里. 这下继续逐行执行 准备是`行号为6`的这一行(也可能是行号7的部分, 区别就是在include的下一行展开还是本行展开)`#ifndef UNTITLED1_A_H`\n这个宏就判断`UNTITLED1_A_H`是不是被定义了, 恩被定义了(第三行代码)跳到对应的`#endif`, 这样就防止了头文件\n无穷无尽的调用 我将跳过的部分注释掉方便继续分析\n\n```c++\n// main.cpp\n#ifndef UNTITLED1_A_H\n#define UNTITLED1_A_H\n#ifndef UNTITLED1_B_H\n#define UNTITLED1_B_H\n//#ifndef UNTITLED1_A_H\n//#define UNTITLED1_A_H\n//#include \"b.h\"\n//class A\n//{\n//   B *b;\n//};\n//#endif //UNTITLED1_A_H\nclass B\n{\n    A *a;\n};\n\n#endif //UNTITLED1_B_H\nclass A\n{\n    B *b;\n};\n#endif //UNTITLED1_A_H\nint main()\n{\n    A a{};\n    B b{};\n}\n```\n下一行就是`第十四行`的`class B`的**编译**, 那么问题来了`第16行`的`A`是啥东西??.\n\n这里报错报了两行 我大胆推测一下 `class B`的**编译**的出错后, 依然在继续这个过程, 到了`class A`的时候\n发现其中的`B`又是啥呢? 推测不同头文件编译互不影响 所以出现了两行报错\n\n我们回到`class B`的头文件在`class B`的前面加上一行`class A;` 得到如下代码\n```c++\n// main.cpp\n#ifndef UNTITLED1_A_H\n#define UNTITLED1_A_H\n#ifndef UNTITLED1_B_H\n#define UNTITLED1_B_H\n//#ifndef UNTITLED1_A_H\n//#define UNTITLED1_A_H\n//#include \"b.h\"\n//class A\n//{\n//   B *b;\n//};\n//#endif //UNTITLED1_A_H\nclass A;\nclass B\n{\n    A *a;\n};\n\n#endif //UNTITLED1_B_H\nclass A\n{\n    B *b;\n};\n#endif //UNTITLED1_A_H\nint main()\n{\n    A a{};\n    B b{};\n}\n```\n\n到了这里你会发现A的报错消失了, 因为这次在**编译**`class B`的时候事先知道了`A`是一个类并且你必须把\n`class B`之中的这一句`A *a;`写成指针, 因为指针大小确定, 而且没有初始化, 所以**编译**就能通过, 如果你写成\n`A a;`依然会报错, 因为不知道A具体是个啥 最起码的内存都没法分配\n\n好的下面继续, 你发现虽然A的报错消失了 但是`B`的报错还在, 我这里依然推测下, 不同头文件之间的**编译**互不影响,\n所以依然不知道`B`是什么此时按照上面操作加入`class B;`前置声明, **编译**正确通过.\n\n虽然两个头文件**编译**互不影响, 但是既然是main.cpp把他们引进来的 就同时对main.cpp起作用 自然就知道了A和B是啥\n\n\n虽然这个问题网上答案很多, 但我对此还是很多不理解, 所以在做某些推测的情况下, 分析出来了这些原因. 如果有误,请直接评论中指出. 这也算是本人的第一篇写的认真的博客","source":"_posts/CPP-CPP采坑-头文件互相引用.md","raw":"---\ntitle: 头文件互相引用\ndate: 2020-02-07 16:37:08\ntags:\n  - CPP踩坑记\n  - CPP\ncategories:\n  - CPP\n  - CPP踩坑\n---\n写在前头 本文中的**编译**二字基本都带加粗, 因为目前为止我还没做学到过**编译**器相关的东西, \n姑且将`那个执行过程`称为**编译**, 所以加粗\n# 现象\n二月六号的时候 我在写那个小游戏, 写头文件`a.h`发现即使引用了一个头文件`b.h`, 也没有办法使用定义在那个头文件之中的结构体.\n\n其实有点我没在意: 当我在`a.h`文件中引用`b.h`的时候`b.h`会变成`invaild`, 这里其实就已经提示了\n```c++\n// a.h\n#ifndef UNTITLED1_A_H\n#define UNTITLED1_A_H\n#include \"b.h\"\nclass A\n{\n    B *b;\n};\n#endif //UNTITLED1_A_H\n\n// b.h\n#ifndef UNTITLED1_B_H\n#define UNTITLED1_B_H\n#include \"a.h\"\nclass B\n{\n    A *a;\n};\n\n#endif //UNTITLED1_B_H\n// main.cpp\n#include \"a.h\" // a.h中有b.h就只include a.h\nint main()\n{\n    A a{};\n    B b{};\n}\n\nerror: ‘A’ does not name a type\nerror: ‘B’ does not name a type\n```\n# 原因\n## 先说一下 #ifndef #endif\n`ifndef`全称`if not defined`\n意思是如果`#ifndef`后面的宏没有被定义 就继续**编译**其中的内容\n继续**编译**`#ifndef`的下一句就是`#define`这个宏, 这样这个宏就被定义了\n第二次**编译**遇到这个头文件的时候, `#ifndef`后面的宏已经被定义了就跳过了if中的内容\n\n## #include的作用\n将 #include右边的文件展开到此文件中\n\n## 问题解释\n这样当你在main函数中 `#include \"a.h\"`的时候`a.h`之中的内容就被展开\n变成如下\n```c++\n// main.cpp\n#ifndef UNTITLED1_A_H\n#define UNTITLED1_A_H\n#include \"b.h\"\nclass A\n{\n    B *b;\n};\n#endif //UNTITLED1_A_H\n\nint main()\n{\n    A a{};\n    B b{};\n}\n```\n还有一个include同样操作得到如下\n```c++\n// main.cpp\n#ifndef UNTITLED1_A_H\n#define UNTITLED1_A_H\n#ifndef UNTITLED1_B_H\n#define UNTITLED1_B_H\n#include \"a.h\"\nclass B\n{\n    A *a;\n};\n\n#endif //UNTITLED1_B_H\nclass A\n{\n    B *b;\n};\n#endif //UNTITLED1_A_H\nint main()\n{\n    A a{};\n    B b{};\n}\n```\n我猜测**编译**的时候是逐行执行的, 至少在头文件的这部分是逐行执行\n这样执行完了`行号为2 3 4 5`的四个宏 准备执行`行号为6`的这一行`#include \"a.h\"`继续展开\n得到如下\n```c++\n// main.cpp\n#ifndef UNTITLED1_A_H\n#define UNTITLED1_A_H\n#ifndef UNTITLED1_B_H\n#define UNTITLED1_B_H\n#ifndef UNTITLED1_A_H\n#define UNTITLED1_A_H\n#include \"b.h\"\nclass A\n{\n    B *b;\n};\n#endif //UNTITLED1_A_H\nclass B\n{\n    A *a;\n};\n\n#endif //UNTITLED1_B_H\nclass A\n{\n    B *b;\n};\n#endif //UNTITLED1_A_H\nint main()\n{\n    A a{};\n    B b{};\n}\n```\n可能有些乱 但仔细理解还是能到这里. 这下继续逐行执行 准备是`行号为6`的这一行(也可能是行号7的部分, 区别就是在include的下一行展开还是本行展开)`#ifndef UNTITLED1_A_H`\n这个宏就判断`UNTITLED1_A_H`是不是被定义了, 恩被定义了(第三行代码)跳到对应的`#endif`, 这样就防止了头文件\n无穷无尽的调用 我将跳过的部分注释掉方便继续分析\n\n```c++\n// main.cpp\n#ifndef UNTITLED1_A_H\n#define UNTITLED1_A_H\n#ifndef UNTITLED1_B_H\n#define UNTITLED1_B_H\n//#ifndef UNTITLED1_A_H\n//#define UNTITLED1_A_H\n//#include \"b.h\"\n//class A\n//{\n//   B *b;\n//};\n//#endif //UNTITLED1_A_H\nclass B\n{\n    A *a;\n};\n\n#endif //UNTITLED1_B_H\nclass A\n{\n    B *b;\n};\n#endif //UNTITLED1_A_H\nint main()\n{\n    A a{};\n    B b{};\n}\n```\n下一行就是`第十四行`的`class B`的**编译**, 那么问题来了`第16行`的`A`是啥东西??.\n\n这里报错报了两行 我大胆推测一下 `class B`的**编译**的出错后, 依然在继续这个过程, 到了`class A`的时候\n发现其中的`B`又是啥呢? 推测不同头文件编译互不影响 所以出现了两行报错\n\n我们回到`class B`的头文件在`class B`的前面加上一行`class A;` 得到如下代码\n```c++\n// main.cpp\n#ifndef UNTITLED1_A_H\n#define UNTITLED1_A_H\n#ifndef UNTITLED1_B_H\n#define UNTITLED1_B_H\n//#ifndef UNTITLED1_A_H\n//#define UNTITLED1_A_H\n//#include \"b.h\"\n//class A\n//{\n//   B *b;\n//};\n//#endif //UNTITLED1_A_H\nclass A;\nclass B\n{\n    A *a;\n};\n\n#endif //UNTITLED1_B_H\nclass A\n{\n    B *b;\n};\n#endif //UNTITLED1_A_H\nint main()\n{\n    A a{};\n    B b{};\n}\n```\n\n到了这里你会发现A的报错消失了, 因为这次在**编译**`class B`的时候事先知道了`A`是一个类并且你必须把\n`class B`之中的这一句`A *a;`写成指针, 因为指针大小确定, 而且没有初始化, 所以**编译**就能通过, 如果你写成\n`A a;`依然会报错, 因为不知道A具体是个啥 最起码的内存都没法分配\n\n好的下面继续, 你发现虽然A的报错消失了 但是`B`的报错还在, 我这里依然推测下, 不同头文件之间的**编译**互不影响,\n所以依然不知道`B`是什么此时按照上面操作加入`class B;`前置声明, **编译**正确通过.\n\n虽然两个头文件**编译**互不影响, 但是既然是main.cpp把他们引进来的 就同时对main.cpp起作用 自然就知道了A和B是啥\n\n\n虽然这个问题网上答案很多, 但我对此还是很多不理解, 所以在做某些推测的情况下, 分析出来了这些原因. 如果有误,请直接评论中指出. 这也算是本人的第一篇写的认真的博客","slug":"CPP-CPP采坑-头文件互相引用","published":1,"updated":"2020-02-07T10:09:48.656Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucyl000psouo10bc1d9a","content":"<p>写在前头 本文中的<strong>编译</strong>二字基本都带加粗, 因为目前为止我还没做学到过<strong>编译</strong>器相关的东西,<br>姑且将<code>那个执行过程</code>称为<strong>编译</strong>, 所以加粗</p>\n<h1 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h1><p>二月六号的时候 我在写那个小游戏, 写头文件<code>a.h</code>发现即使引用了一个头文件<code>b.h</code>, 也没有办法使用定义在那个头文件之中的结构体.</p>\n<p>其实有点我没在意: 当我在<code>a.h</code>文件中引用<code>b.h</code>的时候<code>b.h</code>会变成<code>invaild</code>, 这里其实就已经提示了</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"b.h\"</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    B *b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//UNTITLED1_A_H</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> UNTITLED1_B_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UNTITLED1_B_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"a.h\"</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    A *a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//UNTITLED1_B_H</span></span></span><br><span class=\"line\"><span class=\"comment\">// main.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"a.h\"</span> <span class=\"comment\">// a.h中有b.h就只include a.h</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    A a&#123;&#125;;</span><br><span class=\"line\">    B b&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">error: ‘A’ does <span class=\"keyword\">not</span> name a type</span><br><span class=\"line\">error: ‘B’ does <span class=\"keyword\">not</span> name a type</span><br></pre></td></tr></table></figure>\n<h1 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h1><h2 id=\"先说一下-ifndef-endif\"><a href=\"#先说一下-ifndef-endif\" class=\"headerlink\" title=\"先说一下 #ifndef #endif\"></a>先说一下 #ifndef #endif</h2><p><code>ifndef</code>全称<code>if not defined</code><br>意思是如果<code>#ifndef</code>后面的宏没有被定义 就继续<strong>编译</strong>其中的内容<br>继续<strong>编译</strong><code>#ifndef</code>的下一句就是<code>#define</code>这个宏, 这样这个宏就被定义了<br>第二次<strong>编译</strong>遇到这个头文件的时候, <code>#ifndef</code>后面的宏已经被定义了就跳过了if中的内容</p>\n<h2 id=\"include的作用\"><a href=\"#include的作用\" class=\"headerlink\" title=\"#include的作用\"></a>#include的作用</h2><p>将 #include右边的文件展开到此文件中</p>\n<h2 id=\"问题解释\"><a href=\"#问题解释\" class=\"headerlink\" title=\"问题解释\"></a>问题解释</h2><p>这样当你在main函数中 <code>#include &quot;a.h&quot;</code>的时候<code>a.h</code>之中的内容就被展开<br>变成如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"b.h\"</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    B *b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//UNTITLED1_A_H</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    A a&#123;&#125;;</span><br><span class=\"line\">    B b&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还有一个include同样操作得到如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> UNTITLED1_B_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UNTITLED1_B_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"a.h\"</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    A *a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//UNTITLED1_B_H</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    B *b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//UNTITLED1_A_H</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    A a&#123;&#125;;</span><br><span class=\"line\">    B b&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我猜测<strong>编译</strong>的时候是逐行执行的, 至少在头文件的这部分是逐行执行<br>这样执行完了<code>行号为2 3 4 5</code>的四个宏 准备执行<code>行号为6</code>的这一行<code>#include &quot;a.h&quot;</code>继续展开<br>得到如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> UNTITLED1_B_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UNTITLED1_B_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"b.h\"</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    B *b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//UNTITLED1_A_H</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    A *a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//UNTITLED1_B_H</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    B *b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//UNTITLED1_A_H</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    A a&#123;&#125;;</span><br><span class=\"line\">    B b&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可能有些乱 但仔细理解还是能到这里. 这下继续逐行执行 准备是<code>行号为6</code>的这一行(也可能是行号7的部分, 区别就是在include的下一行展开还是本行展开)<code>#ifndef UNTITLED1_A_H</code><br>这个宏就判断<code>UNTITLED1_A_H</code>是不是被定义了, 恩被定义了(第三行代码)跳到对应的<code>#endif</code>, 这样就防止了头文件<br>无穷无尽的调用 我将跳过的部分注释掉方便继续分析</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> UNTITLED1_B_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UNTITLED1_B_H</span></span><br><span class=\"line\"><span class=\"comment\">//#ifndef UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"comment\">//#define UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"comment\">//#include \"b.h\"</span></span><br><span class=\"line\"><span class=\"comment\">//class A</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   B *b;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">//#endif //UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    A *a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//UNTITLED1_B_H</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    B *b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//UNTITLED1_A_H</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    A a&#123;&#125;;</span><br><span class=\"line\">    B b&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下一行就是<code>第十四行</code>的<code>class B</code>的<strong>编译</strong>, 那么问题来了<code>第16行</code>的<code>A</code>是啥东西??.</p>\n<p>这里报错报了两行 我大胆推测一下 <code>class B</code>的<strong>编译</strong>的出错后, 依然在继续这个过程, 到了<code>class A</code>的时候<br>发现其中的<code>B</code>又是啥呢? 推测不同头文件编译互不影响 所以出现了两行报错</p>\n<p>我们回到<code>class B</code>的头文件在<code>class B</code>的前面加上一行<code>class A;</code> 得到如下代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> UNTITLED1_B_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UNTITLED1_B_H</span></span><br><span class=\"line\"><span class=\"comment\">//#ifndef UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"comment\">//#define UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"comment\">//#include \"b.h\"</span></span><br><span class=\"line\"><span class=\"comment\">//class A</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   B *b;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">//#endif //UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    A *a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//UNTITLED1_B_H</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    B *b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//UNTITLED1_A_H</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    A a&#123;&#125;;</span><br><span class=\"line\">    B b&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到了这里你会发现A的报错消失了, 因为这次在<strong>编译</strong><code>class B</code>的时候事先知道了<code>A</code>是一个类并且你必须把<br><code>class B</code>之中的这一句<code>A *a;</code>写成指针, 因为指针大小确定, 而且没有初始化, 所以<strong>编译</strong>就能通过, 如果你写成<br><code>A a;</code>依然会报错, 因为不知道A具体是个啥 最起码的内存都没法分配</p>\n<p>好的下面继续, 你发现虽然A的报错消失了 但是<code>B</code>的报错还在, 我这里依然推测下, 不同头文件之间的<strong>编译</strong>互不影响,<br>所以依然不知道<code>B</code>是什么此时按照上面操作加入<code>class B;</code>前置声明, <strong>编译</strong>正确通过.</p>\n<p>虽然两个头文件<strong>编译</strong>互不影响, 但是既然是main.cpp把他们引进来的 就同时对main.cpp起作用 自然就知道了A和B是啥</p>\n<p>虽然这个问题网上答案很多, 但我对此还是很多不理解, 所以在做某些推测的情况下, 分析出来了这些原因. 如果有误,请直接评论中指出. 这也算是本人的第一篇写的认真的博客</p>\n","site":{"data":{}},"excerpt":"","more":"<p>写在前头 本文中的<strong>编译</strong>二字基本都带加粗, 因为目前为止我还没做学到过<strong>编译</strong>器相关的东西,<br>姑且将<code>那个执行过程</code>称为<strong>编译</strong>, 所以加粗</p>\n<h1 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h1><p>二月六号的时候 我在写那个小游戏, 写头文件<code>a.h</code>发现即使引用了一个头文件<code>b.h</code>, 也没有办法使用定义在那个头文件之中的结构体.</p>\n<p>其实有点我没在意: 当我在<code>a.h</code>文件中引用<code>b.h</code>的时候<code>b.h</code>会变成<code>invaild</code>, 这里其实就已经提示了</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"b.h\"</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    B *b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//UNTITLED1_A_H</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> UNTITLED1_B_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UNTITLED1_B_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"a.h\"</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    A *a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//UNTITLED1_B_H</span></span></span><br><span class=\"line\"><span class=\"comment\">// main.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"a.h\"</span> <span class=\"comment\">// a.h中有b.h就只include a.h</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    A a&#123;&#125;;</span><br><span class=\"line\">    B b&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">error: ‘A’ does <span class=\"keyword\">not</span> name a type</span><br><span class=\"line\">error: ‘B’ does <span class=\"keyword\">not</span> name a type</span><br></pre></td></tr></table></figure>\n<h1 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h1><h2 id=\"先说一下-ifndef-endif\"><a href=\"#先说一下-ifndef-endif\" class=\"headerlink\" title=\"先说一下 #ifndef #endif\"></a>先说一下 #ifndef #endif</h2><p><code>ifndef</code>全称<code>if not defined</code><br>意思是如果<code>#ifndef</code>后面的宏没有被定义 就继续<strong>编译</strong>其中的内容<br>继续<strong>编译</strong><code>#ifndef</code>的下一句就是<code>#define</code>这个宏, 这样这个宏就被定义了<br>第二次<strong>编译</strong>遇到这个头文件的时候, <code>#ifndef</code>后面的宏已经被定义了就跳过了if中的内容</p>\n<h2 id=\"include的作用\"><a href=\"#include的作用\" class=\"headerlink\" title=\"#include的作用\"></a>#include的作用</h2><p>将 #include右边的文件展开到此文件中</p>\n<h2 id=\"问题解释\"><a href=\"#问题解释\" class=\"headerlink\" title=\"问题解释\"></a>问题解释</h2><p>这样当你在main函数中 <code>#include &quot;a.h&quot;</code>的时候<code>a.h</code>之中的内容就被展开<br>变成如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"b.h\"</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    B *b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//UNTITLED1_A_H</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    A a&#123;&#125;;</span><br><span class=\"line\">    B b&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还有一个include同样操作得到如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> UNTITLED1_B_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UNTITLED1_B_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"a.h\"</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    A *a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//UNTITLED1_B_H</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    B *b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//UNTITLED1_A_H</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    A a&#123;&#125;;</span><br><span class=\"line\">    B b&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我猜测<strong>编译</strong>的时候是逐行执行的, 至少在头文件的这部分是逐行执行<br>这样执行完了<code>行号为2 3 4 5</code>的四个宏 准备执行<code>行号为6</code>的这一行<code>#include &quot;a.h&quot;</code>继续展开<br>得到如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> UNTITLED1_B_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UNTITLED1_B_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"b.h\"</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    B *b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//UNTITLED1_A_H</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    A *a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//UNTITLED1_B_H</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    B *b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//UNTITLED1_A_H</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    A a&#123;&#125;;</span><br><span class=\"line\">    B b&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可能有些乱 但仔细理解还是能到这里. 这下继续逐行执行 准备是<code>行号为6</code>的这一行(也可能是行号7的部分, 区别就是在include的下一行展开还是本行展开)<code>#ifndef UNTITLED1_A_H</code><br>这个宏就判断<code>UNTITLED1_A_H</code>是不是被定义了, 恩被定义了(第三行代码)跳到对应的<code>#endif</code>, 这样就防止了头文件<br>无穷无尽的调用 我将跳过的部分注释掉方便继续分析</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> UNTITLED1_B_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UNTITLED1_B_H</span></span><br><span class=\"line\"><span class=\"comment\">//#ifndef UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"comment\">//#define UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"comment\">//#include \"b.h\"</span></span><br><span class=\"line\"><span class=\"comment\">//class A</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   B *b;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">//#endif //UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    A *a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//UNTITLED1_B_H</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    B *b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//UNTITLED1_A_H</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    A a&#123;&#125;;</span><br><span class=\"line\">    B b&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下一行就是<code>第十四行</code>的<code>class B</code>的<strong>编译</strong>, 那么问题来了<code>第16行</code>的<code>A</code>是啥东西??.</p>\n<p>这里报错报了两行 我大胆推测一下 <code>class B</code>的<strong>编译</strong>的出错后, 依然在继续这个过程, 到了<code>class A</code>的时候<br>发现其中的<code>B</code>又是啥呢? 推测不同头文件编译互不影响 所以出现了两行报错</p>\n<p>我们回到<code>class B</code>的头文件在<code>class B</code>的前面加上一行<code>class A;</code> 得到如下代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> UNTITLED1_B_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UNTITLED1_B_H</span></span><br><span class=\"line\"><span class=\"comment\">//#ifndef UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"comment\">//#define UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"comment\">//#include \"b.h\"</span></span><br><span class=\"line\"><span class=\"comment\">//class A</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   B *b;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">//#endif //UNTITLED1_A_H</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    A *a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//UNTITLED1_B_H</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    B *b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//UNTITLED1_A_H</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    A a&#123;&#125;;</span><br><span class=\"line\">    B b&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到了这里你会发现A的报错消失了, 因为这次在<strong>编译</strong><code>class B</code>的时候事先知道了<code>A</code>是一个类并且你必须把<br><code>class B</code>之中的这一句<code>A *a;</code>写成指针, 因为指针大小确定, 而且没有初始化, 所以<strong>编译</strong>就能通过, 如果你写成<br><code>A a;</code>依然会报错, 因为不知道A具体是个啥 最起码的内存都没法分配</p>\n<p>好的下面继续, 你发现虽然A的报错消失了 但是<code>B</code>的报错还在, 我这里依然推测下, 不同头文件之间的<strong>编译</strong>互不影响,<br>所以依然不知道<code>B</code>是什么此时按照上面操作加入<code>class B;</code>前置声明, <strong>编译</strong>正确通过.</p>\n<p>虽然两个头文件<strong>编译</strong>互不影响, 但是既然是main.cpp把他们引进来的 就同时对main.cpp起作用 自然就知道了A和B是啥</p>\n<p>虽然这个问题网上答案很多, 但我对此还是很多不理解, 所以在做某些推测的情况下, 分析出来了这些原因. 如果有误,请直接评论中指出. 这也算是本人的第一篇写的认真的博客</p>\n"},{"title":"字节对齐","date":"2020-02-06T03:38:08.000Z","img":"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90.png","_content":"以前在牛客碰到不少字节对齐的题目, 当时只是为了记住而记住 今天我在学习自定义TCP二进制数据包\n的时候 遇到了必须考虑下字节对齐的情景.\n\n**解释**\n现代计算机中内存空间都是按照byte划分的，从理论上讲似乎对任何类型的变量的访问可以从任何地址开始，但实际情况是在访问特定类型变量的时候经常在特 定的内存地址访问，这就需要各种类型数据按照一定的规则在空间上排列，而不是顺序的一个接一个的排放，这就是对齐。--百度百科\n\n**原因**\n各个硬件平台对存储空间的处理上有很大的不同。一些平台对某些特定类型的数据只能从某些特定地址开始存取。比如有些架构的CPU在访问 一个没有进行对齐的变量的时候会发生错误，那么在这种架构下编程必须保证字节对齐.其他平台可能没有这种情况\n但是最常见的是如果不按照适合其平台要求对 数据存放进行对齐，会在存取效率上带来损失。比如有些平台每次读都是从偶地址开始，如果一个int型（假设为32位系统）如果存放在偶地址开始的地方，那么一个读周期就可以读出这32bit，而如果存放在奇地址开始的地方，就需要2个读周期，并对两次读出的结果的高低字节进行拼凑才能得到该32bit数据。--百度百科\n\n\n```c++\nstruct Foo\n{\n\tchar foo1;\n    int foo2;\n    short foo3;\n}\n\nsizeof(Foo) = 12\nsizeof(char) + sizeof(int) + sizeof(short) = 7\n```\n说明内存中并不是连续存储的这三个变量;\n\n```c++\nFoo foo1{'1', 2, 3};\nwrite(fd, &foo1, sizeof(foo1));\n```\n// hexdump 查看\n0000000 5631 0000 0002 0000 0003 0000\n对应图示如下\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90.png)\n\n第一字节 0x31 正好是 '1' *蓝色区域*\n二三四字节 为填充 *红色区域*\n因为sizeof(int)=4所以foo2的偏移量是四的倍数 , 故需要填充三个字节 3+1 = 4\n\n第五六七八字节 0x02对应2 *灰色区域*\n这里没有填充是因为sizeof(short)=2所以foo3的偏移量是2的倍数 由于偏移量是8 所以不需要填充\n\n第九十字节 0x03 对应3\n第十一十二字节填充*黑色区域*\n因为此结构中最大的sizeof()=4所以需要将字节数对齐到4的倍数 目前10字节 所以需要填充2字节到\n12字节满足四的倍数","source":"_posts/CPP-CPP重点-字节对齐.md","raw":"---\ntitle: 字节对齐\ndate: 2020-02-06 11:38:08\ntags:\ncategories:\n  - CPP\n  - CPP重点\nimg: https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90.png\n---\n以前在牛客碰到不少字节对齐的题目, 当时只是为了记住而记住 今天我在学习自定义TCP二进制数据包\n的时候 遇到了必须考虑下字节对齐的情景.\n\n**解释**\n现代计算机中内存空间都是按照byte划分的，从理论上讲似乎对任何类型的变量的访问可以从任何地址开始，但实际情况是在访问特定类型变量的时候经常在特 定的内存地址访问，这就需要各种类型数据按照一定的规则在空间上排列，而不是顺序的一个接一个的排放，这就是对齐。--百度百科\n\n**原因**\n各个硬件平台对存储空间的处理上有很大的不同。一些平台对某些特定类型的数据只能从某些特定地址开始存取。比如有些架构的CPU在访问 一个没有进行对齐的变量的时候会发生错误，那么在这种架构下编程必须保证字节对齐.其他平台可能没有这种情况\n但是最常见的是如果不按照适合其平台要求对 数据存放进行对齐，会在存取效率上带来损失。比如有些平台每次读都是从偶地址开始，如果一个int型（假设为32位系统）如果存放在偶地址开始的地方，那么一个读周期就可以读出这32bit，而如果存放在奇地址开始的地方，就需要2个读周期，并对两次读出的结果的高低字节进行拼凑才能得到该32bit数据。--百度百科\n\n\n```c++\nstruct Foo\n{\n\tchar foo1;\n    int foo2;\n    short foo3;\n}\n\nsizeof(Foo) = 12\nsizeof(char) + sizeof(int) + sizeof(short) = 7\n```\n说明内存中并不是连续存储的这三个变量;\n\n```c++\nFoo foo1{'1', 2, 3};\nwrite(fd, &foo1, sizeof(foo1));\n```\n// hexdump 查看\n0000000 5631 0000 0002 0000 0003 0000\n对应图示如下\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90.png)\n\n第一字节 0x31 正好是 '1' *蓝色区域*\n二三四字节 为填充 *红色区域*\n因为sizeof(int)=4所以foo2的偏移量是四的倍数 , 故需要填充三个字节 3+1 = 4\n\n第五六七八字节 0x02对应2 *灰色区域*\n这里没有填充是因为sizeof(short)=2所以foo3的偏移量是2的倍数 由于偏移量是8 所以不需要填充\n\n第九十字节 0x03 对应3\n第十一十二字节填充*黑色区域*\n因为此结构中最大的sizeof()=4所以需要将字节数对齐到4的倍数 目前10字节 所以需要填充2字节到\n12字节满足四的倍数","slug":"CPP-CPP重点-字节对齐","published":1,"updated":"2020-02-07T08:38:13.076Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucym000ssouobt1rgl6d","content":"<p>以前在牛客碰到不少字节对齐的题目, 当时只是为了记住而记住 今天我在学习自定义TCP二进制数据包<br>的时候 遇到了必须考虑下字节对齐的情景.</p>\n<p><strong>解释</strong><br>现代计算机中内存空间都是按照byte划分的，从理论上讲似乎对任何类型的变量的访问可以从任何地址开始，但实际情况是在访问特定类型变量的时候经常在特 定的内存地址访问，这就需要各种类型数据按照一定的规则在空间上排列，而不是顺序的一个接一个的排放，这就是对齐。–百度百科</p>\n<p><strong>原因</strong><br>各个硬件平台对存储空间的处理上有很大的不同。一些平台对某些特定类型的数据只能从某些特定地址开始存取。比如有些架构的CPU在访问 一个没有进行对齐的变量的时候会发生错误，那么在这种架构下编程必须保证字节对齐.其他平台可能没有这种情况<br>但是最常见的是如果不按照适合其平台要求对 数据存放进行对齐，会在存取效率上带来损失。比如有些平台每次读都是从偶地址开始，如果一个int型（假设为32位系统）如果存放在偶地址开始的地方，那么一个读周期就可以读出这32bit，而如果存放在奇地址开始的地方，就需要2个读周期，并对两次读出的结果的高低字节进行拼凑才能得到该32bit数据。–百度百科</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Foo</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> foo1;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> foo2;</span><br><span class=\"line\">    short foo3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sizeof</span>(Foo) = <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>) + <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) + <span class=\"keyword\">sizeof</span>(short) = <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n<p>说明内存中并不是连续存储的这三个变量;</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Foo foo1&#123;<span class=\"string\">'1'</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">write</span>(fd, &amp;foo1, <span class=\"keyword\">sizeof</span>(foo1));</span><br></pre></td></tr></table></figure>\n<p>// hexdump 查看<br>0000000 5631 0000 0002 0000 0003 0000<br>对应图示如下<br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90.png\" alt=\"\"></p>\n<p>第一字节 0x31 正好是 ‘1’ <em>蓝色区域</em><br>二三四字节 为填充 <em>红色区域</em><br>因为sizeof(int)=4所以foo2的偏移量是四的倍数 , 故需要填充三个字节 3+1 = 4</p>\n<p>第五六七八字节 0x02对应2 <em>灰色区域</em><br>这里没有填充是因为sizeof(short)=2所以foo3的偏移量是2的倍数 由于偏移量是8 所以不需要填充</p>\n<p>第九十字节 0x03 对应3<br>第十一十二字节填充<em>黑色区域</em><br>因为此结构中最大的sizeof()=4所以需要将字节数对齐到4的倍数 目前10字节 所以需要填充2字节到<br>12字节满足四的倍数</p>\n","site":{"data":{}},"excerpt":"","more":"<p>以前在牛客碰到不少字节对齐的题目, 当时只是为了记住而记住 今天我在学习自定义TCP二进制数据包<br>的时候 遇到了必须考虑下字节对齐的情景.</p>\n<p><strong>解释</strong><br>现代计算机中内存空间都是按照byte划分的，从理论上讲似乎对任何类型的变量的访问可以从任何地址开始，但实际情况是在访问特定类型变量的时候经常在特 定的内存地址访问，这就需要各种类型数据按照一定的规则在空间上排列，而不是顺序的一个接一个的排放，这就是对齐。–百度百科</p>\n<p><strong>原因</strong><br>各个硬件平台对存储空间的处理上有很大的不同。一些平台对某些特定类型的数据只能从某些特定地址开始存取。比如有些架构的CPU在访问 一个没有进行对齐的变量的时候会发生错误，那么在这种架构下编程必须保证字节对齐.其他平台可能没有这种情况<br>但是最常见的是如果不按照适合其平台要求对 数据存放进行对齐，会在存取效率上带来损失。比如有些平台每次读都是从偶地址开始，如果一个int型（假设为32位系统）如果存放在偶地址开始的地方，那么一个读周期就可以读出这32bit，而如果存放在奇地址开始的地方，就需要2个读周期，并对两次读出的结果的高低字节进行拼凑才能得到该32bit数据。–百度百科</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Foo</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> foo1;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> foo2;</span><br><span class=\"line\">    short foo3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sizeof</span>(Foo) = <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>) + <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) + <span class=\"keyword\">sizeof</span>(short) = <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n<p>说明内存中并不是连续存储的这三个变量;</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Foo foo1&#123;<span class=\"string\">'1'</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">write</span>(fd, &amp;foo1, <span class=\"keyword\">sizeof</span>(foo1));</span><br></pre></td></tr></table></figure>\n<p>// hexdump 查看<br>0000000 5631 0000 0002 0000 0003 0000<br>对应图示如下<br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90.png\" alt=\"\"></p>\n<p>第一字节 0x31 正好是 ‘1’ <em>蓝色区域</em><br>二三四字节 为填充 <em>红色区域</em><br>因为sizeof(int)=4所以foo2的偏移量是四的倍数 , 故需要填充三个字节 3+1 = 4</p>\n<p>第五六七八字节 0x02对应2 <em>灰色区域</em><br>这里没有填充是因为sizeof(short)=2所以foo3的偏移量是2的倍数 由于偏移量是8 所以不需要填充</p>\n<p>第九十字节 0x03 对应3<br>第十一十二字节填充<em>黑色区域</em><br>因为此结构中最大的sizeof()=4所以需要将字节数对齐到4的倍数 目前10字节 所以需要填充2字节到<br>12字节满足四的倍数</p>\n"},{"title":"定义与声明详解","date":"2020-02-27T02:38:08.000Z","_content":"# 变量声明和变量定义\n\n变量声明: 用于向程序表明变量的类型和名字\n变量定义: 用于为变量*分配存储空间*, 同时可为变量指定初始值\n\n定义时会自动声明, 变量只能被定义一次, 却可以声明多次\nextern声明不是定义\n\n```c++\nextern int i; // 声明i 但没有定义i\nint i; // 定义且声明i\n\nextern int i = 10; // 定义并声明\n\n// 如果再函数体内部试图初始化一个由extern标记的变量,会引发错误\n```\n\n# extern\n只有extern声明位于函数外部的时候,才能被初始化\n\n**在C++中 可以用来声明全局变量**\n```c++\n// file1.cpp\nint global_int = 1;\n\n// file2.cpp\nextern int global_int;\n// 后面可以直接使用 global_int, 因为他在其他地方定义了\n```","source":"_posts/CPP-CPP重点-定义与声明详解.md","raw":"---\ntitle: 定义与声明详解\ndate: 2020-02-27 10:38:08\ntags:\ncategories:\n - CPP\n - CPP重点\n---\n# 变量声明和变量定义\n\n变量声明: 用于向程序表明变量的类型和名字\n变量定义: 用于为变量*分配存储空间*, 同时可为变量指定初始值\n\n定义时会自动声明, 变量只能被定义一次, 却可以声明多次\nextern声明不是定义\n\n```c++\nextern int i; // 声明i 但没有定义i\nint i; // 定义且声明i\n\nextern int i = 10; // 定义并声明\n\n// 如果再函数体内部试图初始化一个由extern标记的变量,会引发错误\n```\n\n# extern\n只有extern声明位于函数外部的时候,才能被初始化\n\n**在C++中 可以用来声明全局变量**\n```c++\n// file1.cpp\nint global_int = 1;\n\n// file2.cpp\nextern int global_int;\n// 后面可以直接使用 global_int, 因为他在其他地方定义了\n```","slug":"CPP-CPP重点-定义与声明详解","published":1,"updated":"2020-02-27T03:26:16.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucyn000vsouoc2vcc0mo","content":"<h1 id=\"变量声明和变量定义\"><a href=\"#变量声明和变量定义\" class=\"headerlink\" title=\"变量声明和变量定义\"></a>变量声明和变量定义</h1><p>变量声明: 用于向程序表明变量的类型和名字<br>变量定义: 用于为变量<em>分配存储空间</em>, 同时可为变量指定初始值</p>\n<p>定义时会自动声明, 变量只能被定义一次, 却可以声明多次<br>extern声明不是定义</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> i; <span class=\"comment\">// 声明i 但没有定义i</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> i; <span class=\"comment\">// 定义且声明i</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> i = <span class=\"number\">10</span>; <span class=\"comment\">// 定义并声明</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果再函数体内部试图初始化一个由extern标记的变量,会引发错误</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"extern\"><a href=\"#extern\" class=\"headerlink\" title=\"extern\"></a>extern</h1><p>只有extern声明位于函数外部的时候,才能被初始化</p>\n<p><strong>在C++中 可以用来声明全局变量</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file1.cpp</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> global_int = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// file2.cpp</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> global_int;</span><br><span class=\"line\"><span class=\"comment\">// 后面可以直接使用 global_int, 因为他在其他地方定义了</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"变量声明和变量定义\"><a href=\"#变量声明和变量定义\" class=\"headerlink\" title=\"变量声明和变量定义\"></a>变量声明和变量定义</h1><p>变量声明: 用于向程序表明变量的类型和名字<br>变量定义: 用于为变量<em>分配存储空间</em>, 同时可为变量指定初始值</p>\n<p>定义时会自动声明, 变量只能被定义一次, 却可以声明多次<br>extern声明不是定义</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> i; <span class=\"comment\">// 声明i 但没有定义i</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> i; <span class=\"comment\">// 定义且声明i</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> i = <span class=\"number\">10</span>; <span class=\"comment\">// 定义并声明</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果再函数体内部试图初始化一个由extern标记的变量,会引发错误</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"extern\"><a href=\"#extern\" class=\"headerlink\" title=\"extern\"></a>extern</h1><p>只有extern声明位于函数外部的时候,才能被初始化</p>\n<p><strong>在C++中 可以用来声明全局变量</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file1.cpp</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> global_int = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// file2.cpp</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> global_int;</span><br><span class=\"line\"><span class=\"comment\">// 后面可以直接使用 global_int, 因为他在其他地方定义了</span></span><br></pre></td></tr></table></figure>"},{"title":"编程规范","date":"2020-01-23T11:35:50.502Z","_content":"\n**第一点**\n有时, 把函数的定义同类的实例脱钩是有益的, 甚至是必要的. 这样的函数可以被定义成静态成员, 或是非成员函数. 非成员函数不应依赖于外部变量, 应尽量置于某个命名空间内. \n```c++\n// 推荐\nnamespace myproject {\nnamespace foo_bar {\nvoid Function1();\nvoid Function2();\n}  // namespace foo_bar\n}  // namespace myproject\n\n// 不推荐\nnamespace myproject {\nclass FooBar {\n public:\n  static void Function1();\n  static void Function2();\n};\n}  // namespace myproject\n```\n\n**第二点**\n局部变量应当声明和初始化同时进行, 推荐使用C++11的花括号\n\n*如果在循环中, 不要将对象的声明放入其中*, 每次进入作用域都会调用构造函数, 每次退出都会调用析构函数\n\n**第三点-类相关**\n不要在构造函数中调用虚函数, 也不要在无法报出错误时进行可能失败的初始化.\n\n不要定义隐式类型转换. \n\n对于转换运算符和单参数构造函数, 请使用 explicit 关键字.\n- 单参数构造函数有可能会被无意地用作隐式类型转换.\n\n如果你的类型需要, 就让它们支持拷贝 / 移动. 否则, 就把隐式产生的拷贝和移动函数禁用.\n- MyClass(const MyClass&) = delete;\n- MyClass& operator=(const MyClass&) = delete;\n\n仅当`只有`数据成员的时候`struct`, `其他一律`使用class\n\n使用组合常常比使用继承更合理\n- 所有的继承`必须是public`, \n\n多重继承(真正需要的时候很少)\n- 最多只有一个基类是非抽象类; 其它基类都是以 Interface 为后缀的 纯接口类.\n\n除少数特定环境外, 不要重载运算符. 也不要创建用户定义字面量\n- 重载运算符, 容易造成代码混乱, 因为没有统一的重载规范\n\n数据成员都必须是私有的\n\n**第四点-函数相关**\n\n输入参数在先, 后跟输出参数.\n\n编写简短函数\n\n所有按引用传递的参数必须加上 const.\n\n函数重载\n- 若要使用函数重载, 则必须能让读者一看调用点就胸有成竹,\n而不用花心思猜测调用的重载函数到底是哪一种. 这一规则也适用于构造函数.\n- 如果重载函数的目的是为了支持不同数量的同一类型参数, 则优先考虑使用 std::vector 以便使用者可以用 列表初始化 指定参数.\n\n省却参数\n\n函数返回类型后置语法\n- `auto foo(int x) -> int` 对于简单的类型, 优点体现不出\n- 对于复杂的情况, 例如类域中的类型声明或者以函数参数的形式书写的类型, 写法的不同会造成区别?????.\n\n**杂项**\n在 C++11 里，用 constexpr 来定义真正的常量，或实现常量初始化。\n\n**第五点命名-版本最多的地方**\n\n文件命名\n- 全部小写包含`_`最好\n- C++ 文件要以 .cc 结尾, 头文件以 .h 结尾.\n\n类型名称 - 类, 结构体, 类型定义 (typedef), 枚举, 类型模板参数\n- 类型名称的每个单词首字母均大写, 不包含下划线`MyExcitingClass`\n\n变量命名\n- 变量 (包括函数参数) 和数据成员名一律小写, 单词之间用下划线连接. 类的成员变量以下划线结尾\n\n常量命名\n- 全部大写\n- 声明为 constexpr 或 const\n\n函数命名\n- 每个单词首字母大写, 没有下划线\n- 首字母缩写的单词, 经常对其的第一个字母大写\n\n命名空间命名\n- 小写字母命名\n\n枚举命名\n- 枚举的命名应当和 常量 或 宏 一致\n\n**第六点-格式**\n\n缩进四个空格\n\n函数定义与声明\n- 左圆括号总是和函数名在同一行.(没有标准,,,,,,,,,, emmm 我想我还是换行吧)\n- 函数名和左圆括号间永远没有空格.\n- 圆括号与参数间没有空格.\n\n","source":"_posts/CPP-CPP重点-编程规范.md","raw":"title: 编程规范\ntags:\n  - null\ncategories:\n  - CPP\n  - CPP重点\ndate: 2019-10-2518:06:46\n---\n\n**第一点**\n有时, 把函数的定义同类的实例脱钩是有益的, 甚至是必要的. 这样的函数可以被定义成静态成员, 或是非成员函数. 非成员函数不应依赖于外部变量, 应尽量置于某个命名空间内. \n```c++\n// 推荐\nnamespace myproject {\nnamespace foo_bar {\nvoid Function1();\nvoid Function2();\n}  // namespace foo_bar\n}  // namespace myproject\n\n// 不推荐\nnamespace myproject {\nclass FooBar {\n public:\n  static void Function1();\n  static void Function2();\n};\n}  // namespace myproject\n```\n\n**第二点**\n局部变量应当声明和初始化同时进行, 推荐使用C++11的花括号\n\n*如果在循环中, 不要将对象的声明放入其中*, 每次进入作用域都会调用构造函数, 每次退出都会调用析构函数\n\n**第三点-类相关**\n不要在构造函数中调用虚函数, 也不要在无法报出错误时进行可能失败的初始化.\n\n不要定义隐式类型转换. \n\n对于转换运算符和单参数构造函数, 请使用 explicit 关键字.\n- 单参数构造函数有可能会被无意地用作隐式类型转换.\n\n如果你的类型需要, 就让它们支持拷贝 / 移动. 否则, 就把隐式产生的拷贝和移动函数禁用.\n- MyClass(const MyClass&) = delete;\n- MyClass& operator=(const MyClass&) = delete;\n\n仅当`只有`数据成员的时候`struct`, `其他一律`使用class\n\n使用组合常常比使用继承更合理\n- 所有的继承`必须是public`, \n\n多重继承(真正需要的时候很少)\n- 最多只有一个基类是非抽象类; 其它基类都是以 Interface 为后缀的 纯接口类.\n\n除少数特定环境外, 不要重载运算符. 也不要创建用户定义字面量\n- 重载运算符, 容易造成代码混乱, 因为没有统一的重载规范\n\n数据成员都必须是私有的\n\n**第四点-函数相关**\n\n输入参数在先, 后跟输出参数.\n\n编写简短函数\n\n所有按引用传递的参数必须加上 const.\n\n函数重载\n- 若要使用函数重载, 则必须能让读者一看调用点就胸有成竹,\n而不用花心思猜测调用的重载函数到底是哪一种. 这一规则也适用于构造函数.\n- 如果重载函数的目的是为了支持不同数量的同一类型参数, 则优先考虑使用 std::vector 以便使用者可以用 列表初始化 指定参数.\n\n省却参数\n\n函数返回类型后置语法\n- `auto foo(int x) -> int` 对于简单的类型, 优点体现不出\n- 对于复杂的情况, 例如类域中的类型声明或者以函数参数的形式书写的类型, 写法的不同会造成区别?????.\n\n**杂项**\n在 C++11 里，用 constexpr 来定义真正的常量，或实现常量初始化。\n\n**第五点命名-版本最多的地方**\n\n文件命名\n- 全部小写包含`_`最好\n- C++ 文件要以 .cc 结尾, 头文件以 .h 结尾.\n\n类型名称 - 类, 结构体, 类型定义 (typedef), 枚举, 类型模板参数\n- 类型名称的每个单词首字母均大写, 不包含下划线`MyExcitingClass`\n\n变量命名\n- 变量 (包括函数参数) 和数据成员名一律小写, 单词之间用下划线连接. 类的成员变量以下划线结尾\n\n常量命名\n- 全部大写\n- 声明为 constexpr 或 const\n\n函数命名\n- 每个单词首字母大写, 没有下划线\n- 首字母缩写的单词, 经常对其的第一个字母大写\n\n命名空间命名\n- 小写字母命名\n\n枚举命名\n- 枚举的命名应当和 常量 或 宏 一致\n\n**第六点-格式**\n\n缩进四个空格\n\n函数定义与声明\n- 左圆括号总是和函数名在同一行.(没有标准,,,,,,,,,, emmm 我想我还是换行吧)\n- 函数名和左圆括号间永远没有空格.\n- 圆括号与参数间没有空格.\n\n","slug":"CPP-CPP重点-编程规范","published":1,"updated":"2020-03-05T13:58:34.793Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucyo000ysouo4dwu0isa","content":"<p><strong>第一点</strong><br>有时, 把函数的定义同类的实例脱钩是有益的, 甚至是必要的. 这样的函数可以被定义成静态成员, 或是非成员函数. 非成员函数不应依赖于外部变量, 应尽量置于某个命名空间内. </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 推荐</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> myproject &#123;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> foo_bar &#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Function1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Function2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;  <span class=\"comment\">// namespace foo_bar</span></span><br><span class=\"line\">&#125;  <span class=\"comment\">// namespace myproject</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不推荐</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> myproject &#123;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooBar</span> &#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Function1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Function2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;  <span class=\"comment\">// namespace myproject</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>第二点</strong><br>局部变量应当声明和初始化同时进行, 推荐使用C++11的花括号</p>\n<p><em>如果在循环中, 不要将对象的声明放入其中</em>, 每次进入作用域都会调用构造函数, 每次退出都会调用析构函数</p>\n<p><strong>第三点-类相关</strong><br>不要在构造函数中调用虚函数, 也不要在无法报出错误时进行可能失败的初始化.</p>\n<p>不要定义隐式类型转换. </p>\n<p>对于转换运算符和单参数构造函数, 请使用 explicit 关键字.</p>\n<ul>\n<li>单参数构造函数有可能会被无意地用作隐式类型转换.</li>\n</ul>\n<p>如果你的类型需要, 就让它们支持拷贝 / 移动. 否则, 就把隐式产生的拷贝和移动函数禁用.</p>\n<ul>\n<li>MyClass(const MyClass&amp;) = delete;</li>\n<li>MyClass&amp; operator=(const MyClass&amp;) = delete;</li>\n</ul>\n<p>仅当<code>只有</code>数据成员的时候<code>struct</code>, <code>其他一律</code>使用class</p>\n<p>使用组合常常比使用继承更合理</p>\n<ul>\n<li>所有的继承<code>必须是public</code>, </li>\n</ul>\n<p>多重继承(真正需要的时候很少)</p>\n<ul>\n<li>最多只有一个基类是非抽象类; 其它基类都是以 Interface 为后缀的 纯接口类.</li>\n</ul>\n<p>除少数特定环境外, 不要重载运算符. 也不要创建用户定义字面量</p>\n<ul>\n<li>重载运算符, 容易造成代码混乱, 因为没有统一的重载规范</li>\n</ul>\n<p>数据成员都必须是私有的</p>\n<p><strong>第四点-函数相关</strong></p>\n<p>输入参数在先, 后跟输出参数.</p>\n<p>编写简短函数</p>\n<p>所有按引用传递的参数必须加上 const.</p>\n<p>函数重载</p>\n<ul>\n<li>若要使用函数重载, 则必须能让读者一看调用点就胸有成竹,<br>而不用花心思猜测调用的重载函数到底是哪一种. 这一规则也适用于构造函数.</li>\n<li>如果重载函数的目的是为了支持不同数量的同一类型参数, 则优先考虑使用 std::vector 以便使用者可以用 列表初始化 指定参数.</li>\n</ul>\n<p>省却参数</p>\n<p>函数返回类型后置语法</p>\n<ul>\n<li><code>auto foo(int x) -&gt; int</code> 对于简单的类型, 优点体现不出</li>\n<li>对于复杂的情况, 例如类域中的类型声明或者以函数参数的形式书写的类型, 写法的不同会造成区别?????.</li>\n</ul>\n<p><strong>杂项</strong><br>在 C++11 里，用 constexpr 来定义真正的常量，或实现常量初始化。</p>\n<p><strong>第五点命名-版本最多的地方</strong></p>\n<p>文件命名</p>\n<ul>\n<li>全部小写包含<code>_</code>最好</li>\n<li>C++ 文件要以 .cc 结尾, 头文件以 .h 结尾.</li>\n</ul>\n<p>类型名称 - 类, 结构体, 类型定义 (typedef), 枚举, 类型模板参数</p>\n<ul>\n<li>类型名称的每个单词首字母均大写, 不包含下划线<code>MyExcitingClass</code></li>\n</ul>\n<p>变量命名</p>\n<ul>\n<li>变量 (包括函数参数) 和数据成员名一律小写, 单词之间用下划线连接. 类的成员变量以下划线结尾</li>\n</ul>\n<p>常量命名</p>\n<ul>\n<li>全部大写</li>\n<li>声明为 constexpr 或 const</li>\n</ul>\n<p>函数命名</p>\n<ul>\n<li>每个单词首字母大写, 没有下划线</li>\n<li>首字母缩写的单词, 经常对其的第一个字母大写</li>\n</ul>\n<p>命名空间命名</p>\n<ul>\n<li>小写字母命名</li>\n</ul>\n<p>枚举命名</p>\n<ul>\n<li>枚举的命名应当和 常量 或 宏 一致</li>\n</ul>\n<p><strong>第六点-格式</strong></p>\n<p>缩进四个空格</p>\n<p>函数定义与声明</p>\n<ul>\n<li>左圆括号总是和函数名在同一行.(没有标准,,,,,,,,,, emmm 我想我还是换行吧)</li>\n<li>函数名和左圆括号间永远没有空格.</li>\n<li>圆括号与参数间没有空格.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>第一点</strong><br>有时, 把函数的定义同类的实例脱钩是有益的, 甚至是必要的. 这样的函数可以被定义成静态成员, 或是非成员函数. 非成员函数不应依赖于外部变量, 应尽量置于某个命名空间内. </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 推荐</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> myproject &#123;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> foo_bar &#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Function1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Function2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;  <span class=\"comment\">// namespace foo_bar</span></span><br><span class=\"line\">&#125;  <span class=\"comment\">// namespace myproject</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不推荐</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> myproject &#123;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooBar</span> &#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Function1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Function2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;  <span class=\"comment\">// namespace myproject</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>第二点</strong><br>局部变量应当声明和初始化同时进行, 推荐使用C++11的花括号</p>\n<p><em>如果在循环中, 不要将对象的声明放入其中</em>, 每次进入作用域都会调用构造函数, 每次退出都会调用析构函数</p>\n<p><strong>第三点-类相关</strong><br>不要在构造函数中调用虚函数, 也不要在无法报出错误时进行可能失败的初始化.</p>\n<p>不要定义隐式类型转换. </p>\n<p>对于转换运算符和单参数构造函数, 请使用 explicit 关键字.</p>\n<ul>\n<li>单参数构造函数有可能会被无意地用作隐式类型转换.</li>\n</ul>\n<p>如果你的类型需要, 就让它们支持拷贝 / 移动. 否则, 就把隐式产生的拷贝和移动函数禁用.</p>\n<ul>\n<li>MyClass(const MyClass&amp;) = delete;</li>\n<li>MyClass&amp; operator=(const MyClass&amp;) = delete;</li>\n</ul>\n<p>仅当<code>只有</code>数据成员的时候<code>struct</code>, <code>其他一律</code>使用class</p>\n<p>使用组合常常比使用继承更合理</p>\n<ul>\n<li>所有的继承<code>必须是public</code>, </li>\n</ul>\n<p>多重继承(真正需要的时候很少)</p>\n<ul>\n<li>最多只有一个基类是非抽象类; 其它基类都是以 Interface 为后缀的 纯接口类.</li>\n</ul>\n<p>除少数特定环境外, 不要重载运算符. 也不要创建用户定义字面量</p>\n<ul>\n<li>重载运算符, 容易造成代码混乱, 因为没有统一的重载规范</li>\n</ul>\n<p>数据成员都必须是私有的</p>\n<p><strong>第四点-函数相关</strong></p>\n<p>输入参数在先, 后跟输出参数.</p>\n<p>编写简短函数</p>\n<p>所有按引用传递的参数必须加上 const.</p>\n<p>函数重载</p>\n<ul>\n<li>若要使用函数重载, 则必须能让读者一看调用点就胸有成竹,<br>而不用花心思猜测调用的重载函数到底是哪一种. 这一规则也适用于构造函数.</li>\n<li>如果重载函数的目的是为了支持不同数量的同一类型参数, 则优先考虑使用 std::vector 以便使用者可以用 列表初始化 指定参数.</li>\n</ul>\n<p>省却参数</p>\n<p>函数返回类型后置语法</p>\n<ul>\n<li><code>auto foo(int x) -&gt; int</code> 对于简单的类型, 优点体现不出</li>\n<li>对于复杂的情况, 例如类域中的类型声明或者以函数参数的形式书写的类型, 写法的不同会造成区别?????.</li>\n</ul>\n<p><strong>杂项</strong><br>在 C++11 里，用 constexpr 来定义真正的常量，或实现常量初始化。</p>\n<p><strong>第五点命名-版本最多的地方</strong></p>\n<p>文件命名</p>\n<ul>\n<li>全部小写包含<code>_</code>最好</li>\n<li>C++ 文件要以 .cc 结尾, 头文件以 .h 结尾.</li>\n</ul>\n<p>类型名称 - 类, 结构体, 类型定义 (typedef), 枚举, 类型模板参数</p>\n<ul>\n<li>类型名称的每个单词首字母均大写, 不包含下划线<code>MyExcitingClass</code></li>\n</ul>\n<p>变量命名</p>\n<ul>\n<li>变量 (包括函数参数) 和数据成员名一律小写, 单词之间用下划线连接. 类的成员变量以下划线结尾</li>\n</ul>\n<p>常量命名</p>\n<ul>\n<li>全部大写</li>\n<li>声明为 constexpr 或 const</li>\n</ul>\n<p>函数命名</p>\n<ul>\n<li>每个单词首字母大写, 没有下划线</li>\n<li>首字母缩写的单词, 经常对其的第一个字母大写</li>\n</ul>\n<p>命名空间命名</p>\n<ul>\n<li>小写字母命名</li>\n</ul>\n<p>枚举命名</p>\n<ul>\n<li>枚举的命名应当和 常量 或 宏 一致</li>\n</ul>\n<p><strong>第六点-格式</strong></p>\n<p>缩进四个空格</p>\n<p>函数定义与声明</p>\n<ul>\n<li>左圆括号总是和函数名在同一行.(没有标准,,,,,,,,,, emmm 我想我还是换行吧)</li>\n<li>函数名和左圆括号间永远没有空格.</li>\n<li>圆括号与参数间没有空格.</li>\n</ul>\n"},{"title":"Git的使用","date":"2020-02-07T10:24:42.000Z","_content":"之前的Git博客 写的终于是自己都看不下去了. 所以打算来重新写一个博客\n这篇博客主要还是参照的廖雪峰的Git博客\n自己只做整理方便自己察看\n\n2020年2月7日18:49:25 再来重新编辑下这些内容\n2020年2月22日17:29:17 再次更新内容 增加commit规范\n2020年3月6日11:31:59 再次更新 添加分支管理细则\n# 命令总结\n```\n# -t Specifies the type of key to create.  The possible values are\n#“dsa”, “ecdsa”, “ed25519”, or “rsa”.\n# -C 生成注释 ...所以后面的邮箱就是个注释????\nssh-keygen -t rsa -C \"youremail@example.com\"\n\ngit init\ngit add <file>\ngit commit -m <message>\ngit remote add origin  # origin 意为远程库的名字, git的默认叫法\n\ngit status\ngit diff\ngit log\ngit log --pretty=oneline # 简单显示\n\n# 注意reset是恢复到上一个版本 即为你上一次commit版本或者pull最近的一次\ngit checkout --<filename> # 恢复工作区, 可用于恢复修改和恢复勿删文件\ngit reset HEAD <file> # 恢复暂存区\ngit reset HEAD^ # 恢复版本库\ngit reset --hard <hash版本号 即为log中的一串英文字母, 只需要前几个字母即可>\ngit reflog # 所有版本日志\n\ngit rm 从版本库中删除文件\n\ngit push -u origin master # 带上 -u 以后提交就不需要加入origin master, 类似记忆功能\n\n`git checkout -b dev` #相当于一下两条命令\n`git branch dev` # 分支创建\n`git checkout dev` # 分支切换\n`git branch -d dev` # 分支删除\n`git branch` # 查看当前所有分支\n`git merge dev` # 将制定的dev分支合并到当前的分支\n```\n\n # 基本概念\n首先把Git的三个区说明一下吧 自己后来慢慢感觉这些理论还是很重要的\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/Git%E4%B8%89%E5%A4%A7%E5%88%86%E5%8C%BA.png)\n工作区\n顾名思义, 你当前在IDE直接修改的代码全部都是位于工作区的代码\n暂存区\n暂时存取的区域, 你每次使用add提交的文件全部在这个区域中, 这些文件等待你的commit\n版本库\n这里存放的是若干个版本, 你每次的commit就是将暂存区的文件作为一个版本提交到版本库, 同时相应的文件被提交后 暂存区的文件被清除\n\n# 基础的操作\n**你的第一次提交**\n```\ngit init\ngit add <file>\ngit commit -m <message>\n```\n`git init `\n在你命令所执行的文件夹生成版本库\n`git add <file>`\n将指定文件从工作区添加到暂存区\n如果`<file>`用 `.` 代替则为所有相对上一次commit修改过的文件\n`git commit -m <message>`\n提交暂存区的文件到版本库中成为一个版本 message为这个版本(提交)的描述\n\n**好了你已经成功完成了一次提交, 继续去写代码了**\n好你又写完了一堆代码 这时你想知道你工作区的状态是啥-你修改了哪些文件\n```\n$git status\n-------提示如下-----------\n位于分支 master\n尚未暂存以备提交的变更：\n  （使用 \"git add <文件>...\" 更新要提交的内容）\n  （使用 \"git checkout -- <文件>...\" 丢弃工作区的改动）\n\n\t修改：     test.txt\n\n修改尚未加入提交（使用 \"git add\" 和/或 \"git commit -a\"）\n```\n`git status`告诉你 你修改了test.txt文件, 但是你想知道你怎么修改了这些文件, 做了什么改动\n这时候就需要`git diff`\n```\n$git diff\n-------提示如下-----------\ndiff --git a/test.txt b/test.txt\nindex 0858ae8..8c14912 100644\n--- a/test.txt\n+++ b/test.txt\n@@ -1,3 +1,4 @@\n 111111111111111\n 222222222222222\n 333333333333333\n+444444444444444\n```\n**现在你知道你进行了什么修改, 又进行了一次提交**\n```\nlsmg@ubuntu:~/temp$ git status\n位于分支 master\n尚未暂存以备提交的变更：\n  （使用 \"git add <文件>...\" 更新要提交的内容）\n  （使用 \"git checkout -- <文件>...\" 丢弃工作区的改动）\n\t修改：     test.txt\n修改尚未加入提交（使用 \"git add\" 和/或 \"git commit -a\"）\nlsmg@ubuntu:~/temp$ git add test.txt \nlsmg@ubuntu:~/temp$ git status\n位于分支 master\n要提交的变更：\n  （使用 \"git reset HEAD <文件>...\" 以取消暂存）\n\t修改：     test.txt\nlsmg@ubuntu:~/temp$ git commit -m \"ver 0.02\"\n[master ee4400f] ver 0.02\n 1 file changed, 1 insertion(+)\nlsmg@ubuntu:~/temp$ git status\n位于分支 master\n无文件要提交，干净的工作区\n```\n\n# 时光穿梭机\n**在commit之间切换**\nGit还可以在不同commit间切换, 当然你必须知道进行过哪些commit, 你不能自己都记在脑子里吧, 所以也存在相关的命令`git log`来查看你的commit记录\n```\nlsmg@ubuntu:~/temp$ git log\ncommit ee4400fc2b5694282b866b701f7c21655149e5a2 (HEAD -> master)\nAuthor: ***********\nDate:   Sat Dec 7 21:06:42 2019 -0800\n    ver 0.02\n\ncommit 603260e28ac0cc8fb8e4243120eb00bca83585d2\nAuthor: ***********\nDate:   Sat Dec 7 20:57:58 2019 -0800\n    ver 0.01\n\nlsmg@ubuntu:~/temp$ git log --pretty=oneline # 简洁显示\nee4400fc2b5694282b866b701f7c21655149e5a2 (HEAD -> master) ver 0.02\n603260e28ac0cc8fb8e4243120eb00bca83585d2 ver 0.01\n```\n上面的`HEAD`代表当前版本, 上一个版本为`HEAD^`, 上上一个版本为`HEAD^^`如此类推\n回到前N个版本`HEAD~N`\n`git reset --hard HEAD^` 回到上一个版本.\n这时你当前版本将会丢失, 使用`git log`也不会查看到原来的版本信息\n这时使用`git reflog`来查看你的所有版本日志\n```\nlsmg@ubuntu:~/temp$ git reset --hard 603260e28ac0cc8fb8e4243120eb00bca83585d2\nHEAD 现在位于 603260e ver 0.01\nlsmg@ubuntu:~/temp$ git log\ncommit 603260e28ac0cc8fb8e4243120eb00bca83585d2 (HEAD -> master)\nAuthor: rjd67441 <rjd67441@hotmail.com>\nDate:   Sat Dec 7 20:57:58 2019 -0800\n\n    ver 0.01\nlsmg@ubuntu:~/temp$ git reflog \n603260e (HEAD -> master) HEAD@{0}: reset: moving to 603260e28ac0cc8fb8e4243120eb00bca83585d2\nee4400f HEAD@{1}: commit: ver 0.02\n603260e (HEAD -> master) HEAD@{2}: commit (initial): ver 0.01\nlsmg@ubuntu:~/temp$ git reset --hard ee4400f\nHEAD 现在位于 ee4400f ver 0.02\n```\n\n**撤销修改**\n工作区中的撤销\n`git checkout -- <filename>`\n一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；\n一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。\n总之，就是让这个文件回到最近一次git commit或git add时的状态。\n暂存区中的撤销\n`git reset HEAD <file>`\n版本库的撤销\n`git reset HEAD^` 乖乖回退一次\n\n**删除文件**\n删除本地文件后\n确实需要从版本库中删除\n`git rm`删除然后`git commit`提交即可\n误删除需要使用`git chechout -- <filename>`来恢复\n\n# 分支管理\n`git checkout -b dev`相当于一下两条命令\n`git branch dev` 分支创建\n`git checkout dev` 分支切换\n\n`git branch -d dev` 分支删除\n\n`git branch` 查看当前所有分支\n\n`git merge dev` 将制定的dev分支合并到当前的分支\n\n**冲突解决**\n`git merge dev` 将制定的dev分支合并到当前的分支\n```\n  1 111111111111111\n  2 222222222222222\n  3 333333333333333\n  4 444444444444444\n  5 <<<<<<< HEAD  # 我在master分支下添加了6666666 并提交\n  6 6666666\n  7 =======\n  8 7777777\n  9 >>>>>>> deb # 我在deb分支下添加了7777777 并提交\n  ```\n  最后需要我手动修改这个文件为自己需要的内容 然后提交即可\n  \n  **分支管理**\n  通常Git会使用`Fast forward`模式 这样删除分支后会丢失分支的信息\n  可以再merge的时候加入`--no-ff`这样就能解决问题\n  `git merge --no-ff -m \"merge with no-ff\" dev`\n  由于禁用`Fast forward`后\n  会生成新的commit所以需要加入` -m \"merge with no-ff\"`\n  \n  `git stash` 可以储存当前的工作区 继续其他的工作\n  `git stash list` 查看储存的工作区列表\n  `git stash apply stash@{0}` 恢复指定的储存\n  `git stash pop` 恢复并drop最近的存储\n  \n  ```\n$ cat test.txt # stash前\n111111\n$ vim test.txt \n$ cat test.txt # 进行了修改\n111111\n222222\n333333\n$ git status\n位于分支 master\n\t修改：     test.txt\n$ git stash # stash\n保存工作目录和索引状态 WIP on master: 854b710 1\n$ cat test.txt \n111111\n$ git status\n位于分支 master\n无文件要提交，干净的工作区\n$ git stash pop\n位于分支 master\n\t修改：     test.txt\n$ cat test.txt \n111111\n222222\n333333\n  ```\n  \n# 实际工作中分支的应用\n[主要参考](https://zhuanlan.zhihu.com/p/38772378)\n**主分支**\n- **master**: 这个分支最稳定, 相当于放的可发布版本\n- **develop**: 开发分支, 平行于master分支, 负责合并各种`用于开发子功能`的分支\n\n**支持分支**:解决某个问题, 结束后合并回`master`或`develop`分支\n- **feature**功能分支, 用于开发一个个子功能, 来自`develop`合并到`develop`去\n- **release**:发布分支, 用于修改版本号等小修改, 来自`develop`分支合并到`master`分支\n- **hotfixes**:紧急修复bug分支, 从`master`创建, 合并回`develop`分支和`master`分支\n![](https://pic4.zhimg.com/80/v2-aef704a4c112eaaf5e8637587ee17df3_hd.jpg)\n\n\n[Git 分支管理规范](https://juejin.im/post/5d82e1f3e51d4561d044cd88#heading-14)\n\n[Git 基础 - 打标签](https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE)\n\n**develop分支完成了操作, 准备发布新的版本**\n```shell\n# 从 develop 分支上创建 release 分支:\n# 命名规则如下 release-事件-版本\ngit checkout –b release-20190919-v1.0.0 develop\n\n# 修复完release的bug后再次提交修改:\ngit checkout release-20190919-v1.0.0\n# 提交本地修改, 如果没有修改bug 可以跳过\ngit add .\ngit commit –m “提交日志”\n# 推送 release 分支\ngit push origin release-20190919-v1.0.0\n\n# 发布新版本\n# 合并 release 分支到 master 分支:\ngit checkout master\ngit merge --no-ff release-20190919-v1.0.0\n# 合并 release 分支到 develop 分支:\ngit checkout develop\ngit merge --no-ff release-20190919-v1.0.0\n# 在 master 分支上创建标签:\ngit tag tag-20190919-v1.0.0\n# 删除本地 release 分支:\ngit branch –d release-20190919-v1.0.0\n# 删除远程 release 分支:\ngit push origin :release-20190919-v1.0.0\n```\n\n新版本完成之后\n```shell\n# 推送master分支\ngit push origin master\n\n# 注意上边打的tag需要手动提交 默认push不会提交tag\ngit push origin [tag name]\n# 也可以给push增加参数\ngit push origin --tags\n```\n\n\n# commit 规范\n[阮一峰 Commit message 和 Change log 编写指南](https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html)\n\nAngular 规范.\n每个commit message 包括三分部\nHeader Body 和 Footer\n```\n<type>(<scope>): <subject> // 必须\n// 空一行\n<body> // 非必须\n// 空一行\n<footer> //非必须\n```\n**Header**\n1. type 必需 - 说明commit的类别, 只允许下面七个标识\n\n- feat：新功能（feature）\n- fix：修补bug\n- docs：文档（documentation）\n- style： 格式（不影响代码运行的变动）\n- refactor：重构（即不是新增功能，也不是修改bug的代码变动）\n- test：增加测试\n- chore：构建过程或辅助工具的变动\n\n2. scope 非必需 - 用于说明 commit影响的范围\n比如登录、注册、充值逻辑等等，视项目不同而不同。\n\n3. subject 必需 - commit 目的的简短描述 \n- 不超过50字符 \n- 第一人称现在时动词开头\n- 首字母小写\n- 句尾不加句号\n\n**Body**\n本次commit的详细描述, 可以分成多行\n\n**Footer**\n只用于两种情况 目前用不动 不摘了","source":"_posts/Git-基础操作.md","raw":"---\ntitle: Git的使用\ndate: 2020-02-07 18:24:42\ncategories: \n- 必备技能\n- Git操作\ntags:\n- Git操作\n---\n之前的Git博客 写的终于是自己都看不下去了. 所以打算来重新写一个博客\n这篇博客主要还是参照的廖雪峰的Git博客\n自己只做整理方便自己察看\n\n2020年2月7日18:49:25 再来重新编辑下这些内容\n2020年2月22日17:29:17 再次更新内容 增加commit规范\n2020年3月6日11:31:59 再次更新 添加分支管理细则\n# 命令总结\n```\n# -t Specifies the type of key to create.  The possible values are\n#“dsa”, “ecdsa”, “ed25519”, or “rsa”.\n# -C 生成注释 ...所以后面的邮箱就是个注释????\nssh-keygen -t rsa -C \"youremail@example.com\"\n\ngit init\ngit add <file>\ngit commit -m <message>\ngit remote add origin  # origin 意为远程库的名字, git的默认叫法\n\ngit status\ngit diff\ngit log\ngit log --pretty=oneline # 简单显示\n\n# 注意reset是恢复到上一个版本 即为你上一次commit版本或者pull最近的一次\ngit checkout --<filename> # 恢复工作区, 可用于恢复修改和恢复勿删文件\ngit reset HEAD <file> # 恢复暂存区\ngit reset HEAD^ # 恢复版本库\ngit reset --hard <hash版本号 即为log中的一串英文字母, 只需要前几个字母即可>\ngit reflog # 所有版本日志\n\ngit rm 从版本库中删除文件\n\ngit push -u origin master # 带上 -u 以后提交就不需要加入origin master, 类似记忆功能\n\n`git checkout -b dev` #相当于一下两条命令\n`git branch dev` # 分支创建\n`git checkout dev` # 分支切换\n`git branch -d dev` # 分支删除\n`git branch` # 查看当前所有分支\n`git merge dev` # 将制定的dev分支合并到当前的分支\n```\n\n # 基本概念\n首先把Git的三个区说明一下吧 自己后来慢慢感觉这些理论还是很重要的\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/Git%E4%B8%89%E5%A4%A7%E5%88%86%E5%8C%BA.png)\n工作区\n顾名思义, 你当前在IDE直接修改的代码全部都是位于工作区的代码\n暂存区\n暂时存取的区域, 你每次使用add提交的文件全部在这个区域中, 这些文件等待你的commit\n版本库\n这里存放的是若干个版本, 你每次的commit就是将暂存区的文件作为一个版本提交到版本库, 同时相应的文件被提交后 暂存区的文件被清除\n\n# 基础的操作\n**你的第一次提交**\n```\ngit init\ngit add <file>\ngit commit -m <message>\n```\n`git init `\n在你命令所执行的文件夹生成版本库\n`git add <file>`\n将指定文件从工作区添加到暂存区\n如果`<file>`用 `.` 代替则为所有相对上一次commit修改过的文件\n`git commit -m <message>`\n提交暂存区的文件到版本库中成为一个版本 message为这个版本(提交)的描述\n\n**好了你已经成功完成了一次提交, 继续去写代码了**\n好你又写完了一堆代码 这时你想知道你工作区的状态是啥-你修改了哪些文件\n```\n$git status\n-------提示如下-----------\n位于分支 master\n尚未暂存以备提交的变更：\n  （使用 \"git add <文件>...\" 更新要提交的内容）\n  （使用 \"git checkout -- <文件>...\" 丢弃工作区的改动）\n\n\t修改：     test.txt\n\n修改尚未加入提交（使用 \"git add\" 和/或 \"git commit -a\"）\n```\n`git status`告诉你 你修改了test.txt文件, 但是你想知道你怎么修改了这些文件, 做了什么改动\n这时候就需要`git diff`\n```\n$git diff\n-------提示如下-----------\ndiff --git a/test.txt b/test.txt\nindex 0858ae8..8c14912 100644\n--- a/test.txt\n+++ b/test.txt\n@@ -1,3 +1,4 @@\n 111111111111111\n 222222222222222\n 333333333333333\n+444444444444444\n```\n**现在你知道你进行了什么修改, 又进行了一次提交**\n```\nlsmg@ubuntu:~/temp$ git status\n位于分支 master\n尚未暂存以备提交的变更：\n  （使用 \"git add <文件>...\" 更新要提交的内容）\n  （使用 \"git checkout -- <文件>...\" 丢弃工作区的改动）\n\t修改：     test.txt\n修改尚未加入提交（使用 \"git add\" 和/或 \"git commit -a\"）\nlsmg@ubuntu:~/temp$ git add test.txt \nlsmg@ubuntu:~/temp$ git status\n位于分支 master\n要提交的变更：\n  （使用 \"git reset HEAD <文件>...\" 以取消暂存）\n\t修改：     test.txt\nlsmg@ubuntu:~/temp$ git commit -m \"ver 0.02\"\n[master ee4400f] ver 0.02\n 1 file changed, 1 insertion(+)\nlsmg@ubuntu:~/temp$ git status\n位于分支 master\n无文件要提交，干净的工作区\n```\n\n# 时光穿梭机\n**在commit之间切换**\nGit还可以在不同commit间切换, 当然你必须知道进行过哪些commit, 你不能自己都记在脑子里吧, 所以也存在相关的命令`git log`来查看你的commit记录\n```\nlsmg@ubuntu:~/temp$ git log\ncommit ee4400fc2b5694282b866b701f7c21655149e5a2 (HEAD -> master)\nAuthor: ***********\nDate:   Sat Dec 7 21:06:42 2019 -0800\n    ver 0.02\n\ncommit 603260e28ac0cc8fb8e4243120eb00bca83585d2\nAuthor: ***********\nDate:   Sat Dec 7 20:57:58 2019 -0800\n    ver 0.01\n\nlsmg@ubuntu:~/temp$ git log --pretty=oneline # 简洁显示\nee4400fc2b5694282b866b701f7c21655149e5a2 (HEAD -> master) ver 0.02\n603260e28ac0cc8fb8e4243120eb00bca83585d2 ver 0.01\n```\n上面的`HEAD`代表当前版本, 上一个版本为`HEAD^`, 上上一个版本为`HEAD^^`如此类推\n回到前N个版本`HEAD~N`\n`git reset --hard HEAD^` 回到上一个版本.\n这时你当前版本将会丢失, 使用`git log`也不会查看到原来的版本信息\n这时使用`git reflog`来查看你的所有版本日志\n```\nlsmg@ubuntu:~/temp$ git reset --hard 603260e28ac0cc8fb8e4243120eb00bca83585d2\nHEAD 现在位于 603260e ver 0.01\nlsmg@ubuntu:~/temp$ git log\ncommit 603260e28ac0cc8fb8e4243120eb00bca83585d2 (HEAD -> master)\nAuthor: rjd67441 <rjd67441@hotmail.com>\nDate:   Sat Dec 7 20:57:58 2019 -0800\n\n    ver 0.01\nlsmg@ubuntu:~/temp$ git reflog \n603260e (HEAD -> master) HEAD@{0}: reset: moving to 603260e28ac0cc8fb8e4243120eb00bca83585d2\nee4400f HEAD@{1}: commit: ver 0.02\n603260e (HEAD -> master) HEAD@{2}: commit (initial): ver 0.01\nlsmg@ubuntu:~/temp$ git reset --hard ee4400f\nHEAD 现在位于 ee4400f ver 0.02\n```\n\n**撤销修改**\n工作区中的撤销\n`git checkout -- <filename>`\n一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；\n一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。\n总之，就是让这个文件回到最近一次git commit或git add时的状态。\n暂存区中的撤销\n`git reset HEAD <file>`\n版本库的撤销\n`git reset HEAD^` 乖乖回退一次\n\n**删除文件**\n删除本地文件后\n确实需要从版本库中删除\n`git rm`删除然后`git commit`提交即可\n误删除需要使用`git chechout -- <filename>`来恢复\n\n# 分支管理\n`git checkout -b dev`相当于一下两条命令\n`git branch dev` 分支创建\n`git checkout dev` 分支切换\n\n`git branch -d dev` 分支删除\n\n`git branch` 查看当前所有分支\n\n`git merge dev` 将制定的dev分支合并到当前的分支\n\n**冲突解决**\n`git merge dev` 将制定的dev分支合并到当前的分支\n```\n  1 111111111111111\n  2 222222222222222\n  3 333333333333333\n  4 444444444444444\n  5 <<<<<<< HEAD  # 我在master分支下添加了6666666 并提交\n  6 6666666\n  7 =======\n  8 7777777\n  9 >>>>>>> deb # 我在deb分支下添加了7777777 并提交\n  ```\n  最后需要我手动修改这个文件为自己需要的内容 然后提交即可\n  \n  **分支管理**\n  通常Git会使用`Fast forward`模式 这样删除分支后会丢失分支的信息\n  可以再merge的时候加入`--no-ff`这样就能解决问题\n  `git merge --no-ff -m \"merge with no-ff\" dev`\n  由于禁用`Fast forward`后\n  会生成新的commit所以需要加入` -m \"merge with no-ff\"`\n  \n  `git stash` 可以储存当前的工作区 继续其他的工作\n  `git stash list` 查看储存的工作区列表\n  `git stash apply stash@{0}` 恢复指定的储存\n  `git stash pop` 恢复并drop最近的存储\n  \n  ```\n$ cat test.txt # stash前\n111111\n$ vim test.txt \n$ cat test.txt # 进行了修改\n111111\n222222\n333333\n$ git status\n位于分支 master\n\t修改：     test.txt\n$ git stash # stash\n保存工作目录和索引状态 WIP on master: 854b710 1\n$ cat test.txt \n111111\n$ git status\n位于分支 master\n无文件要提交，干净的工作区\n$ git stash pop\n位于分支 master\n\t修改：     test.txt\n$ cat test.txt \n111111\n222222\n333333\n  ```\n  \n# 实际工作中分支的应用\n[主要参考](https://zhuanlan.zhihu.com/p/38772378)\n**主分支**\n- **master**: 这个分支最稳定, 相当于放的可发布版本\n- **develop**: 开发分支, 平行于master分支, 负责合并各种`用于开发子功能`的分支\n\n**支持分支**:解决某个问题, 结束后合并回`master`或`develop`分支\n- **feature**功能分支, 用于开发一个个子功能, 来自`develop`合并到`develop`去\n- **release**:发布分支, 用于修改版本号等小修改, 来自`develop`分支合并到`master`分支\n- **hotfixes**:紧急修复bug分支, 从`master`创建, 合并回`develop`分支和`master`分支\n![](https://pic4.zhimg.com/80/v2-aef704a4c112eaaf5e8637587ee17df3_hd.jpg)\n\n\n[Git 分支管理规范](https://juejin.im/post/5d82e1f3e51d4561d044cd88#heading-14)\n\n[Git 基础 - 打标签](https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE)\n\n**develop分支完成了操作, 准备发布新的版本**\n```shell\n# 从 develop 分支上创建 release 分支:\n# 命名规则如下 release-事件-版本\ngit checkout –b release-20190919-v1.0.0 develop\n\n# 修复完release的bug后再次提交修改:\ngit checkout release-20190919-v1.0.0\n# 提交本地修改, 如果没有修改bug 可以跳过\ngit add .\ngit commit –m “提交日志”\n# 推送 release 分支\ngit push origin release-20190919-v1.0.0\n\n# 发布新版本\n# 合并 release 分支到 master 分支:\ngit checkout master\ngit merge --no-ff release-20190919-v1.0.0\n# 合并 release 分支到 develop 分支:\ngit checkout develop\ngit merge --no-ff release-20190919-v1.0.0\n# 在 master 分支上创建标签:\ngit tag tag-20190919-v1.0.0\n# 删除本地 release 分支:\ngit branch –d release-20190919-v1.0.0\n# 删除远程 release 分支:\ngit push origin :release-20190919-v1.0.0\n```\n\n新版本完成之后\n```shell\n# 推送master分支\ngit push origin master\n\n# 注意上边打的tag需要手动提交 默认push不会提交tag\ngit push origin [tag name]\n# 也可以给push增加参数\ngit push origin --tags\n```\n\n\n# commit 规范\n[阮一峰 Commit message 和 Change log 编写指南](https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html)\n\nAngular 规范.\n每个commit message 包括三分部\nHeader Body 和 Footer\n```\n<type>(<scope>): <subject> // 必须\n// 空一行\n<body> // 非必须\n// 空一行\n<footer> //非必须\n```\n**Header**\n1. type 必需 - 说明commit的类别, 只允许下面七个标识\n\n- feat：新功能（feature）\n- fix：修补bug\n- docs：文档（documentation）\n- style： 格式（不影响代码运行的变动）\n- refactor：重构（即不是新增功能，也不是修改bug的代码变动）\n- test：增加测试\n- chore：构建过程或辅助工具的变动\n\n2. scope 非必需 - 用于说明 commit影响的范围\n比如登录、注册、充值逻辑等等，视项目不同而不同。\n\n3. subject 必需 - commit 目的的简短描述 \n- 不超过50字符 \n- 第一人称现在时动词开头\n- 首字母小写\n- 句尾不加句号\n\n**Body**\n本次commit的详细描述, 可以分成多行\n\n**Footer**\n只用于两种情况 目前用不动 不摘了","slug":"Git-基础操作","published":1,"updated":"2020-03-06T03:41:36.634Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucyo0010souo3zfwb07g","content":"<p>之前的Git博客 写的终于是自己都看不下去了. 所以打算来重新写一个博客<br>这篇博客主要还是参照的廖雪峰的Git博客<br>自己只做整理方便自己察看</p>\n<p>2020年2月7日18:49:25 再来重新编辑下这些内容<br>2020年2月22日17:29:17 再次更新内容 增加commit规范<br>2020年3月6日11:31:59 再次更新 添加分支管理细则</p>\n<h1 id=\"命令总结\"><a href=\"#命令总结\" class=\"headerlink\" title=\"命令总结\"></a>命令总结</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -t Specifies the type of key to create.  The possible values are</span><br><span class=\"line\">#“dsa”, “ecdsa”, “ed25519”, or “rsa”.</span><br><span class=\"line\"># -C 生成注释 ...所以后面的邮箱就是个注释????</span><br><span class=\"line\">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">git init</span><br><span class=\"line\">git add &lt;file&gt;</span><br><span class=\"line\">git commit -m &lt;message&gt;</span><br><span class=\"line\">git remote add origin  # origin 意为远程库的名字, git的默认叫法</span><br><span class=\"line\"></span><br><span class=\"line\">git status</span><br><span class=\"line\">git diff</span><br><span class=\"line\">git log</span><br><span class=\"line\">git log --pretty&#x3D;oneline # 简单显示</span><br><span class=\"line\"></span><br><span class=\"line\"># 注意reset是恢复到上一个版本 即为你上一次commit版本或者pull最近的一次</span><br><span class=\"line\">git checkout --&lt;filename&gt; # 恢复工作区, 可用于恢复修改和恢复勿删文件</span><br><span class=\"line\">git reset HEAD &lt;file&gt; # 恢复暂存区</span><br><span class=\"line\">git reset HEAD^ # 恢复版本库</span><br><span class=\"line\">git reset --hard &lt;hash版本号 即为log中的一串英文字母, 只需要前几个字母即可&gt;</span><br><span class=\"line\">git reflog # 所有版本日志</span><br><span class=\"line\"></span><br><span class=\"line\">git rm 从版本库中删除文件</span><br><span class=\"line\"></span><br><span class=\"line\">git push -u origin master # 带上 -u 以后提交就不需要加入origin master, 类似记忆功能</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;git checkout -b dev&#96; #相当于一下两条命令</span><br><span class=\"line\">&#96;git branch dev&#96; # 分支创建</span><br><span class=\"line\">&#96;git checkout dev&#96; # 分支切换</span><br><span class=\"line\">&#96;git branch -d dev&#96; # 分支删除</span><br><span class=\"line\">&#96;git branch&#96; # 查看当前所有分支</span><br><span class=\"line\">&#96;git merge dev&#96; # 将制定的dev分支合并到当前的分支</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><p>首先把Git的三个区说明一下吧 自己后来慢慢感觉这些理论还是很重要的<br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/Git%E4%B8%89%E5%A4%A7%E5%88%86%E5%8C%BA.png\" alt=\"\"><br>工作区<br>顾名思义, 你当前在IDE直接修改的代码全部都是位于工作区的代码<br>暂存区<br>暂时存取的区域, 你每次使用add提交的文件全部在这个区域中, 这些文件等待你的commit<br>版本库<br>这里存放的是若干个版本, 你每次的commit就是将暂存区的文件作为一个版本提交到版本库, 同时相应的文件被提交后 暂存区的文件被清除</p>\n<h1 id=\"基础的操作\"><a href=\"#基础的操作\" class=\"headerlink\" title=\"基础的操作\"></a>基础的操作</h1><p><strong>你的第一次提交</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add &lt;file&gt;</span><br><span class=\"line\">git commit -m &lt;message&gt;</span><br></pre></td></tr></table></figure>\n<p><code>git init</code><br>在你命令所执行的文件夹生成版本库<br><code>git add &lt;file&gt;</code><br>将指定文件从工作区添加到暂存区<br>如果<code>&lt;file&gt;</code>用 <code>.</code> 代替则为所有相对上一次commit修改过的文件<br><code>git commit -m &lt;message&gt;</code><br>提交暂存区的文件到版本库中成为一个版本 message为这个版本(提交)的描述</p>\n<p><strong>好了你已经成功完成了一次提交, 继续去写代码了</strong><br>好你又写完了一堆代码 这时你想知道你工作区的状态是啥-你修改了哪些文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$git status</span><br><span class=\"line\">-------提示如下-----------</span><br><span class=\"line\">位于分支 master</span><br><span class=\"line\">尚未暂存以备提交的变更：</span><br><span class=\"line\">  （使用 &quot;git add &lt;文件&gt;...&quot; 更新要提交的内容）</span><br><span class=\"line\">  （使用 &quot;git checkout -- &lt;文件&gt;...&quot; 丢弃工作区的改动）</span><br><span class=\"line\"></span><br><span class=\"line\">\t修改：     test.txt</span><br><span class=\"line\"></span><br><span class=\"line\">修改尚未加入提交（使用 &quot;git add&quot; 和&#x2F;或 &quot;git commit -a&quot;）</span><br></pre></td></tr></table></figure>\n<p><code>git status</code>告诉你 你修改了test.txt文件, 但是你想知道你怎么修改了这些文件, 做了什么改动<br>这时候就需要<code>git diff</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$git diff</span><br><span class=\"line\">-------提示如下-----------</span><br><span class=\"line\">diff --git a&#x2F;test.txt b&#x2F;test.txt</span><br><span class=\"line\">index 0858ae8..8c14912 100644</span><br><span class=\"line\">--- a&#x2F;test.txt</span><br><span class=\"line\">+++ b&#x2F;test.txt</span><br><span class=\"line\">@@ -1,3 +1,4 @@</span><br><span class=\"line\"> 111111111111111</span><br><span class=\"line\"> 222222222222222</span><br><span class=\"line\"> 333333333333333</span><br><span class=\"line\">+444444444444444</span><br></pre></td></tr></table></figure>\n<p><strong>现在你知道你进行了什么修改, 又进行了一次提交</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmg@ubuntu:~&#x2F;temp$ git status</span><br><span class=\"line\">位于分支 master</span><br><span class=\"line\">尚未暂存以备提交的变更：</span><br><span class=\"line\">  （使用 &quot;git add &lt;文件&gt;...&quot; 更新要提交的内容）</span><br><span class=\"line\">  （使用 &quot;git checkout -- &lt;文件&gt;...&quot; 丢弃工作区的改动）</span><br><span class=\"line\">\t修改：     test.txt</span><br><span class=\"line\">修改尚未加入提交（使用 &quot;git add&quot; 和&#x2F;或 &quot;git commit -a&quot;）</span><br><span class=\"line\">lsmg@ubuntu:~&#x2F;temp$ git add test.txt </span><br><span class=\"line\">lsmg@ubuntu:~&#x2F;temp$ git status</span><br><span class=\"line\">位于分支 master</span><br><span class=\"line\">要提交的变更：</span><br><span class=\"line\">  （使用 &quot;git reset HEAD &lt;文件&gt;...&quot; 以取消暂存）</span><br><span class=\"line\">\t修改：     test.txt</span><br><span class=\"line\">lsmg@ubuntu:~&#x2F;temp$ git commit -m &quot;ver 0.02&quot;</span><br><span class=\"line\">[master ee4400f] ver 0.02</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\">lsmg@ubuntu:~&#x2F;temp$ git status</span><br><span class=\"line\">位于分支 master</span><br><span class=\"line\">无文件要提交，干净的工作区</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"时光穿梭机\"><a href=\"#时光穿梭机\" class=\"headerlink\" title=\"时光穿梭机\"></a>时光穿梭机</h1><p><strong>在commit之间切换</strong><br>Git还可以在不同commit间切换, 当然你必须知道进行过哪些commit, 你不能自己都记在脑子里吧, 所以也存在相关的命令<code>git log</code>来查看你的commit记录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmg@ubuntu:~&#x2F;temp$ git log</span><br><span class=\"line\">commit ee4400fc2b5694282b866b701f7c21655149e5a2 (HEAD -&gt; master)</span><br><span class=\"line\">Author: ***********</span><br><span class=\"line\">Date:   Sat Dec 7 21:06:42 2019 -0800</span><br><span class=\"line\">    ver 0.02</span><br><span class=\"line\"></span><br><span class=\"line\">commit 603260e28ac0cc8fb8e4243120eb00bca83585d2</span><br><span class=\"line\">Author: ***********</span><br><span class=\"line\">Date:   Sat Dec 7 20:57:58 2019 -0800</span><br><span class=\"line\">    ver 0.01</span><br><span class=\"line\"></span><br><span class=\"line\">lsmg@ubuntu:~&#x2F;temp$ git log --pretty&#x3D;oneline # 简洁显示</span><br><span class=\"line\">ee4400fc2b5694282b866b701f7c21655149e5a2 (HEAD -&gt; master) ver 0.02</span><br><span class=\"line\">603260e28ac0cc8fb8e4243120eb00bca83585d2 ver 0.01</span><br></pre></td></tr></table></figure>\n<p>上面的<code>HEAD</code>代表当前版本, 上一个版本为<code>HEAD^</code>, 上上一个版本为<code>HEAD^^</code>如此类推<br>回到前N个版本<code>HEAD~N</code><br><code>git reset --hard HEAD^</code> 回到上一个版本.<br>这时你当前版本将会丢失, 使用<code>git log</code>也不会查看到原来的版本信息<br>这时使用<code>git reflog</code>来查看你的所有版本日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmg@ubuntu:~&#x2F;temp$ git reset --hard 603260e28ac0cc8fb8e4243120eb00bca83585d2</span><br><span class=\"line\">HEAD 现在位于 603260e ver 0.01</span><br><span class=\"line\">lsmg@ubuntu:~&#x2F;temp$ git log</span><br><span class=\"line\">commit 603260e28ac0cc8fb8e4243120eb00bca83585d2 (HEAD -&gt; master)</span><br><span class=\"line\">Author: rjd67441 &lt;rjd67441@hotmail.com&gt;</span><br><span class=\"line\">Date:   Sat Dec 7 20:57:58 2019 -0800</span><br><span class=\"line\"></span><br><span class=\"line\">    ver 0.01</span><br><span class=\"line\">lsmg@ubuntu:~&#x2F;temp$ git reflog </span><br><span class=\"line\">603260e (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to 603260e28ac0cc8fb8e4243120eb00bca83585d2</span><br><span class=\"line\">ee4400f HEAD@&#123;1&#125;: commit: ver 0.02</span><br><span class=\"line\">603260e (HEAD -&gt; master) HEAD@&#123;2&#125;: commit (initial): ver 0.01</span><br><span class=\"line\">lsmg@ubuntu:~&#x2F;temp$ git reset --hard ee4400f</span><br><span class=\"line\">HEAD 现在位于 ee4400f ver 0.02</span><br></pre></td></tr></table></figure>\n\n<p><strong>撤销修改</strong><br>工作区中的撤销<br><code>git checkout -- &lt;filename&gt;</code><br>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；<br>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。<br>总之，就是让这个文件回到最近一次git commit或git add时的状态。<br>暂存区中的撤销<br><code>git reset HEAD &lt;file&gt;</code><br>版本库的撤销<br><code>git reset HEAD^</code> 乖乖回退一次</p>\n<p><strong>删除文件</strong><br>删除本地文件后<br>确实需要从版本库中删除<br><code>git rm</code>删除然后<code>git commit</code>提交即可<br>误删除需要使用<code>git chechout -- &lt;filename&gt;</code>来恢复</p>\n<h1 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h1><p><code>git checkout -b dev</code>相当于一下两条命令<br><code>git branch dev</code> 分支创建<br><code>git checkout dev</code> 分支切换</p>\n<p><code>git branch -d dev</code> 分支删除</p>\n<p><code>git branch</code> 查看当前所有分支</p>\n<p><code>git merge dev</code> 将制定的dev分支合并到当前的分支</p>\n<p><strong>冲突解决</strong><br><code>git merge dev</code> 将制定的dev分支合并到当前的分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 111111111111111</span><br><span class=\"line\">2 222222222222222</span><br><span class=\"line\">3 333333333333333</span><br><span class=\"line\">4 444444444444444</span><br><span class=\"line\">5 &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD  # 我在master分支下添加了6666666 并提交</span><br><span class=\"line\">6 6666666</span><br><span class=\"line\">7 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\">8 7777777</span><br><span class=\"line\">9 &gt;&gt;&gt;&gt;&gt;&gt;&gt; deb # 我在deb分支下添加了7777777 并提交</span><br></pre></td></tr></table></figure>\n<p>  最后需要我手动修改这个文件为自己需要的内容 然后提交即可</p>\n<p>  <strong>分支管理</strong><br>  通常Git会使用<code>Fast forward</code>模式 这样删除分支后会丢失分支的信息<br>  可以再merge的时候加入<code>--no-ff</code>这样就能解决问题<br>  <code>git merge --no-ff -m &quot;merge with no-ff&quot; dev</code><br>  由于禁用<code>Fast forward</code>后<br>  会生成新的commit所以需要加入<code>-m &quot;merge with no-ff&quot;</code></p>\n<p>  <code>git stash</code> 可以储存当前的工作区 继续其他的工作<br>  <code>git stash list</code> 查看储存的工作区列表<br>  <code>git stash apply stash@{0}</code> 恢复指定的储存<br>  <code>git stash pop</code> 恢复并drop最近的存储</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat test.txt # stash前</span><br><span class=\"line\">111111</span><br><span class=\"line\">$ vim test.txt </span><br><span class=\"line\">$ cat test.txt # 进行了修改</span><br><span class=\"line\">111111</span><br><span class=\"line\">222222</span><br><span class=\"line\">333333</span><br><span class=\"line\">$ git status</span><br><span class=\"line\">位于分支 master</span><br><span class=\"line\">\t修改：     test.txt</span><br><span class=\"line\">$ git stash # stash</span><br><span class=\"line\">保存工作目录和索引状态 WIP on master: 854b710 1</span><br><span class=\"line\">$ cat test.txt </span><br><span class=\"line\">111111</span><br><span class=\"line\">$ git status</span><br><span class=\"line\">位于分支 master</span><br><span class=\"line\">无文件要提交，干净的工作区</span><br><span class=\"line\">$ git stash pop</span><br><span class=\"line\">位于分支 master</span><br><span class=\"line\">\t修改：     test.txt</span><br><span class=\"line\">$ cat test.txt </span><br><span class=\"line\">111111</span><br><span class=\"line\">222222</span><br><span class=\"line\">333333</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实际工作中分支的应用\"><a href=\"#实际工作中分支的应用\" class=\"headerlink\" title=\"实际工作中分支的应用\"></a>实际工作中分支的应用</h1><p><a href=\"https://zhuanlan.zhihu.com/p/38772378\" target=\"_blank\" rel=\"noopener\">主要参考</a><br><strong>主分支</strong></p>\n<ul>\n<li><strong>master</strong>: 这个分支最稳定, 相当于放的可发布版本</li>\n<li><strong>develop</strong>: 开发分支, 平行于master分支, 负责合并各种<code>用于开发子功能</code>的分支</li>\n</ul>\n<p><strong>支持分支</strong>:解决某个问题, 结束后合并回<code>master</code>或<code>develop</code>分支</p>\n<ul>\n<li><strong>feature</strong>功能分支, 用于开发一个个子功能, 来自<code>develop</code>合并到<code>develop</code>去</li>\n<li><strong>release</strong>:发布分支, 用于修改版本号等小修改, 来自<code>develop</code>分支合并到<code>master</code>分支</li>\n<li><strong>hotfixes</strong>:紧急修复bug分支, 从<code>master</code>创建, 合并回<code>develop</code>分支和<code>master</code>分支<br><img src=\"https://pic4.zhimg.com/80/v2-aef704a4c112eaaf5e8637587ee17df3_hd.jpg\" alt=\"\"></li>\n</ul>\n<p><a href=\"https://juejin.im/post/5d82e1f3e51d4561d044cd88#heading-14\" target=\"_blank\" rel=\"noopener\">Git 分支管理规范</a></p>\n<p><a href=\"https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE\" target=\"_blank\" rel=\"noopener\">Git 基础 - 打标签</a></p>\n<p><strong>develop分支完成了操作, 准备发布新的版本</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 从 develop 分支上创建 release 分支:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 命名规则如下 release-事件-版本</span></span><br><span class=\"line\">git checkout –b release-20190919-v1.0.0 develop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修复完release的bug后再次提交修改:</span></span><br><span class=\"line\">git checkout release-20190919-v1.0.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 提交本地修改, 如果没有修改bug 可以跳过</span></span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit –m “提交日志”</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 推送 release 分支</span></span><br><span class=\"line\">git push origin release-20190919-v1.0.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 发布新版本</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 合并 release 分支到 master 分支:</span></span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge --no-ff release-20190919-v1.0.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 合并 release 分支到 develop 分支:</span></span><br><span class=\"line\">git checkout develop</span><br><span class=\"line\">git merge --no-ff release-20190919-v1.0.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在 master 分支上创建标签:</span></span><br><span class=\"line\">git tag tag-20190919-v1.0.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除本地 release 分支:</span></span><br><span class=\"line\">git branch –d release-20190919-v1.0.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除远程 release 分支:</span></span><br><span class=\"line\">git push origin :release-20190919-v1.0.0</span><br></pre></td></tr></table></figure>\n\n<p>新版本完成之后</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 推送master分支</span></span><br><span class=\"line\">git push origin master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 注意上边打的tag需要手动提交 默认push不会提交tag</span></span><br><span class=\"line\">git push origin [tag name]</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 也可以给push增加参数</span></span><br><span class=\"line\">git push origin --tags</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"commit-规范\"><a href=\"#commit-规范\" class=\"headerlink\" title=\"commit 规范\"></a>commit 规范</h1><p><a href=\"https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\" target=\"_blank\" rel=\"noopener\">阮一峰 Commit message 和 Change log 编写指南</a></p>\n<p>Angular 规范.<br>每个commit message 包括三分部<br>Header Body 和 Footer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt; &#x2F;&#x2F; 必须</span><br><span class=\"line\">&#x2F;&#x2F; 空一行</span><br><span class=\"line\">&lt;body&gt; &#x2F;&#x2F; 非必须</span><br><span class=\"line\">&#x2F;&#x2F; 空一行</span><br><span class=\"line\">&lt;footer&gt; &#x2F;&#x2F;非必须</span><br></pre></td></tr></table></figure>\n<p><strong>Header</strong></p>\n<ol>\n<li>type 必需 - 说明commit的类别, 只允许下面七个标识</li>\n</ol>\n<ul>\n<li>feat：新功能（feature）</li>\n<li>fix：修补bug</li>\n<li>docs：文档（documentation）</li>\n<li>style： 格式（不影响代码运行的变动）</li>\n<li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li>\n<li>test：增加测试</li>\n<li>chore：构建过程或辅助工具的变动</li>\n</ul>\n<ol start=\"2\">\n<li><p>scope 非必需 - 用于说明 commit影响的范围<br>比如登录、注册、充值逻辑等等，视项目不同而不同。</p>\n</li>\n<li><p>subject 必需 - commit 目的的简短描述 </p>\n</li>\n</ol>\n<ul>\n<li>不超过50字符 </li>\n<li>第一人称现在时动词开头</li>\n<li>首字母小写</li>\n<li>句尾不加句号</li>\n</ul>\n<p><strong>Body</strong><br>本次commit的详细描述, 可以分成多行</p>\n<p><strong>Footer</strong><br>只用于两种情况 目前用不动 不摘了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前的Git博客 写的终于是自己都看不下去了. 所以打算来重新写一个博客<br>这篇博客主要还是参照的廖雪峰的Git博客<br>自己只做整理方便自己察看</p>\n<p>2020年2月7日18:49:25 再来重新编辑下这些内容<br>2020年2月22日17:29:17 再次更新内容 增加commit规范<br>2020年3月6日11:31:59 再次更新 添加分支管理细则</p>\n<h1 id=\"命令总结\"><a href=\"#命令总结\" class=\"headerlink\" title=\"命令总结\"></a>命令总结</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -t Specifies the type of key to create.  The possible values are</span><br><span class=\"line\">#“dsa”, “ecdsa”, “ed25519”, or “rsa”.</span><br><span class=\"line\"># -C 生成注释 ...所以后面的邮箱就是个注释????</span><br><span class=\"line\">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">git init</span><br><span class=\"line\">git add &lt;file&gt;</span><br><span class=\"line\">git commit -m &lt;message&gt;</span><br><span class=\"line\">git remote add origin  # origin 意为远程库的名字, git的默认叫法</span><br><span class=\"line\"></span><br><span class=\"line\">git status</span><br><span class=\"line\">git diff</span><br><span class=\"line\">git log</span><br><span class=\"line\">git log --pretty&#x3D;oneline # 简单显示</span><br><span class=\"line\"></span><br><span class=\"line\"># 注意reset是恢复到上一个版本 即为你上一次commit版本或者pull最近的一次</span><br><span class=\"line\">git checkout --&lt;filename&gt; # 恢复工作区, 可用于恢复修改和恢复勿删文件</span><br><span class=\"line\">git reset HEAD &lt;file&gt; # 恢复暂存区</span><br><span class=\"line\">git reset HEAD^ # 恢复版本库</span><br><span class=\"line\">git reset --hard &lt;hash版本号 即为log中的一串英文字母, 只需要前几个字母即可&gt;</span><br><span class=\"line\">git reflog # 所有版本日志</span><br><span class=\"line\"></span><br><span class=\"line\">git rm 从版本库中删除文件</span><br><span class=\"line\"></span><br><span class=\"line\">git push -u origin master # 带上 -u 以后提交就不需要加入origin master, 类似记忆功能</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;git checkout -b dev&#96; #相当于一下两条命令</span><br><span class=\"line\">&#96;git branch dev&#96; # 分支创建</span><br><span class=\"line\">&#96;git checkout dev&#96; # 分支切换</span><br><span class=\"line\">&#96;git branch -d dev&#96; # 分支删除</span><br><span class=\"line\">&#96;git branch&#96; # 查看当前所有分支</span><br><span class=\"line\">&#96;git merge dev&#96; # 将制定的dev分支合并到当前的分支</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><p>首先把Git的三个区说明一下吧 自己后来慢慢感觉这些理论还是很重要的<br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/Git%E4%B8%89%E5%A4%A7%E5%88%86%E5%8C%BA.png\" alt=\"\"><br>工作区<br>顾名思义, 你当前在IDE直接修改的代码全部都是位于工作区的代码<br>暂存区<br>暂时存取的区域, 你每次使用add提交的文件全部在这个区域中, 这些文件等待你的commit<br>版本库<br>这里存放的是若干个版本, 你每次的commit就是将暂存区的文件作为一个版本提交到版本库, 同时相应的文件被提交后 暂存区的文件被清除</p>\n<h1 id=\"基础的操作\"><a href=\"#基础的操作\" class=\"headerlink\" title=\"基础的操作\"></a>基础的操作</h1><p><strong>你的第一次提交</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add &lt;file&gt;</span><br><span class=\"line\">git commit -m &lt;message&gt;</span><br></pre></td></tr></table></figure>\n<p><code>git init</code><br>在你命令所执行的文件夹生成版本库<br><code>git add &lt;file&gt;</code><br>将指定文件从工作区添加到暂存区<br>如果<code>&lt;file&gt;</code>用 <code>.</code> 代替则为所有相对上一次commit修改过的文件<br><code>git commit -m &lt;message&gt;</code><br>提交暂存区的文件到版本库中成为一个版本 message为这个版本(提交)的描述</p>\n<p><strong>好了你已经成功完成了一次提交, 继续去写代码了</strong><br>好你又写完了一堆代码 这时你想知道你工作区的状态是啥-你修改了哪些文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$git status</span><br><span class=\"line\">-------提示如下-----------</span><br><span class=\"line\">位于分支 master</span><br><span class=\"line\">尚未暂存以备提交的变更：</span><br><span class=\"line\">  （使用 &quot;git add &lt;文件&gt;...&quot; 更新要提交的内容）</span><br><span class=\"line\">  （使用 &quot;git checkout -- &lt;文件&gt;...&quot; 丢弃工作区的改动）</span><br><span class=\"line\"></span><br><span class=\"line\">\t修改：     test.txt</span><br><span class=\"line\"></span><br><span class=\"line\">修改尚未加入提交（使用 &quot;git add&quot; 和&#x2F;或 &quot;git commit -a&quot;）</span><br></pre></td></tr></table></figure>\n<p><code>git status</code>告诉你 你修改了test.txt文件, 但是你想知道你怎么修改了这些文件, 做了什么改动<br>这时候就需要<code>git diff</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$git diff</span><br><span class=\"line\">-------提示如下-----------</span><br><span class=\"line\">diff --git a&#x2F;test.txt b&#x2F;test.txt</span><br><span class=\"line\">index 0858ae8..8c14912 100644</span><br><span class=\"line\">--- a&#x2F;test.txt</span><br><span class=\"line\">+++ b&#x2F;test.txt</span><br><span class=\"line\">@@ -1,3 +1,4 @@</span><br><span class=\"line\"> 111111111111111</span><br><span class=\"line\"> 222222222222222</span><br><span class=\"line\"> 333333333333333</span><br><span class=\"line\">+444444444444444</span><br></pre></td></tr></table></figure>\n<p><strong>现在你知道你进行了什么修改, 又进行了一次提交</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmg@ubuntu:~&#x2F;temp$ git status</span><br><span class=\"line\">位于分支 master</span><br><span class=\"line\">尚未暂存以备提交的变更：</span><br><span class=\"line\">  （使用 &quot;git add &lt;文件&gt;...&quot; 更新要提交的内容）</span><br><span class=\"line\">  （使用 &quot;git checkout -- &lt;文件&gt;...&quot; 丢弃工作区的改动）</span><br><span class=\"line\">\t修改：     test.txt</span><br><span class=\"line\">修改尚未加入提交（使用 &quot;git add&quot; 和&#x2F;或 &quot;git commit -a&quot;）</span><br><span class=\"line\">lsmg@ubuntu:~&#x2F;temp$ git add test.txt </span><br><span class=\"line\">lsmg@ubuntu:~&#x2F;temp$ git status</span><br><span class=\"line\">位于分支 master</span><br><span class=\"line\">要提交的变更：</span><br><span class=\"line\">  （使用 &quot;git reset HEAD &lt;文件&gt;...&quot; 以取消暂存）</span><br><span class=\"line\">\t修改：     test.txt</span><br><span class=\"line\">lsmg@ubuntu:~&#x2F;temp$ git commit -m &quot;ver 0.02&quot;</span><br><span class=\"line\">[master ee4400f] ver 0.02</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\">lsmg@ubuntu:~&#x2F;temp$ git status</span><br><span class=\"line\">位于分支 master</span><br><span class=\"line\">无文件要提交，干净的工作区</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"时光穿梭机\"><a href=\"#时光穿梭机\" class=\"headerlink\" title=\"时光穿梭机\"></a>时光穿梭机</h1><p><strong>在commit之间切换</strong><br>Git还可以在不同commit间切换, 当然你必须知道进行过哪些commit, 你不能自己都记在脑子里吧, 所以也存在相关的命令<code>git log</code>来查看你的commit记录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmg@ubuntu:~&#x2F;temp$ git log</span><br><span class=\"line\">commit ee4400fc2b5694282b866b701f7c21655149e5a2 (HEAD -&gt; master)</span><br><span class=\"line\">Author: ***********</span><br><span class=\"line\">Date:   Sat Dec 7 21:06:42 2019 -0800</span><br><span class=\"line\">    ver 0.02</span><br><span class=\"line\"></span><br><span class=\"line\">commit 603260e28ac0cc8fb8e4243120eb00bca83585d2</span><br><span class=\"line\">Author: ***********</span><br><span class=\"line\">Date:   Sat Dec 7 20:57:58 2019 -0800</span><br><span class=\"line\">    ver 0.01</span><br><span class=\"line\"></span><br><span class=\"line\">lsmg@ubuntu:~&#x2F;temp$ git log --pretty&#x3D;oneline # 简洁显示</span><br><span class=\"line\">ee4400fc2b5694282b866b701f7c21655149e5a2 (HEAD -&gt; master) ver 0.02</span><br><span class=\"line\">603260e28ac0cc8fb8e4243120eb00bca83585d2 ver 0.01</span><br></pre></td></tr></table></figure>\n<p>上面的<code>HEAD</code>代表当前版本, 上一个版本为<code>HEAD^</code>, 上上一个版本为<code>HEAD^^</code>如此类推<br>回到前N个版本<code>HEAD~N</code><br><code>git reset --hard HEAD^</code> 回到上一个版本.<br>这时你当前版本将会丢失, 使用<code>git log</code>也不会查看到原来的版本信息<br>这时使用<code>git reflog</code>来查看你的所有版本日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmg@ubuntu:~&#x2F;temp$ git reset --hard 603260e28ac0cc8fb8e4243120eb00bca83585d2</span><br><span class=\"line\">HEAD 现在位于 603260e ver 0.01</span><br><span class=\"line\">lsmg@ubuntu:~&#x2F;temp$ git log</span><br><span class=\"line\">commit 603260e28ac0cc8fb8e4243120eb00bca83585d2 (HEAD -&gt; master)</span><br><span class=\"line\">Author: rjd67441 &lt;rjd67441@hotmail.com&gt;</span><br><span class=\"line\">Date:   Sat Dec 7 20:57:58 2019 -0800</span><br><span class=\"line\"></span><br><span class=\"line\">    ver 0.01</span><br><span class=\"line\">lsmg@ubuntu:~&#x2F;temp$ git reflog </span><br><span class=\"line\">603260e (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to 603260e28ac0cc8fb8e4243120eb00bca83585d2</span><br><span class=\"line\">ee4400f HEAD@&#123;1&#125;: commit: ver 0.02</span><br><span class=\"line\">603260e (HEAD -&gt; master) HEAD@&#123;2&#125;: commit (initial): ver 0.01</span><br><span class=\"line\">lsmg@ubuntu:~&#x2F;temp$ git reset --hard ee4400f</span><br><span class=\"line\">HEAD 现在位于 ee4400f ver 0.02</span><br></pre></td></tr></table></figure>\n\n<p><strong>撤销修改</strong><br>工作区中的撤销<br><code>git checkout -- &lt;filename&gt;</code><br>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；<br>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。<br>总之，就是让这个文件回到最近一次git commit或git add时的状态。<br>暂存区中的撤销<br><code>git reset HEAD &lt;file&gt;</code><br>版本库的撤销<br><code>git reset HEAD^</code> 乖乖回退一次</p>\n<p><strong>删除文件</strong><br>删除本地文件后<br>确实需要从版本库中删除<br><code>git rm</code>删除然后<code>git commit</code>提交即可<br>误删除需要使用<code>git chechout -- &lt;filename&gt;</code>来恢复</p>\n<h1 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h1><p><code>git checkout -b dev</code>相当于一下两条命令<br><code>git branch dev</code> 分支创建<br><code>git checkout dev</code> 分支切换</p>\n<p><code>git branch -d dev</code> 分支删除</p>\n<p><code>git branch</code> 查看当前所有分支</p>\n<p><code>git merge dev</code> 将制定的dev分支合并到当前的分支</p>\n<p><strong>冲突解决</strong><br><code>git merge dev</code> 将制定的dev分支合并到当前的分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 111111111111111</span><br><span class=\"line\">2 222222222222222</span><br><span class=\"line\">3 333333333333333</span><br><span class=\"line\">4 444444444444444</span><br><span class=\"line\">5 &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD  # 我在master分支下添加了6666666 并提交</span><br><span class=\"line\">6 6666666</span><br><span class=\"line\">7 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\">8 7777777</span><br><span class=\"line\">9 &gt;&gt;&gt;&gt;&gt;&gt;&gt; deb # 我在deb分支下添加了7777777 并提交</span><br></pre></td></tr></table></figure>\n<p>  最后需要我手动修改这个文件为自己需要的内容 然后提交即可</p>\n<p>  <strong>分支管理</strong><br>  通常Git会使用<code>Fast forward</code>模式 这样删除分支后会丢失分支的信息<br>  可以再merge的时候加入<code>--no-ff</code>这样就能解决问题<br>  <code>git merge --no-ff -m &quot;merge with no-ff&quot; dev</code><br>  由于禁用<code>Fast forward</code>后<br>  会生成新的commit所以需要加入<code>-m &quot;merge with no-ff&quot;</code></p>\n<p>  <code>git stash</code> 可以储存当前的工作区 继续其他的工作<br>  <code>git stash list</code> 查看储存的工作区列表<br>  <code>git stash apply stash@{0}</code> 恢复指定的储存<br>  <code>git stash pop</code> 恢复并drop最近的存储</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat test.txt # stash前</span><br><span class=\"line\">111111</span><br><span class=\"line\">$ vim test.txt </span><br><span class=\"line\">$ cat test.txt # 进行了修改</span><br><span class=\"line\">111111</span><br><span class=\"line\">222222</span><br><span class=\"line\">333333</span><br><span class=\"line\">$ git status</span><br><span class=\"line\">位于分支 master</span><br><span class=\"line\">\t修改：     test.txt</span><br><span class=\"line\">$ git stash # stash</span><br><span class=\"line\">保存工作目录和索引状态 WIP on master: 854b710 1</span><br><span class=\"line\">$ cat test.txt </span><br><span class=\"line\">111111</span><br><span class=\"line\">$ git status</span><br><span class=\"line\">位于分支 master</span><br><span class=\"line\">无文件要提交，干净的工作区</span><br><span class=\"line\">$ git stash pop</span><br><span class=\"line\">位于分支 master</span><br><span class=\"line\">\t修改：     test.txt</span><br><span class=\"line\">$ cat test.txt </span><br><span class=\"line\">111111</span><br><span class=\"line\">222222</span><br><span class=\"line\">333333</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实际工作中分支的应用\"><a href=\"#实际工作中分支的应用\" class=\"headerlink\" title=\"实际工作中分支的应用\"></a>实际工作中分支的应用</h1><p><a href=\"https://zhuanlan.zhihu.com/p/38772378\" target=\"_blank\" rel=\"noopener\">主要参考</a><br><strong>主分支</strong></p>\n<ul>\n<li><strong>master</strong>: 这个分支最稳定, 相当于放的可发布版本</li>\n<li><strong>develop</strong>: 开发分支, 平行于master分支, 负责合并各种<code>用于开发子功能</code>的分支</li>\n</ul>\n<p><strong>支持分支</strong>:解决某个问题, 结束后合并回<code>master</code>或<code>develop</code>分支</p>\n<ul>\n<li><strong>feature</strong>功能分支, 用于开发一个个子功能, 来自<code>develop</code>合并到<code>develop</code>去</li>\n<li><strong>release</strong>:发布分支, 用于修改版本号等小修改, 来自<code>develop</code>分支合并到<code>master</code>分支</li>\n<li><strong>hotfixes</strong>:紧急修复bug分支, 从<code>master</code>创建, 合并回<code>develop</code>分支和<code>master</code>分支<br><img src=\"https://pic4.zhimg.com/80/v2-aef704a4c112eaaf5e8637587ee17df3_hd.jpg\" alt=\"\"></li>\n</ul>\n<p><a href=\"https://juejin.im/post/5d82e1f3e51d4561d044cd88#heading-14\" target=\"_blank\" rel=\"noopener\">Git 分支管理规范</a></p>\n<p><a href=\"https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE\" target=\"_blank\" rel=\"noopener\">Git 基础 - 打标签</a></p>\n<p><strong>develop分支完成了操作, 准备发布新的版本</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 从 develop 分支上创建 release 分支:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 命名规则如下 release-事件-版本</span></span><br><span class=\"line\">git checkout –b release-20190919-v1.0.0 develop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修复完release的bug后再次提交修改:</span></span><br><span class=\"line\">git checkout release-20190919-v1.0.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 提交本地修改, 如果没有修改bug 可以跳过</span></span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit –m “提交日志”</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 推送 release 分支</span></span><br><span class=\"line\">git push origin release-20190919-v1.0.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 发布新版本</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 合并 release 分支到 master 分支:</span></span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge --no-ff release-20190919-v1.0.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 合并 release 分支到 develop 分支:</span></span><br><span class=\"line\">git checkout develop</span><br><span class=\"line\">git merge --no-ff release-20190919-v1.0.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在 master 分支上创建标签:</span></span><br><span class=\"line\">git tag tag-20190919-v1.0.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除本地 release 分支:</span></span><br><span class=\"line\">git branch –d release-20190919-v1.0.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除远程 release 分支:</span></span><br><span class=\"line\">git push origin :release-20190919-v1.0.0</span><br></pre></td></tr></table></figure>\n\n<p>新版本完成之后</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 推送master分支</span></span><br><span class=\"line\">git push origin master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 注意上边打的tag需要手动提交 默认push不会提交tag</span></span><br><span class=\"line\">git push origin [tag name]</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 也可以给push增加参数</span></span><br><span class=\"line\">git push origin --tags</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"commit-规范\"><a href=\"#commit-规范\" class=\"headerlink\" title=\"commit 规范\"></a>commit 规范</h1><p><a href=\"https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\" target=\"_blank\" rel=\"noopener\">阮一峰 Commit message 和 Change log 编写指南</a></p>\n<p>Angular 规范.<br>每个commit message 包括三分部<br>Header Body 和 Footer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt; &#x2F;&#x2F; 必须</span><br><span class=\"line\">&#x2F;&#x2F; 空一行</span><br><span class=\"line\">&lt;body&gt; &#x2F;&#x2F; 非必须</span><br><span class=\"line\">&#x2F;&#x2F; 空一行</span><br><span class=\"line\">&lt;footer&gt; &#x2F;&#x2F;非必须</span><br></pre></td></tr></table></figure>\n<p><strong>Header</strong></p>\n<ol>\n<li>type 必需 - 说明commit的类别, 只允许下面七个标识</li>\n</ol>\n<ul>\n<li>feat：新功能（feature）</li>\n<li>fix：修补bug</li>\n<li>docs：文档（documentation）</li>\n<li>style： 格式（不影响代码运行的变动）</li>\n<li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li>\n<li>test：增加测试</li>\n<li>chore：构建过程或辅助工具的变动</li>\n</ul>\n<ol start=\"2\">\n<li><p>scope 非必需 - 用于说明 commit影响的范围<br>比如登录、注册、充值逻辑等等，视项目不同而不同。</p>\n</li>\n<li><p>subject 必需 - commit 目的的简短描述 </p>\n</li>\n</ol>\n<ul>\n<li>不超过50字符 </li>\n<li>第一人称现在时动词开头</li>\n<li>首字母小写</li>\n<li>句尾不加句号</li>\n</ul>\n<p><strong>Body</strong><br>本次commit的详细描述, 可以分成多行</p>\n<p><strong>Footer</strong><br>只用于两种情况 目前用不动 不摘了</p>\n"},{"title":"Jsoncpp代码阅读","date":"2020-03-01T02:26:55.000Z","img":"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%B0%81%E9%9D%A2/Jsoncpp%E5%B0%81%E9%9D%A2.png","_content":"```c++\nJson::Value root;\nroot[\"action\"] = \"run\";\n```\n首先是 `[]运算符重载` , 统一不同的重载类型\n调用`resolveReference()`进行统一的添加`k`操作\n\n首先会进行 校验参数, 然后将key封装成一个对象CZString (封装过程为将传入指针保存到 CZString对象中的cstr_)\n封装完成后再保存`k v`的`map<CZString, Value>`中查找有无相同的CZString(key)有的话返回Value引用,\n没有则创建新的<CZStrng, 空Value>存入map并返回Value的引用\n\n然后是`=运算符重载`, \"run\"自动转换成Value对象\n转换过程中, 通过`duplicateAndPrefixStringValue()`将\"run\"进行了封装 \n`char* string_; // if allocated_, ptr to { unsigned, char[] }.`\n将长度封装到了一个char指针中, 有点类似自己设计tcp协议...\n\n`=运算符重载`函数将`[]运算符重载`返回的对象引用 中的相关值`swap()`成新的Value对象中的相关值\n\n到这里理解了在Jsoncpp中 一切都是Value 包括<K, V>键值对也是在Value对象中存储\n每一个<k, v>都可以作为一个Value对象, 这样既实现了复杂嵌套Json中 v为对象的情况 妙啊\n\n```c++\n// 每个Value对象中都维护一个union\nunion ValueHolder {\n    LargestInt int_;\n    LargestUInt uint_;\n    double real_;\n    bool bool_;\n    char* string_; // if allocated_, ptr to { unsigned, char[] }.\n\n    // 将所有的存贮着key的CZString保存起来\n\t//  typedef std::map<CZString, Value> ObjectValues; // std::map<CZString, Value> 键值对\n    ObjectValues* map_;\n  } value_;\n```\n\n下面的switch的这个type 会在很多地方被修改掉.\n起初 使用默认构造函数的value type是nullxxx\n然后调用`[]运算符重载`的时候会修改掉 type 为 objectValue\n\n```c++\n// 递归调用 进行处理\nvoid BuiltStyledStreamWriter::writeValue(Value const& value) {\n  switch (value.type()) {\n  case nullValue:\n    pushValue(nullSymbol_);\n    break;\n  case intValue:\n    pushValue(valueToString(value.asLargestInt()));\n    break;\n  case uintValue:\n    pushValue(valueToString(value.asLargestUInt()));\n    break;\n  case realValue:\n    pushValue(valueToString(value.asDouble(), useSpecialFloats_, precision_,\n                            precisionType_));\n    break;\n  case stringValue: {\n    // Is NULL is possible for value.string_? No.\n    char const* str;\n    char const* end;\n    bool ok = value.getString(&str, &end);\n    if (ok)\n      pushValue(valueToQuotedStringN(str, static_cast<unsigned>(end - str),\n                                     emitUTF8_));\n    else\n      pushValue(\"\");\n    break;\n  }\n  case booleanValue:\n    pushValue(valueToString(value.asBool()));\n    break;\n  case arrayValue:\n    writeArrayValue(value);\n    break;\n  case objectValue: {\n    Value::Members members(value.getMemberNames());\n    if (members.empty())\n      pushValue(\"{}\");\n    else {\n      writeWithIndent(\"{\");\n      indent();\n      auto it = members.begin();\n      for (;;) {\n        String const& name = *it;\n        Value const& childValue = value[name];\n        writeCommentBeforeValue(childValue);\n        writeWithIndent(valueToQuotedStringN(\n            name.data(), static_cast<unsigned>(name.length()), emitUTF8_));\n\n        // :\n        *sout_ << colonSymbol_;\n        writeValue(childValue);\n        if (++it == members.end()) {\n          writeCommentAfterValueOnSameLine(childValue);\n          break;\n        }\n        *sout_ << \",\";\n        writeCommentAfterValueOnSameLine(childValue);\n      }\n      unindent();\n      writeWithIndent(\"}\");\n    }\n  } break;\n  }\n}\n```\n\n这次是根据下面的例子分析的\n```c++\nint main() {\n  Json::Value root;\n  Json::Value data;\n  constexpr bool shouldUseOldWay = false;\n\n  // 左侧返回Value的引用\n  root[\"action\"] = \"run\";\n  data[\"number\"] = 1;\n  root[\"data\"] = data;\n\n  if (shouldUseOldWay) {\n    Json::FastWriter writer;\n    const std::string json_file = writer.write(root);\n    std::cout << json_file << std::endl;\n  } else {\n    // 配置文件也是Value对象, 我用我自己.jpg\n    Json::StreamWriterBuilder builder;\n    const std::string json_file = Json::writeString(builder, root);\n    std::cout << json_file << std::endl;\n  }\n  return EXIT_SUCCESS;\n}\n```\n\n算是了解到了这个库的大概工作流程了. 能学到的部分 吃完午饭继续写.\n吃完饭试了试家里的显示器, 家里的显示器还是太老了...... 八年的显示器了 看得我眼花\n还是继续用笔记本吧\n\n1. 首先我很喜欢这种运算符重载的使用形式, 用起来非常的舒服, 需要重载两个运算符 `[]`和`=` 而且\n`=运算符`重载使用的swap交换需要的属性, 感觉不错\n(后来我看了EffectiveC++ 发现这是`=运算符处理自我赋值`太巧了)\n\n2. 针对需要加载配置文件的类 使用了工厂模式\n3. writeValue使用了递归处理.\n4. 统一处理, k v都是Value对象\n5. 将用户的string 拷贝到新的`char*`中 同时在开头增加了长度, 尾部补了0, 没有使用额外的变量去存储`char*`的长度\n不太清楚这样做有什么好处\n6. 常量全部用的 `static constexpr`修饰\n7. 恰当的对象嵌套\n\n\n----\n\n看完了从 Value到Json 接下来看看从Json到Value\n\n```c++\nint main() {\n  const std::string rawJson = R\"({\"Age\": 20, \"Name\": \"colin\"})\";\n  const auto rawJsonLength = static_cast<int>(rawJson.length());\n  constexpr bool shouldUseOldWay = false;\n  JSONCPP_STRING err;\n  Json::Value root;\n\n  if (shouldUseOldWay) {\n    Json::Reader reader;\n    reader.parse(rawJson, root);\n  } else {\n      // 默认构造函数 使用默认的配置\n    Json::CharReaderBuilder builder;\n\n    // 根据builder的配置生成CharReader类\n    const std::unique_ptr<Json::CharReader> reader(builder.newCharReader());\n    if (!reader->parse(rawJson.c_str(), rawJson.c_str() + rawJsonLength, &root,\n                       &err)) {\n      std::cout << \"error\" << std::endl;\n      return EXIT_FAILURE;\n    }\n  }\n  const std::string name = root[\"Name\"].asString();\n  const int age = root[\"Age\"].asInt();\n\n  std::cout << name << std::endl;\n  std::cout << age << std::endl;\n  return EXIT_SUCCESS;\n}\n```\n\n解析的关键在于`parse()`函数 传入字符串的首尾指针, 和一个Value引用\n进入函数后将传入的变量保存到了自己的成员变量中.\n\n慢慢发现 这个库将很多的默认类型 起了别名 可能是为了统一类型 类似UE4也是自己搞了一套\n\n主要是`OurReader`这个负责解析\n```c++\n// 使用了大量的using\nusing Char = char;\nusing Location = const Char*;\n```\n\n解析逻辑就是`parse()`调用`readValue()`\n`readValue()`负责 获取下一次数据类型type_ ->switch(type_) 根据分支决定是否递归再次调用`readValue`\n总算把逻辑看懂了, 代码依然认为很赞\n`readToken()`这个函数贯穿整个解析, 通过这个函数获取到下一次的数据是什么类型, 同时移动相关的状态指针\n`readToken()` 内部大量调用下面的函数 修改当前指针 同时返回字符, 然后switch这个字符判断下一次的数据类型\n比如遇到`{`就是一个对象的开始设置好type并返回 遇到`}`就是对象的结束.....\n```c++\n// 获取current_指向的字符 并自增\nOurReader::Char OurReader::getNextChar()\n{\n  if (current_ == end_)\n    return 0;\n  return *current_++;\n}\n```\n\n一般第一次调用type_会被设置为对象类型, 然后`readValue()`进入`case 对象分支`\n`case对象分支中`\n先进行了一次`readToken()`获取到了k的类型, 然后根据k类型分支 将k的值转换成对应的value\n之后又是一次`readToken()`判断是否存在`:`不存在就是错误\n在之后使用这个方法, 保存`k`的vallue获取`v`的value再次调用`readValue()`填充值 返回后继续走\n```c++\n// 这里保存了name 这个k 将name的 v放入了顶层\nValue& value = currentValue()[name];\nnodes_.push(&value);\nbool ok = readValue();\n```\n读取完`v`的value之后必定是`,`或者`}`又是一次判断 成功判断后一个`k v`就获取完毕了\n\n` using Nodes = std::stack<Value*>`\n后面解析的代码更加的妙不可言, 使用`Nodes nodes_{}`存储当前的value 实现函数之间的操作\n\n代码合理的组织\n比如`case 对象分支`必定是一个`k`一个`:`一个`v` 然后一个分隔符`,`或`}` 这些放入了一个函数\n\n然后获取到`k`之后使用`Value& value = currentValue()[name]`获取`v`\n\n最后依然是递归的使用","source":"_posts/CPP-源码学习-Jsoncpp代码阅读.md","raw":"---\ntitle: Jsoncpp代码阅读\ndate: 2020-03-01 10:26:55\ntags:\ncategories:\n - CPP\n - 源码学习\n \nimg: https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%B0%81%E9%9D%A2/Jsoncpp%E5%B0%81%E9%9D%A2.png\n---\n```c++\nJson::Value root;\nroot[\"action\"] = \"run\";\n```\n首先是 `[]运算符重载` , 统一不同的重载类型\n调用`resolveReference()`进行统一的添加`k`操作\n\n首先会进行 校验参数, 然后将key封装成一个对象CZString (封装过程为将传入指针保存到 CZString对象中的cstr_)\n封装完成后再保存`k v`的`map<CZString, Value>`中查找有无相同的CZString(key)有的话返回Value引用,\n没有则创建新的<CZStrng, 空Value>存入map并返回Value的引用\n\n然后是`=运算符重载`, \"run\"自动转换成Value对象\n转换过程中, 通过`duplicateAndPrefixStringValue()`将\"run\"进行了封装 \n`char* string_; // if allocated_, ptr to { unsigned, char[] }.`\n将长度封装到了一个char指针中, 有点类似自己设计tcp协议...\n\n`=运算符重载`函数将`[]运算符重载`返回的对象引用 中的相关值`swap()`成新的Value对象中的相关值\n\n到这里理解了在Jsoncpp中 一切都是Value 包括<K, V>键值对也是在Value对象中存储\n每一个<k, v>都可以作为一个Value对象, 这样既实现了复杂嵌套Json中 v为对象的情况 妙啊\n\n```c++\n// 每个Value对象中都维护一个union\nunion ValueHolder {\n    LargestInt int_;\n    LargestUInt uint_;\n    double real_;\n    bool bool_;\n    char* string_; // if allocated_, ptr to { unsigned, char[] }.\n\n    // 将所有的存贮着key的CZString保存起来\n\t//  typedef std::map<CZString, Value> ObjectValues; // std::map<CZString, Value> 键值对\n    ObjectValues* map_;\n  } value_;\n```\n\n下面的switch的这个type 会在很多地方被修改掉.\n起初 使用默认构造函数的value type是nullxxx\n然后调用`[]运算符重载`的时候会修改掉 type 为 objectValue\n\n```c++\n// 递归调用 进行处理\nvoid BuiltStyledStreamWriter::writeValue(Value const& value) {\n  switch (value.type()) {\n  case nullValue:\n    pushValue(nullSymbol_);\n    break;\n  case intValue:\n    pushValue(valueToString(value.asLargestInt()));\n    break;\n  case uintValue:\n    pushValue(valueToString(value.asLargestUInt()));\n    break;\n  case realValue:\n    pushValue(valueToString(value.asDouble(), useSpecialFloats_, precision_,\n                            precisionType_));\n    break;\n  case stringValue: {\n    // Is NULL is possible for value.string_? No.\n    char const* str;\n    char const* end;\n    bool ok = value.getString(&str, &end);\n    if (ok)\n      pushValue(valueToQuotedStringN(str, static_cast<unsigned>(end - str),\n                                     emitUTF8_));\n    else\n      pushValue(\"\");\n    break;\n  }\n  case booleanValue:\n    pushValue(valueToString(value.asBool()));\n    break;\n  case arrayValue:\n    writeArrayValue(value);\n    break;\n  case objectValue: {\n    Value::Members members(value.getMemberNames());\n    if (members.empty())\n      pushValue(\"{}\");\n    else {\n      writeWithIndent(\"{\");\n      indent();\n      auto it = members.begin();\n      for (;;) {\n        String const& name = *it;\n        Value const& childValue = value[name];\n        writeCommentBeforeValue(childValue);\n        writeWithIndent(valueToQuotedStringN(\n            name.data(), static_cast<unsigned>(name.length()), emitUTF8_));\n\n        // :\n        *sout_ << colonSymbol_;\n        writeValue(childValue);\n        if (++it == members.end()) {\n          writeCommentAfterValueOnSameLine(childValue);\n          break;\n        }\n        *sout_ << \",\";\n        writeCommentAfterValueOnSameLine(childValue);\n      }\n      unindent();\n      writeWithIndent(\"}\");\n    }\n  } break;\n  }\n}\n```\n\n这次是根据下面的例子分析的\n```c++\nint main() {\n  Json::Value root;\n  Json::Value data;\n  constexpr bool shouldUseOldWay = false;\n\n  // 左侧返回Value的引用\n  root[\"action\"] = \"run\";\n  data[\"number\"] = 1;\n  root[\"data\"] = data;\n\n  if (shouldUseOldWay) {\n    Json::FastWriter writer;\n    const std::string json_file = writer.write(root);\n    std::cout << json_file << std::endl;\n  } else {\n    // 配置文件也是Value对象, 我用我自己.jpg\n    Json::StreamWriterBuilder builder;\n    const std::string json_file = Json::writeString(builder, root);\n    std::cout << json_file << std::endl;\n  }\n  return EXIT_SUCCESS;\n}\n```\n\n算是了解到了这个库的大概工作流程了. 能学到的部分 吃完午饭继续写.\n吃完饭试了试家里的显示器, 家里的显示器还是太老了...... 八年的显示器了 看得我眼花\n还是继续用笔记本吧\n\n1. 首先我很喜欢这种运算符重载的使用形式, 用起来非常的舒服, 需要重载两个运算符 `[]`和`=` 而且\n`=运算符`重载使用的swap交换需要的属性, 感觉不错\n(后来我看了EffectiveC++ 发现这是`=运算符处理自我赋值`太巧了)\n\n2. 针对需要加载配置文件的类 使用了工厂模式\n3. writeValue使用了递归处理.\n4. 统一处理, k v都是Value对象\n5. 将用户的string 拷贝到新的`char*`中 同时在开头增加了长度, 尾部补了0, 没有使用额外的变量去存储`char*`的长度\n不太清楚这样做有什么好处\n6. 常量全部用的 `static constexpr`修饰\n7. 恰当的对象嵌套\n\n\n----\n\n看完了从 Value到Json 接下来看看从Json到Value\n\n```c++\nint main() {\n  const std::string rawJson = R\"({\"Age\": 20, \"Name\": \"colin\"})\";\n  const auto rawJsonLength = static_cast<int>(rawJson.length());\n  constexpr bool shouldUseOldWay = false;\n  JSONCPP_STRING err;\n  Json::Value root;\n\n  if (shouldUseOldWay) {\n    Json::Reader reader;\n    reader.parse(rawJson, root);\n  } else {\n      // 默认构造函数 使用默认的配置\n    Json::CharReaderBuilder builder;\n\n    // 根据builder的配置生成CharReader类\n    const std::unique_ptr<Json::CharReader> reader(builder.newCharReader());\n    if (!reader->parse(rawJson.c_str(), rawJson.c_str() + rawJsonLength, &root,\n                       &err)) {\n      std::cout << \"error\" << std::endl;\n      return EXIT_FAILURE;\n    }\n  }\n  const std::string name = root[\"Name\"].asString();\n  const int age = root[\"Age\"].asInt();\n\n  std::cout << name << std::endl;\n  std::cout << age << std::endl;\n  return EXIT_SUCCESS;\n}\n```\n\n解析的关键在于`parse()`函数 传入字符串的首尾指针, 和一个Value引用\n进入函数后将传入的变量保存到了自己的成员变量中.\n\n慢慢发现 这个库将很多的默认类型 起了别名 可能是为了统一类型 类似UE4也是自己搞了一套\n\n主要是`OurReader`这个负责解析\n```c++\n// 使用了大量的using\nusing Char = char;\nusing Location = const Char*;\n```\n\n解析逻辑就是`parse()`调用`readValue()`\n`readValue()`负责 获取下一次数据类型type_ ->switch(type_) 根据分支决定是否递归再次调用`readValue`\n总算把逻辑看懂了, 代码依然认为很赞\n`readToken()`这个函数贯穿整个解析, 通过这个函数获取到下一次的数据是什么类型, 同时移动相关的状态指针\n`readToken()` 内部大量调用下面的函数 修改当前指针 同时返回字符, 然后switch这个字符判断下一次的数据类型\n比如遇到`{`就是一个对象的开始设置好type并返回 遇到`}`就是对象的结束.....\n```c++\n// 获取current_指向的字符 并自增\nOurReader::Char OurReader::getNextChar()\n{\n  if (current_ == end_)\n    return 0;\n  return *current_++;\n}\n```\n\n一般第一次调用type_会被设置为对象类型, 然后`readValue()`进入`case 对象分支`\n`case对象分支中`\n先进行了一次`readToken()`获取到了k的类型, 然后根据k类型分支 将k的值转换成对应的value\n之后又是一次`readToken()`判断是否存在`:`不存在就是错误\n在之后使用这个方法, 保存`k`的vallue获取`v`的value再次调用`readValue()`填充值 返回后继续走\n```c++\n// 这里保存了name 这个k 将name的 v放入了顶层\nValue& value = currentValue()[name];\nnodes_.push(&value);\nbool ok = readValue();\n```\n读取完`v`的value之后必定是`,`或者`}`又是一次判断 成功判断后一个`k v`就获取完毕了\n\n` using Nodes = std::stack<Value*>`\n后面解析的代码更加的妙不可言, 使用`Nodes nodes_{}`存储当前的value 实现函数之间的操作\n\n代码合理的组织\n比如`case 对象分支`必定是一个`k`一个`:`一个`v` 然后一个分隔符`,`或`}` 这些放入了一个函数\n\n然后获取到`k`之后使用`Value& value = currentValue()[name]`获取`v`\n\n最后依然是递归的使用","slug":"CPP-源码学习-Jsoncpp代码阅读","published":1,"updated":"2020-03-04T07:52:44.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucyq0014souoavklgya3","content":"<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Json::Value root;</span><br><span class=\"line\">root[<span class=\"string\">\"action\"</span>] = <span class=\"string\">\"run\"</span>;</span><br></pre></td></tr></table></figure>\n<p>首先是 <code>[]运算符重载</code> , 统一不同的重载类型<br>调用<code>resolveReference()</code>进行统一的添加<code>k</code>操作</p>\n<p>首先会进行 校验参数, 然后将key封装成一个对象CZString (封装过程为将传入指针保存到 CZString对象中的cstr_)<br>封装完成后再保存<code>k v</code>的<code>map&lt;CZString, Value&gt;</code>中查找有无相同的CZString(key)有的话返回Value引用,<br>没有则创建新的&lt;CZStrng, 空Value&gt;存入map并返回Value的引用</p>\n<p>然后是<code>=运算符重载</code>, “run”自动转换成Value对象<br>转换过程中, 通过<code>duplicateAndPrefixStringValue()</code>将”run”进行了封装<br><code>char* string_; // if allocated_, ptr to { unsigned, char[] }.</code><br>将长度封装到了一个char指针中, 有点类似自己设计tcp协议…</p>\n<p><code>=运算符重载</code>函数将<code>[]运算符重载</code>返回的对象引用 中的相关值<code>swap()</code>成新的Value对象中的相关值</p>\n<p>到这里理解了在Jsoncpp中 一切都是Value 包括&lt;K, V&gt;键值对也是在Value对象中存储<br>每一个&lt;k, v&gt;都可以作为一个Value对象, 这样既实现了复杂嵌套Json中 v为对象的情况 妙啊</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 每个Value对象中都维护一个union</span></span><br><span class=\"line\"><span class=\"keyword\">union</span> ValueHolder &#123;</span><br><span class=\"line\">    LargestInt int_;</span><br><span class=\"line\">    LargestUInt uint_;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> real_;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> bool_;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* string_; <span class=\"comment\">// if allocated_, ptr to &#123; unsigned, char[] &#125;.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将所有的存贮着key的CZString保存起来</span></span><br><span class=\"line\">\t<span class=\"comment\">//  typedef std::map&lt;CZString, Value&gt; ObjectValues; // std::map&lt;CZString, Value&gt; 键值对</span></span><br><span class=\"line\">    ObjectValues* map_;</span><br><span class=\"line\">  &#125; value_;</span><br></pre></td></tr></table></figure>\n\n<p>下面的switch的这个type 会在很多地方被修改掉.<br>起初 使用默认构造函数的value type是nullxxx<br>然后调用<code>[]运算符重载</code>的时候会修改掉 type 为 objectValue</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归调用 进行处理</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BuiltStyledStreamWriter::writeValue</span><span class=\"params\">(Value <span class=\"keyword\">const</span>&amp; value)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (value.type()) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> nullValue:</span><br><span class=\"line\">    pushValue(nullSymbol_);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> intValue:</span><br><span class=\"line\">    pushValue(valueToString(value.asLargestInt()));</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> uintValue:</span><br><span class=\"line\">    pushValue(valueToString(value.asLargestUInt()));</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> realValue:</span><br><span class=\"line\">    pushValue(valueToString(value.asDouble(), useSpecialFloats_, precision_,</span><br><span class=\"line\">                            precisionType_));</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> stringValue: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Is NULL is possible for value.string_? No.</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> <span class=\"keyword\">const</span>* str;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> <span class=\"keyword\">const</span>* <span class=\"built_in\">end</span>;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> ok = value.getString(&amp;str, &amp;<span class=\"built_in\">end</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ok)</span><br><span class=\"line\">      pushValue(valueToQuotedStringN(str, <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">unsigned</span>&gt;(<span class=\"built_in\">end</span> - str),</span><br><span class=\"line\">                                     emitUTF8_));</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      pushValue(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> booleanValue:</span><br><span class=\"line\">    pushValue(valueToString(value.asBool()));</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> arrayValue:</span><br><span class=\"line\">    writeArrayValue(value);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> objectValue: &#123;</span><br><span class=\"line\">    <span class=\"function\">Value::Members <span class=\"title\">members</span><span class=\"params\">(value.getMemberNames())</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (members.empty())</span><br><span class=\"line\">      pushValue(<span class=\"string\">\"&#123;&#125;\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      writeWithIndent(<span class=\"string\">\"&#123;\"</span>);</span><br><span class=\"line\">      indent();</span><br><span class=\"line\">      <span class=\"keyword\">auto</span> it = members.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">String</span> <span class=\"keyword\">const</span>&amp; name = *it;</span><br><span class=\"line\">        Value <span class=\"keyword\">const</span>&amp; childValue = value[name];</span><br><span class=\"line\">        writeCommentBeforeValue(childValue);</span><br><span class=\"line\">        writeWithIndent(valueToQuotedStringN(</span><br><span class=\"line\">            name.data(), <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">unsigned</span>&gt;(name.length()), emitUTF8_));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// :</span></span><br><span class=\"line\">        *sout_ &lt;&lt; colonSymbol_;</span><br><span class=\"line\">        writeValue(childValue);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (++it == members.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">          writeCommentAfterValueOnSameLine(childValue);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        *sout_ &lt;&lt; <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">        writeCommentAfterValueOnSameLine(childValue);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      unindent();</span><br><span class=\"line\">      writeWithIndent(<span class=\"string\">\"&#125;\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这次是根据下面的例子分析的</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  Json::Value root;</span><br><span class=\"line\">  Json::Value data;</span><br><span class=\"line\">  <span class=\"keyword\">constexpr</span> <span class=\"keyword\">bool</span> shouldUseOldWay = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 左侧返回Value的引用</span></span><br><span class=\"line\">  root[<span class=\"string\">\"action\"</span>] = <span class=\"string\">\"run\"</span>;</span><br><span class=\"line\">  data[<span class=\"string\">\"number\"</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  root[<span class=\"string\">\"data\"</span>] = data;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (shouldUseOldWay) &#123;</span><br><span class=\"line\">    Json::FastWriter writer;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> json_file = writer.<span class=\"built_in\">write</span>(root);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; json_file &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 配置文件也是Value对象, 我用我自己.jpg</span></span><br><span class=\"line\">    Json::StreamWriterBuilder builder;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> json_file = Json::writeString(builder, root);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; json_file &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> EXIT_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>算是了解到了这个库的大概工作流程了. 能学到的部分 吃完午饭继续写.<br>吃完饭试了试家里的显示器, 家里的显示器还是太老了…… 八年的显示器了 看得我眼花<br>还是继续用笔记本吧</p>\n<ol>\n<li><p>首先我很喜欢这种运算符重载的使用形式, 用起来非常的舒服, 需要重载两个运算符 <code>[]</code>和<code>=</code> 而且<br><code>=运算符</code>重载使用的swap交换需要的属性, 感觉不错<br>(后来我看了EffectiveC++ 发现这是<code>=运算符处理自我赋值</code>太巧了)</p>\n</li>\n<li><p>针对需要加载配置文件的类 使用了工厂模式</p>\n</li>\n<li><p>writeValue使用了递归处理.</p>\n</li>\n<li><p>统一处理, k v都是Value对象</p>\n</li>\n<li><p>将用户的string 拷贝到新的<code>char*</code>中 同时在开头增加了长度, 尾部补了0, 没有使用额外的变量去存储<code>char*</code>的长度<br>不太清楚这样做有什么好处</p>\n</li>\n<li><p>常量全部用的 <code>static constexpr</code>修饰</p>\n</li>\n<li><p>恰当的对象嵌套</p>\n</li>\n</ol>\n<hr>\n<p>看完了从 Value到Json 接下来看看从Json到Value</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> rawJson = <span class=\"string\">R\"(&#123;\"Age\": 20, \"Name\": \"colin\"&#125;)\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> rawJsonLength = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(rawJson.length());</span><br><span class=\"line\">  <span class=\"keyword\">constexpr</span> <span class=\"keyword\">bool</span> shouldUseOldWay = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  JSONCPP_STRING err;</span><br><span class=\"line\">  Json::Value root;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (shouldUseOldWay) &#123;</span><br><span class=\"line\">    Json::Reader reader;</span><br><span class=\"line\">    reader.parse(rawJson, root);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 默认构造函数 使用默认的配置</span></span><br><span class=\"line\">    Json::CharReaderBuilder builder;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据builder的配置生成CharReader类</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;Json::CharReader&gt; <span class=\"title\">reader</span><span class=\"params\">(builder.newCharReader())</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!reader-&gt;parse(rawJson.c_str(), rawJson.c_str() + rawJsonLength, &amp;root,</span><br><span class=\"line\">                       &amp;err)) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"error\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> EXIT_FAILURE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> name = root[<span class=\"string\">\"Name\"</span>].asString();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> age = root[<span class=\"string\">\"Age\"</span>].asInt();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; name &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; age &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> EXIT_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解析的关键在于<code>parse()</code>函数 传入字符串的首尾指针, 和一个Value引用<br>进入函数后将传入的变量保存到了自己的成员变量中.</p>\n<p>慢慢发现 这个库将很多的默认类型 起了别名 可能是为了统一类型 类似UE4也是自己搞了一套</p>\n<p>主要是<code>OurReader</code>这个负责解析</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用了大量的using</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> Char = <span class=\"keyword\">char</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Location = <span class=\"keyword\">const</span> Char*;</span><br></pre></td></tr></table></figure>\n\n<p>解析逻辑就是<code>parse()</code>调用<code>readValue()</code><br><code>readValue()</code>负责 获取下一次数据类型type_ -&gt;switch(type_) 根据分支决定是否递归再次调用<code>readValue</code><br>总算把逻辑看懂了, 代码依然认为很赞<br><code>readToken()</code>这个函数贯穿整个解析, 通过这个函数获取到下一次的数据是什么类型, 同时移动相关的状态指针<br><code>readToken()</code> 内部大量调用下面的函数 修改当前指针 同时返回字符, 然后switch这个字符判断下一次的数据类型<br>比如遇到<code>{</code>就是一个对象的开始设置好type并返回 遇到<code>}</code>就是对象的结束…..</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取current_指向的字符 并自增</span></span><br><span class=\"line\"><span class=\"function\">OurReader::Char <span class=\"title\">OurReader::getNextChar</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (current_ == end_)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> *current_++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一般第一次调用type_会被设置为对象类型, 然后<code>readValue()</code>进入<code>case 对象分支</code><br><code>case对象分支中</code><br>先进行了一次<code>readToken()</code>获取到了k的类型, 然后根据k类型分支 将k的值转换成对应的value<br>之后又是一次<code>readToken()</code>判断是否存在<code>:</code>不存在就是错误<br>在之后使用这个方法, 保存<code>k</code>的vallue获取<code>v</code>的value再次调用<code>readValue()</code>填充值 返回后继续走</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里保存了name 这个k 将name的 v放入了顶层</span></span><br><span class=\"line\">Value&amp; value = currentValue()[name];</span><br><span class=\"line\">nodes_.push(&amp;value);</span><br><span class=\"line\"><span class=\"keyword\">bool</span> ok = readValue();</span><br></pre></td></tr></table></figure>\n<p>读取完<code>v</code>的value之后必定是<code>,</code>或者<code>}</code>又是一次判断 成功判断后一个<code>k v</code>就获取完毕了</p>\n<p><code>using Nodes = std::stack&lt;Value*&gt;</code><br>后面解析的代码更加的妙不可言, 使用<code>Nodes nodes_{}</code>存储当前的value 实现函数之间的操作</p>\n<p>代码合理的组织<br>比如<code>case 对象分支</code>必定是一个<code>k</code>一个<code>:</code>一个<code>v</code> 然后一个分隔符<code>,</code>或<code>}</code> 这些放入了一个函数</p>\n<p>然后获取到<code>k</code>之后使用<code>Value&amp; value = currentValue()[name]</code>获取<code>v</code></p>\n<p>最后依然是递归的使用</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Json::Value root;</span><br><span class=\"line\">root[<span class=\"string\">\"action\"</span>] = <span class=\"string\">\"run\"</span>;</span><br></pre></td></tr></table></figure>\n<p>首先是 <code>[]运算符重载</code> , 统一不同的重载类型<br>调用<code>resolveReference()</code>进行统一的添加<code>k</code>操作</p>\n<p>首先会进行 校验参数, 然后将key封装成一个对象CZString (封装过程为将传入指针保存到 CZString对象中的cstr_)<br>封装完成后再保存<code>k v</code>的<code>map&lt;CZString, Value&gt;</code>中查找有无相同的CZString(key)有的话返回Value引用,<br>没有则创建新的&lt;CZStrng, 空Value&gt;存入map并返回Value的引用</p>\n<p>然后是<code>=运算符重载</code>, “run”自动转换成Value对象<br>转换过程中, 通过<code>duplicateAndPrefixStringValue()</code>将”run”进行了封装<br><code>char* string_; // if allocated_, ptr to { unsigned, char[] }.</code><br>将长度封装到了一个char指针中, 有点类似自己设计tcp协议…</p>\n<p><code>=运算符重载</code>函数将<code>[]运算符重载</code>返回的对象引用 中的相关值<code>swap()</code>成新的Value对象中的相关值</p>\n<p>到这里理解了在Jsoncpp中 一切都是Value 包括&lt;K, V&gt;键值对也是在Value对象中存储<br>每一个&lt;k, v&gt;都可以作为一个Value对象, 这样既实现了复杂嵌套Json中 v为对象的情况 妙啊</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 每个Value对象中都维护一个union</span></span><br><span class=\"line\"><span class=\"keyword\">union</span> ValueHolder &#123;</span><br><span class=\"line\">    LargestInt int_;</span><br><span class=\"line\">    LargestUInt uint_;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> real_;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> bool_;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* string_; <span class=\"comment\">// if allocated_, ptr to &#123; unsigned, char[] &#125;.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将所有的存贮着key的CZString保存起来</span></span><br><span class=\"line\">\t<span class=\"comment\">//  typedef std::map&lt;CZString, Value&gt; ObjectValues; // std::map&lt;CZString, Value&gt; 键值对</span></span><br><span class=\"line\">    ObjectValues* map_;</span><br><span class=\"line\">  &#125; value_;</span><br></pre></td></tr></table></figure>\n\n<p>下面的switch的这个type 会在很多地方被修改掉.<br>起初 使用默认构造函数的value type是nullxxx<br>然后调用<code>[]运算符重载</code>的时候会修改掉 type 为 objectValue</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归调用 进行处理</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BuiltStyledStreamWriter::writeValue</span><span class=\"params\">(Value <span class=\"keyword\">const</span>&amp; value)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (value.type()) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> nullValue:</span><br><span class=\"line\">    pushValue(nullSymbol_);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> intValue:</span><br><span class=\"line\">    pushValue(valueToString(value.asLargestInt()));</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> uintValue:</span><br><span class=\"line\">    pushValue(valueToString(value.asLargestUInt()));</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> realValue:</span><br><span class=\"line\">    pushValue(valueToString(value.asDouble(), useSpecialFloats_, precision_,</span><br><span class=\"line\">                            precisionType_));</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> stringValue: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Is NULL is possible for value.string_? No.</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> <span class=\"keyword\">const</span>* str;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> <span class=\"keyword\">const</span>* <span class=\"built_in\">end</span>;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> ok = value.getString(&amp;str, &amp;<span class=\"built_in\">end</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ok)</span><br><span class=\"line\">      pushValue(valueToQuotedStringN(str, <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">unsigned</span>&gt;(<span class=\"built_in\">end</span> - str),</span><br><span class=\"line\">                                     emitUTF8_));</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      pushValue(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> booleanValue:</span><br><span class=\"line\">    pushValue(valueToString(value.asBool()));</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> arrayValue:</span><br><span class=\"line\">    writeArrayValue(value);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> objectValue: &#123;</span><br><span class=\"line\">    <span class=\"function\">Value::Members <span class=\"title\">members</span><span class=\"params\">(value.getMemberNames())</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (members.empty())</span><br><span class=\"line\">      pushValue(<span class=\"string\">\"&#123;&#125;\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      writeWithIndent(<span class=\"string\">\"&#123;\"</span>);</span><br><span class=\"line\">      indent();</span><br><span class=\"line\">      <span class=\"keyword\">auto</span> it = members.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">String</span> <span class=\"keyword\">const</span>&amp; name = *it;</span><br><span class=\"line\">        Value <span class=\"keyword\">const</span>&amp; childValue = value[name];</span><br><span class=\"line\">        writeCommentBeforeValue(childValue);</span><br><span class=\"line\">        writeWithIndent(valueToQuotedStringN(</span><br><span class=\"line\">            name.data(), <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">unsigned</span>&gt;(name.length()), emitUTF8_));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// :</span></span><br><span class=\"line\">        *sout_ &lt;&lt; colonSymbol_;</span><br><span class=\"line\">        writeValue(childValue);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (++it == members.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">          writeCommentAfterValueOnSameLine(childValue);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        *sout_ &lt;&lt; <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">        writeCommentAfterValueOnSameLine(childValue);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      unindent();</span><br><span class=\"line\">      writeWithIndent(<span class=\"string\">\"&#125;\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这次是根据下面的例子分析的</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  Json::Value root;</span><br><span class=\"line\">  Json::Value data;</span><br><span class=\"line\">  <span class=\"keyword\">constexpr</span> <span class=\"keyword\">bool</span> shouldUseOldWay = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 左侧返回Value的引用</span></span><br><span class=\"line\">  root[<span class=\"string\">\"action\"</span>] = <span class=\"string\">\"run\"</span>;</span><br><span class=\"line\">  data[<span class=\"string\">\"number\"</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  root[<span class=\"string\">\"data\"</span>] = data;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (shouldUseOldWay) &#123;</span><br><span class=\"line\">    Json::FastWriter writer;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> json_file = writer.<span class=\"built_in\">write</span>(root);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; json_file &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 配置文件也是Value对象, 我用我自己.jpg</span></span><br><span class=\"line\">    Json::StreamWriterBuilder builder;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> json_file = Json::writeString(builder, root);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; json_file &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> EXIT_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>算是了解到了这个库的大概工作流程了. 能学到的部分 吃完午饭继续写.<br>吃完饭试了试家里的显示器, 家里的显示器还是太老了…… 八年的显示器了 看得我眼花<br>还是继续用笔记本吧</p>\n<ol>\n<li><p>首先我很喜欢这种运算符重载的使用形式, 用起来非常的舒服, 需要重载两个运算符 <code>[]</code>和<code>=</code> 而且<br><code>=运算符</code>重载使用的swap交换需要的属性, 感觉不错<br>(后来我看了EffectiveC++ 发现这是<code>=运算符处理自我赋值</code>太巧了)</p>\n</li>\n<li><p>针对需要加载配置文件的类 使用了工厂模式</p>\n</li>\n<li><p>writeValue使用了递归处理.</p>\n</li>\n<li><p>统一处理, k v都是Value对象</p>\n</li>\n<li><p>将用户的string 拷贝到新的<code>char*</code>中 同时在开头增加了长度, 尾部补了0, 没有使用额外的变量去存储<code>char*</code>的长度<br>不太清楚这样做有什么好处</p>\n</li>\n<li><p>常量全部用的 <code>static constexpr</code>修饰</p>\n</li>\n<li><p>恰当的对象嵌套</p>\n</li>\n</ol>\n<hr>\n<p>看完了从 Value到Json 接下来看看从Json到Value</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> rawJson = <span class=\"string\">R\"(&#123;\"Age\": 20, \"Name\": \"colin\"&#125;)\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> rawJsonLength = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(rawJson.length());</span><br><span class=\"line\">  <span class=\"keyword\">constexpr</span> <span class=\"keyword\">bool</span> shouldUseOldWay = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  JSONCPP_STRING err;</span><br><span class=\"line\">  Json::Value root;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (shouldUseOldWay) &#123;</span><br><span class=\"line\">    Json::Reader reader;</span><br><span class=\"line\">    reader.parse(rawJson, root);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 默认构造函数 使用默认的配置</span></span><br><span class=\"line\">    Json::CharReaderBuilder builder;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据builder的配置生成CharReader类</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;Json::CharReader&gt; <span class=\"title\">reader</span><span class=\"params\">(builder.newCharReader())</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!reader-&gt;parse(rawJson.c_str(), rawJson.c_str() + rawJsonLength, &amp;root,</span><br><span class=\"line\">                       &amp;err)) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"error\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> EXIT_FAILURE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> name = root[<span class=\"string\">\"Name\"</span>].asString();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> age = root[<span class=\"string\">\"Age\"</span>].asInt();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; name &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; age &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> EXIT_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解析的关键在于<code>parse()</code>函数 传入字符串的首尾指针, 和一个Value引用<br>进入函数后将传入的变量保存到了自己的成员变量中.</p>\n<p>慢慢发现 这个库将很多的默认类型 起了别名 可能是为了统一类型 类似UE4也是自己搞了一套</p>\n<p>主要是<code>OurReader</code>这个负责解析</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用了大量的using</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> Char = <span class=\"keyword\">char</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Location = <span class=\"keyword\">const</span> Char*;</span><br></pre></td></tr></table></figure>\n\n<p>解析逻辑就是<code>parse()</code>调用<code>readValue()</code><br><code>readValue()</code>负责 获取下一次数据类型type_ -&gt;switch(type_) 根据分支决定是否递归再次调用<code>readValue</code><br>总算把逻辑看懂了, 代码依然认为很赞<br><code>readToken()</code>这个函数贯穿整个解析, 通过这个函数获取到下一次的数据是什么类型, 同时移动相关的状态指针<br><code>readToken()</code> 内部大量调用下面的函数 修改当前指针 同时返回字符, 然后switch这个字符判断下一次的数据类型<br>比如遇到<code>{</code>就是一个对象的开始设置好type并返回 遇到<code>}</code>就是对象的结束…..</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取current_指向的字符 并自增</span></span><br><span class=\"line\"><span class=\"function\">OurReader::Char <span class=\"title\">OurReader::getNextChar</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (current_ == end_)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> *current_++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一般第一次调用type_会被设置为对象类型, 然后<code>readValue()</code>进入<code>case 对象分支</code><br><code>case对象分支中</code><br>先进行了一次<code>readToken()</code>获取到了k的类型, 然后根据k类型分支 将k的值转换成对应的value<br>之后又是一次<code>readToken()</code>判断是否存在<code>:</code>不存在就是错误<br>在之后使用这个方法, 保存<code>k</code>的vallue获取<code>v</code>的value再次调用<code>readValue()</code>填充值 返回后继续走</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里保存了name 这个k 将name的 v放入了顶层</span></span><br><span class=\"line\">Value&amp; value = currentValue()[name];</span><br><span class=\"line\">nodes_.push(&amp;value);</span><br><span class=\"line\"><span class=\"keyword\">bool</span> ok = readValue();</span><br></pre></td></tr></table></figure>\n<p>读取完<code>v</code>的value之后必定是<code>,</code>或者<code>}</code>又是一次判断 成功判断后一个<code>k v</code>就获取完毕了</p>\n<p><code>using Nodes = std::stack&lt;Value*&gt;</code><br>后面解析的代码更加的妙不可言, 使用<code>Nodes nodes_{}</code>存储当前的value 实现函数之间的操作</p>\n<p>代码合理的组织<br>比如<code>case 对象分支</code>必定是一个<code>k</code>一个<code>:</code>一个<code>v</code> 然后一个分隔符<code>,</code>或<code>}</code> 这些放入了一个函数</p>\n<p>然后获取到<code>k</code>之后使用<code>Value&amp; value = currentValue()[name]</code>获取<code>v</code></p>\n<p>最后依然是递归的使用</p>\n"},{"title":"MongoDB","date":"2019-10-13T11:25:28.000Z","_content":"![](https://docs.mongodb.com/images/mongodb-logo.png)\n<!--more-->\n\n# 服务器相关\n## 基础概念\n在mongodb中基本的概念是文档、集合、数据库\n- 数据库\n一个mongodb中可以建立多个数据库。\n- 集合\n集合就是 MongoDB 文档组 集合处于数据库中 文档处于集合中\n- 文档\n文档是一组键值(key-value)对(即 BSON)\n文档对应数据记录的行\n\n## 安装驱动到Centos\n\n**升级cmake**\n```shell\nwget https://cmake.org/files/v3.6/cmake-3.6.2.tar.gz    \ntar xvf cmake-3.6.2.tar.gz && cd cmake-3.6.2/\n./bootstrap\n\ngmake\ngmake install（需要在su命令下执行，或者直接使用root账户安装）\n/usr/local/bin/cmake --version\n\nyum remove cmake -y\nln -s /usr/local/bin/cmake /usr/bin/\ncmake --version\n```\n**安装**\n\n[官方文档](https://mongoc.org/libmongoc/current/installing.html)\n## 安装驱动到Centos\n```\nyum install gcc-c++\n\nyum install clang\n\n# 安装boost\nyum -y install gcc-c++ python-devel bzip2-devel zlib-devel\ntar zxvf 安装包\nsudo ./bootstrap.sh --prefix=/usr/local/boost\nsudo ./b2 install\n进入 目录下的tools/build\nsudo ./bootstrap.sh\nsudo ./b2 install --prefix=/usr/local/boost\n\nwget https://cmake.org/files/v3.5/cmake-3.5.2.tar.gz\ntar -zxvf cmake-3.5.2.tar.gz\ncd cmake-3.5.2\n./bootstrap\ngmake\ngmake install\n\n# 删除原来cmake版本，建立软连接，测试\nyum remove cmake -y\nln -s /usr/local/bin/cmake /usr/bin/\ncmake --version\n\n# 安装pip\nyum install python-pip\npip install --upgrade pip\n\n# 安装py3\nhttps://segmentfault.com/a/1190000015628625\n```\n\n## 安装到Ubuntu 18.04\n[整理自官方文档](https://docs.mongodb.com/manual/administration/install-on-linux/)\n\n- 导入公共秘钥, 另你的系统\"信任\"下面的包\n```shell\nwget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -\n```\n这一步需要显示OK\n- 导入第三方MongoDB源\n```shell\necho \"deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.2 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list\n```\n- 导入源之后更新\n```shell\nsudo apt-get update\n```\n- 安装MongoDB稳定版本包(我安装的时候稳定版本为4.2)\n```shell\nsudo apt-get install -y mongodb-org=4.2.0 mongodb-org-server=4.2.0 mongodb-org-shell=4.2.0 mongodb-org-mongos=4.2.0 mongodb-org-tools=4.2.0\n```\n- 禁用apt-get自动更新MongoDB\n```shell\necho \"mongodb-org hold\" | sudo dpkg --set-selections\necho \"mongodb-org-server hold\" | sudo dpkg --set-selections\necho \"mongodb-org-shell hold\" | sudo dpkg --set-selections\necho \"mongodb-org-mongos hold\" | sudo dpkg --set-selections\necho \"mongodb-org-tools hold\" | sudo dpkg --set-selections\n```\n## 基础shell操作\n**启动 关闭 重启**\n`sudo service mongod start(stop\\restart)`\n\n*启动成功标志*\n日志文件`/var/log/mongodb/mongod.log`中显示`waiting for connections on port 27017`\n\n**进入交互式命令行**\n`mongo`\n\n**指定端口运行 默认27017**\n`mongo --port 28015`\n\n**非安装机通过shell连接安装机**\n[直连](https://docs.mongodb.com/manual/mongo/#mongodb-instance-on-a-remote-host)\n[带登录验证](https://docs.mongodb.com/manual/mongo/#mongodb-instance-with-authentication)\n\n---\n\n**显示你正在使用的数据库**\n`db`\n**切换数据库**\n`use <database>`\n\n### CRUD\n\n**C**\n\n*插入一个文档*\n`db.collection.insertOne()` \n这里的collection代指的一个集合, 集合的名字可以自定义如果集合并不存在你的数据库中 则自动创建这个集合.\n```shell\ndb.inventory.insertOne(\n   { item: \"canvas\", qty: 100, tags: [\"cotton\"]}\n)\n```\n---\n*插入多个文档*\n`db.inventory.insertMany()`\n```shell\ndb.inventory.insertMany([\n   { item: \"journal\", qty: 25, tags: [\"blank\", \"red\"]},\n   { item: \"mat\", qty: 85, tags: [\"gray\"]},\n   { item: \"mousepad\", qty: 25, tags: [\"gel\", \"blue\"]}\n])\n```\n---\n*插入任意项的文档*\n`db.collection.insert()`\n\n---\n*_id项*\n每一个文档都有自己独一的id 如果插入文档的时候没有指定则会生成随机的`_id`\n```shell\n{ \"_id\" : ObjectId(\"5da325520e80dfd9258a29be\"), \"x\" : 1 }\n```\n可以通过在插入的时候指定`\"_id\": xxxx`来自定义id\n\n[额外的方法](https://docs.mongodb.com/manual/reference/insert-methods/#additional-methods-for-inserts)\n\n\n**R**\n`db.collection.find({ item: \"canvas\" })`\n[拦截器-](https://docs.mongodb.com/manual/core/document/#document-query-filter)在collection中查找含有`item: \"canvas\"`的文档, 并打印\n如果不含`{ item: \"canvas\" }`则代表打印所有的文档\n\n`db.collection.find({status: {$in: [ \"A\", \"D\" ]}})` \n`status: {$in: [ \"A\", \"D\" ]}`意为A, D不在此status中\n\n`db.inventory.find( { status: \"A\", qty: { $lt: 30 } } )`\n`qty: { $lt: 30 }`意为此qty的值少于30\n\n`db.inventory.find( { $or: [ { status: \"A\" }, { qty: { $lt: 30 } } ] } )`\n`{$or: [{ status: \"A\" }, { qty: { $lt: 30 }}]}`符合二者之一\n\n\n[2019年10月13日21:58:24 - 开头](https://docs.mongodb.com/manual/tutorial/query-embedded-documents/)\n\n# C++ Driver\n[照着官方文档安装了下](https://mongocxx.org/mongocxx-v3/installation/)\n期间遇到了两个坑一个是我没有安装Git导致提示无法克隆\n还有就是最后阶段我没安装pkg-config 导致的无法找到头文件\n\n接下来看一些简单的教程\n## CRUD\n```c++\n#include <cstdint>\n#include <iostream>\n#include <vector>\n#include <bsoncxx/json.hpp>\n#include <mongocxx/client.hpp>\n#include <mongocxx/stdx.hpp>\n#include <mongocxx/uri.hpp>\n#include <bsoncxx/builder/stream/helpers.hpp>\n#include <mongocxx/instance.hpp>\n#include <bsoncxx/builder/stream/document.hpp>\n\nusing bsoncxx::builder::stream::close_array;\nusing bsoncxx::builder::stream::close_document;\nusing bsoncxx::builder::stream::document;\nusing bsoncxx::builder::stream::finalize;\nusing bsoncxx::builder::stream::open_array;\nusing bsoncxx::builder::stream::open_document;\n\n\nvoid insert(mongocxx::collection coll_test)\n{\n\tauto builder = document{};\n\n\tbsoncxx::document::value doc_value = builder\n\t\t\t<< \"name\" << \"Lsmg\"\n\t\t\t<< \"type\" << \"Lemon\"\n\t\t\t<< \"count\" << 1\n\t\t\t<< \"versions\" << open_array\n\t\t\t<< \"v3.2\" << \"v3.0\" << \"v2.6\"\n\t\t\t<< close_array\n\t\t\t<< \"info\" << open_document\n\t\t\t<< \"x\" << 203\n\t\t\t<< \"y\" << 102\n\t\t\t<< close_document\n\t\t\t<< finalize;\n\n\tbsoncxx::document::view view_test = doc_value.view();\n\n\t// 打印插入内容制定key的value\n\tstd::string name = view_test[\"name\"].get_utf8().value.to_string();\n\tstd::cout << name << std::endl;\n\n\t// 获取插入ID\n\tauto result = coll_test.insert_one(view_test);\n\tstd::string id1 = result->inserted_id().get_oid().value.to_string();\n\tstd::cout << id1 << std::endl;\n\n}\n\nvoid insert_many(mongocxx::collection coll_test)\n{\n\t// 插入多个\n\tstd::vector<bsoncxx::document::value> documents;\n\tdocuments.reserve(10);\n\tfor (int i = 0; i < 10; ++i)\n\t{\n\t\tdocuments.push_back(document{} << \"i\" << i << finalize);\n\t}\n\tauto result = coll_test.insert_many(documents);\n\n\t// 获取多个的返回ID\n\tauto id_maps = result->inserted_ids();\n\tfor (auto iter : id_maps)\n\t{\n\t\tstd::cout << iter.second.get_oid().value.to_string() << std::endl;\n\t}\n\n}\n\nvoid find(mongocxx::collection coll_test)\n{\n\t// 查询\n\tmongocxx::cursor cursor = coll_test.find({});\n\tfor (auto doc : cursor)\n\t{\n\t\tstd::cout << bsoncxx::to_json(doc) << \"\\n\";\n\t}\n}\n\n\nvoid update_one(mongocxx::collection coll_test)\n{\n\tcoll_test.update_one(document{} << \"i\" << 9 << finalize,\n\t\t\tdocument{} << \"$set\" << open_document <<\n\t\t\t\"i\" << 110 << close_document << finalize);\n}\n\nvoid update_many(mongocxx::collection coll_test)\n{\n\n\tcoll_test.update_many(document{} << \"i\" << open_document <<\n\t\t\t\t\t           \"$lt\" << 8 << close_document << finalize,\n\t\t\tdocument{} << \"$inc\" << open_document <<\n\t\t\t\t\t           \"i\" << 100 << close_document << finalize);\n}\n\nvoid delete_one(mongocxx::collection coll_test)\n{\n\tcoll_test.delete_one(document{} << \"i\" << 110 << finalize);\n}\n\nvoid delete_many(mongocxx::collection coll_test)\n{\n\t// 删除存在 i： 0 的文档\n\tcoll_test.delete_many(document{} << \"i\" << 0 << finalize);\n\n\t/*\n\t * (>) 大于 - $gt\n\t * (<) 小于 - $lt\n\t * (>=) 大于等于 - $gte\n\t * (<= ) 小于等于 - $lte\n\t * */\n\n\t// 删除 i大于3小于8的文档\n\tcoll_test.delete_many(document{} << \"i\" << open_document <<\n\t                                 \"$gt\" << 0 <<\n\t                                 \"$lt\" << 200 <<\n\t                                 close_document << finalize);\n}\n\nvoid create_index(mongocxx::collection coll_test)\n{\n\n\t// 1 代表生序 -1代表降序\n\tauto index_specification = document{} << \"i\" << -1 << finalize;\n\n\t// move的本质就是帮助编译器选择重载函数, 告诉编译器\"请尽量把此参数当做右值来处理\"\n\tcoll_test.create_index(std::move(index_specification));\n}\n\nint main()\n{\n\tmongocxx::instance instance{};\n\tmongocxx::client client{mongocxx::uri{}};\n\n\tmongocxx::database db = client[\"mydb\"];\n\tmongocxx::collection coll_test = db[\"test\"];\n\n\tcreate_index(coll_test);\n\n\tfind(coll_test);\n\n\n\texit(0);\n}\n```\n## 线程安全相关\n不能同时对一个client的多个线程同时操作.\n同时只能有一个线程对一个client操作, 包括对`mongocxx::client`的`mongocxx::client_session`, `mongocxx::database, mongocxx::collection`, and `mongocxx::cursor`同样如此\n\n简单解决可以通过用同一个`mongocxx::uri`生成多个`mongocxx::client`来解决这个问题\n\n最好的解决方法用`mongocxx::uri`生成一个`mongocxx::pool` 通过`mongocxx::pool`的`acquire()`来获取操作的client\n官方demo如下\n```c++\nmongocxx::instance instance{};\nmongocxx::pool pool{mongocxx::uri{}};\n\nauto threadfunc = [](mongocxx::client& client, std::string dbname) {\n  auto col = client[dbname][\"col\"].insert_one({});\n};\n\n// Great! Using the pool allows the clients to be synchronized while sharing only one\n// background monitoring thread.\nstd::thread t1 ([&]() {\n  auto c = pool.acquire();\n  threadfunc(*c, \"db1\");\n  threadfunc(*c, \"db2\");\n});\n\nstd::thread t2 ([&]() {\n  auto c = pool.acquire();\n  threadfunc(*c, \"db2\");\n  threadfunc(*c, \"db1\");\n});\n\nt1.join();\nt2.join();\n```\n\n关于fork的安全性\n`Neither a mongocxx::client or a mongocxx::pool can be safely copied when forking. Because of this, any client or pool must be created after forking, not before.`\n\n官方建议使用`mongocxx::pool`而不是`mongocxx::client` 即使你的应用只有一个线程\n`mongocxx::client` 每60S会检查一次自己监控的cluster, 使用前者会有专门的线程来进行检查而且是10S一次\n\n`mongocxx::pool`可以用于多线程中, 也能用来创建客户端. 然而每个`mongocxx::client`只能被一个线程使用`最大默认为100 最小默认为0`\n\n## BSON\n**Document Builders**\n一共提供了三个接口来创建文档\n官网上提到`这三个接口会得到同样的结果, 选择哪个完全是由于美学`\n\n*“One-off” builder functions*\n```c++\nusing bsoncxx::builder::basic::kvp;\n// { \"hello\": \"world\" }\nbsoncxx::document::value document = bsoncxx::builder::basic::make_document(kvp(\"hello\", \"world\"));\n```\n\n*Basic builder*\n```c++\nusing bsoncxx::builder::basic::kvp;\n// { \"hello\" : \"world\" }\nbsoncxx::builder::basic::document basic_builder{};\nbasic_builder.append(kvp(\"hello\", \"world\"));\nbsoncxx::document::value document = basic_builder.extract();\n\n// basic::document builds a BSON document.\nauto doc = builder::basic::document{};\n// 通过使用kvp(k, v) 来 append 键值对 to a document \nusing bsoncxx::builder::basic::kvp;\n\ndoc.append(k, v); // 插入一般的键值对\n// 对于k一般为string\n// 对于v则包含多种情况 可以使用 bsoncxx::types命名空间里的如下类型\nstruct b_eod;\nstruct b_double; // types::b_double{3.14159}\nstruct b_utf8;\nstruct b_document;\nstruct b_array;\nstruct b_binary;\nstruct b_undefined;\nstruct b_oid;\nstruct b_bool; // types::b_bool{false}\nstruct b_date; \nstruct b_null;\nstruct b_regex;\nstruct b_dbpointer;\nstruct b_code;\nstruct b_symbol;\nstruct b_codewscope;\nstruct b_int32;\nstruct b_timestamp;\nstruct b_int64;\nstruct b_decimal128;\nstruct b_minkey;\nstruct b_maxkey;\n\n// 插入k v (v是数组)\narr.append(\"hello\");\narr.append(false, types::b_bool{true}, types::b_double{1.234});\n\n// We can get a view of the resulting bson by calling view()\nauto v = doc.view();\n\n// Use 'v' so we don't get compiler warnings.\nreturn v.empty() ? EXIT_FAILURE : EXIT_SUCCESS;\n```\n\n*Stream builder*\n我现在最喜欢的方法, 不过官方不建议这样, 因为需要保持这个流不被重新初始化, 这样在跨行生成的时候有困难.\n官方建议使用上面的两个方法\n```c++\n// { \"hello\" : \"world\" }\nusing bsoncxx::builder::stream;\nbsoncxx::document::value document = stream::document{} << \"hello\" << \"world\" << stream::finalize;\n\n// 此外还有\nusing builder::stream::open_document; // {\nusing builder::stream::close_document;// }\nusing builder::stream::open_array; // [\nusing builder::stream::close_array;// ]\n```\n\n**Building arrays**\n```c++\n// [ 1, 2, 3 ]\n\nconst auto elements = {1, 2, 3};\nauto array_builder = bsoncxx::builder::basic::array{};\n\nfor (const auto& element : elements) {\n    array_builder.append(element);\n}\n```\n通过使用lambda来构建 k, v (v是数组)\n```c++\n// { \"foo\" : [ 1, 2, 3 ] }\n\nusing bsoncxx::builder::basic::kvp;\nusing bsoncxx::builder::basic::sub_array;\n\nconst auto elements = {1, 2, 3};\nauto doc = bsoncxx::builder::basic::document{};\ndoc.append(kvp(\"foo\", [&elements](sub_array child) {\n    for (const auto& element : elements) {\n        child.append(element);\n    }\n}));\n```\n\n通过使用流来生成\n```c++\n// { \"subdocs\" : [ { \"key\" : 1 }, { \"key\" : 2 }, { \"key\" : 3 } ], \"another_key\" : 42 }\nusing namespace bsoncxx;\n\nbuilder::stream::document builder{};\n\nauto in_array = builder << \"subdocs\" << builder::stream::open_array;\nfor (auto&& e : {1, 2, 3}) {\n    in_array = in_array << builder::stream::open_document << \"key\" << e\n                        << builder::stream::close_document;\n}\nauto after_array = in_array << builder::stream::close_array;\n\nafter_array << \"another_key\" << 42;\n\ndocument::value doc = after_array << builder::stream::finalize;\n\nstd::cout << to_json(doc) << std::endl;\n```","source":"_posts/CPP-数据库-MongoDB-MongoDB基本使用.md","raw":"---\ntitle: MongoDB\ntags:\n  - Mysql\ncategories:\n  - CPP\n  - 数据库\n  - MongoDB\ndate: 2019-10-13 19:25:28\n---\n![](https://docs.mongodb.com/images/mongodb-logo.png)\n<!--more-->\n\n# 服务器相关\n## 基础概念\n在mongodb中基本的概念是文档、集合、数据库\n- 数据库\n一个mongodb中可以建立多个数据库。\n- 集合\n集合就是 MongoDB 文档组 集合处于数据库中 文档处于集合中\n- 文档\n文档是一组键值(key-value)对(即 BSON)\n文档对应数据记录的行\n\n## 安装驱动到Centos\n\n**升级cmake**\n```shell\nwget https://cmake.org/files/v3.6/cmake-3.6.2.tar.gz    \ntar xvf cmake-3.6.2.tar.gz && cd cmake-3.6.2/\n./bootstrap\n\ngmake\ngmake install（需要在su命令下执行，或者直接使用root账户安装）\n/usr/local/bin/cmake --version\n\nyum remove cmake -y\nln -s /usr/local/bin/cmake /usr/bin/\ncmake --version\n```\n**安装**\n\n[官方文档](https://mongoc.org/libmongoc/current/installing.html)\n## 安装驱动到Centos\n```\nyum install gcc-c++\n\nyum install clang\n\n# 安装boost\nyum -y install gcc-c++ python-devel bzip2-devel zlib-devel\ntar zxvf 安装包\nsudo ./bootstrap.sh --prefix=/usr/local/boost\nsudo ./b2 install\n进入 目录下的tools/build\nsudo ./bootstrap.sh\nsudo ./b2 install --prefix=/usr/local/boost\n\nwget https://cmake.org/files/v3.5/cmake-3.5.2.tar.gz\ntar -zxvf cmake-3.5.2.tar.gz\ncd cmake-3.5.2\n./bootstrap\ngmake\ngmake install\n\n# 删除原来cmake版本，建立软连接，测试\nyum remove cmake -y\nln -s /usr/local/bin/cmake /usr/bin/\ncmake --version\n\n# 安装pip\nyum install python-pip\npip install --upgrade pip\n\n# 安装py3\nhttps://segmentfault.com/a/1190000015628625\n```\n\n## 安装到Ubuntu 18.04\n[整理自官方文档](https://docs.mongodb.com/manual/administration/install-on-linux/)\n\n- 导入公共秘钥, 另你的系统\"信任\"下面的包\n```shell\nwget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -\n```\n这一步需要显示OK\n- 导入第三方MongoDB源\n```shell\necho \"deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.2 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list\n```\n- 导入源之后更新\n```shell\nsudo apt-get update\n```\n- 安装MongoDB稳定版本包(我安装的时候稳定版本为4.2)\n```shell\nsudo apt-get install -y mongodb-org=4.2.0 mongodb-org-server=4.2.0 mongodb-org-shell=4.2.0 mongodb-org-mongos=4.2.0 mongodb-org-tools=4.2.0\n```\n- 禁用apt-get自动更新MongoDB\n```shell\necho \"mongodb-org hold\" | sudo dpkg --set-selections\necho \"mongodb-org-server hold\" | sudo dpkg --set-selections\necho \"mongodb-org-shell hold\" | sudo dpkg --set-selections\necho \"mongodb-org-mongos hold\" | sudo dpkg --set-selections\necho \"mongodb-org-tools hold\" | sudo dpkg --set-selections\n```\n## 基础shell操作\n**启动 关闭 重启**\n`sudo service mongod start(stop\\restart)`\n\n*启动成功标志*\n日志文件`/var/log/mongodb/mongod.log`中显示`waiting for connections on port 27017`\n\n**进入交互式命令行**\n`mongo`\n\n**指定端口运行 默认27017**\n`mongo --port 28015`\n\n**非安装机通过shell连接安装机**\n[直连](https://docs.mongodb.com/manual/mongo/#mongodb-instance-on-a-remote-host)\n[带登录验证](https://docs.mongodb.com/manual/mongo/#mongodb-instance-with-authentication)\n\n---\n\n**显示你正在使用的数据库**\n`db`\n**切换数据库**\n`use <database>`\n\n### CRUD\n\n**C**\n\n*插入一个文档*\n`db.collection.insertOne()` \n这里的collection代指的一个集合, 集合的名字可以自定义如果集合并不存在你的数据库中 则自动创建这个集合.\n```shell\ndb.inventory.insertOne(\n   { item: \"canvas\", qty: 100, tags: [\"cotton\"]}\n)\n```\n---\n*插入多个文档*\n`db.inventory.insertMany()`\n```shell\ndb.inventory.insertMany([\n   { item: \"journal\", qty: 25, tags: [\"blank\", \"red\"]},\n   { item: \"mat\", qty: 85, tags: [\"gray\"]},\n   { item: \"mousepad\", qty: 25, tags: [\"gel\", \"blue\"]}\n])\n```\n---\n*插入任意项的文档*\n`db.collection.insert()`\n\n---\n*_id项*\n每一个文档都有自己独一的id 如果插入文档的时候没有指定则会生成随机的`_id`\n```shell\n{ \"_id\" : ObjectId(\"5da325520e80dfd9258a29be\"), \"x\" : 1 }\n```\n可以通过在插入的时候指定`\"_id\": xxxx`来自定义id\n\n[额外的方法](https://docs.mongodb.com/manual/reference/insert-methods/#additional-methods-for-inserts)\n\n\n**R**\n`db.collection.find({ item: \"canvas\" })`\n[拦截器-](https://docs.mongodb.com/manual/core/document/#document-query-filter)在collection中查找含有`item: \"canvas\"`的文档, 并打印\n如果不含`{ item: \"canvas\" }`则代表打印所有的文档\n\n`db.collection.find({status: {$in: [ \"A\", \"D\" ]}})` \n`status: {$in: [ \"A\", \"D\" ]}`意为A, D不在此status中\n\n`db.inventory.find( { status: \"A\", qty: { $lt: 30 } } )`\n`qty: { $lt: 30 }`意为此qty的值少于30\n\n`db.inventory.find( { $or: [ { status: \"A\" }, { qty: { $lt: 30 } } ] } )`\n`{$or: [{ status: \"A\" }, { qty: { $lt: 30 }}]}`符合二者之一\n\n\n[2019年10月13日21:58:24 - 开头](https://docs.mongodb.com/manual/tutorial/query-embedded-documents/)\n\n# C++ Driver\n[照着官方文档安装了下](https://mongocxx.org/mongocxx-v3/installation/)\n期间遇到了两个坑一个是我没有安装Git导致提示无法克隆\n还有就是最后阶段我没安装pkg-config 导致的无法找到头文件\n\n接下来看一些简单的教程\n## CRUD\n```c++\n#include <cstdint>\n#include <iostream>\n#include <vector>\n#include <bsoncxx/json.hpp>\n#include <mongocxx/client.hpp>\n#include <mongocxx/stdx.hpp>\n#include <mongocxx/uri.hpp>\n#include <bsoncxx/builder/stream/helpers.hpp>\n#include <mongocxx/instance.hpp>\n#include <bsoncxx/builder/stream/document.hpp>\n\nusing bsoncxx::builder::stream::close_array;\nusing bsoncxx::builder::stream::close_document;\nusing bsoncxx::builder::stream::document;\nusing bsoncxx::builder::stream::finalize;\nusing bsoncxx::builder::stream::open_array;\nusing bsoncxx::builder::stream::open_document;\n\n\nvoid insert(mongocxx::collection coll_test)\n{\n\tauto builder = document{};\n\n\tbsoncxx::document::value doc_value = builder\n\t\t\t<< \"name\" << \"Lsmg\"\n\t\t\t<< \"type\" << \"Lemon\"\n\t\t\t<< \"count\" << 1\n\t\t\t<< \"versions\" << open_array\n\t\t\t<< \"v3.2\" << \"v3.0\" << \"v2.6\"\n\t\t\t<< close_array\n\t\t\t<< \"info\" << open_document\n\t\t\t<< \"x\" << 203\n\t\t\t<< \"y\" << 102\n\t\t\t<< close_document\n\t\t\t<< finalize;\n\n\tbsoncxx::document::view view_test = doc_value.view();\n\n\t// 打印插入内容制定key的value\n\tstd::string name = view_test[\"name\"].get_utf8().value.to_string();\n\tstd::cout << name << std::endl;\n\n\t// 获取插入ID\n\tauto result = coll_test.insert_one(view_test);\n\tstd::string id1 = result->inserted_id().get_oid().value.to_string();\n\tstd::cout << id1 << std::endl;\n\n}\n\nvoid insert_many(mongocxx::collection coll_test)\n{\n\t// 插入多个\n\tstd::vector<bsoncxx::document::value> documents;\n\tdocuments.reserve(10);\n\tfor (int i = 0; i < 10; ++i)\n\t{\n\t\tdocuments.push_back(document{} << \"i\" << i << finalize);\n\t}\n\tauto result = coll_test.insert_many(documents);\n\n\t// 获取多个的返回ID\n\tauto id_maps = result->inserted_ids();\n\tfor (auto iter : id_maps)\n\t{\n\t\tstd::cout << iter.second.get_oid().value.to_string() << std::endl;\n\t}\n\n}\n\nvoid find(mongocxx::collection coll_test)\n{\n\t// 查询\n\tmongocxx::cursor cursor = coll_test.find({});\n\tfor (auto doc : cursor)\n\t{\n\t\tstd::cout << bsoncxx::to_json(doc) << \"\\n\";\n\t}\n}\n\n\nvoid update_one(mongocxx::collection coll_test)\n{\n\tcoll_test.update_one(document{} << \"i\" << 9 << finalize,\n\t\t\tdocument{} << \"$set\" << open_document <<\n\t\t\t\"i\" << 110 << close_document << finalize);\n}\n\nvoid update_many(mongocxx::collection coll_test)\n{\n\n\tcoll_test.update_many(document{} << \"i\" << open_document <<\n\t\t\t\t\t           \"$lt\" << 8 << close_document << finalize,\n\t\t\tdocument{} << \"$inc\" << open_document <<\n\t\t\t\t\t           \"i\" << 100 << close_document << finalize);\n}\n\nvoid delete_one(mongocxx::collection coll_test)\n{\n\tcoll_test.delete_one(document{} << \"i\" << 110 << finalize);\n}\n\nvoid delete_many(mongocxx::collection coll_test)\n{\n\t// 删除存在 i： 0 的文档\n\tcoll_test.delete_many(document{} << \"i\" << 0 << finalize);\n\n\t/*\n\t * (>) 大于 - $gt\n\t * (<) 小于 - $lt\n\t * (>=) 大于等于 - $gte\n\t * (<= ) 小于等于 - $lte\n\t * */\n\n\t// 删除 i大于3小于8的文档\n\tcoll_test.delete_many(document{} << \"i\" << open_document <<\n\t                                 \"$gt\" << 0 <<\n\t                                 \"$lt\" << 200 <<\n\t                                 close_document << finalize);\n}\n\nvoid create_index(mongocxx::collection coll_test)\n{\n\n\t// 1 代表生序 -1代表降序\n\tauto index_specification = document{} << \"i\" << -1 << finalize;\n\n\t// move的本质就是帮助编译器选择重载函数, 告诉编译器\"请尽量把此参数当做右值来处理\"\n\tcoll_test.create_index(std::move(index_specification));\n}\n\nint main()\n{\n\tmongocxx::instance instance{};\n\tmongocxx::client client{mongocxx::uri{}};\n\n\tmongocxx::database db = client[\"mydb\"];\n\tmongocxx::collection coll_test = db[\"test\"];\n\n\tcreate_index(coll_test);\n\n\tfind(coll_test);\n\n\n\texit(0);\n}\n```\n## 线程安全相关\n不能同时对一个client的多个线程同时操作.\n同时只能有一个线程对一个client操作, 包括对`mongocxx::client`的`mongocxx::client_session`, `mongocxx::database, mongocxx::collection`, and `mongocxx::cursor`同样如此\n\n简单解决可以通过用同一个`mongocxx::uri`生成多个`mongocxx::client`来解决这个问题\n\n最好的解决方法用`mongocxx::uri`生成一个`mongocxx::pool` 通过`mongocxx::pool`的`acquire()`来获取操作的client\n官方demo如下\n```c++\nmongocxx::instance instance{};\nmongocxx::pool pool{mongocxx::uri{}};\n\nauto threadfunc = [](mongocxx::client& client, std::string dbname) {\n  auto col = client[dbname][\"col\"].insert_one({});\n};\n\n// Great! Using the pool allows the clients to be synchronized while sharing only one\n// background monitoring thread.\nstd::thread t1 ([&]() {\n  auto c = pool.acquire();\n  threadfunc(*c, \"db1\");\n  threadfunc(*c, \"db2\");\n});\n\nstd::thread t2 ([&]() {\n  auto c = pool.acquire();\n  threadfunc(*c, \"db2\");\n  threadfunc(*c, \"db1\");\n});\n\nt1.join();\nt2.join();\n```\n\n关于fork的安全性\n`Neither a mongocxx::client or a mongocxx::pool can be safely copied when forking. Because of this, any client or pool must be created after forking, not before.`\n\n官方建议使用`mongocxx::pool`而不是`mongocxx::client` 即使你的应用只有一个线程\n`mongocxx::client` 每60S会检查一次自己监控的cluster, 使用前者会有专门的线程来进行检查而且是10S一次\n\n`mongocxx::pool`可以用于多线程中, 也能用来创建客户端. 然而每个`mongocxx::client`只能被一个线程使用`最大默认为100 最小默认为0`\n\n## BSON\n**Document Builders**\n一共提供了三个接口来创建文档\n官网上提到`这三个接口会得到同样的结果, 选择哪个完全是由于美学`\n\n*“One-off” builder functions*\n```c++\nusing bsoncxx::builder::basic::kvp;\n// { \"hello\": \"world\" }\nbsoncxx::document::value document = bsoncxx::builder::basic::make_document(kvp(\"hello\", \"world\"));\n```\n\n*Basic builder*\n```c++\nusing bsoncxx::builder::basic::kvp;\n// { \"hello\" : \"world\" }\nbsoncxx::builder::basic::document basic_builder{};\nbasic_builder.append(kvp(\"hello\", \"world\"));\nbsoncxx::document::value document = basic_builder.extract();\n\n// basic::document builds a BSON document.\nauto doc = builder::basic::document{};\n// 通过使用kvp(k, v) 来 append 键值对 to a document \nusing bsoncxx::builder::basic::kvp;\n\ndoc.append(k, v); // 插入一般的键值对\n// 对于k一般为string\n// 对于v则包含多种情况 可以使用 bsoncxx::types命名空间里的如下类型\nstruct b_eod;\nstruct b_double; // types::b_double{3.14159}\nstruct b_utf8;\nstruct b_document;\nstruct b_array;\nstruct b_binary;\nstruct b_undefined;\nstruct b_oid;\nstruct b_bool; // types::b_bool{false}\nstruct b_date; \nstruct b_null;\nstruct b_regex;\nstruct b_dbpointer;\nstruct b_code;\nstruct b_symbol;\nstruct b_codewscope;\nstruct b_int32;\nstruct b_timestamp;\nstruct b_int64;\nstruct b_decimal128;\nstruct b_minkey;\nstruct b_maxkey;\n\n// 插入k v (v是数组)\narr.append(\"hello\");\narr.append(false, types::b_bool{true}, types::b_double{1.234});\n\n// We can get a view of the resulting bson by calling view()\nauto v = doc.view();\n\n// Use 'v' so we don't get compiler warnings.\nreturn v.empty() ? EXIT_FAILURE : EXIT_SUCCESS;\n```\n\n*Stream builder*\n我现在最喜欢的方法, 不过官方不建议这样, 因为需要保持这个流不被重新初始化, 这样在跨行生成的时候有困难.\n官方建议使用上面的两个方法\n```c++\n// { \"hello\" : \"world\" }\nusing bsoncxx::builder::stream;\nbsoncxx::document::value document = stream::document{} << \"hello\" << \"world\" << stream::finalize;\n\n// 此外还有\nusing builder::stream::open_document; // {\nusing builder::stream::close_document;// }\nusing builder::stream::open_array; // [\nusing builder::stream::close_array;// ]\n```\n\n**Building arrays**\n```c++\n// [ 1, 2, 3 ]\n\nconst auto elements = {1, 2, 3};\nauto array_builder = bsoncxx::builder::basic::array{};\n\nfor (const auto& element : elements) {\n    array_builder.append(element);\n}\n```\n通过使用lambda来构建 k, v (v是数组)\n```c++\n// { \"foo\" : [ 1, 2, 3 ] }\n\nusing bsoncxx::builder::basic::kvp;\nusing bsoncxx::builder::basic::sub_array;\n\nconst auto elements = {1, 2, 3};\nauto doc = bsoncxx::builder::basic::document{};\ndoc.append(kvp(\"foo\", [&elements](sub_array child) {\n    for (const auto& element : elements) {\n        child.append(element);\n    }\n}));\n```\n\n通过使用流来生成\n```c++\n// { \"subdocs\" : [ { \"key\" : 1 }, { \"key\" : 2 }, { \"key\" : 3 } ], \"another_key\" : 42 }\nusing namespace bsoncxx;\n\nbuilder::stream::document builder{};\n\nauto in_array = builder << \"subdocs\" << builder::stream::open_array;\nfor (auto&& e : {1, 2, 3}) {\n    in_array = in_array << builder::stream::open_document << \"key\" << e\n                        << builder::stream::close_document;\n}\nauto after_array = in_array << builder::stream::close_array;\n\nafter_array << \"another_key\" << 42;\n\ndocument::value doc = after_array << builder::stream::finalize;\n\nstd::cout << to_json(doc) << std::endl;\n```","slug":"CPP-数据库-MongoDB-MongoDB基本使用","published":1,"updated":"2020-02-27T01:49:16.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucyq0016souo4hgtfrrw","content":"<p><img src=\"https://docs.mongodb.com/images/mongodb-logo.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"服务器相关\"><a href=\"#服务器相关\" class=\"headerlink\" title=\"服务器相关\"></a>服务器相关</h1><h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><p>在mongodb中基本的概念是文档、集合、数据库</p>\n<ul>\n<li>数据库<br>一个mongodb中可以建立多个数据库。</li>\n<li>集合<br>集合就是 MongoDB 文档组 集合处于数据库中 文档处于集合中</li>\n<li>文档<br>文档是一组键值(key-value)对(即 BSON)<br>文档对应数据记录的行</li>\n</ul>\n<h2 id=\"安装驱动到Centos\"><a href=\"#安装驱动到Centos\" class=\"headerlink\" title=\"安装驱动到Centos\"></a>安装驱动到Centos</h2><p><strong>升级cmake</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://cmake.org/files/v3.6/cmake-3.6.2.tar.gz    </span><br><span class=\"line\">tar xvf cmake-3.6.2.tar.gz &amp;&amp; cd cmake-3.6.2/</span><br><span class=\"line\">./bootstrap</span><br><span class=\"line\"></span><br><span class=\"line\">gmake</span><br><span class=\"line\">gmake install（需要在su命令下执行，或者直接使用root账户安装）</span><br><span class=\"line\">/usr/local/bin/cmake --version</span><br><span class=\"line\"></span><br><span class=\"line\">yum remove cmake -y</span><br><span class=\"line\">ln -s /usr/local/bin/cmake /usr/bin/</span><br><span class=\"line\">cmake --version</span><br></pre></td></tr></table></figure>\n<p><strong>安装</strong></p>\n<p><a href=\"https://mongoc.org/libmongoc/current/installing.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h2 id=\"安装驱动到Centos-1\"><a href=\"#安装驱动到Centos-1\" class=\"headerlink\" title=\"安装驱动到Centos\"></a>安装驱动到Centos</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gcc-c++</span><br><span class=\"line\"></span><br><span class=\"line\">yum install clang</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装boost</span><br><span class=\"line\">yum -y install gcc-c++ python-devel bzip2-devel zlib-devel</span><br><span class=\"line\">tar zxvf 安装包</span><br><span class=\"line\">sudo .&#x2F;bootstrap.sh --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;boost</span><br><span class=\"line\">sudo .&#x2F;b2 install</span><br><span class=\"line\">进入 目录下的tools&#x2F;build</span><br><span class=\"line\">sudo .&#x2F;bootstrap.sh</span><br><span class=\"line\">sudo .&#x2F;b2 install --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;boost</span><br><span class=\"line\"></span><br><span class=\"line\">wget https:&#x2F;&#x2F;cmake.org&#x2F;files&#x2F;v3.5&#x2F;cmake-3.5.2.tar.gz</span><br><span class=\"line\">tar -zxvf cmake-3.5.2.tar.gz</span><br><span class=\"line\">cd cmake-3.5.2</span><br><span class=\"line\">.&#x2F;bootstrap</span><br><span class=\"line\">gmake</span><br><span class=\"line\">gmake install</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除原来cmake版本，建立软连接，测试</span><br><span class=\"line\">yum remove cmake -y</span><br><span class=\"line\">ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;cmake &#x2F;usr&#x2F;bin&#x2F;</span><br><span class=\"line\">cmake --version</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装pip</span><br><span class=\"line\">yum install python-pip</span><br><span class=\"line\">pip install --upgrade pip</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装py3</span><br><span class=\"line\">https:&#x2F;&#x2F;segmentfault.com&#x2F;a&#x2F;1190000015628625</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装到Ubuntu-18-04\"><a href=\"#安装到Ubuntu-18-04\" class=\"headerlink\" title=\"安装到Ubuntu 18.04\"></a>安装到Ubuntu 18.04</h2><p><a href=\"https://docs.mongodb.com/manual/administration/install-on-linux/\" target=\"_blank\" rel=\"noopener\">整理自官方文档</a></p>\n<ul>\n<li>导入公共秘钥, 另你的系统”信任”下面的包<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -</span><br></pre></td></tr></table></figure>\n这一步需要显示OK</li>\n<li>导入第三方MongoDB源<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo \"deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.2 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list</span><br></pre></td></tr></table></figure></li>\n<li>导入源之后更新<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure></li>\n<li>安装MongoDB稳定版本包(我安装的时候稳定版本为4.2)<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y mongodb-org=4.2.0 mongodb-org-server=4.2.0 mongodb-org-shell=4.2.0 mongodb-org-mongos=4.2.0 mongodb-org-tools=4.2.0</span><br></pre></td></tr></table></figure></li>\n<li>禁用apt-get自动更新MongoDB<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo \"mongodb-org hold\" | sudo dpkg --set-selections</span><br><span class=\"line\">echo \"mongodb-org-server hold\" | sudo dpkg --set-selections</span><br><span class=\"line\">echo \"mongodb-org-shell hold\" | sudo dpkg --set-selections</span><br><span class=\"line\">echo \"mongodb-org-mongos hold\" | sudo dpkg --set-selections</span><br><span class=\"line\">echo \"mongodb-org-tools hold\" | sudo dpkg --set-selections</span><br></pre></td></tr></table></figure>\n<h2 id=\"基础shell操作\"><a href=\"#基础shell操作\" class=\"headerlink\" title=\"基础shell操作\"></a>基础shell操作</h2></li>\n</ul>\n<p><strong>启动 关闭 重启</strong><br><code>sudo service mongod start(stop\\restart)</code></p>\n<p><em>启动成功标志</em><br>日志文件<code>/var/log/mongodb/mongod.log</code>中显示<code>waiting for connections on port 27017</code></p>\n<p><strong>进入交互式命令行</strong><br><code>mongo</code></p>\n<p><strong>指定端口运行 默认27017</strong><br><code>mongo --port 28015</code></p>\n<p><strong>非安装机通过shell连接安装机</strong><br><a href=\"https://docs.mongodb.com/manual/mongo/#mongodb-instance-on-a-remote-host\" target=\"_blank\" rel=\"noopener\">直连</a><br><a href=\"https://docs.mongodb.com/manual/mongo/#mongodb-instance-with-authentication\" target=\"_blank\" rel=\"noopener\">带登录验证</a></p>\n<hr>\n<p><strong>显示你正在使用的数据库</strong><br><code>db</code><br><strong>切换数据库</strong><br><code>use &lt;database&gt;</code></p>\n<h3 id=\"CRUD\"><a href=\"#CRUD\" class=\"headerlink\" title=\"CRUD\"></a>CRUD</h3><p><strong>C</strong></p>\n<p><em>插入一个文档</em><br><code>db.collection.insertOne()</code><br>这里的collection代指的一个集合, 集合的名字可以自定义如果集合并不存在你的数据库中 则自动创建这个集合.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.inventory.insertOne(</span><br><span class=\"line\">   &#123; item: \"canvas\", qty: 100, tags: [\"cotton\"]&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<hr>\n<p><em>插入多个文档</em><br><code>db.inventory.insertMany()</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.inventory.insertMany([</span><br><span class=\"line\">   &#123; item: \"journal\", qty: 25, tags: [\"blank\", \"red\"]&#125;,</span><br><span class=\"line\">   &#123; item: \"mat\", qty: 85, tags: [\"gray\"]&#125;,</span><br><span class=\"line\">   &#123; item: \"mousepad\", qty: 25, tags: [\"gel\", \"blue\"]&#125;</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n<hr>\n<p><em>插入任意项的文档</em><br><code>db.collection.insert()</code></p>\n<hr>\n<p><em>_id项</em><br>每一个文档都有自己独一的id 如果插入文档的时候没有指定则会生成随机的<code>_id</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; \"_id\" : ObjectId(\"5da325520e80dfd9258a29be\"), \"x\" : 1 &#125;</span><br></pre></td></tr></table></figure>\n<p>可以通过在插入的时候指定<code>&quot;_id&quot;: xxxx</code>来自定义id</p>\n<p><a href=\"https://docs.mongodb.com/manual/reference/insert-methods/#additional-methods-for-inserts\" target=\"_blank\" rel=\"noopener\">额外的方法</a></p>\n<p><strong>R</strong><br><code>db.collection.find({ item: &quot;canvas&quot; })</code><br><a href=\"https://docs.mongodb.com/manual/core/document/#document-query-filter\" target=\"_blank\" rel=\"noopener\">拦截器-</a>在collection中查找含有<code>item: &quot;canvas&quot;</code>的文档, 并打印<br>如果不含<code>{ item: &quot;canvas&quot; }</code>则代表打印所有的文档</p>\n<p><code>db.collection.find({status: {$in: [ &quot;A&quot;, &quot;D&quot; ]}})</code><br><code>status: {$in: [ &quot;A&quot;, &quot;D&quot; ]}</code>意为A, D不在此status中</p>\n<p><code>db.inventory.find( { status: &quot;A&quot;, qty: { $lt: 30 } } )</code><br><code>qty: { $lt: 30 }</code>意为此qty的值少于30</p>\n<p><code>db.inventory.find( { $or: [ { status: &quot;A&quot; }, { qty: { $lt: 30 } } ] } )</code><br><code>{$or: [{ status: &quot;A&quot; }, { qty: { $lt: 30 }}]}</code>符合二者之一</p>\n<p><a href=\"https://docs.mongodb.com/manual/tutorial/query-embedded-documents/\" target=\"_blank\" rel=\"noopener\">2019年10月13日21:58:24 - 开头</a></p>\n<h1 id=\"C-Driver\"><a href=\"#C-Driver\" class=\"headerlink\" title=\"C++ Driver\"></a>C++ Driver</h1><p><a href=\"https://mongocxx.org/mongocxx-v3/installation/\" target=\"_blank\" rel=\"noopener\">照着官方文档安装了下</a><br>期间遇到了两个坑一个是我没有安装Git导致提示无法克隆<br>还有就是最后阶段我没安装pkg-config 导致的无法找到头文件</p>\n<p>接下来看一些简单的教程</p>\n<h2 id=\"CRUD-1\"><a href=\"#CRUD-1\" class=\"headerlink\" title=\"CRUD\"></a>CRUD</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdint&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bsoncxx/json.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mongocxx/client.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mongocxx/stdx.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mongocxx/uri.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bsoncxx/builder/stream/helpers.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mongocxx/instance.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bsoncxx/builder/stream/document.hpp&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> bsoncxx::builder::stream::close_array;</span><br><span class=\"line\"><span class=\"keyword\">using</span> bsoncxx::builder::stream::close_document;</span><br><span class=\"line\"><span class=\"keyword\">using</span> bsoncxx::builder::stream::document;</span><br><span class=\"line\"><span class=\"keyword\">using</span> bsoncxx::builder::stream::finalize;</span><br><span class=\"line\"><span class=\"keyword\">using</span> bsoncxx::builder::stream::open_array;</span><br><span class=\"line\"><span class=\"keyword\">using</span> bsoncxx::builder::stream::open_document;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(mongocxx::collection coll_test)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> builder = document&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbsoncxx::document::value doc_value = builder</span><br><span class=\"line\">\t\t\t&lt;&lt; <span class=\"string\">\"name\"</span> &lt;&lt; <span class=\"string\">\"Lsmg\"</span></span><br><span class=\"line\">\t\t\t&lt;&lt; <span class=\"string\">\"type\"</span> &lt;&lt; <span class=\"string\">\"Lemon\"</span></span><br><span class=\"line\">\t\t\t&lt;&lt; <span class=\"string\">\"count\"</span> &lt;&lt; <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t&lt;&lt; <span class=\"string\">\"versions\"</span> &lt;&lt; open_array</span><br><span class=\"line\">\t\t\t&lt;&lt; <span class=\"string\">\"v3.2\"</span> &lt;&lt; <span class=\"string\">\"v3.0\"</span> &lt;&lt; <span class=\"string\">\"v2.6\"</span></span><br><span class=\"line\">\t\t\t&lt;&lt; close_array</span><br><span class=\"line\">\t\t\t&lt;&lt; <span class=\"string\">\"info\"</span> &lt;&lt; open_document</span><br><span class=\"line\">\t\t\t&lt;&lt; <span class=\"string\">\"x\"</span> &lt;&lt; <span class=\"number\">203</span></span><br><span class=\"line\">\t\t\t&lt;&lt; <span class=\"string\">\"y\"</span> &lt;&lt; <span class=\"number\">102</span></span><br><span class=\"line\">\t\t\t&lt;&lt; close_document</span><br><span class=\"line\">\t\t\t&lt;&lt; finalize;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbsoncxx::document::view view_test = doc_value.view();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 打印插入内容制定key的value</span></span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> name = view_test[<span class=\"string\">\"name\"</span>].get_utf8().value.to_string();</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; name &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取插入ID</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> result = coll_test.insert_one(view_test);</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> id1 = result-&gt;inserted_id().get_oid().value.to_string();</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; id1 &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert_many</span><span class=\"params\">(mongocxx::collection coll_test)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 插入多个</span></span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;bsoncxx::document::value&gt; documents;</span><br><span class=\"line\">\tdocuments.reserve(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tdocuments.push_back(document&#123;&#125; &lt;&lt; <span class=\"string\">\"i\"</span> &lt;&lt; i &lt;&lt; finalize);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> result = coll_test.insert_many(documents);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取多个的返回ID</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> id_maps = result-&gt;inserted_ids();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> iter : id_maps)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; iter.second.get_oid().value.to_string() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">find</span><span class=\"params\">(mongocxx::collection coll_test)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 查询</span></span><br><span class=\"line\">\tmongocxx::<span class=\"built_in\">cursor</span> <span class=\"built_in\">cursor</span> = coll_test.<span class=\"built_in\">find</span>(&#123;&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> doc : <span class=\"built_in\">cursor</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; bsoncxx::to_json(doc) &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update_one</span><span class=\"params\">(mongocxx::collection coll_test)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcoll_test.update_one(document&#123;&#125; &lt;&lt; <span class=\"string\">\"i\"</span> &lt;&lt; <span class=\"number\">9</span> &lt;&lt; finalize,</span><br><span class=\"line\">\t\t\tdocument&#123;&#125; &lt;&lt; <span class=\"string\">\"$set\"</span> &lt;&lt; open_document &lt;&lt;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"i\"</span> &lt;&lt; <span class=\"number\">110</span> &lt;&lt; close_document &lt;&lt; finalize);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update_many</span><span class=\"params\">(mongocxx::collection coll_test)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcoll_test.update_many(document&#123;&#125; &lt;&lt; <span class=\"string\">\"i\"</span> &lt;&lt; open_document &lt;&lt;</span><br><span class=\"line\">\t\t\t\t\t           <span class=\"string\">\"$lt\"</span> &lt;&lt; <span class=\"number\">8</span> &lt;&lt; close_document &lt;&lt; finalize,</span><br><span class=\"line\">\t\t\tdocument&#123;&#125; &lt;&lt; <span class=\"string\">\"$inc\"</span> &lt;&lt; open_document &lt;&lt;</span><br><span class=\"line\">\t\t\t\t\t           <span class=\"string\">\"i\"</span> &lt;&lt; <span class=\"number\">100</span> &lt;&lt; close_document &lt;&lt; finalize);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">delete_one</span><span class=\"params\">(mongocxx::collection coll_test)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcoll_test.delete_one(document&#123;&#125; &lt;&lt; <span class=\"string\">\"i\"</span> &lt;&lt; <span class=\"number\">110</span> &lt;&lt; finalize);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">delete_many</span><span class=\"params\">(mongocxx::collection coll_test)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 删除存在 i： 0 的文档</span></span><br><span class=\"line\">\tcoll_test.delete_many(document&#123;&#125; &lt;&lt; <span class=\"string\">\"i\"</span> &lt;&lt; <span class=\"number\">0</span> &lt;&lt; finalize);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * (&gt;) 大于 - $gt</span></span><br><span class=\"line\"><span class=\"comment\">\t * (&lt;) 小于 - $lt</span></span><br><span class=\"line\"><span class=\"comment\">\t * (&gt;=) 大于等于 - $gte</span></span><br><span class=\"line\"><span class=\"comment\">\t * (&lt;= ) 小于等于 - $lte</span></span><br><span class=\"line\"><span class=\"comment\">\t * */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 删除 i大于3小于8的文档</span></span><br><span class=\"line\">\tcoll_test.delete_many(document&#123;&#125; &lt;&lt; <span class=\"string\">\"i\"</span> &lt;&lt; open_document &lt;&lt;</span><br><span class=\"line\">\t                                 <span class=\"string\">\"$gt\"</span> &lt;&lt; <span class=\"number\">0</span> &lt;&lt;</span><br><span class=\"line\">\t                                 <span class=\"string\">\"$lt\"</span> &lt;&lt; <span class=\"number\">200</span> &lt;&lt;</span><br><span class=\"line\">\t                                 close_document &lt;&lt; finalize);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">create_index</span><span class=\"params\">(mongocxx::collection coll_test)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 1 代表生序 -1代表降序</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> index_specification = document&#123;&#125; &lt;&lt; <span class=\"string\">\"i\"</span> &lt;&lt; <span class=\"number\">-1</span> &lt;&lt; finalize;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// move的本质就是帮助编译器选择重载函数, 告诉编译器\"请尽量把此参数当做右值来处理\"</span></span><br><span class=\"line\">\tcoll_test.create_index(<span class=\"built_in\">std</span>::<span class=\"built_in\">move</span>(index_specification));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tmongocxx::instance instance&#123;&#125;;</span><br><span class=\"line\">\tmongocxx::client client&#123;mongocxx::uri&#123;&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmongocxx::database db = client[<span class=\"string\">\"mydb\"</span>];</span><br><span class=\"line\">\tmongocxx::collection coll_test = db[<span class=\"string\">\"test\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\tcreate_index(coll_test);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">find</span>(coll_test);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"线程安全相关\"><a href=\"#线程安全相关\" class=\"headerlink\" title=\"线程安全相关\"></a>线程安全相关</h2><p>不能同时对一个client的多个线程同时操作.<br>同时只能有一个线程对一个client操作, 包括对<code>mongocxx::client</code>的<code>mongocxx::client_session</code>, <code>mongocxx::database, mongocxx::collection</code>, and <code>mongocxx::cursor</code>同样如此</p>\n<p>简单解决可以通过用同一个<code>mongocxx::uri</code>生成多个<code>mongocxx::client</code>来解决这个问题</p>\n<p>最好的解决方法用<code>mongocxx::uri</code>生成一个<code>mongocxx::pool</code> 通过<code>mongocxx::pool</code>的<code>acquire()</code>来获取操作的client<br>官方demo如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongocxx::instance instance&#123;&#125;;</span><br><span class=\"line\">mongocxx::pool pool&#123;mongocxx::uri&#123;&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">auto</span> threadfunc = [](mongocxx::client&amp; client, <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> dbname) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> col = client[dbname][<span class=\"string\">\"col\"</span>].insert_one(&#123;&#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Great! Using the pool allows the clients to be synchronized while sharing only one</span></span><br><span class=\"line\"><span class=\"comment\">// background monitoring thread.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::thread <span class=\"title\">t1</span> <span class=\"params\">([&amp;]() &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"keyword\">auto</span> c = pool.acquire();</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  threadfunc(*c, <span class=\"string\">\"db1\"</span>);</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  threadfunc(*c, <span class=\"string\">\"db2\"</span>);</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">&#125;)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::thread <span class=\"title\">t2</span> <span class=\"params\">([&amp;]() &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"keyword\">auto</span> c = pool.acquire();</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  threadfunc(*c, <span class=\"string\">\"db2\"</span>);</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  threadfunc(*c, <span class=\"string\">\"db1\"</span>);</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">&#125;)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">t1.join();</span><br><span class=\"line\">t2.join();</span><br></pre></td></tr></table></figure>\n\n<p>关于fork的安全性<br><code>Neither a mongocxx::client or a mongocxx::pool can be safely copied when forking. Because of this, any client or pool must be created after forking, not before.</code></p>\n<p>官方建议使用<code>mongocxx::pool</code>而不是<code>mongocxx::client</code> 即使你的应用只有一个线程<br><code>mongocxx::client</code> 每60S会检查一次自己监控的cluster, 使用前者会有专门的线程来进行检查而且是10S一次</p>\n<p><code>mongocxx::pool</code>可以用于多线程中, 也能用来创建客户端. 然而每个<code>mongocxx::client</code>只能被一个线程使用<code>最大默认为100 最小默认为0</code></p>\n<h2 id=\"BSON\"><a href=\"#BSON\" class=\"headerlink\" title=\"BSON\"></a>BSON</h2><p><strong>Document Builders</strong><br>一共提供了三个接口来创建文档<br>官网上提到<code>这三个接口会得到同样的结果, 选择哪个完全是由于美学</code></p>\n<p><em>“One-off” builder functions</em></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> bsoncxx::builder::basic::kvp;</span><br><span class=\"line\"><span class=\"comment\">// &#123; \"hello\": \"world\" &#125;</span></span><br><span class=\"line\">bsoncxx::document::value document = bsoncxx::builder::basic::make_document(kvp(<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>));</span><br></pre></td></tr></table></figure>\n\n<p><em>Basic builder</em></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> bsoncxx::builder::basic::kvp;</span><br><span class=\"line\"><span class=\"comment\">// &#123; \"hello\" : \"world\" &#125;</span></span><br><span class=\"line\">bsoncxx::builder::basic::document basic_builder&#123;&#125;;</span><br><span class=\"line\">basic_builder.append(kvp(<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>));</span><br><span class=\"line\">bsoncxx::document::value document = basic_builder.extract();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// basic::document builds a BSON document.</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> doc = builder::basic::document&#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 通过使用kvp(k, v) 来 append 键值对 to a document </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> bsoncxx::builder::basic::kvp;</span><br><span class=\"line\"></span><br><span class=\"line\">doc.append(k, v); <span class=\"comment\">// 插入一般的键值对</span></span><br><span class=\"line\"><span class=\"comment\">// 对于k一般为string</span></span><br><span class=\"line\"><span class=\"comment\">// 对于v则包含多种情况 可以使用 bsoncxx::types命名空间里的如下类型</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_eod</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_double</span>;</span> <span class=\"comment\">// types::b_double&#123;3.14159&#125;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_utf8</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_document</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_array</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_binary</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_undefined</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_oid</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_bool</span>;</span> <span class=\"comment\">// types::b_bool&#123;false&#125;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_date</span>;</span> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_null</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_regex</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_dbpointer</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_code</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_symbol</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_codewscope</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_int32</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_timestamp</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_int64</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_decimal128</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_minkey</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_maxkey</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插入k v (v是数组)</span></span><br><span class=\"line\">arr.append(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">arr.append(<span class=\"literal\">false</span>, types::b_bool&#123;<span class=\"literal\">true</span>&#125;, types::b_double&#123;<span class=\"number\">1.234</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// We can get a view of the resulting bson by calling view()</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> v = doc.view();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Use 'v' so we don't get compiler warnings.</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> v.empty() ? EXIT_FAILURE : EXIT_SUCCESS;</span><br></pre></td></tr></table></figure>\n\n<p><em>Stream builder</em><br>我现在最喜欢的方法, 不过官方不建议这样, 因为需要保持这个流不被重新初始化, 这样在跨行生成的时候有困难.<br>官方建议使用上面的两个方法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123; \"hello\" : \"world\" &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> bsoncxx::builder::stream;</span><br><span class=\"line\">bsoncxx::document::value document = stream::document&#123;&#125; &lt;&lt; <span class=\"string\">\"hello\"</span> &lt;&lt; <span class=\"string\">\"world\"</span> &lt;&lt; stream::finalize;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此外还有</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> builder::stream::open_document; <span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> builder::stream::close_document;<span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> builder::stream::open_array; <span class=\"comment\">// [</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> builder::stream::close_array;<span class=\"comment\">// ]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Building arrays</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [ 1, 2, 3 ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> elements = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> array_builder = bsoncxx::builder::basic::<span class=\"built_in\">array</span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span>&amp; element : elements) &#123;</span><br><span class=\"line\">    array_builder.append(element);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过使用lambda来构建 k, v (v是数组)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123; \"foo\" : [ 1, 2, 3 ] &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> bsoncxx::builder::basic::kvp;</span><br><span class=\"line\"><span class=\"keyword\">using</span> bsoncxx::builder::basic::sub_array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> elements = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> doc = bsoncxx::builder::basic::document&#123;&#125;;</span><br><span class=\"line\">doc.append(kvp(<span class=\"string\">\"foo\"</span>, [&amp;elements](sub_array child) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span>&amp; element : elements) &#123;</span><br><span class=\"line\">        child.append(element);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<p>通过使用流来生成</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123; \"subdocs\" : [ &#123; \"key\" : 1 &#125;, &#123; \"key\" : 2 &#125;, &#123; \"key\" : 3 &#125; ], \"another_key\" : 42 &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> bsoncxx;</span><br><span class=\"line\"></span><br><span class=\"line\">builder::stream::document builder&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">auto</span> in_array = builder &lt;&lt; <span class=\"string\">\"subdocs\"</span> &lt;&lt; builder::stream::open_array;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp;&amp; e : &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;) &#123;</span><br><span class=\"line\">    in_array = in_array &lt;&lt; builder::stream::open_document &lt;&lt; <span class=\"string\">\"key\"</span> &lt;&lt; e</span><br><span class=\"line\">                        &lt;&lt; builder::stream::close_document;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> after_array = in_array &lt;&lt; builder::stream::close_array;</span><br><span class=\"line\"></span><br><span class=\"line\">after_array &lt;&lt; <span class=\"string\">\"another_key\"</span> &lt;&lt; <span class=\"number\">42</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">document::value doc = after_array &lt;&lt; builder::stream::finalize;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; to_json(doc) &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><img src=\"https://docs.mongodb.com/images/mongodb-logo.png\" alt=\"\"></p>","more":"<h1 id=\"服务器相关\"><a href=\"#服务器相关\" class=\"headerlink\" title=\"服务器相关\"></a>服务器相关</h1><h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><p>在mongodb中基本的概念是文档、集合、数据库</p>\n<ul>\n<li>数据库<br>一个mongodb中可以建立多个数据库。</li>\n<li>集合<br>集合就是 MongoDB 文档组 集合处于数据库中 文档处于集合中</li>\n<li>文档<br>文档是一组键值(key-value)对(即 BSON)<br>文档对应数据记录的行</li>\n</ul>\n<h2 id=\"安装驱动到Centos\"><a href=\"#安装驱动到Centos\" class=\"headerlink\" title=\"安装驱动到Centos\"></a>安装驱动到Centos</h2><p><strong>升级cmake</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://cmake.org/files/v3.6/cmake-3.6.2.tar.gz    </span><br><span class=\"line\">tar xvf cmake-3.6.2.tar.gz &amp;&amp; cd cmake-3.6.2/</span><br><span class=\"line\">./bootstrap</span><br><span class=\"line\"></span><br><span class=\"line\">gmake</span><br><span class=\"line\">gmake install（需要在su命令下执行，或者直接使用root账户安装）</span><br><span class=\"line\">/usr/local/bin/cmake --version</span><br><span class=\"line\"></span><br><span class=\"line\">yum remove cmake -y</span><br><span class=\"line\">ln -s /usr/local/bin/cmake /usr/bin/</span><br><span class=\"line\">cmake --version</span><br></pre></td></tr></table></figure>\n<p><strong>安装</strong></p>\n<p><a href=\"https://mongoc.org/libmongoc/current/installing.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h2 id=\"安装驱动到Centos-1\"><a href=\"#安装驱动到Centos-1\" class=\"headerlink\" title=\"安装驱动到Centos\"></a>安装驱动到Centos</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gcc-c++</span><br><span class=\"line\"></span><br><span class=\"line\">yum install clang</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装boost</span><br><span class=\"line\">yum -y install gcc-c++ python-devel bzip2-devel zlib-devel</span><br><span class=\"line\">tar zxvf 安装包</span><br><span class=\"line\">sudo .&#x2F;bootstrap.sh --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;boost</span><br><span class=\"line\">sudo .&#x2F;b2 install</span><br><span class=\"line\">进入 目录下的tools&#x2F;build</span><br><span class=\"line\">sudo .&#x2F;bootstrap.sh</span><br><span class=\"line\">sudo .&#x2F;b2 install --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;boost</span><br><span class=\"line\"></span><br><span class=\"line\">wget https:&#x2F;&#x2F;cmake.org&#x2F;files&#x2F;v3.5&#x2F;cmake-3.5.2.tar.gz</span><br><span class=\"line\">tar -zxvf cmake-3.5.2.tar.gz</span><br><span class=\"line\">cd cmake-3.5.2</span><br><span class=\"line\">.&#x2F;bootstrap</span><br><span class=\"line\">gmake</span><br><span class=\"line\">gmake install</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除原来cmake版本，建立软连接，测试</span><br><span class=\"line\">yum remove cmake -y</span><br><span class=\"line\">ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;cmake &#x2F;usr&#x2F;bin&#x2F;</span><br><span class=\"line\">cmake --version</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装pip</span><br><span class=\"line\">yum install python-pip</span><br><span class=\"line\">pip install --upgrade pip</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装py3</span><br><span class=\"line\">https:&#x2F;&#x2F;segmentfault.com&#x2F;a&#x2F;1190000015628625</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装到Ubuntu-18-04\"><a href=\"#安装到Ubuntu-18-04\" class=\"headerlink\" title=\"安装到Ubuntu 18.04\"></a>安装到Ubuntu 18.04</h2><p><a href=\"https://docs.mongodb.com/manual/administration/install-on-linux/\" target=\"_blank\" rel=\"noopener\">整理自官方文档</a></p>\n<ul>\n<li>导入公共秘钥, 另你的系统”信任”下面的包<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -</span><br></pre></td></tr></table></figure>\n这一步需要显示OK</li>\n<li>导入第三方MongoDB源<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo \"deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.2 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list</span><br></pre></td></tr></table></figure></li>\n<li>导入源之后更新<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure></li>\n<li>安装MongoDB稳定版本包(我安装的时候稳定版本为4.2)<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y mongodb-org=4.2.0 mongodb-org-server=4.2.0 mongodb-org-shell=4.2.0 mongodb-org-mongos=4.2.0 mongodb-org-tools=4.2.0</span><br></pre></td></tr></table></figure></li>\n<li>禁用apt-get自动更新MongoDB<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo \"mongodb-org hold\" | sudo dpkg --set-selections</span><br><span class=\"line\">echo \"mongodb-org-server hold\" | sudo dpkg --set-selections</span><br><span class=\"line\">echo \"mongodb-org-shell hold\" | sudo dpkg --set-selections</span><br><span class=\"line\">echo \"mongodb-org-mongos hold\" | sudo dpkg --set-selections</span><br><span class=\"line\">echo \"mongodb-org-tools hold\" | sudo dpkg --set-selections</span><br></pre></td></tr></table></figure>\n<h2 id=\"基础shell操作\"><a href=\"#基础shell操作\" class=\"headerlink\" title=\"基础shell操作\"></a>基础shell操作</h2></li>\n</ul>\n<p><strong>启动 关闭 重启</strong><br><code>sudo service mongod start(stop\\restart)</code></p>\n<p><em>启动成功标志</em><br>日志文件<code>/var/log/mongodb/mongod.log</code>中显示<code>waiting for connections on port 27017</code></p>\n<p><strong>进入交互式命令行</strong><br><code>mongo</code></p>\n<p><strong>指定端口运行 默认27017</strong><br><code>mongo --port 28015</code></p>\n<p><strong>非安装机通过shell连接安装机</strong><br><a href=\"https://docs.mongodb.com/manual/mongo/#mongodb-instance-on-a-remote-host\" target=\"_blank\" rel=\"noopener\">直连</a><br><a href=\"https://docs.mongodb.com/manual/mongo/#mongodb-instance-with-authentication\" target=\"_blank\" rel=\"noopener\">带登录验证</a></p>\n<hr>\n<p><strong>显示你正在使用的数据库</strong><br><code>db</code><br><strong>切换数据库</strong><br><code>use &lt;database&gt;</code></p>\n<h3 id=\"CRUD\"><a href=\"#CRUD\" class=\"headerlink\" title=\"CRUD\"></a>CRUD</h3><p><strong>C</strong></p>\n<p><em>插入一个文档</em><br><code>db.collection.insertOne()</code><br>这里的collection代指的一个集合, 集合的名字可以自定义如果集合并不存在你的数据库中 则自动创建这个集合.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.inventory.insertOne(</span><br><span class=\"line\">   &#123; item: \"canvas\", qty: 100, tags: [\"cotton\"]&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<hr>\n<p><em>插入多个文档</em><br><code>db.inventory.insertMany()</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.inventory.insertMany([</span><br><span class=\"line\">   &#123; item: \"journal\", qty: 25, tags: [\"blank\", \"red\"]&#125;,</span><br><span class=\"line\">   &#123; item: \"mat\", qty: 85, tags: [\"gray\"]&#125;,</span><br><span class=\"line\">   &#123; item: \"mousepad\", qty: 25, tags: [\"gel\", \"blue\"]&#125;</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n<hr>\n<p><em>插入任意项的文档</em><br><code>db.collection.insert()</code></p>\n<hr>\n<p><em>_id项</em><br>每一个文档都有自己独一的id 如果插入文档的时候没有指定则会生成随机的<code>_id</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; \"_id\" : ObjectId(\"5da325520e80dfd9258a29be\"), \"x\" : 1 &#125;</span><br></pre></td></tr></table></figure>\n<p>可以通过在插入的时候指定<code>&quot;_id&quot;: xxxx</code>来自定义id</p>\n<p><a href=\"https://docs.mongodb.com/manual/reference/insert-methods/#additional-methods-for-inserts\" target=\"_blank\" rel=\"noopener\">额外的方法</a></p>\n<p><strong>R</strong><br><code>db.collection.find({ item: &quot;canvas&quot; })</code><br><a href=\"https://docs.mongodb.com/manual/core/document/#document-query-filter\" target=\"_blank\" rel=\"noopener\">拦截器-</a>在collection中查找含有<code>item: &quot;canvas&quot;</code>的文档, 并打印<br>如果不含<code>{ item: &quot;canvas&quot; }</code>则代表打印所有的文档</p>\n<p><code>db.collection.find({status: {$in: [ &quot;A&quot;, &quot;D&quot; ]}})</code><br><code>status: {$in: [ &quot;A&quot;, &quot;D&quot; ]}</code>意为A, D不在此status中</p>\n<p><code>db.inventory.find( { status: &quot;A&quot;, qty: { $lt: 30 } } )</code><br><code>qty: { $lt: 30 }</code>意为此qty的值少于30</p>\n<p><code>db.inventory.find( { $or: [ { status: &quot;A&quot; }, { qty: { $lt: 30 } } ] } )</code><br><code>{$or: [{ status: &quot;A&quot; }, { qty: { $lt: 30 }}]}</code>符合二者之一</p>\n<p><a href=\"https://docs.mongodb.com/manual/tutorial/query-embedded-documents/\" target=\"_blank\" rel=\"noopener\">2019年10月13日21:58:24 - 开头</a></p>\n<h1 id=\"C-Driver\"><a href=\"#C-Driver\" class=\"headerlink\" title=\"C++ Driver\"></a>C++ Driver</h1><p><a href=\"https://mongocxx.org/mongocxx-v3/installation/\" target=\"_blank\" rel=\"noopener\">照着官方文档安装了下</a><br>期间遇到了两个坑一个是我没有安装Git导致提示无法克隆<br>还有就是最后阶段我没安装pkg-config 导致的无法找到头文件</p>\n<p>接下来看一些简单的教程</p>\n<h2 id=\"CRUD-1\"><a href=\"#CRUD-1\" class=\"headerlink\" title=\"CRUD\"></a>CRUD</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdint&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bsoncxx/json.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mongocxx/client.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mongocxx/stdx.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mongocxx/uri.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bsoncxx/builder/stream/helpers.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mongocxx/instance.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bsoncxx/builder/stream/document.hpp&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> bsoncxx::builder::stream::close_array;</span><br><span class=\"line\"><span class=\"keyword\">using</span> bsoncxx::builder::stream::close_document;</span><br><span class=\"line\"><span class=\"keyword\">using</span> bsoncxx::builder::stream::document;</span><br><span class=\"line\"><span class=\"keyword\">using</span> bsoncxx::builder::stream::finalize;</span><br><span class=\"line\"><span class=\"keyword\">using</span> bsoncxx::builder::stream::open_array;</span><br><span class=\"line\"><span class=\"keyword\">using</span> bsoncxx::builder::stream::open_document;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(mongocxx::collection coll_test)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> builder = document&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbsoncxx::document::value doc_value = builder</span><br><span class=\"line\">\t\t\t&lt;&lt; <span class=\"string\">\"name\"</span> &lt;&lt; <span class=\"string\">\"Lsmg\"</span></span><br><span class=\"line\">\t\t\t&lt;&lt; <span class=\"string\">\"type\"</span> &lt;&lt; <span class=\"string\">\"Lemon\"</span></span><br><span class=\"line\">\t\t\t&lt;&lt; <span class=\"string\">\"count\"</span> &lt;&lt; <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t&lt;&lt; <span class=\"string\">\"versions\"</span> &lt;&lt; open_array</span><br><span class=\"line\">\t\t\t&lt;&lt; <span class=\"string\">\"v3.2\"</span> &lt;&lt; <span class=\"string\">\"v3.0\"</span> &lt;&lt; <span class=\"string\">\"v2.6\"</span></span><br><span class=\"line\">\t\t\t&lt;&lt; close_array</span><br><span class=\"line\">\t\t\t&lt;&lt; <span class=\"string\">\"info\"</span> &lt;&lt; open_document</span><br><span class=\"line\">\t\t\t&lt;&lt; <span class=\"string\">\"x\"</span> &lt;&lt; <span class=\"number\">203</span></span><br><span class=\"line\">\t\t\t&lt;&lt; <span class=\"string\">\"y\"</span> &lt;&lt; <span class=\"number\">102</span></span><br><span class=\"line\">\t\t\t&lt;&lt; close_document</span><br><span class=\"line\">\t\t\t&lt;&lt; finalize;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbsoncxx::document::view view_test = doc_value.view();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 打印插入内容制定key的value</span></span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> name = view_test[<span class=\"string\">\"name\"</span>].get_utf8().value.to_string();</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; name &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取插入ID</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> result = coll_test.insert_one(view_test);</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> id1 = result-&gt;inserted_id().get_oid().value.to_string();</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; id1 &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert_many</span><span class=\"params\">(mongocxx::collection coll_test)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 插入多个</span></span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;bsoncxx::document::value&gt; documents;</span><br><span class=\"line\">\tdocuments.reserve(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tdocuments.push_back(document&#123;&#125; &lt;&lt; <span class=\"string\">\"i\"</span> &lt;&lt; i &lt;&lt; finalize);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> result = coll_test.insert_many(documents);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取多个的返回ID</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> id_maps = result-&gt;inserted_ids();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> iter : id_maps)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; iter.second.get_oid().value.to_string() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">find</span><span class=\"params\">(mongocxx::collection coll_test)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 查询</span></span><br><span class=\"line\">\tmongocxx::<span class=\"built_in\">cursor</span> <span class=\"built_in\">cursor</span> = coll_test.<span class=\"built_in\">find</span>(&#123;&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> doc : <span class=\"built_in\">cursor</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; bsoncxx::to_json(doc) &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update_one</span><span class=\"params\">(mongocxx::collection coll_test)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcoll_test.update_one(document&#123;&#125; &lt;&lt; <span class=\"string\">\"i\"</span> &lt;&lt; <span class=\"number\">9</span> &lt;&lt; finalize,</span><br><span class=\"line\">\t\t\tdocument&#123;&#125; &lt;&lt; <span class=\"string\">\"$set\"</span> &lt;&lt; open_document &lt;&lt;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"i\"</span> &lt;&lt; <span class=\"number\">110</span> &lt;&lt; close_document &lt;&lt; finalize);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update_many</span><span class=\"params\">(mongocxx::collection coll_test)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcoll_test.update_many(document&#123;&#125; &lt;&lt; <span class=\"string\">\"i\"</span> &lt;&lt; open_document &lt;&lt;</span><br><span class=\"line\">\t\t\t\t\t           <span class=\"string\">\"$lt\"</span> &lt;&lt; <span class=\"number\">8</span> &lt;&lt; close_document &lt;&lt; finalize,</span><br><span class=\"line\">\t\t\tdocument&#123;&#125; &lt;&lt; <span class=\"string\">\"$inc\"</span> &lt;&lt; open_document &lt;&lt;</span><br><span class=\"line\">\t\t\t\t\t           <span class=\"string\">\"i\"</span> &lt;&lt; <span class=\"number\">100</span> &lt;&lt; close_document &lt;&lt; finalize);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">delete_one</span><span class=\"params\">(mongocxx::collection coll_test)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcoll_test.delete_one(document&#123;&#125; &lt;&lt; <span class=\"string\">\"i\"</span> &lt;&lt; <span class=\"number\">110</span> &lt;&lt; finalize);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">delete_many</span><span class=\"params\">(mongocxx::collection coll_test)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 删除存在 i： 0 的文档</span></span><br><span class=\"line\">\tcoll_test.delete_many(document&#123;&#125; &lt;&lt; <span class=\"string\">\"i\"</span> &lt;&lt; <span class=\"number\">0</span> &lt;&lt; finalize);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * (&gt;) 大于 - $gt</span></span><br><span class=\"line\"><span class=\"comment\">\t * (&lt;) 小于 - $lt</span></span><br><span class=\"line\"><span class=\"comment\">\t * (&gt;=) 大于等于 - $gte</span></span><br><span class=\"line\"><span class=\"comment\">\t * (&lt;= ) 小于等于 - $lte</span></span><br><span class=\"line\"><span class=\"comment\">\t * */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 删除 i大于3小于8的文档</span></span><br><span class=\"line\">\tcoll_test.delete_many(document&#123;&#125; &lt;&lt; <span class=\"string\">\"i\"</span> &lt;&lt; open_document &lt;&lt;</span><br><span class=\"line\">\t                                 <span class=\"string\">\"$gt\"</span> &lt;&lt; <span class=\"number\">0</span> &lt;&lt;</span><br><span class=\"line\">\t                                 <span class=\"string\">\"$lt\"</span> &lt;&lt; <span class=\"number\">200</span> &lt;&lt;</span><br><span class=\"line\">\t                                 close_document &lt;&lt; finalize);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">create_index</span><span class=\"params\">(mongocxx::collection coll_test)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 1 代表生序 -1代表降序</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> index_specification = document&#123;&#125; &lt;&lt; <span class=\"string\">\"i\"</span> &lt;&lt; <span class=\"number\">-1</span> &lt;&lt; finalize;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// move的本质就是帮助编译器选择重载函数, 告诉编译器\"请尽量把此参数当做右值来处理\"</span></span><br><span class=\"line\">\tcoll_test.create_index(<span class=\"built_in\">std</span>::<span class=\"built_in\">move</span>(index_specification));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tmongocxx::instance instance&#123;&#125;;</span><br><span class=\"line\">\tmongocxx::client client&#123;mongocxx::uri&#123;&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmongocxx::database db = client[<span class=\"string\">\"mydb\"</span>];</span><br><span class=\"line\">\tmongocxx::collection coll_test = db[<span class=\"string\">\"test\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\tcreate_index(coll_test);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">find</span>(coll_test);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"线程安全相关\"><a href=\"#线程安全相关\" class=\"headerlink\" title=\"线程安全相关\"></a>线程安全相关</h2><p>不能同时对一个client的多个线程同时操作.<br>同时只能有一个线程对一个client操作, 包括对<code>mongocxx::client</code>的<code>mongocxx::client_session</code>, <code>mongocxx::database, mongocxx::collection</code>, and <code>mongocxx::cursor</code>同样如此</p>\n<p>简单解决可以通过用同一个<code>mongocxx::uri</code>生成多个<code>mongocxx::client</code>来解决这个问题</p>\n<p>最好的解决方法用<code>mongocxx::uri</code>生成一个<code>mongocxx::pool</code> 通过<code>mongocxx::pool</code>的<code>acquire()</code>来获取操作的client<br>官方demo如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongocxx::instance instance&#123;&#125;;</span><br><span class=\"line\">mongocxx::pool pool&#123;mongocxx::uri&#123;&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">auto</span> threadfunc = [](mongocxx::client&amp; client, <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> dbname) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> col = client[dbname][<span class=\"string\">\"col\"</span>].insert_one(&#123;&#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Great! Using the pool allows the clients to be synchronized while sharing only one</span></span><br><span class=\"line\"><span class=\"comment\">// background monitoring thread.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::thread <span class=\"title\">t1</span> <span class=\"params\">([&amp;]() &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"keyword\">auto</span> c = pool.acquire();</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  threadfunc(*c, <span class=\"string\">\"db1\"</span>);</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  threadfunc(*c, <span class=\"string\">\"db2\"</span>);</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">&#125;)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::thread <span class=\"title\">t2</span> <span class=\"params\">([&amp;]() &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"keyword\">auto</span> c = pool.acquire();</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  threadfunc(*c, <span class=\"string\">\"db2\"</span>);</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  threadfunc(*c, <span class=\"string\">\"db1\"</span>);</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">&#125;)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">t1.join();</span><br><span class=\"line\">t2.join();</span><br></pre></td></tr></table></figure>\n\n<p>关于fork的安全性<br><code>Neither a mongocxx::client or a mongocxx::pool can be safely copied when forking. Because of this, any client or pool must be created after forking, not before.</code></p>\n<p>官方建议使用<code>mongocxx::pool</code>而不是<code>mongocxx::client</code> 即使你的应用只有一个线程<br><code>mongocxx::client</code> 每60S会检查一次自己监控的cluster, 使用前者会有专门的线程来进行检查而且是10S一次</p>\n<p><code>mongocxx::pool</code>可以用于多线程中, 也能用来创建客户端. 然而每个<code>mongocxx::client</code>只能被一个线程使用<code>最大默认为100 最小默认为0</code></p>\n<h2 id=\"BSON\"><a href=\"#BSON\" class=\"headerlink\" title=\"BSON\"></a>BSON</h2><p><strong>Document Builders</strong><br>一共提供了三个接口来创建文档<br>官网上提到<code>这三个接口会得到同样的结果, 选择哪个完全是由于美学</code></p>\n<p><em>“One-off” builder functions</em></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> bsoncxx::builder::basic::kvp;</span><br><span class=\"line\"><span class=\"comment\">// &#123; \"hello\": \"world\" &#125;</span></span><br><span class=\"line\">bsoncxx::document::value document = bsoncxx::builder::basic::make_document(kvp(<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>));</span><br></pre></td></tr></table></figure>\n\n<p><em>Basic builder</em></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> bsoncxx::builder::basic::kvp;</span><br><span class=\"line\"><span class=\"comment\">// &#123; \"hello\" : \"world\" &#125;</span></span><br><span class=\"line\">bsoncxx::builder::basic::document basic_builder&#123;&#125;;</span><br><span class=\"line\">basic_builder.append(kvp(<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>));</span><br><span class=\"line\">bsoncxx::document::value document = basic_builder.extract();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// basic::document builds a BSON document.</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> doc = builder::basic::document&#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 通过使用kvp(k, v) 来 append 键值对 to a document </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> bsoncxx::builder::basic::kvp;</span><br><span class=\"line\"></span><br><span class=\"line\">doc.append(k, v); <span class=\"comment\">// 插入一般的键值对</span></span><br><span class=\"line\"><span class=\"comment\">// 对于k一般为string</span></span><br><span class=\"line\"><span class=\"comment\">// 对于v则包含多种情况 可以使用 bsoncxx::types命名空间里的如下类型</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_eod</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_double</span>;</span> <span class=\"comment\">// types::b_double&#123;3.14159&#125;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_utf8</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_document</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_array</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_binary</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_undefined</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_oid</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_bool</span>;</span> <span class=\"comment\">// types::b_bool&#123;false&#125;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_date</span>;</span> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_null</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_regex</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_dbpointer</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_code</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_symbol</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_codewscope</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_int32</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_timestamp</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_int64</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_decimal128</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_minkey</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">b_maxkey</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插入k v (v是数组)</span></span><br><span class=\"line\">arr.append(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">arr.append(<span class=\"literal\">false</span>, types::b_bool&#123;<span class=\"literal\">true</span>&#125;, types::b_double&#123;<span class=\"number\">1.234</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// We can get a view of the resulting bson by calling view()</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> v = doc.view();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Use 'v' so we don't get compiler warnings.</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> v.empty() ? EXIT_FAILURE : EXIT_SUCCESS;</span><br></pre></td></tr></table></figure>\n\n<p><em>Stream builder</em><br>我现在最喜欢的方法, 不过官方不建议这样, 因为需要保持这个流不被重新初始化, 这样在跨行生成的时候有困难.<br>官方建议使用上面的两个方法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123; \"hello\" : \"world\" &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> bsoncxx::builder::stream;</span><br><span class=\"line\">bsoncxx::document::value document = stream::document&#123;&#125; &lt;&lt; <span class=\"string\">\"hello\"</span> &lt;&lt; <span class=\"string\">\"world\"</span> &lt;&lt; stream::finalize;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此外还有</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> builder::stream::open_document; <span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> builder::stream::close_document;<span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> builder::stream::open_array; <span class=\"comment\">// [</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> builder::stream::close_array;<span class=\"comment\">// ]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Building arrays</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [ 1, 2, 3 ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> elements = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> array_builder = bsoncxx::builder::basic::<span class=\"built_in\">array</span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span>&amp; element : elements) &#123;</span><br><span class=\"line\">    array_builder.append(element);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过使用lambda来构建 k, v (v是数组)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123; \"foo\" : [ 1, 2, 3 ] &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> bsoncxx::builder::basic::kvp;</span><br><span class=\"line\"><span class=\"keyword\">using</span> bsoncxx::builder::basic::sub_array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> elements = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> doc = bsoncxx::builder::basic::document&#123;&#125;;</span><br><span class=\"line\">doc.append(kvp(<span class=\"string\">\"foo\"</span>, [&amp;elements](sub_array child) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span>&amp; element : elements) &#123;</span><br><span class=\"line\">        child.append(element);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<p>通过使用流来生成</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123; \"subdocs\" : [ &#123; \"key\" : 1 &#125;, &#123; \"key\" : 2 &#125;, &#123; \"key\" : 3 &#125; ], \"another_key\" : 42 &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> bsoncxx;</span><br><span class=\"line\"></span><br><span class=\"line\">builder::stream::document builder&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">auto</span> in_array = builder &lt;&lt; <span class=\"string\">\"subdocs\"</span> &lt;&lt; builder::stream::open_array;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp;&amp; e : &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;) &#123;</span><br><span class=\"line\">    in_array = in_array &lt;&lt; builder::stream::open_document &lt;&lt; <span class=\"string\">\"key\"</span> &lt;&lt; e</span><br><span class=\"line\">                        &lt;&lt; builder::stream::close_document;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> after_array = in_array &lt;&lt; builder::stream::close_array;</span><br><span class=\"line\"></span><br><span class=\"line\">after_array &lt;&lt; <span class=\"string\">\"another_key\"</span> &lt;&lt; <span class=\"number\">42</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">document::value doc = after_array &lt;&lt; builder::stream::finalize;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; to_json(doc) &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>"},{"title":"纯洁的微笑Gitchat 课程笔记1","date":"2019-06-07T03:36:10.000Z","_content":"这篇博客主要是想整理下 纯洁的微笑博客的观后感 [传送门](https://www.ityouknow.com/springboot/2016/02/03/spring-boot-web.html). 针对所列的框架, 自己再去丰富内容\n<!--more-->\n\n## Web 开发\n\n### 自定义拦截器\nFilter在servlet被调用前 截获request. 检查request, 可以进行request的修改(request头和request数据).\n在离开response后处理response.\n\n**一种方法**\n```java\n@Configuration\npublic class WebConfigure {\n\n    @Bean\n    public RemoteIpFilter remoteIpFilter() {\n        return new RemoteIpFilter();\n    }\n\n    @Bean\n    public FilterRegistrationBean testFilter(){\n\n        //新建过滤器注册类\n        FilterRegistrationBean registrationBean = new FilterRegistrationBean();\n        //将自己的过滤器添加\n        registrationBean.setFilter(new MyFilter());\n        //设置过滤器的URL模式\n        registrationBean.addUrlPatterns(\"/*\");\n        //初始化Filter参数\n        registrationBean.addInitParameter(\"paramName\", \"paramValue\");\n        registrationBean.setName(\"MyFilter\");\n        registrationBean.setOrder(1);\n        return registrationBean;\n    }\n    //实现Filter的方法\n    public class MyFilter implements Filter {\n        @Override\n        public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n            HttpServletRequest request = (HttpServletRequest) servletRequest;\n            System.out.println(\"拦截器: \" + request.getRequestURI());\n            filterChain.doFilter(servletRequest, servletResponse);\n        }\n        //删除部分代码\n    }\n}\n```\n**推荐的方式** 不过这种方式虽然简单 但不能定义优先级\n```java\n//启动类加上 @ServletComponentScan 注解\n\n//这种方式通过filterName来控制优先级......\n@WebFilter(filterName = \"secondFilter\", urlPatterns = \"/*\")\npublic class MyFilter implements Filter {\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        HttpServletRequest request = (HttpServletRequest) servletRequest;\n        System.out.println(\"拦截器2: \" + request.getRequestURI());\n        filterChain.doFilter(servletRequest, servletResponse);\n    }\n//删除部分代码\n}\n\n```\n","source":"_posts/Java-Springboot基础知识1.md","raw":"---\ntitle: 纯洁的微笑Gitchat 课程笔记1\ntags:\ncategories:\n  - Java\ndate: 2019-06-07 11:36:10\n---\n这篇博客主要是想整理下 纯洁的微笑博客的观后感 [传送门](https://www.ityouknow.com/springboot/2016/02/03/spring-boot-web.html). 针对所列的框架, 自己再去丰富内容\n<!--more-->\n\n## Web 开发\n\n### 自定义拦截器\nFilter在servlet被调用前 截获request. 检查request, 可以进行request的修改(request头和request数据).\n在离开response后处理response.\n\n**一种方法**\n```java\n@Configuration\npublic class WebConfigure {\n\n    @Bean\n    public RemoteIpFilter remoteIpFilter() {\n        return new RemoteIpFilter();\n    }\n\n    @Bean\n    public FilterRegistrationBean testFilter(){\n\n        //新建过滤器注册类\n        FilterRegistrationBean registrationBean = new FilterRegistrationBean();\n        //将自己的过滤器添加\n        registrationBean.setFilter(new MyFilter());\n        //设置过滤器的URL模式\n        registrationBean.addUrlPatterns(\"/*\");\n        //初始化Filter参数\n        registrationBean.addInitParameter(\"paramName\", \"paramValue\");\n        registrationBean.setName(\"MyFilter\");\n        registrationBean.setOrder(1);\n        return registrationBean;\n    }\n    //实现Filter的方法\n    public class MyFilter implements Filter {\n        @Override\n        public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n            HttpServletRequest request = (HttpServletRequest) servletRequest;\n            System.out.println(\"拦截器: \" + request.getRequestURI());\n            filterChain.doFilter(servletRequest, servletResponse);\n        }\n        //删除部分代码\n    }\n}\n```\n**推荐的方式** 不过这种方式虽然简单 但不能定义优先级\n```java\n//启动类加上 @ServletComponentScan 注解\n\n//这种方式通过filterName来控制优先级......\n@WebFilter(filterName = \"secondFilter\", urlPatterns = \"/*\")\npublic class MyFilter implements Filter {\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        HttpServletRequest request = (HttpServletRequest) servletRequest;\n        System.out.println(\"拦截器2: \" + request.getRequestURI());\n        filterChain.doFilter(servletRequest, servletResponse);\n    }\n//删除部分代码\n}\n\n```\n","slug":"Java-Springboot基础知识1","published":1,"updated":"2020-02-27T01:49:16.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucyr0019souo0k7i93yt","content":"<p>这篇博客主要是想整理下 纯洁的微笑博客的观后感 <a href=\"https://www.ityouknow.com/springboot/2016/02/03/spring-boot-web.html\" target=\"_blank\" rel=\"noopener\">传送门</a>. 针对所列的框架, 自己再去丰富内容</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Web-开发\"><a href=\"#Web-开发\" class=\"headerlink\" title=\"Web 开发\"></a>Web 开发</h2><h3 id=\"自定义拦截器\"><a href=\"#自定义拦截器\" class=\"headerlink\" title=\"自定义拦截器\"></a>自定义拦截器</h3><p>Filter在servlet被调用前 截获request. 检查request, 可以进行request的修改(request头和request数据).<br>在离开response后处理response.</p>\n<p><strong>一种方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebConfigure</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RemoteIpFilter <span class=\"title\">remoteIpFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RemoteIpFilter();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">testFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//新建过滤器注册类</span></span><br><span class=\"line\">        FilterRegistrationBean registrationBean = <span class=\"keyword\">new</span> FilterRegistrationBean();</span><br><span class=\"line\">        <span class=\"comment\">//将自己的过滤器添加</span></span><br><span class=\"line\">        registrationBean.setFilter(<span class=\"keyword\">new</span> MyFilter());</span><br><span class=\"line\">        <span class=\"comment\">//设置过滤器的URL模式</span></span><br><span class=\"line\">        registrationBean.addUrlPatterns(<span class=\"string\">\"/*\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//初始化Filter参数</span></span><br><span class=\"line\">        registrationBean.addInitParameter(<span class=\"string\">\"paramName\"</span>, <span class=\"string\">\"paramValue\"</span>);</span><br><span class=\"line\">        registrationBean.setName(<span class=\"string\">\"MyFilter\"</span>);</span><br><span class=\"line\">        registrationBean.setOrder(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//实现Filter的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">            HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"拦截器: \"</span> + request.getRequestURI());</span><br><span class=\"line\">            filterChain.doFilter(servletRequest, servletResponse);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//删除部分代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐的方式</strong> 不过这种方式虽然简单 但不能定义优先级</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//启动类加上 @ServletComponentScan 注解</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这种方式通过filterName来控制优先级......</span></span><br><span class=\"line\"><span class=\"meta\">@WebFilter</span>(filterName = <span class=\"string\">\"secondFilter\"</span>, urlPatterns = <span class=\"string\">\"/*\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"拦截器2: \"</span> + request.getRequestURI());</span><br><span class=\"line\">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//删除部分代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>这篇博客主要是想整理下 纯洁的微笑博客的观后感 <a href=\"https://www.ityouknow.com/springboot/2016/02/03/spring-boot-web.html\" target=\"_blank\" rel=\"noopener\">传送门</a>. 针对所列的框架, 自己再去丰富内容</p>","more":"<h2 id=\"Web-开发\"><a href=\"#Web-开发\" class=\"headerlink\" title=\"Web 开发\"></a>Web 开发</h2><h3 id=\"自定义拦截器\"><a href=\"#自定义拦截器\" class=\"headerlink\" title=\"自定义拦截器\"></a>自定义拦截器</h3><p>Filter在servlet被调用前 截获request. 检查request, 可以进行request的修改(request头和request数据).<br>在离开response后处理response.</p>\n<p><strong>一种方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebConfigure</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RemoteIpFilter <span class=\"title\">remoteIpFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RemoteIpFilter();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">testFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//新建过滤器注册类</span></span><br><span class=\"line\">        FilterRegistrationBean registrationBean = <span class=\"keyword\">new</span> FilterRegistrationBean();</span><br><span class=\"line\">        <span class=\"comment\">//将自己的过滤器添加</span></span><br><span class=\"line\">        registrationBean.setFilter(<span class=\"keyword\">new</span> MyFilter());</span><br><span class=\"line\">        <span class=\"comment\">//设置过滤器的URL模式</span></span><br><span class=\"line\">        registrationBean.addUrlPatterns(<span class=\"string\">\"/*\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//初始化Filter参数</span></span><br><span class=\"line\">        registrationBean.addInitParameter(<span class=\"string\">\"paramName\"</span>, <span class=\"string\">\"paramValue\"</span>);</span><br><span class=\"line\">        registrationBean.setName(<span class=\"string\">\"MyFilter\"</span>);</span><br><span class=\"line\">        registrationBean.setOrder(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//实现Filter的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">            HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"拦截器: \"</span> + request.getRequestURI());</span><br><span class=\"line\">            filterChain.doFilter(servletRequest, servletResponse);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//删除部分代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐的方式</strong> 不过这种方式虽然简单 但不能定义优先级</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//启动类加上 @ServletComponentScan 注解</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这种方式通过filterName来控制优先级......</span></span><br><span class=\"line\"><span class=\"meta\">@WebFilter</span>(filterName = <span class=\"string\">\"secondFilter\"</span>, urlPatterns = <span class=\"string\">\"/*\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"拦截器2: \"</span> + request.getRequestURI());</span><br><span class=\"line\">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//删除部分代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"IDEA基本使用记录","date":"2019-07-16T09:53:33.000Z","_content":"<div class=\"alert-red\">目前主要记录一部分快捷键</div>\n<!--more-->\n\n### 快捷编辑部分\nCtrl + Y\t删除光标所在行 或 删除选中的行 （必备）\n剪切复制\t默认都可以对本行操作\nCtrl + Delete\t删除光标后面的单词或是中文句 （必备）\nCtrl + BackSpace\t删除光标前面的单词或是中文句 （必备）\n\n-----\nCtrl + Alt + Enter\t光标所在行上空出一行，光标定位到新行 （必备）\nCtrl + Shift + Z\t取消撤销 （必备）\nCtrl + Shift + Alt + V\t无格式黏贴 （必备）\n### 快捷移动\nCtrl + `[`\t移动光标到当前所在代码的花括号开始位置\nCtrl + `]`\t移动光标到当前所在代码的花括号结束位置\nCtrl + F3\t调转到所选中的词的下一个引用位置 （必备）\n\nCtrl + 左方向键\t光标跳转到当前单词 / 中文句的左侧开头位置 （必备）\nCtrl + 右方向键\t光标跳转到当前单词 / 中文句的右侧开头位置 （必备）\nCtrl + 前方向键\t等效于鼠标滚轮向前效果 （必备）\nCtrl + 后方向键\t等效于鼠标滚轮向后效果 （必备）\n\n-----\n*Ctrl + Alt + 左方向键\t退回到上一个操作的地方 （必备）\nCtrl + Alt + 右方向键\t前进到上一个操作的地方 （必备）*\n### 查找部分\nCtrl + W\t递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 （必备）\nCtrl + Shift + W\t递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 （必备）\n\nCtrl + E\t显示最近打开的文件记录列表 （必备）\nCtrl + N\t根据输入的 类名 查找类文件 （必备）\nCtrl + U\t前往当前光标所在的方法的父类的方法 / 接口定义 （必备）\nCtrl + B\t进入光标所在的方法/变量的接口或是定义处，等效于 Ctrl + 左键单击 （必备）\n\n-----\nShift + F2\t跳转到上一个高亮错误 或 警告位置\n\n### 提示\nCtrl + P\t方法参数提示显示 （必备）\nCtrl + Q\t光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容\nCtrl + +\t展开代码\nCtrl + -\t折叠代码\n\n-----\n\n### 修改编码\nFile -> Settings -> File Encodings -> Default encoding for properties file -> UTF-8\n然后需要勾选\n`Transparent native-to-ascii conversion`","source":"_posts/Java-IDEA.md","raw":"---\ntitle: IDEA基本使用记录\ntags:\ncategories:\n  - Java\ndate: 2019-07-16 17:53:33\n---\n<div class=\"alert-red\">目前主要记录一部分快捷键</div>\n<!--more-->\n\n### 快捷编辑部分\nCtrl + Y\t删除光标所在行 或 删除选中的行 （必备）\n剪切复制\t默认都可以对本行操作\nCtrl + Delete\t删除光标后面的单词或是中文句 （必备）\nCtrl + BackSpace\t删除光标前面的单词或是中文句 （必备）\n\n-----\nCtrl + Alt + Enter\t光标所在行上空出一行，光标定位到新行 （必备）\nCtrl + Shift + Z\t取消撤销 （必备）\nCtrl + Shift + Alt + V\t无格式黏贴 （必备）\n### 快捷移动\nCtrl + `[`\t移动光标到当前所在代码的花括号开始位置\nCtrl + `]`\t移动光标到当前所在代码的花括号结束位置\nCtrl + F3\t调转到所选中的词的下一个引用位置 （必备）\n\nCtrl + 左方向键\t光标跳转到当前单词 / 中文句的左侧开头位置 （必备）\nCtrl + 右方向键\t光标跳转到当前单词 / 中文句的右侧开头位置 （必备）\nCtrl + 前方向键\t等效于鼠标滚轮向前效果 （必备）\nCtrl + 后方向键\t等效于鼠标滚轮向后效果 （必备）\n\n-----\n*Ctrl + Alt + 左方向键\t退回到上一个操作的地方 （必备）\nCtrl + Alt + 右方向键\t前进到上一个操作的地方 （必备）*\n### 查找部分\nCtrl + W\t递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 （必备）\nCtrl + Shift + W\t递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 （必备）\n\nCtrl + E\t显示最近打开的文件记录列表 （必备）\nCtrl + N\t根据输入的 类名 查找类文件 （必备）\nCtrl + U\t前往当前光标所在的方法的父类的方法 / 接口定义 （必备）\nCtrl + B\t进入光标所在的方法/变量的接口或是定义处，等效于 Ctrl + 左键单击 （必备）\n\n-----\nShift + F2\t跳转到上一个高亮错误 或 警告位置\n\n### 提示\nCtrl + P\t方法参数提示显示 （必备）\nCtrl + Q\t光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容\nCtrl + +\t展开代码\nCtrl + -\t折叠代码\n\n-----\n\n### 修改编码\nFile -> Settings -> File Encodings -> Default encoding for properties file -> UTF-8\n然后需要勾选\n`Transparent native-to-ascii conversion`","slug":"Java-IDEA","published":1,"updated":"2020-02-07T08:33:05.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucys001dsouo094e093p","content":"<div class=\"alert-red\">目前主要记录一部分快捷键</div>\n<a id=\"more\"></a>\n\n<h3 id=\"快捷编辑部分\"><a href=\"#快捷编辑部分\" class=\"headerlink\" title=\"快捷编辑部分\"></a>快捷编辑部分</h3><p>Ctrl + Y    删除光标所在行 或 删除选中的行 （必备）<br>剪切复制    默认都可以对本行操作<br>Ctrl + Delete    删除光标后面的单词或是中文句 （必备）<br>Ctrl + BackSpace    删除光标前面的单词或是中文句 （必备）</p>\n<hr>\n<p>Ctrl + Alt + Enter    光标所在行上空出一行，光标定位到新行 （必备）<br>Ctrl + Shift + Z    取消撤销 （必备）<br>Ctrl + Shift + Alt + V    无格式黏贴 （必备）</p>\n<h3 id=\"快捷移动\"><a href=\"#快捷移动\" class=\"headerlink\" title=\"快捷移动\"></a>快捷移动</h3><p>Ctrl + <code>[</code>    移动光标到当前所在代码的花括号开始位置<br>Ctrl + <code>]</code>    移动光标到当前所在代码的花括号结束位置<br>Ctrl + F3    调转到所选中的词的下一个引用位置 （必备）</p>\n<p>Ctrl + 左方向键    光标跳转到当前单词 / 中文句的左侧开头位置 （必备）<br>Ctrl + 右方向键    光标跳转到当前单词 / 中文句的右侧开头位置 （必备）<br>Ctrl + 前方向键    等效于鼠标滚轮向前效果 （必备）<br>Ctrl + 后方向键    等效于鼠标滚轮向后效果 （必备）</p>\n<hr>\n<p><em>Ctrl + Alt + 左方向键    退回到上一个操作的地方 （必备）<br>Ctrl + Alt + 右方向键    前进到上一个操作的地方 （必备）</em></p>\n<h3 id=\"查找部分\"><a href=\"#查找部分\" class=\"headerlink\" title=\"查找部分\"></a>查找部分</h3><p>Ctrl + W    递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 （必备）<br>Ctrl + Shift + W    递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 （必备）</p>\n<p>Ctrl + E    显示最近打开的文件记录列表 （必备）<br>Ctrl + N    根据输入的 类名 查找类文件 （必备）<br>Ctrl + U    前往当前光标所在的方法的父类的方法 / 接口定义 （必备）<br>Ctrl + B    进入光标所在的方法/变量的接口或是定义处，等效于 Ctrl + 左键单击 （必备）</p>\n<hr>\n<p>Shift + F2    跳转到上一个高亮错误 或 警告位置</p>\n<h3 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h3><p>Ctrl + P    方法参数提示显示 （必备）<br>Ctrl + Q    光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容<br>Ctrl + +    展开代码<br>Ctrl + -    折叠代码</p>\n<hr>\n<h3 id=\"修改编码\"><a href=\"#修改编码\" class=\"headerlink\" title=\"修改编码\"></a>修改编码</h3><p>File -&gt; Settings -&gt; File Encodings -&gt; Default encoding for properties file -&gt; UTF-8<br>然后需要勾选<br><code>Transparent native-to-ascii conversion</code></p>\n","site":{"data":{}},"excerpt":"<div class=\"alert-red\">目前主要记录一部分快捷键</div>","more":"<h3 id=\"快捷编辑部分\"><a href=\"#快捷编辑部分\" class=\"headerlink\" title=\"快捷编辑部分\"></a>快捷编辑部分</h3><p>Ctrl + Y    删除光标所在行 或 删除选中的行 （必备）<br>剪切复制    默认都可以对本行操作<br>Ctrl + Delete    删除光标后面的单词或是中文句 （必备）<br>Ctrl + BackSpace    删除光标前面的单词或是中文句 （必备）</p>\n<hr>\n<p>Ctrl + Alt + Enter    光标所在行上空出一行，光标定位到新行 （必备）<br>Ctrl + Shift + Z    取消撤销 （必备）<br>Ctrl + Shift + Alt + V    无格式黏贴 （必备）</p>\n<h3 id=\"快捷移动\"><a href=\"#快捷移动\" class=\"headerlink\" title=\"快捷移动\"></a>快捷移动</h3><p>Ctrl + <code>[</code>    移动光标到当前所在代码的花括号开始位置<br>Ctrl + <code>]</code>    移动光标到当前所在代码的花括号结束位置<br>Ctrl + F3    调转到所选中的词的下一个引用位置 （必备）</p>\n<p>Ctrl + 左方向键    光标跳转到当前单词 / 中文句的左侧开头位置 （必备）<br>Ctrl + 右方向键    光标跳转到当前单词 / 中文句的右侧开头位置 （必备）<br>Ctrl + 前方向键    等效于鼠标滚轮向前效果 （必备）<br>Ctrl + 后方向键    等效于鼠标滚轮向后效果 （必备）</p>\n<hr>\n<p><em>Ctrl + Alt + 左方向键    退回到上一个操作的地方 （必备）<br>Ctrl + Alt + 右方向键    前进到上一个操作的地方 （必备）</em></p>\n<h3 id=\"查找部分\"><a href=\"#查找部分\" class=\"headerlink\" title=\"查找部分\"></a>查找部分</h3><p>Ctrl + W    递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 （必备）<br>Ctrl + Shift + W    递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 （必备）</p>\n<p>Ctrl + E    显示最近打开的文件记录列表 （必备）<br>Ctrl + N    根据输入的 类名 查找类文件 （必备）<br>Ctrl + U    前往当前光标所在的方法的父类的方法 / 接口定义 （必备）<br>Ctrl + B    进入光标所在的方法/变量的接口或是定义处，等效于 Ctrl + 左键单击 （必备）</p>\n<hr>\n<p>Shift + F2    跳转到上一个高亮错误 或 警告位置</p>\n<h3 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h3><p>Ctrl + P    方法参数提示显示 （必备）<br>Ctrl + Q    光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容<br>Ctrl + +    展开代码<br>Ctrl + -    折叠代码</p>\n<hr>\n<h3 id=\"修改编码\"><a href=\"#修改编码\" class=\"headerlink\" title=\"修改编码\"></a>修改编码</h3><p>File -&gt; Settings -&gt; File Encodings -&gt; Default encoding for properties file -&gt; UTF-8<br>然后需要勾选<br><code>Transparent native-to-ascii conversion</code></p>"},{"title":"2019年4月13日 FASTJson解析json","date":"2019-04-13T09:22:40.000Z","_content":"<div class=\"alert-red\"> FASTJson 解析json</div>\n<div class=\"alert-blue\"></div>\n<div class=\"alert-green\"></div>\n<!--more-->\n\n### 调用api部分\n```java\nString u = \"https://route.showapi.com/341-1?showapi_appid=搞了好久A&showapi_sign=搞了好久B\";\nURL url = new URL(u);\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.connect();\n\nInputStreamReader in = new InputStreamReader(connection.getInputStream());\nBufferedReader bf = new BufferedReader(in);\nString stringJsonbf=null; //暂时存储\nStringBuffer stringBuffer = new StringBuffer();\nwhile ((stringJsonbf= bf.readLine())!=null){\n\tstringBuffer.append(stringJsonbf);\n}\nString stringJson=stringBuffer.toString(); //得到json数据转为String\nSystem.out.println(stringJson);\n```\n\n### json解析部分\n```java\nList<类> happies = new ArrayList<类>(); //类为json中所需要对象的对应类\nJSONObject jsonObject1 = new JSONObject(stringJson); //string转换为json对象\nJSONObject jsonObject2 = jsonObject1.getJSONObject(\"showapi_res_body\");//这个对象中还有个对象用jsonObject1.getJSONObject获取\nJSONArray jsonArray =jsonObject2.getJSONArray(\"contentlist\");//获取后的对象里有数组获取数组\n\nfor(int i=1;i<jsonArray.length();i++){\n\tJSONObject jsTempt = jsonArray.getJSONObject(i);\n\tString title = jsTempt.getString(\"title\");\n\tString text = jsTempt.getString(\"text\");\n\tString ct = jsTempt.getString(\"ct\");\n\tHappy 对象 = new 类(title,text,ct);\n\thappies.add(对象);//加入list中\n}\nSystem.out.println(happies);\n```\n### 注意问题\n#### 搞了好久A和搞了好久B\n![](./2019n4y12r/2.png)\n这里的appid和sign**不是这个应用的id**=, =而是你账号里的\n![](./2019n4y12r/1.png)\n好吧..................生成sign的方式官方有\n\n1. 您首先需要设置除了showapi_sign之外的所有必传参数，例如：\n`?title=足球&page=1&pag=for_test&showapi_appid=123`\n\n2. 对上述参数key进行排序按照字典序(a-z)，请注意byte[]类型的参数不参与排序和计算签名，比如上传的文件；空值的参数也不参与排序和计算签名。排序后以key+value方式拼装字符串如下：\npagfor_testpage1showapi_appid123title足球\n**请注意上述的pag字段排在page字段之前**\n\n3. String str=\"pagfor_testpage1showapi_appid123title足球\"\nstr=str+secret\n也就是str=str+\"006513e01bd344fca03610d1fd0145f0\" //secret用小写\n最后str=\"pagfor_testpage1showapi_appid123title足球006513e01bd344fca03610d1fd0145f0\"\n注意在签名计算时,中文依然是中文,并没有被urlencode\nString sign=DigestUtils.md5Hex(str.getBytes(\"utf-8\"))\n最后得到 sign=\"030554F4F9375B4DCFEF5ECEC4488737\"\n\n不得不说这个代码表示真的好\n#### 还有个json解析问题\n`JSONObject jsonObject2 = new JSONObject(jsonObject1.getJSONObject(\"showapi_res_body\"))`\n好吧开始是这样的结果一直报错/........具体原因先留个坑吧\n2019年4月13日00:07:54\n\n###  FASTJson 解析json\n文章学习来源 [声明出处](https://blog.csdn.net/xingfei_work/article/details/76572550)\n从这里我学会了解析json 自己也点写笔记\n\n`String json1 = \"{'id':1,'name':'JAVAEE-1703','stus':[{'id':101,'name':'刘铭','age':16}]}\";`\n待解析json数据\n构建对应的类\n### 解析对象\n#### 第一层\n```java\npublic class Grade {\n\tprivate int id;\n\tprivate String name;\n\tprivate ArrayList<Student> stus;\n\tpublic Grade(int id, String name, ArrayList<Student> stus) {\n\t\tsuper();\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t\tthis.stus = stus;\n\t}//这个构造方法对应了json数据 由于json数据中有数组 所以写了链表存储数组\n\t//省略若干get和set以及toString的重写(用于打印对象)\n}\n```\n#### 第二层\n```java\npublic class Student {\nprivate int id;\nprivate String name;\nprivate int age;\n//省略若干get和set以及toString的重写(用于打印对象)\n}//这里同样对应了json数组中的数据\n```\n#### 主要部分\n```java\nString json1 = \"{'id':1,'name':'JAVAEE-1703','stus':[{'id':101,'name':'刘铭','age':16}]}\";\nGrade grade = JSON.parseObject(json1,Grade.class);\nSystem.out.println(grade);\n```\n\n不得不说阿里的这个简化了太多了疯狂扣6\n\n### 解析数组\n```java\nString json2 = \"['北京','天津','杭州']\";\nList<String> list=JSON.parseArray(json2, String.class);\n```","source":"_posts/Java-SDK-Fastjson的使用.md","raw":"---\ntitle: 2019年4月13日 FASTJson解析json\ncategories:\n  - Java\ndate: 2019-04-13 17:22:40\ntags:\n---\n<div class=\"alert-red\"> FASTJson 解析json</div>\n<div class=\"alert-blue\"></div>\n<div class=\"alert-green\"></div>\n<!--more-->\n\n### 调用api部分\n```java\nString u = \"https://route.showapi.com/341-1?showapi_appid=搞了好久A&showapi_sign=搞了好久B\";\nURL url = new URL(u);\nHttpURLConnection connection = (HttpURLConnection)url.openConnection();\nconnection.connect();\n\nInputStreamReader in = new InputStreamReader(connection.getInputStream());\nBufferedReader bf = new BufferedReader(in);\nString stringJsonbf=null; //暂时存储\nStringBuffer stringBuffer = new StringBuffer();\nwhile ((stringJsonbf= bf.readLine())!=null){\n\tstringBuffer.append(stringJsonbf);\n}\nString stringJson=stringBuffer.toString(); //得到json数据转为String\nSystem.out.println(stringJson);\n```\n\n### json解析部分\n```java\nList<类> happies = new ArrayList<类>(); //类为json中所需要对象的对应类\nJSONObject jsonObject1 = new JSONObject(stringJson); //string转换为json对象\nJSONObject jsonObject2 = jsonObject1.getJSONObject(\"showapi_res_body\");//这个对象中还有个对象用jsonObject1.getJSONObject获取\nJSONArray jsonArray =jsonObject2.getJSONArray(\"contentlist\");//获取后的对象里有数组获取数组\n\nfor(int i=1;i<jsonArray.length();i++){\n\tJSONObject jsTempt = jsonArray.getJSONObject(i);\n\tString title = jsTempt.getString(\"title\");\n\tString text = jsTempt.getString(\"text\");\n\tString ct = jsTempt.getString(\"ct\");\n\tHappy 对象 = new 类(title,text,ct);\n\thappies.add(对象);//加入list中\n}\nSystem.out.println(happies);\n```\n### 注意问题\n#### 搞了好久A和搞了好久B\n![](./2019n4y12r/2.png)\n这里的appid和sign**不是这个应用的id**=, =而是你账号里的\n![](./2019n4y12r/1.png)\n好吧..................生成sign的方式官方有\n\n1. 您首先需要设置除了showapi_sign之外的所有必传参数，例如：\n`?title=足球&page=1&pag=for_test&showapi_appid=123`\n\n2. 对上述参数key进行排序按照字典序(a-z)，请注意byte[]类型的参数不参与排序和计算签名，比如上传的文件；空值的参数也不参与排序和计算签名。排序后以key+value方式拼装字符串如下：\npagfor_testpage1showapi_appid123title足球\n**请注意上述的pag字段排在page字段之前**\n\n3. String str=\"pagfor_testpage1showapi_appid123title足球\"\nstr=str+secret\n也就是str=str+\"006513e01bd344fca03610d1fd0145f0\" //secret用小写\n最后str=\"pagfor_testpage1showapi_appid123title足球006513e01bd344fca03610d1fd0145f0\"\n注意在签名计算时,中文依然是中文,并没有被urlencode\nString sign=DigestUtils.md5Hex(str.getBytes(\"utf-8\"))\n最后得到 sign=\"030554F4F9375B4DCFEF5ECEC4488737\"\n\n不得不说这个代码表示真的好\n#### 还有个json解析问题\n`JSONObject jsonObject2 = new JSONObject(jsonObject1.getJSONObject(\"showapi_res_body\"))`\n好吧开始是这样的结果一直报错/........具体原因先留个坑吧\n2019年4月13日00:07:54\n\n###  FASTJson 解析json\n文章学习来源 [声明出处](https://blog.csdn.net/xingfei_work/article/details/76572550)\n从这里我学会了解析json 自己也点写笔记\n\n`String json1 = \"{'id':1,'name':'JAVAEE-1703','stus':[{'id':101,'name':'刘铭','age':16}]}\";`\n待解析json数据\n构建对应的类\n### 解析对象\n#### 第一层\n```java\npublic class Grade {\n\tprivate int id;\n\tprivate String name;\n\tprivate ArrayList<Student> stus;\n\tpublic Grade(int id, String name, ArrayList<Student> stus) {\n\t\tsuper();\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t\tthis.stus = stus;\n\t}//这个构造方法对应了json数据 由于json数据中有数组 所以写了链表存储数组\n\t//省略若干get和set以及toString的重写(用于打印对象)\n}\n```\n#### 第二层\n```java\npublic class Student {\nprivate int id;\nprivate String name;\nprivate int age;\n//省略若干get和set以及toString的重写(用于打印对象)\n}//这里同样对应了json数组中的数据\n```\n#### 主要部分\n```java\nString json1 = \"{'id':1,'name':'JAVAEE-1703','stus':[{'id':101,'name':'刘铭','age':16}]}\";\nGrade grade = JSON.parseObject(json1,Grade.class);\nSystem.out.println(grade);\n```\n\n不得不说阿里的这个简化了太多了疯狂扣6\n\n### 解析数组\n```java\nString json2 = \"['北京','天津','杭州']\";\nList<String> list=JSON.parseArray(json2, String.class);\n```","slug":"Java-SDK-Fastjson的使用","published":1,"updated":"2020-02-27T01:49:16.304Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucyv001gsouo0dhndw0r","content":"<div class=\"alert-red\"> FASTJson 解析json</div>\n<div class=\"alert-blue\"></div>\n<div class=\"alert-green\"></div>\n<a id=\"more\"></a>\n\n<h3 id=\"调用api部分\"><a href=\"#调用api部分\" class=\"headerlink\" title=\"调用api部分\"></a>调用api部分</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String u = <span class=\"string\">\"https://route.showapi.com/341-1?showapi_appid=搞了好久A&amp;showapi_sign=搞了好久B\"</span>;</span><br><span class=\"line\">URL url = <span class=\"keyword\">new</span> URL(u);</span><br><span class=\"line\">HttpURLConnection connection = (HttpURLConnection)url.openConnection();</span><br><span class=\"line\">connection.connect();</span><br><span class=\"line\"></span><br><span class=\"line\">InputStreamReader in = <span class=\"keyword\">new</span> InputStreamReader(connection.getInputStream());</span><br><span class=\"line\">BufferedReader bf = <span class=\"keyword\">new</span> BufferedReader(in);</span><br><span class=\"line\">String stringJsonbf=<span class=\"keyword\">null</span>; <span class=\"comment\">//暂时存储</span></span><br><span class=\"line\">StringBuffer stringBuffer = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\"><span class=\"keyword\">while</span> ((stringJsonbf= bf.readLine())!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\tstringBuffer.append(stringJsonbf);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">String stringJson=stringBuffer.toString(); <span class=\"comment\">//得到json数据转为String</span></span><br><span class=\"line\">System.out.println(stringJson);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"json解析部分\"><a href=\"#json解析部分\" class=\"headerlink\" title=\"json解析部分\"></a>json解析部分</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;类&gt; happies = <span class=\"keyword\">new</span> ArrayList&lt;类&gt;(); <span class=\"comment\">//类为json中所需要对象的对应类</span></span><br><span class=\"line\">JSONObject jsonObject1 = <span class=\"keyword\">new</span> JSONObject(stringJson); <span class=\"comment\">//string转换为json对象</span></span><br><span class=\"line\">JSONObject jsonObject2 = jsonObject1.getJSONObject(<span class=\"string\">\"showapi_res_body\"</span>);<span class=\"comment\">//这个对象中还有个对象用jsonObject1.getJSONObject获取</span></span><br><span class=\"line\">JSONArray jsonArray =jsonObject2.getJSONArray(<span class=\"string\">\"contentlist\"</span>);<span class=\"comment\">//获取后的对象里有数组获取数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;jsonArray.length();i++)&#123;</span><br><span class=\"line\">\tJSONObject jsTempt = jsonArray.getJSONObject(i);</span><br><span class=\"line\">\tString title = jsTempt.getString(<span class=\"string\">\"title\"</span>);</span><br><span class=\"line\">\tString text = jsTempt.getString(<span class=\"string\">\"text\"</span>);</span><br><span class=\"line\">\tString ct = jsTempt.getString(<span class=\"string\">\"ct\"</span>);</span><br><span class=\"line\">\tHappy 对象 = <span class=\"keyword\">new</span> 类(title,text,ct);</span><br><span class=\"line\">\thappies.add(对象);<span class=\"comment\">//加入list中</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(happies);</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意问题\"><a href=\"#注意问题\" class=\"headerlink\" title=\"注意问题\"></a>注意问题</h3><h4 id=\"搞了好久A和搞了好久B\"><a href=\"#搞了好久A和搞了好久B\" class=\"headerlink\" title=\"搞了好久A和搞了好久B\"></a>搞了好久A和搞了好久B</h4><p><img src=\"./2019n4y12r/2.png\" alt=\"\"><br>这里的appid和sign<strong>不是这个应用的id</strong>=, =而是你账号里的<br><img src=\"./2019n4y12r/1.png\" alt=\"\"><br>好吧………………生成sign的方式官方有</p>\n<ol>\n<li><p>您首先需要设置除了showapi_sign之外的所有必传参数，例如：<br><code>?title=足球&amp;page=1&amp;pag=for_test&amp;showapi_appid=123</code></p>\n</li>\n<li><p>对上述参数key进行排序按照字典序(a-z)，请注意byte[]类型的参数不参与排序和计算签名，比如上传的文件；空值的参数也不参与排序和计算签名。排序后以key+value方式拼装字符串如下：<br>pagfor_testpage1showapi_appid123title足球</p>\n</li>\n</ol>\n<p><strong>请注意上述的pag字段排在page字段之前</strong></p>\n<ol start=\"3\">\n<li>String str=”pagfor_testpage1showapi_appid123title足球”<br>str=str+secret<br>也就是str=str+”006513e01bd344fca03610d1fd0145f0” //secret用小写<br>最后str=”pagfor_testpage1showapi_appid123title足球006513e01bd344fca03610d1fd0145f0”<br>注意在签名计算时,中文依然是中文,并没有被urlencode<br>String sign=DigestUtils.md5Hex(str.getBytes(“utf-8”))<br>最后得到 sign=”030554F4F9375B4DCFEF5ECEC4488737”</li>\n</ol>\n<p>不得不说这个代码表示真的好</p>\n<h4 id=\"还有个json解析问题\"><a href=\"#还有个json解析问题\" class=\"headerlink\" title=\"还有个json解析问题\"></a>还有个json解析问题</h4><p><code>JSONObject jsonObject2 = new JSONObject(jsonObject1.getJSONObject(&quot;showapi_res_body&quot;))</code><br>好吧开始是这样的结果一直报错/……..具体原因先留个坑吧<br>2019年4月13日00:07:54</p>\n<h3 id=\"FASTJson-解析json\"><a href=\"#FASTJson-解析json\" class=\"headerlink\" title=\"FASTJson 解析json\"></a>FASTJson 解析json</h3><p>文章学习来源 <a href=\"https://blog.csdn.net/xingfei_work/article/details/76572550\" target=\"_blank\" rel=\"noopener\">声明出处</a><br>从这里我学会了解析json 自己也点写笔记</p>\n<p><code>String json1 = &quot;{&#39;id&#39;:1,&#39;name&#39;:&#39;JAVAEE-1703&#39;,&#39;stus&#39;:[{&#39;id&#39;:101,&#39;name&#39;:&#39;刘铭&#39;,&#39;age&#39;:16}]}&quot;;</code><br>待解析json数据<br>构建对应的类</p>\n<h3 id=\"解析对象\"><a href=\"#解析对象\" class=\"headerlink\" title=\"解析对象\"></a>解析对象</h3><h4 id=\"第一层\"><a href=\"#第一层\" class=\"headerlink\" title=\"第一层\"></a>第一层</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Grade</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> ArrayList&lt;Student&gt; stus;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Grade</span><span class=\"params\">(<span class=\"keyword\">int</span> id, String name, ArrayList&lt;Student&gt; stus)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.stus = stus;</span><br><span class=\"line\">\t&#125;<span class=\"comment\">//这个构造方法对应了json数据 由于json数据中有数组 所以写了链表存储数组</span></span><br><span class=\"line\">\t<span class=\"comment\">//省略若干get和set以及toString的重写(用于打印对象)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"第二层\"><a href=\"#第二层\" class=\"headerlink\" title=\"第二层\"></a>第二层</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\"><span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"><span class=\"comment\">//省略若干get和set以及toString的重写(用于打印对象)</span></span><br><span class=\"line\">&#125;<span class=\"comment\">//这里同样对应了json数组中的数据</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"主要部分\"><a href=\"#主要部分\" class=\"headerlink\" title=\"主要部分\"></a>主要部分</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String json1 = <span class=\"string\">\"&#123;'id':1,'name':'JAVAEE-1703','stus':[&#123;'id':101,'name':'刘铭','age':16&#125;]&#125;\"</span>;</span><br><span class=\"line\">Grade grade = JSON.parseObject(json1,Grade<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">System.out.println(grade);</span><br></pre></td></tr></table></figure>\n\n<p>不得不说阿里的这个简化了太多了疯狂扣6</p>\n<h3 id=\"解析数组\"><a href=\"#解析数组\" class=\"headerlink\" title=\"解析数组\"></a>解析数组</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String json2 = <span class=\"string\">\"['北京','天津','杭州']\"</span>;</span><br><span class=\"line\">List&lt;String&gt; list=JSON.parseArray(json2, String<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"alert-red\"> FASTJson 解析json</div>\n<div class=\"alert-blue\"></div>\n<div class=\"alert-green\"></div>","more":"<h3 id=\"调用api部分\"><a href=\"#调用api部分\" class=\"headerlink\" title=\"调用api部分\"></a>调用api部分</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String u = <span class=\"string\">\"https://route.showapi.com/341-1?showapi_appid=搞了好久A&amp;showapi_sign=搞了好久B\"</span>;</span><br><span class=\"line\">URL url = <span class=\"keyword\">new</span> URL(u);</span><br><span class=\"line\">HttpURLConnection connection = (HttpURLConnection)url.openConnection();</span><br><span class=\"line\">connection.connect();</span><br><span class=\"line\"></span><br><span class=\"line\">InputStreamReader in = <span class=\"keyword\">new</span> InputStreamReader(connection.getInputStream());</span><br><span class=\"line\">BufferedReader bf = <span class=\"keyword\">new</span> BufferedReader(in);</span><br><span class=\"line\">String stringJsonbf=<span class=\"keyword\">null</span>; <span class=\"comment\">//暂时存储</span></span><br><span class=\"line\">StringBuffer stringBuffer = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\"><span class=\"keyword\">while</span> ((stringJsonbf= bf.readLine())!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\tstringBuffer.append(stringJsonbf);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">String stringJson=stringBuffer.toString(); <span class=\"comment\">//得到json数据转为String</span></span><br><span class=\"line\">System.out.println(stringJson);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"json解析部分\"><a href=\"#json解析部分\" class=\"headerlink\" title=\"json解析部分\"></a>json解析部分</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;类&gt; happies = <span class=\"keyword\">new</span> ArrayList&lt;类&gt;(); <span class=\"comment\">//类为json中所需要对象的对应类</span></span><br><span class=\"line\">JSONObject jsonObject1 = <span class=\"keyword\">new</span> JSONObject(stringJson); <span class=\"comment\">//string转换为json对象</span></span><br><span class=\"line\">JSONObject jsonObject2 = jsonObject1.getJSONObject(<span class=\"string\">\"showapi_res_body\"</span>);<span class=\"comment\">//这个对象中还有个对象用jsonObject1.getJSONObject获取</span></span><br><span class=\"line\">JSONArray jsonArray =jsonObject2.getJSONArray(<span class=\"string\">\"contentlist\"</span>);<span class=\"comment\">//获取后的对象里有数组获取数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;jsonArray.length();i++)&#123;</span><br><span class=\"line\">\tJSONObject jsTempt = jsonArray.getJSONObject(i);</span><br><span class=\"line\">\tString title = jsTempt.getString(<span class=\"string\">\"title\"</span>);</span><br><span class=\"line\">\tString text = jsTempt.getString(<span class=\"string\">\"text\"</span>);</span><br><span class=\"line\">\tString ct = jsTempt.getString(<span class=\"string\">\"ct\"</span>);</span><br><span class=\"line\">\tHappy 对象 = <span class=\"keyword\">new</span> 类(title,text,ct);</span><br><span class=\"line\">\thappies.add(对象);<span class=\"comment\">//加入list中</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(happies);</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意问题\"><a href=\"#注意问题\" class=\"headerlink\" title=\"注意问题\"></a>注意问题</h3><h4 id=\"搞了好久A和搞了好久B\"><a href=\"#搞了好久A和搞了好久B\" class=\"headerlink\" title=\"搞了好久A和搞了好久B\"></a>搞了好久A和搞了好久B</h4><p><img src=\"./2019n4y12r/2.png\" alt=\"\"><br>这里的appid和sign<strong>不是这个应用的id</strong>=, =而是你账号里的<br><img src=\"./2019n4y12r/1.png\" alt=\"\"><br>好吧………………生成sign的方式官方有</p>\n<ol>\n<li><p>您首先需要设置除了showapi_sign之外的所有必传参数，例如：<br><code>?title=足球&amp;page=1&amp;pag=for_test&amp;showapi_appid=123</code></p>\n</li>\n<li><p>对上述参数key进行排序按照字典序(a-z)，请注意byte[]类型的参数不参与排序和计算签名，比如上传的文件；空值的参数也不参与排序和计算签名。排序后以key+value方式拼装字符串如下：<br>pagfor_testpage1showapi_appid123title足球</p>\n</li>\n</ol>\n<p><strong>请注意上述的pag字段排在page字段之前</strong></p>\n<ol start=\"3\">\n<li>String str=”pagfor_testpage1showapi_appid123title足球”<br>str=str+secret<br>也就是str=str+”006513e01bd344fca03610d1fd0145f0” //secret用小写<br>最后str=”pagfor_testpage1showapi_appid123title足球006513e01bd344fca03610d1fd0145f0”<br>注意在签名计算时,中文依然是中文,并没有被urlencode<br>String sign=DigestUtils.md5Hex(str.getBytes(“utf-8”))<br>最后得到 sign=”030554F4F9375B4DCFEF5ECEC4488737”</li>\n</ol>\n<p>不得不说这个代码表示真的好</p>\n<h4 id=\"还有个json解析问题\"><a href=\"#还有个json解析问题\" class=\"headerlink\" title=\"还有个json解析问题\"></a>还有个json解析问题</h4><p><code>JSONObject jsonObject2 = new JSONObject(jsonObject1.getJSONObject(&quot;showapi_res_body&quot;))</code><br>好吧开始是这样的结果一直报错/……..具体原因先留个坑吧<br>2019年4月13日00:07:54</p>\n<h3 id=\"FASTJson-解析json\"><a href=\"#FASTJson-解析json\" class=\"headerlink\" title=\"FASTJson 解析json\"></a>FASTJson 解析json</h3><p>文章学习来源 <a href=\"https://blog.csdn.net/xingfei_work/article/details/76572550\" target=\"_blank\" rel=\"noopener\">声明出处</a><br>从这里我学会了解析json 自己也点写笔记</p>\n<p><code>String json1 = &quot;{&#39;id&#39;:1,&#39;name&#39;:&#39;JAVAEE-1703&#39;,&#39;stus&#39;:[{&#39;id&#39;:101,&#39;name&#39;:&#39;刘铭&#39;,&#39;age&#39;:16}]}&quot;;</code><br>待解析json数据<br>构建对应的类</p>\n<h3 id=\"解析对象\"><a href=\"#解析对象\" class=\"headerlink\" title=\"解析对象\"></a>解析对象</h3><h4 id=\"第一层\"><a href=\"#第一层\" class=\"headerlink\" title=\"第一层\"></a>第一层</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Grade</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> ArrayList&lt;Student&gt; stus;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Grade</span><span class=\"params\">(<span class=\"keyword\">int</span> id, String name, ArrayList&lt;Student&gt; stus)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.stus = stus;</span><br><span class=\"line\">\t&#125;<span class=\"comment\">//这个构造方法对应了json数据 由于json数据中有数组 所以写了链表存储数组</span></span><br><span class=\"line\">\t<span class=\"comment\">//省略若干get和set以及toString的重写(用于打印对象)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"第二层\"><a href=\"#第二层\" class=\"headerlink\" title=\"第二层\"></a>第二层</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\"><span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"><span class=\"comment\">//省略若干get和set以及toString的重写(用于打印对象)</span></span><br><span class=\"line\">&#125;<span class=\"comment\">//这里同样对应了json数组中的数据</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"主要部分\"><a href=\"#主要部分\" class=\"headerlink\" title=\"主要部分\"></a>主要部分</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String json1 = <span class=\"string\">\"&#123;'id':1,'name':'JAVAEE-1703','stus':[&#123;'id':101,'name':'刘铭','age':16&#125;]&#125;\"</span>;</span><br><span class=\"line\">Grade grade = JSON.parseObject(json1,Grade<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">System.out.println(grade);</span><br></pre></td></tr></table></figure>\n\n<p>不得不说阿里的这个简化了太多了疯狂扣6</p>\n<h3 id=\"解析数组\"><a href=\"#解析数组\" class=\"headerlink\" title=\"解析数组\"></a>解析数组</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String json2 = <span class=\"string\">\"['北京','天津','杭州']\"</span>;</span><br><span class=\"line\">List&lt;String&gt; list=JSON.parseArray(json2, String<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br></pre></td></tr></table></figure>"},{"title":"Springboot日志操作","date":"2019-05-18T06:14:29.000Z","_content":"<div class=\"alert-red\">springboot</div>\n<div class=\"alert-blue\">日志</div>\n<div class=\"alert-green\"></div>\n<!--more-->\n\n### 日志\n```java\nLogger logger = LoggerFactory.getLogger(getClass());\nlogger.trace();\nlogger.debug();\nlogger.info();\nlogger.warn();\nlogger.error();\n\nspringboot 默认日志级别为info及以上\n```\n\n### 日志配置\n```java\n# com.xyz 下日志级别\nlogging.level.com.xyz=trace\n# 设置root级别 设置默认级别\nlogging.level.root=debug\n\n#输出到当前项目根路径下的 springboot.log 文件中\n#logging.file=springboot.log\n#输出到当前项目所在磁盘根路径下的 /springboot/log目录中的 spring.log 文件中,\nlogging.path=springboot/log\n```\n### 更改输出格式\n```java\n# 日志输出格式说明：\n# %d 输出日期时间，\n# %thread 输出当前线程名，\n# %-5level 输出日志级别，左对齐5个字符宽度\n# %logger{50} 输出全类名最长50个字符，超过按照句点分割\n# %msg 日志信息\n# %n 换行符\n# 修改控制台输出的日志格式\nlogging.pattern.console=%d{yyyy-MM-dd} [%thread] %-5level %logger{50} - %msg%n\n# 修改文件中输出的日志格式\nlogging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} >>> [%thread] >>> %-5level >>>\n%logger{50} >>> %msg%n\n```","source":"_posts/Java-Springboot日志操作.md","raw":"---\ntitle: Springboot日志操作\ntags:\ncategories:\n  - Java\ndate: 2019-05-18 14:14:29\n---\n<div class=\"alert-red\">springboot</div>\n<div class=\"alert-blue\">日志</div>\n<div class=\"alert-green\"></div>\n<!--more-->\n\n### 日志\n```java\nLogger logger = LoggerFactory.getLogger(getClass());\nlogger.trace();\nlogger.debug();\nlogger.info();\nlogger.warn();\nlogger.error();\n\nspringboot 默认日志级别为info及以上\n```\n\n### 日志配置\n```java\n# com.xyz 下日志级别\nlogging.level.com.xyz=trace\n# 设置root级别 设置默认级别\nlogging.level.root=debug\n\n#输出到当前项目根路径下的 springboot.log 文件中\n#logging.file=springboot.log\n#输出到当前项目所在磁盘根路径下的 /springboot/log目录中的 spring.log 文件中,\nlogging.path=springboot/log\n```\n### 更改输出格式\n```java\n# 日志输出格式说明：\n# %d 输出日期时间，\n# %thread 输出当前线程名，\n# %-5level 输出日志级别，左对齐5个字符宽度\n# %logger{50} 输出全类名最长50个字符，超过按照句点分割\n# %msg 日志信息\n# %n 换行符\n# 修改控制台输出的日志格式\nlogging.pattern.console=%d{yyyy-MM-dd} [%thread] %-5level %logger{50} - %msg%n\n# 修改文件中输出的日志格式\nlogging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} >>> [%thread] >>> %-5level >>>\n%logger{50} >>> %msg%n\n```","slug":"Java-Springboot日志操作","published":1,"updated":"2020-02-07T08:32:51.420Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucyw001ksouof3igb0b8","content":"<div class=\"alert-red\">springboot</div>\n<div class=\"alert-blue\">日志</div>\n<div class=\"alert-green\"></div>\n<a id=\"more\"></a>\n\n<h3 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class=\"line\">logger.trace();</span><br><span class=\"line\">logger.debug();</span><br><span class=\"line\">logger.info();</span><br><span class=\"line\">logger.warn();</span><br><span class=\"line\">logger.error();</span><br><span class=\"line\"></span><br><span class=\"line\">springboot 默认日志级别为info及以上</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"日志配置\"><a href=\"#日志配置\" class=\"headerlink\" title=\"日志配置\"></a>日志配置</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># com.xyz 下日志级别</span><br><span class=\"line\">logging.level.com.xyz=trace</span><br><span class=\"line\"># 设置root级别 设置默认级别</span><br><span class=\"line\">logging.level.root=debug</span><br><span class=\"line\"></span><br><span class=\"line\">#输出到当前项目根路径下的 springboot.log 文件中</span><br><span class=\"line\">#logging.file=springboot.log</span><br><span class=\"line\">#输出到当前项目所在磁盘根路径下的 /springboot/log目录中的 spring.log 文件中,</span><br><span class=\"line\">logging.path=springboot/log</span><br></pre></td></tr></table></figure>\n<h3 id=\"更改输出格式\"><a href=\"#更改输出格式\" class=\"headerlink\" title=\"更改输出格式\"></a>更改输出格式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 日志输出格式说明：</span><br><span class=\"line\"># %d 输出日期时间，</span><br><span class=\"line\"># %thread 输出当前线程名，</span><br><span class=\"line\"># %-5level 输出日志级别，左对齐5个字符宽度</span><br><span class=\"line\"># %logger&#123;50&#125; 输出全类名最长50个字符，超过按照句点分割</span><br><span class=\"line\"># %msg 日志信息</span><br><span class=\"line\"># %n 换行符</span><br><span class=\"line\"># 修改控制台输出的日志格式</span><br><span class=\"line\">logging.pattern.console=%d&#123;yyyy-MM-dd&#125; [%thread] %-<span class=\"number\">5l</span>evel %logger&#123;<span class=\"number\">50</span>&#125; - %msg%n</span><br><span class=\"line\"># 修改文件中输出的日志格式</span><br><span class=\"line\">logging.pattern.file=%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; &gt;&gt;&gt; [%thread] &gt;&gt;&gt; %-<span class=\"number\">5l</span>evel &gt;&gt;&gt;</span><br><span class=\"line\">%logger&#123;<span class=\"number\">50</span>&#125; &gt;&gt;&gt; %msg%n</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"alert-red\">springboot</div>\n<div class=\"alert-blue\">日志</div>\n<div class=\"alert-green\"></div>","more":"<h3 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class=\"line\">logger.trace();</span><br><span class=\"line\">logger.debug();</span><br><span class=\"line\">logger.info();</span><br><span class=\"line\">logger.warn();</span><br><span class=\"line\">logger.error();</span><br><span class=\"line\"></span><br><span class=\"line\">springboot 默认日志级别为info及以上</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"日志配置\"><a href=\"#日志配置\" class=\"headerlink\" title=\"日志配置\"></a>日志配置</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># com.xyz 下日志级别</span><br><span class=\"line\">logging.level.com.xyz=trace</span><br><span class=\"line\"># 设置root级别 设置默认级别</span><br><span class=\"line\">logging.level.root=debug</span><br><span class=\"line\"></span><br><span class=\"line\">#输出到当前项目根路径下的 springboot.log 文件中</span><br><span class=\"line\">#logging.file=springboot.log</span><br><span class=\"line\">#输出到当前项目所在磁盘根路径下的 /springboot/log目录中的 spring.log 文件中,</span><br><span class=\"line\">logging.path=springboot/log</span><br></pre></td></tr></table></figure>\n<h3 id=\"更改输出格式\"><a href=\"#更改输出格式\" class=\"headerlink\" title=\"更改输出格式\"></a>更改输出格式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 日志输出格式说明：</span><br><span class=\"line\"># %d 输出日期时间，</span><br><span class=\"line\"># %thread 输出当前线程名，</span><br><span class=\"line\"># %-5level 输出日志级别，左对齐5个字符宽度</span><br><span class=\"line\"># %logger&#123;50&#125; 输出全类名最长50个字符，超过按照句点分割</span><br><span class=\"line\"># %msg 日志信息</span><br><span class=\"line\"># %n 换行符</span><br><span class=\"line\"># 修改控制台输出的日志格式</span><br><span class=\"line\">logging.pattern.console=%d&#123;yyyy-MM-dd&#125; [%thread] %-<span class=\"number\">5l</span>evel %logger&#123;<span class=\"number\">50</span>&#125; - %msg%n</span><br><span class=\"line\"># 修改文件中输出的日志格式</span><br><span class=\"line\">logging.pattern.file=%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; &gt;&gt;&gt; [%thread] &gt;&gt;&gt; %-<span class=\"number\">5l</span>evel &gt;&gt;&gt;</span><br><span class=\"line\">%logger&#123;<span class=\"number\">50</span>&#125; &gt;&gt;&gt; %msg%n</span><br></pre></td></tr></table></figure>"},{"title":"Libevent代码初期了解","date":"2020-02-19T06:56:55.000Z","img":"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/Libevent%E5%B0%81%E9%9D%A2.png","_content":"学习来源\n<Linux 高性能服务器编程>\n# I/O框架库概述\n## Reactor模式\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/%E5%9B%BE12-1IO%E6%A1%86%E6%9E%B6%E7%BB%84%E7%BB%84%E4%BB%B6.png)\n句柄(Handler)\n由于统一了事件源, 一个事件一般跟一个句柄绑定在一起, 事件就绪之后 会通过句柄通知这一个事件.\n在Linux中 I/O 事件对应的句柄->文件描述符, 信号事件->信号值\n\n事件多路分发器(EventDemultiplexer)\n事件的到来是随机的, 异步的. 所以只能通过一个循环一直等待事件并进行处理 --- 事件循环\n一般通过IO复用实现 select poll epoll_wait\n\n事件处理器(EventHandle)\n具体事件处理器(ConcreteEventHandler)\n事件处理器执行事件对应的业务逻辑, 通常包含一个或多个handler_event回调函数, 这些回调函数在事件循环中被执行\n\nReactor\nhandler_events: 执行事件循环 重复等待事件, 然后依次调用对应的事件处理器\nregister_handler: 向事件多路分发器中注册事件\nremove_handler: 从中删除一个事件\n\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/%E5%9B%BE12-2%20IO%E6%A1%86%E6%9E%B6%E5%BA%93%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%97%B6%E5%BA%8F%E5%9B%BE.png)\n\n## Libevent源码分析\n```c++\n#include <sys/signal.h>\n#include <event.h>\n#include <cstdio>\n\nvoid signal_cb(int fd, short event, void* argc)\n{\n    event_base* base = (event_base*)argc;\n    timeval delay = {2, 0};\n\n    printf(\"Caught an interrupt signal\\n\");\n    event_base_loopexit(base, &delay);\n}\n\nvoid timeout_cb(int fd, short event, void* argc)\n{\n    printf(\"timeout\\n\");\n}\nint main()\n{\n    // 相当于创建一个Reactor实例\n    event_base* base = event_init();\n    \n    event* signal_event = evsignal_new(base, SIGINT, signal_cb, base);\n    event_add(signal_event, nullptr);\n    \n    event* timeout_event = evtimer_new(base, timeout_cb, nullptr);\n    timeval tv{1, 0};\n    event_add(timeout_event, &tv);\n    \n    event_base_dispatch(base);\n    event_free(signal_event);\n    event_free(timeout_event);\n    event_base_free(base);\n}\n```\n创建一个事件处理器 然后为绑定上相应的回调函数.\n然后把这个事件处理器注册到事件队列中中,\n\n然后事件多路分发器依靠循环一直等待事件的到来, 事件到来后通知相应的事件处理器\nReactor则管理这些\n\n首先要去了解下 `事件处理器` 对应的就是event这个结构体\n```c++\nstruct event {\n\tstruct event_callback ev_evcallback;\n\n\t// 事件处理器从属的 event_base\n\tstruct event_base *ev_base;\n\t// 信号值 或者 文件描述符\n\tevutil_socket_t ev_fd;\n\t// 定时器的超时时间\n\tstruct timeval ev_timeout;\n\t\n\t// 仅用于定时事件\n\tunion {\n\t\t// 队列--指出在通用定时器中的位置\n\t\tTAILQ_ENTRY(event) ev_next_with_common_timeout;\n\t\t// 时间堆--指出了在时间堆中的位置\n\t\tint min_heap_idx;\n\t} ev_timeout_pos;\n\n\tunion {\n\t\tstruct {\n\t\t\t// 通过这个成员 将具有相同文件描述符的IO事件处理器串联起来\n\t\t\tLIST_ENTRY (event) ev_io_next;\n\t\t\tstruct timeval ev_timeout;\n\t\t} ev_io;\n\t\tstruct {\n\t\t\t// 相同信号的串联起来\n\t\t\tLIST_ENTRY (event) ev_signal_next;\n\t\t\tshort ev_ncalls;\n\t\t\t/* Allows deletes in callback */\n\t\t\tshort *ev_pncalls;\n\t\t} ev_signal;\n\t} ev_;\n\n\t// 事件类型, 可以通过位处理设置非互斥事件\n\tshort ev_events;\n\t// 当前激活事件的类型, 说明被激活的原因\n\tshort ev_res;\n};\n```\n可以看到其中有很多的属性, 三种事件对应的不同的属性.\n\n这些属性的填充函数\n`evsignal_new``evtimer_new`是宏 统一调用`event_new`\n`event_new`调用`event_assign`来进行主要的填充\n\n\n```\n//@通过宏封装注册函数\n\n一个事件生成函数 经过宏的封装(可以自动填充某些此事件用不到的参数)可以更方便的对应不同事件的生成, 既统一了注册, 又方便用户调用\n```\n属性之一便是回调函数, 事件回调函数有自己的规定\n```\n//@统一事件回调函数\n\nvoid (*callback)(evutil_socket_t, short, void *)\n这样能够统一回调函数的格式, 同时方便管理\n```\n事件处理器创建完毕, 该把事件处理器添加到事件注册队列. 样例代码中通过的`event_add`函数来实现将事件处理器添加到事件注册队列\n`event_add`实际由`event_add_nolock_`实现 所以接下来是`event_add_nolock_`函数的说明\n\n```\n//@事件处理器的分发实现\n将传入的event按照不同类型的事件处理器 分别处理\n(因为event_new已经填充了ev_events说明事件类型)\n\nIO事件 添加绑定\n信号事件 绑定相应的信号\n定时器 放入相关的的时间管理数据结构中\n```\n使用`event_queue_insert_inserted`进行注册\n这里的代码2.1.11 与书上的差别较大, 少了多一半的功能, 也没有被抽成函数, 暂不知道对应的功能代码去了哪里\n照书上来说`event_queue_insert_inserted`实现的是将事件处理器加入到`event_base`的某个事件队列中. 对于新添加的IO和信号事件处理器, 还需要让事件多路分发器来监听对应的事件, 然后建立相应的映射关系. 分别使用`evmap_io_add_`和`evmap_signal_add_`(相当于图中的`register_event`)建立映射. \n\n`evmap_io_add_`中有一个结构体`event_io_map`\n`event_io_map`会根据不同的平台最终对应不同的数据结构\n\n`evmap_io_add_`函数\n函数中用到的东西, 我目前吸收不了....... 总之是为将IO事件处理器加入到`event_base`的事件队列中实现的\n\n`eventop`结构体 是`event_base`中封装IO复用机制的结构体, 提供了统一的接口\n```c++\n// 为给定的event_base声明后端的结构体\nstruct eventop {\n\t// 后端IO复用技术的名称\n\tconst char *name;\n\n\t// 初始化 函数需要初始化所有要用的属性\n\t// 返回的指针会被event_init存储在event_base.evbase\n\t// 失败后返回NULL\n\tvoid *(*init)(struct event_base *);\n\t// 注册事件\n\tint (*add)(struct event_base *, evutil_socket_t fd, short old, short events, void *fdinfo);\n\t// 删除事件\n\tint (*del)(struct event_base *, evutil_socket_t fd, short old, short events, void *fdinfo);\n\t// 等待事件\n\tint (*dispatch)(struct event_base *, struct timeval *);\n\t// 释放IO复用机制使用的资源\n\tvoid (*dealloc)(struct event_base *);\n\t// 标记fork后是否需要重新初始化event_base的标志位\n\tint need_reinit;\n\t// 用于设定io复用技术支持的一些特性\n\tenum event_method_feature features;\n\t// 额外内存的分配\n\tsize_t fdinfo_len;\n};\n```\n\n`event_base`是Libevent的Reactor. 超长结构体 删除了我不理解的部分\n```c++\nstruct event_base {\n\t// 记录选择的I/O复用机制\n\tconst struct eventop *evsel;\n\t// 指向IO复用机制真正存储的数据\n\tvoid *evbase;\n\n\t// 事件变换队列 如果一个文件描述符上注册的事件被多次修改, 则可以使用缓冲避免重复的系统调用\n\t// 比如epoll_ctl, 仅能用于时间复杂度O(1)的IO复用技术\n\tstruct event_changelist changelist;\n\n\t// 信号的后端处理机制\n\tconst struct eventop *evsigsel;\n\t// 信号事件处理器使用的数据结构, 其中封装了socketpair创建的管道. 用于信号处理函数和\n\t// 事件多路分发器之间的通信, 统一事件源的思路\n\tstruct evsig_info sig;\n\n\t// 添加到event_base的虚拟(所有, 激活)事件数量, 虚拟(所有, 激活)事件最大数量\n\tint virtual_event_count;\n\tint virtual_event_count_max;\n\tint event_count;\n\tint event_count_max;\n\tint event_count_active;\n\tint event_count_active_max;\n\n\t// 处理完事件后 是否退出循环\n\tint event_gotterm;\n\t// 是否立即终止循环\n\tint event_break;\n\t// 是否启动一个新的事件循环\n\tint event_continue;\n\n\t// 当前正在处理的活动事件队列的优先级\n\tint event_running_priority;\n\n\t// 标记事件循环是否已经启动, 防止重入\n\tint running_loop;\n\n\t// 活动事件队列数组. 索引值越小的队列优先级越高. 高优先级的活动事件队列中的事件处理器被优先处理\n\tstruct evcallback_list *activequeues;\n\t// 活动事件队列数组的大小 说明有nactivequeues个不同优先级的活动事件队列\n\tint nactivequeues;\n\t/** A list of event_callbacks that should become active the next time\n\t * we process events, but not this time. */\n\tstruct evcallback_list active_later_queue;\n\n\t// 共同超时逻辑\n\n\t// 管理通用定时器队列 实体数量 总数\n\tstruct common_timeout_list **common_timeout_queues;\n\tint n_common_timeouts;\n\tint n_common_timeouts_allocated;\n\n\t// 文件描述符和IO事件之间的映射关系表\n\tstruct event_io_map io;\n\t// 信号值和信号事件之间的映射关系表\n\tstruct event_signal_map sigmap;\n\t// 时间堆\n\tstruct min_heap timeheap;\n\n\t// 管理系统时间的成员\n\tstruct timeval tv_cache;\n\tstruct evutil_monotonic_timer monotonic_timer;\n\tstruct timeval tv_clock_diff;\n\ttime_t last_updated_clock_diff;\n\n#ifndef EVENT__DISABLE_THREAD_SUPPORT\n\t// 多线程支持\n\t\n\t// 当前运行该event_base的事件循环的线程\n\tunsigned long th_owner_id;\n\t// 独占锁\n\tvoid *th_base_lock;\n\t// 当前事件循环正在执行哪个事件处理器的回调函数\n\tvoid *current_event_cond;\n\t// 等待的线程数\n\tint current_event_waiters;\n#endif\n\t// 正在处理的事件处理器的回调函数\n\tstruct event_callback *current_event;\n};\n```\n\n事件循环, libevent的动力, 即事件循环","source":"_posts/CPP-源码学习-Libevent代码初期了解.md","raw":"---\ntitle: Libevent代码初期了解\ndate: 2020-02-19 14:56:55\ntags:\ncategories:\n - CPP\n - 源码学习\n \nimg: https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/Libevent%E5%B0%81%E9%9D%A2.png\n---\n学习来源\n<Linux 高性能服务器编程>\n# I/O框架库概述\n## Reactor模式\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/%E5%9B%BE12-1IO%E6%A1%86%E6%9E%B6%E7%BB%84%E7%BB%84%E4%BB%B6.png)\n句柄(Handler)\n由于统一了事件源, 一个事件一般跟一个句柄绑定在一起, 事件就绪之后 会通过句柄通知这一个事件.\n在Linux中 I/O 事件对应的句柄->文件描述符, 信号事件->信号值\n\n事件多路分发器(EventDemultiplexer)\n事件的到来是随机的, 异步的. 所以只能通过一个循环一直等待事件并进行处理 --- 事件循环\n一般通过IO复用实现 select poll epoll_wait\n\n事件处理器(EventHandle)\n具体事件处理器(ConcreteEventHandler)\n事件处理器执行事件对应的业务逻辑, 通常包含一个或多个handler_event回调函数, 这些回调函数在事件循环中被执行\n\nReactor\nhandler_events: 执行事件循环 重复等待事件, 然后依次调用对应的事件处理器\nregister_handler: 向事件多路分发器中注册事件\nremove_handler: 从中删除一个事件\n\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/%E5%9B%BE12-2%20IO%E6%A1%86%E6%9E%B6%E5%BA%93%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%97%B6%E5%BA%8F%E5%9B%BE.png)\n\n## Libevent源码分析\n```c++\n#include <sys/signal.h>\n#include <event.h>\n#include <cstdio>\n\nvoid signal_cb(int fd, short event, void* argc)\n{\n    event_base* base = (event_base*)argc;\n    timeval delay = {2, 0};\n\n    printf(\"Caught an interrupt signal\\n\");\n    event_base_loopexit(base, &delay);\n}\n\nvoid timeout_cb(int fd, short event, void* argc)\n{\n    printf(\"timeout\\n\");\n}\nint main()\n{\n    // 相当于创建一个Reactor实例\n    event_base* base = event_init();\n    \n    event* signal_event = evsignal_new(base, SIGINT, signal_cb, base);\n    event_add(signal_event, nullptr);\n    \n    event* timeout_event = evtimer_new(base, timeout_cb, nullptr);\n    timeval tv{1, 0};\n    event_add(timeout_event, &tv);\n    \n    event_base_dispatch(base);\n    event_free(signal_event);\n    event_free(timeout_event);\n    event_base_free(base);\n}\n```\n创建一个事件处理器 然后为绑定上相应的回调函数.\n然后把这个事件处理器注册到事件队列中中,\n\n然后事件多路分发器依靠循环一直等待事件的到来, 事件到来后通知相应的事件处理器\nReactor则管理这些\n\n首先要去了解下 `事件处理器` 对应的就是event这个结构体\n```c++\nstruct event {\n\tstruct event_callback ev_evcallback;\n\n\t// 事件处理器从属的 event_base\n\tstruct event_base *ev_base;\n\t// 信号值 或者 文件描述符\n\tevutil_socket_t ev_fd;\n\t// 定时器的超时时间\n\tstruct timeval ev_timeout;\n\t\n\t// 仅用于定时事件\n\tunion {\n\t\t// 队列--指出在通用定时器中的位置\n\t\tTAILQ_ENTRY(event) ev_next_with_common_timeout;\n\t\t// 时间堆--指出了在时间堆中的位置\n\t\tint min_heap_idx;\n\t} ev_timeout_pos;\n\n\tunion {\n\t\tstruct {\n\t\t\t// 通过这个成员 将具有相同文件描述符的IO事件处理器串联起来\n\t\t\tLIST_ENTRY (event) ev_io_next;\n\t\t\tstruct timeval ev_timeout;\n\t\t} ev_io;\n\t\tstruct {\n\t\t\t// 相同信号的串联起来\n\t\t\tLIST_ENTRY (event) ev_signal_next;\n\t\t\tshort ev_ncalls;\n\t\t\t/* Allows deletes in callback */\n\t\t\tshort *ev_pncalls;\n\t\t} ev_signal;\n\t} ev_;\n\n\t// 事件类型, 可以通过位处理设置非互斥事件\n\tshort ev_events;\n\t// 当前激活事件的类型, 说明被激活的原因\n\tshort ev_res;\n};\n```\n可以看到其中有很多的属性, 三种事件对应的不同的属性.\n\n这些属性的填充函数\n`evsignal_new``evtimer_new`是宏 统一调用`event_new`\n`event_new`调用`event_assign`来进行主要的填充\n\n\n```\n//@通过宏封装注册函数\n\n一个事件生成函数 经过宏的封装(可以自动填充某些此事件用不到的参数)可以更方便的对应不同事件的生成, 既统一了注册, 又方便用户调用\n```\n属性之一便是回调函数, 事件回调函数有自己的规定\n```\n//@统一事件回调函数\n\nvoid (*callback)(evutil_socket_t, short, void *)\n这样能够统一回调函数的格式, 同时方便管理\n```\n事件处理器创建完毕, 该把事件处理器添加到事件注册队列. 样例代码中通过的`event_add`函数来实现将事件处理器添加到事件注册队列\n`event_add`实际由`event_add_nolock_`实现 所以接下来是`event_add_nolock_`函数的说明\n\n```\n//@事件处理器的分发实现\n将传入的event按照不同类型的事件处理器 分别处理\n(因为event_new已经填充了ev_events说明事件类型)\n\nIO事件 添加绑定\n信号事件 绑定相应的信号\n定时器 放入相关的的时间管理数据结构中\n```\n使用`event_queue_insert_inserted`进行注册\n这里的代码2.1.11 与书上的差别较大, 少了多一半的功能, 也没有被抽成函数, 暂不知道对应的功能代码去了哪里\n照书上来说`event_queue_insert_inserted`实现的是将事件处理器加入到`event_base`的某个事件队列中. 对于新添加的IO和信号事件处理器, 还需要让事件多路分发器来监听对应的事件, 然后建立相应的映射关系. 分别使用`evmap_io_add_`和`evmap_signal_add_`(相当于图中的`register_event`)建立映射. \n\n`evmap_io_add_`中有一个结构体`event_io_map`\n`event_io_map`会根据不同的平台最终对应不同的数据结构\n\n`evmap_io_add_`函数\n函数中用到的东西, 我目前吸收不了....... 总之是为将IO事件处理器加入到`event_base`的事件队列中实现的\n\n`eventop`结构体 是`event_base`中封装IO复用机制的结构体, 提供了统一的接口\n```c++\n// 为给定的event_base声明后端的结构体\nstruct eventop {\n\t// 后端IO复用技术的名称\n\tconst char *name;\n\n\t// 初始化 函数需要初始化所有要用的属性\n\t// 返回的指针会被event_init存储在event_base.evbase\n\t// 失败后返回NULL\n\tvoid *(*init)(struct event_base *);\n\t// 注册事件\n\tint (*add)(struct event_base *, evutil_socket_t fd, short old, short events, void *fdinfo);\n\t// 删除事件\n\tint (*del)(struct event_base *, evutil_socket_t fd, short old, short events, void *fdinfo);\n\t// 等待事件\n\tint (*dispatch)(struct event_base *, struct timeval *);\n\t// 释放IO复用机制使用的资源\n\tvoid (*dealloc)(struct event_base *);\n\t// 标记fork后是否需要重新初始化event_base的标志位\n\tint need_reinit;\n\t// 用于设定io复用技术支持的一些特性\n\tenum event_method_feature features;\n\t// 额外内存的分配\n\tsize_t fdinfo_len;\n};\n```\n\n`event_base`是Libevent的Reactor. 超长结构体 删除了我不理解的部分\n```c++\nstruct event_base {\n\t// 记录选择的I/O复用机制\n\tconst struct eventop *evsel;\n\t// 指向IO复用机制真正存储的数据\n\tvoid *evbase;\n\n\t// 事件变换队列 如果一个文件描述符上注册的事件被多次修改, 则可以使用缓冲避免重复的系统调用\n\t// 比如epoll_ctl, 仅能用于时间复杂度O(1)的IO复用技术\n\tstruct event_changelist changelist;\n\n\t// 信号的后端处理机制\n\tconst struct eventop *evsigsel;\n\t// 信号事件处理器使用的数据结构, 其中封装了socketpair创建的管道. 用于信号处理函数和\n\t// 事件多路分发器之间的通信, 统一事件源的思路\n\tstruct evsig_info sig;\n\n\t// 添加到event_base的虚拟(所有, 激活)事件数量, 虚拟(所有, 激活)事件最大数量\n\tint virtual_event_count;\n\tint virtual_event_count_max;\n\tint event_count;\n\tint event_count_max;\n\tint event_count_active;\n\tint event_count_active_max;\n\n\t// 处理完事件后 是否退出循环\n\tint event_gotterm;\n\t// 是否立即终止循环\n\tint event_break;\n\t// 是否启动一个新的事件循环\n\tint event_continue;\n\n\t// 当前正在处理的活动事件队列的优先级\n\tint event_running_priority;\n\n\t// 标记事件循环是否已经启动, 防止重入\n\tint running_loop;\n\n\t// 活动事件队列数组. 索引值越小的队列优先级越高. 高优先级的活动事件队列中的事件处理器被优先处理\n\tstruct evcallback_list *activequeues;\n\t// 活动事件队列数组的大小 说明有nactivequeues个不同优先级的活动事件队列\n\tint nactivequeues;\n\t/** A list of event_callbacks that should become active the next time\n\t * we process events, but not this time. */\n\tstruct evcallback_list active_later_queue;\n\n\t// 共同超时逻辑\n\n\t// 管理通用定时器队列 实体数量 总数\n\tstruct common_timeout_list **common_timeout_queues;\n\tint n_common_timeouts;\n\tint n_common_timeouts_allocated;\n\n\t// 文件描述符和IO事件之间的映射关系表\n\tstruct event_io_map io;\n\t// 信号值和信号事件之间的映射关系表\n\tstruct event_signal_map sigmap;\n\t// 时间堆\n\tstruct min_heap timeheap;\n\n\t// 管理系统时间的成员\n\tstruct timeval tv_cache;\n\tstruct evutil_monotonic_timer monotonic_timer;\n\tstruct timeval tv_clock_diff;\n\ttime_t last_updated_clock_diff;\n\n#ifndef EVENT__DISABLE_THREAD_SUPPORT\n\t// 多线程支持\n\t\n\t// 当前运行该event_base的事件循环的线程\n\tunsigned long th_owner_id;\n\t// 独占锁\n\tvoid *th_base_lock;\n\t// 当前事件循环正在执行哪个事件处理器的回调函数\n\tvoid *current_event_cond;\n\t// 等待的线程数\n\tint current_event_waiters;\n#endif\n\t// 正在处理的事件处理器的回调函数\n\tstruct event_callback *current_event;\n};\n```\n\n事件循环, libevent的动力, 即事件循环","slug":"CPP-源码学习-Libevent代码初期了解","published":1,"updated":"2020-03-01T02:21:50.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucyx001msouofntw3g6w","content":"<p>学习来源<br>&lt;Linux 高性能服务器编程&gt;</p>\n<h1 id=\"I-O框架库概述\"><a href=\"#I-O框架库概述\" class=\"headerlink\" title=\"I/O框架库概述\"></a>I/O框架库概述</h1><h2 id=\"Reactor模式\"><a href=\"#Reactor模式\" class=\"headerlink\" title=\"Reactor模式\"></a>Reactor模式</h2><p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/%E5%9B%BE12-1IO%E6%A1%86%E6%9E%B6%E7%BB%84%E7%BB%84%E4%BB%B6.png\" alt=\"\"><br>句柄(Handler)<br>由于统一了事件源, 一个事件一般跟一个句柄绑定在一起, 事件就绪之后 会通过句柄通知这一个事件.<br>在Linux中 I/O 事件对应的句柄-&gt;文件描述符, 信号事件-&gt;信号值</p>\n<p>事件多路分发器(EventDemultiplexer)<br>事件的到来是随机的, 异步的. 所以只能通过一个循环一直等待事件并进行处理 — 事件循环<br>一般通过IO复用实现 select poll epoll_wait</p>\n<p>事件处理器(EventHandle)<br>具体事件处理器(ConcreteEventHandler)<br>事件处理器执行事件对应的业务逻辑, 通常包含一个或多个handler_event回调函数, 这些回调函数在事件循环中被执行</p>\n<p>Reactor<br>handler_events: 执行事件循环 重复等待事件, 然后依次调用对应的事件处理器<br>register_handler: 向事件多路分发器中注册事件<br>remove_handler: 从中删除一个事件</p>\n<p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/%E5%9B%BE12-2%20IO%E6%A1%86%E6%9E%B6%E5%BA%93%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%97%B6%E5%BA%8F%E5%9B%BE.png\" alt=\"\"></p>\n<h2 id=\"Libevent源码分析\"><a href=\"#Libevent源码分析\" class=\"headerlink\" title=\"Libevent源码分析\"></a>Libevent源码分析</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;event.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">signal_cb</span><span class=\"params\">(<span class=\"keyword\">int</span> fd, short event, <span class=\"keyword\">void</span>* argc)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    event_base* base = (event_base*)argc;</span><br><span class=\"line\">    timeval <span class=\"built_in\">delay</span> = &#123;<span class=\"number\">2</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Caught an interrupt signal\\n\"</span>);</span><br><span class=\"line\">    event_base_loopexit(base, &amp;<span class=\"built_in\">delay</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">timeout_cb</span><span class=\"params\">(<span class=\"keyword\">int</span> fd, short event, <span class=\"keyword\">void</span>* argc)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"timeout\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 相当于创建一个Reactor实例</span></span><br><span class=\"line\">    event_base* base = event_init();</span><br><span class=\"line\">    </span><br><span class=\"line\">    event* signal_event = evsignal_new(base, SIGINT, signal_cb, base);</span><br><span class=\"line\">    event_add(signal_event, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    event* timeout_event = evtimer_new(base, timeout_cb, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">    timeval tv&#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    event_add(timeout_event, &amp;tv);</span><br><span class=\"line\">    </span><br><span class=\"line\">    event_base_dispatch(base);</span><br><span class=\"line\">    event_free(signal_event);</span><br><span class=\"line\">    event_free(timeout_event);</span><br><span class=\"line\">    event_base_free(base);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建一个事件处理器 然后为绑定上相应的回调函数.<br>然后把这个事件处理器注册到事件队列中中,</p>\n<p>然后事件多路分发器依靠循环一直等待事件的到来, 事件到来后通知相应的事件处理器<br>Reactor则管理这些</p>\n<p>首先要去了解下 <code>事件处理器</code> 对应的就是event这个结构体</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">event</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">event_callback</span> <span class=\"title\">ev_evcallback</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 事件处理器从属的 event_base</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">event_base</span> *<span class=\"title\">ev_base</span>;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 信号值 或者 文件描述符</span></span><br><span class=\"line\">\t<span class=\"keyword\">evutil_socket_t</span> ev_fd;</span><br><span class=\"line\">\t<span class=\"comment\">// 定时器的超时时间</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">ev_timeout</span>;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 仅用于定时事件</span></span><br><span class=\"line\">\t<span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 队列--指出在通用定时器中的位置</span></span><br><span class=\"line\">\t\tTAILQ_ENTRY(event) ev_next_with_common_timeout;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 时间堆--指出了在时间堆中的位置</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> min_heap_idx;</span><br><span class=\"line\">\t&#125; ev_timeout_pos;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 通过这个成员 将具有相同文件描述符的IO事件处理器串联起来</span></span><br><span class=\"line\">\t\t\tLIST_ENTRY (event) ev_io_next;</span><br><span class=\"line\">\t\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">ev_timeout</span>;</span></span><br><span class=\"line\">\t\t&#125; ev_io;</span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 相同信号的串联起来</span></span><br><span class=\"line\">\t\t\tLIST_ENTRY (event) ev_signal_next;</span><br><span class=\"line\">\t\t\tshort ev_ncalls;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/* Allows deletes in callback */</span></span><br><span class=\"line\">\t\t\tshort *ev_pncalls;</span><br><span class=\"line\">\t\t&#125; ev_signal;</span><br><span class=\"line\">\t&#125; ev_;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 事件类型, 可以通过位处理设置非互斥事件</span></span><br><span class=\"line\">\tshort ev_events;</span><br><span class=\"line\">\t<span class=\"comment\">// 当前激活事件的类型, 说明被激活的原因</span></span><br><span class=\"line\">\tshort ev_res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>可以看到其中有很多的属性, 三种事件对应的不同的属性.</p>\n<p>这些属性的填充函数<br><code>evsignal_new``evtimer_new</code>是宏 统一调用<code>event_new</code><br><code>event_new</code>调用<code>event_assign</code>来进行主要的填充</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;@通过宏封装注册函数</span><br><span class=\"line\"></span><br><span class=\"line\">一个事件生成函数 经过宏的封装(可以自动填充某些此事件用不到的参数)可以更方便的对应不同事件的生成, 既统一了注册, 又方便用户调用</span><br></pre></td></tr></table></figure>\n<p>属性之一便是回调函数, 事件回调函数有自己的规定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;@统一事件回调函数</span><br><span class=\"line\"></span><br><span class=\"line\">void (*callback)(evutil_socket_t, short, void *)</span><br><span class=\"line\">这样能够统一回调函数的格式, 同时方便管理</span><br></pre></td></tr></table></figure>\n<p>事件处理器创建完毕, 该把事件处理器添加到事件注册队列. 样例代码中通过的<code>event_add</code>函数来实现将事件处理器添加到事件注册队列<br><code>event_add</code>实际由<code>event_add_nolock_</code>实现 所以接下来是<code>event_add_nolock_</code>函数的说明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;@事件处理器的分发实现</span><br><span class=\"line\">将传入的event按照不同类型的事件处理器 分别处理</span><br><span class=\"line\">(因为event_new已经填充了ev_events说明事件类型)</span><br><span class=\"line\"></span><br><span class=\"line\">IO事件 添加绑定</span><br><span class=\"line\">信号事件 绑定相应的信号</span><br><span class=\"line\">定时器 放入相关的的时间管理数据结构中</span><br></pre></td></tr></table></figure>\n<p>使用<code>event_queue_insert_inserted</code>进行注册<br>这里的代码2.1.11 与书上的差别较大, 少了多一半的功能, 也没有被抽成函数, 暂不知道对应的功能代码去了哪里<br>照书上来说<code>event_queue_insert_inserted</code>实现的是将事件处理器加入到<code>event_base</code>的某个事件队列中. 对于新添加的IO和信号事件处理器, 还需要让事件多路分发器来监听对应的事件, 然后建立相应的映射关系. 分别使用<code>evmap_io_add_</code>和<code>evmap_signal_add_</code>(相当于图中的<code>register_event</code>)建立映射. </p>\n<p><code>evmap_io_add_</code>中有一个结构体<code>event_io_map</code><br><code>event_io_map</code>会根据不同的平台最终对应不同的数据结构</p>\n<p><code>evmap_io_add_</code>函数<br>函数中用到的东西, 我目前吸收不了……. 总之是为将IO事件处理器加入到<code>event_base</code>的事件队列中实现的</p>\n<p><code>eventop</code>结构体 是<code>event_base</code>中封装IO复用机制的结构体, 提供了统一的接口</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 为给定的event_base声明后端的结构体</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">eventop</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 后端IO复用技术的名称</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 初始化 函数需要初始化所有要用的属性</span></span><br><span class=\"line\">\t<span class=\"comment\">// 返回的指针会被event_init存储在event_base.evbase</span></span><br><span class=\"line\">\t<span class=\"comment\">// 失败后返回NULL</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *(*init)(struct event_base *);</span><br><span class=\"line\">\t<span class=\"comment\">// 注册事件</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*add)(struct event_base *, <span class=\"keyword\">evutil_socket_t</span> fd, short old, short events, <span class=\"keyword\">void</span> *fdinfo);</span><br><span class=\"line\">\t<span class=\"comment\">// 删除事件</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*del)(struct event_base *, <span class=\"keyword\">evutil_socket_t</span> fd, short old, short events, <span class=\"keyword\">void</span> *fdinfo);</span><br><span class=\"line\">\t<span class=\"comment\">// 等待事件</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*dispatch)(struct event_base *, struct timeval *);</span><br><span class=\"line\">\t<span class=\"comment\">// 释放IO复用机制使用的资源</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*dealloc)(struct event_base *);</span><br><span class=\"line\">\t<span class=\"comment\">// 标记fork后是否需要重新初始化event_base的标志位</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> need_reinit;</span><br><span class=\"line\">\t<span class=\"comment\">// 用于设定io复用技术支持的一些特性</span></span><br><span class=\"line\">\t<span class=\"keyword\">enum</span> event_method_feature features;</span><br><span class=\"line\">\t<span class=\"comment\">// 额外内存的分配</span></span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> fdinfo_len;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>event_base</code>是Libevent的Reactor. 超长结构体 删除了我不理解的部分</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">event_base</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 记录选择的I/O复用机制</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">eventop</span> *<span class=\"title\">evsel</span>;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 指向IO复用机制真正存储的数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *evbase;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 事件变换队列 如果一个文件描述符上注册的事件被多次修改, 则可以使用缓冲避免重复的系统调用</span></span><br><span class=\"line\">\t<span class=\"comment\">// 比如epoll_ctl, 仅能用于时间复杂度O(1)的IO复用技术</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">event_changelist</span> <span class=\"title\">changelist</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 信号的后端处理机制</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">eventop</span> *<span class=\"title\">evsigsel</span>;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 信号事件处理器使用的数据结构, 其中封装了socketpair创建的管道. 用于信号处理函数和</span></span><br><span class=\"line\">\t<span class=\"comment\">// 事件多路分发器之间的通信, 统一事件源的思路</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">evsig_info</span> <span class=\"title\">sig</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加到event_base的虚拟(所有, 激活)事件数量, 虚拟(所有, 激活)事件最大数量</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> virtual_event_count;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> virtual_event_count_max;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> event_count;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> event_count_max;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> event_count_active;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> event_count_active_max;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 处理完事件后 是否退出循环</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> event_gotterm;</span><br><span class=\"line\">\t<span class=\"comment\">// 是否立即终止循环</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> event_break;</span><br><span class=\"line\">\t<span class=\"comment\">// 是否启动一个新的事件循环</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> event_continue;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 当前正在处理的活动事件队列的优先级</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> event_running_priority;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 标记事件循环是否已经启动, 防止重入</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> running_loop;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 活动事件队列数组. 索引值越小的队列优先级越高. 高优先级的活动事件队列中的事件处理器被优先处理</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">evcallback_list</span> *<span class=\"title\">activequeues</span>;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 活动事件队列数组的大小 说明有nactivequeues个不同优先级的活动事件队列</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> nactivequeues;</span><br><span class=\"line\">\t<span class=\"comment\">/** A list of event_callbacks that should become active the next time</span></span><br><span class=\"line\"><span class=\"comment\">\t * we process events, but not this time. */</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">evcallback_list</span> <span class=\"title\">active_later_queue</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 共同超时逻辑</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 管理通用定时器队列 实体数量 总数</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">common_timeout_list</span> **<span class=\"title\">common_timeout_queues</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n_common_timeouts;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n_common_timeouts_allocated;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 文件描述符和IO事件之间的映射关系表</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">event_io_map</span> <span class=\"title\">io</span>;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 信号值和信号事件之间的映射关系表</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">event_signal_map</span> <span class=\"title\">sigmap</span>;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 时间堆</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">min_heap</span> <span class=\"title\">timeheap</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 管理系统时间的成员</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">tv_cache</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">evutil_monotonic_timer</span> <span class=\"title\">monotonic_timer</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">tv_clock_diff</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">time_t</span> last_updated_clock_diff;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> EVENT__DISABLE_THREAD_SUPPORT</span></span><br><span class=\"line\">\t<span class=\"comment\">// 多线程支持</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 当前运行该event_base的事件循环的线程</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> th_owner_id;</span><br><span class=\"line\">\t<span class=\"comment\">// 独占锁</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *th_base_lock;</span><br><span class=\"line\">\t<span class=\"comment\">// 当前事件循环正在执行哪个事件处理器的回调函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *current_event_cond;</span><br><span class=\"line\">\t<span class=\"comment\">// 等待的线程数</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> current_event_waiters;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t<span class=\"comment\">// 正在处理的事件处理器的回调函数</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">event_callback</span> *<span class=\"title\">current_event</span>;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>事件循环, libevent的动力, 即事件循环</p>\n","site":{"data":{}},"excerpt":"","more":"<p>学习来源<br>&lt;Linux 高性能服务器编程&gt;</p>\n<h1 id=\"I-O框架库概述\"><a href=\"#I-O框架库概述\" class=\"headerlink\" title=\"I/O框架库概述\"></a>I/O框架库概述</h1><h2 id=\"Reactor模式\"><a href=\"#Reactor模式\" class=\"headerlink\" title=\"Reactor模式\"></a>Reactor模式</h2><p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/%E5%9B%BE12-1IO%E6%A1%86%E6%9E%B6%E7%BB%84%E7%BB%84%E4%BB%B6.png\" alt=\"\"><br>句柄(Handler)<br>由于统一了事件源, 一个事件一般跟一个句柄绑定在一起, 事件就绪之后 会通过句柄通知这一个事件.<br>在Linux中 I/O 事件对应的句柄-&gt;文件描述符, 信号事件-&gt;信号值</p>\n<p>事件多路分发器(EventDemultiplexer)<br>事件的到来是随机的, 异步的. 所以只能通过一个循环一直等待事件并进行处理 — 事件循环<br>一般通过IO复用实现 select poll epoll_wait</p>\n<p>事件处理器(EventHandle)<br>具体事件处理器(ConcreteEventHandler)<br>事件处理器执行事件对应的业务逻辑, 通常包含一个或多个handler_event回调函数, 这些回调函数在事件循环中被执行</p>\n<p>Reactor<br>handler_events: 执行事件循环 重复等待事件, 然后依次调用对应的事件处理器<br>register_handler: 向事件多路分发器中注册事件<br>remove_handler: 从中删除一个事件</p>\n<p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/%E5%9B%BE12-2%20IO%E6%A1%86%E6%9E%B6%E5%BA%93%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%97%B6%E5%BA%8F%E5%9B%BE.png\" alt=\"\"></p>\n<h2 id=\"Libevent源码分析\"><a href=\"#Libevent源码分析\" class=\"headerlink\" title=\"Libevent源码分析\"></a>Libevent源码分析</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;event.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">signal_cb</span><span class=\"params\">(<span class=\"keyword\">int</span> fd, short event, <span class=\"keyword\">void</span>* argc)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    event_base* base = (event_base*)argc;</span><br><span class=\"line\">    timeval <span class=\"built_in\">delay</span> = &#123;<span class=\"number\">2</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Caught an interrupt signal\\n\"</span>);</span><br><span class=\"line\">    event_base_loopexit(base, &amp;<span class=\"built_in\">delay</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">timeout_cb</span><span class=\"params\">(<span class=\"keyword\">int</span> fd, short event, <span class=\"keyword\">void</span>* argc)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"timeout\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 相当于创建一个Reactor实例</span></span><br><span class=\"line\">    event_base* base = event_init();</span><br><span class=\"line\">    </span><br><span class=\"line\">    event* signal_event = evsignal_new(base, SIGINT, signal_cb, base);</span><br><span class=\"line\">    event_add(signal_event, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    event* timeout_event = evtimer_new(base, timeout_cb, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">    timeval tv&#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    event_add(timeout_event, &amp;tv);</span><br><span class=\"line\">    </span><br><span class=\"line\">    event_base_dispatch(base);</span><br><span class=\"line\">    event_free(signal_event);</span><br><span class=\"line\">    event_free(timeout_event);</span><br><span class=\"line\">    event_base_free(base);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建一个事件处理器 然后为绑定上相应的回调函数.<br>然后把这个事件处理器注册到事件队列中中,</p>\n<p>然后事件多路分发器依靠循环一直等待事件的到来, 事件到来后通知相应的事件处理器<br>Reactor则管理这些</p>\n<p>首先要去了解下 <code>事件处理器</code> 对应的就是event这个结构体</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">event</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">event_callback</span> <span class=\"title\">ev_evcallback</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 事件处理器从属的 event_base</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">event_base</span> *<span class=\"title\">ev_base</span>;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 信号值 或者 文件描述符</span></span><br><span class=\"line\">\t<span class=\"keyword\">evutil_socket_t</span> ev_fd;</span><br><span class=\"line\">\t<span class=\"comment\">// 定时器的超时时间</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">ev_timeout</span>;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 仅用于定时事件</span></span><br><span class=\"line\">\t<span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 队列--指出在通用定时器中的位置</span></span><br><span class=\"line\">\t\tTAILQ_ENTRY(event) ev_next_with_common_timeout;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 时间堆--指出了在时间堆中的位置</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> min_heap_idx;</span><br><span class=\"line\">\t&#125; ev_timeout_pos;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 通过这个成员 将具有相同文件描述符的IO事件处理器串联起来</span></span><br><span class=\"line\">\t\t\tLIST_ENTRY (event) ev_io_next;</span><br><span class=\"line\">\t\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">ev_timeout</span>;</span></span><br><span class=\"line\">\t\t&#125; ev_io;</span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 相同信号的串联起来</span></span><br><span class=\"line\">\t\t\tLIST_ENTRY (event) ev_signal_next;</span><br><span class=\"line\">\t\t\tshort ev_ncalls;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/* Allows deletes in callback */</span></span><br><span class=\"line\">\t\t\tshort *ev_pncalls;</span><br><span class=\"line\">\t\t&#125; ev_signal;</span><br><span class=\"line\">\t&#125; ev_;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 事件类型, 可以通过位处理设置非互斥事件</span></span><br><span class=\"line\">\tshort ev_events;</span><br><span class=\"line\">\t<span class=\"comment\">// 当前激活事件的类型, 说明被激活的原因</span></span><br><span class=\"line\">\tshort ev_res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>可以看到其中有很多的属性, 三种事件对应的不同的属性.</p>\n<p>这些属性的填充函数<br><code>evsignal_new``evtimer_new</code>是宏 统一调用<code>event_new</code><br><code>event_new</code>调用<code>event_assign</code>来进行主要的填充</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;@通过宏封装注册函数</span><br><span class=\"line\"></span><br><span class=\"line\">一个事件生成函数 经过宏的封装(可以自动填充某些此事件用不到的参数)可以更方便的对应不同事件的生成, 既统一了注册, 又方便用户调用</span><br></pre></td></tr></table></figure>\n<p>属性之一便是回调函数, 事件回调函数有自己的规定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;@统一事件回调函数</span><br><span class=\"line\"></span><br><span class=\"line\">void (*callback)(evutil_socket_t, short, void *)</span><br><span class=\"line\">这样能够统一回调函数的格式, 同时方便管理</span><br></pre></td></tr></table></figure>\n<p>事件处理器创建完毕, 该把事件处理器添加到事件注册队列. 样例代码中通过的<code>event_add</code>函数来实现将事件处理器添加到事件注册队列<br><code>event_add</code>实际由<code>event_add_nolock_</code>实现 所以接下来是<code>event_add_nolock_</code>函数的说明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;@事件处理器的分发实现</span><br><span class=\"line\">将传入的event按照不同类型的事件处理器 分别处理</span><br><span class=\"line\">(因为event_new已经填充了ev_events说明事件类型)</span><br><span class=\"line\"></span><br><span class=\"line\">IO事件 添加绑定</span><br><span class=\"line\">信号事件 绑定相应的信号</span><br><span class=\"line\">定时器 放入相关的的时间管理数据结构中</span><br></pre></td></tr></table></figure>\n<p>使用<code>event_queue_insert_inserted</code>进行注册<br>这里的代码2.1.11 与书上的差别较大, 少了多一半的功能, 也没有被抽成函数, 暂不知道对应的功能代码去了哪里<br>照书上来说<code>event_queue_insert_inserted</code>实现的是将事件处理器加入到<code>event_base</code>的某个事件队列中. 对于新添加的IO和信号事件处理器, 还需要让事件多路分发器来监听对应的事件, 然后建立相应的映射关系. 分别使用<code>evmap_io_add_</code>和<code>evmap_signal_add_</code>(相当于图中的<code>register_event</code>)建立映射. </p>\n<p><code>evmap_io_add_</code>中有一个结构体<code>event_io_map</code><br><code>event_io_map</code>会根据不同的平台最终对应不同的数据结构</p>\n<p><code>evmap_io_add_</code>函数<br>函数中用到的东西, 我目前吸收不了……. 总之是为将IO事件处理器加入到<code>event_base</code>的事件队列中实现的</p>\n<p><code>eventop</code>结构体 是<code>event_base</code>中封装IO复用机制的结构体, 提供了统一的接口</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 为给定的event_base声明后端的结构体</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">eventop</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 后端IO复用技术的名称</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 初始化 函数需要初始化所有要用的属性</span></span><br><span class=\"line\">\t<span class=\"comment\">// 返回的指针会被event_init存储在event_base.evbase</span></span><br><span class=\"line\">\t<span class=\"comment\">// 失败后返回NULL</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *(*init)(struct event_base *);</span><br><span class=\"line\">\t<span class=\"comment\">// 注册事件</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*add)(struct event_base *, <span class=\"keyword\">evutil_socket_t</span> fd, short old, short events, <span class=\"keyword\">void</span> *fdinfo);</span><br><span class=\"line\">\t<span class=\"comment\">// 删除事件</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*del)(struct event_base *, <span class=\"keyword\">evutil_socket_t</span> fd, short old, short events, <span class=\"keyword\">void</span> *fdinfo);</span><br><span class=\"line\">\t<span class=\"comment\">// 等待事件</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*dispatch)(struct event_base *, struct timeval *);</span><br><span class=\"line\">\t<span class=\"comment\">// 释放IO复用机制使用的资源</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*dealloc)(struct event_base *);</span><br><span class=\"line\">\t<span class=\"comment\">// 标记fork后是否需要重新初始化event_base的标志位</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> need_reinit;</span><br><span class=\"line\">\t<span class=\"comment\">// 用于设定io复用技术支持的一些特性</span></span><br><span class=\"line\">\t<span class=\"keyword\">enum</span> event_method_feature features;</span><br><span class=\"line\">\t<span class=\"comment\">// 额外内存的分配</span></span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> fdinfo_len;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>event_base</code>是Libevent的Reactor. 超长结构体 删除了我不理解的部分</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">event_base</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 记录选择的I/O复用机制</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">eventop</span> *<span class=\"title\">evsel</span>;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 指向IO复用机制真正存储的数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *evbase;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 事件变换队列 如果一个文件描述符上注册的事件被多次修改, 则可以使用缓冲避免重复的系统调用</span></span><br><span class=\"line\">\t<span class=\"comment\">// 比如epoll_ctl, 仅能用于时间复杂度O(1)的IO复用技术</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">event_changelist</span> <span class=\"title\">changelist</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 信号的后端处理机制</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">eventop</span> *<span class=\"title\">evsigsel</span>;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 信号事件处理器使用的数据结构, 其中封装了socketpair创建的管道. 用于信号处理函数和</span></span><br><span class=\"line\">\t<span class=\"comment\">// 事件多路分发器之间的通信, 统一事件源的思路</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">evsig_info</span> <span class=\"title\">sig</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加到event_base的虚拟(所有, 激活)事件数量, 虚拟(所有, 激活)事件最大数量</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> virtual_event_count;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> virtual_event_count_max;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> event_count;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> event_count_max;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> event_count_active;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> event_count_active_max;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 处理完事件后 是否退出循环</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> event_gotterm;</span><br><span class=\"line\">\t<span class=\"comment\">// 是否立即终止循环</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> event_break;</span><br><span class=\"line\">\t<span class=\"comment\">// 是否启动一个新的事件循环</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> event_continue;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 当前正在处理的活动事件队列的优先级</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> event_running_priority;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 标记事件循环是否已经启动, 防止重入</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> running_loop;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 活动事件队列数组. 索引值越小的队列优先级越高. 高优先级的活动事件队列中的事件处理器被优先处理</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">evcallback_list</span> *<span class=\"title\">activequeues</span>;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 活动事件队列数组的大小 说明有nactivequeues个不同优先级的活动事件队列</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> nactivequeues;</span><br><span class=\"line\">\t<span class=\"comment\">/** A list of event_callbacks that should become active the next time</span></span><br><span class=\"line\"><span class=\"comment\">\t * we process events, but not this time. */</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">evcallback_list</span> <span class=\"title\">active_later_queue</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 共同超时逻辑</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 管理通用定时器队列 实体数量 总数</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">common_timeout_list</span> **<span class=\"title\">common_timeout_queues</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n_common_timeouts;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n_common_timeouts_allocated;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 文件描述符和IO事件之间的映射关系表</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">event_io_map</span> <span class=\"title\">io</span>;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 信号值和信号事件之间的映射关系表</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">event_signal_map</span> <span class=\"title\">sigmap</span>;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 时间堆</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">min_heap</span> <span class=\"title\">timeheap</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 管理系统时间的成员</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">tv_cache</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">evutil_monotonic_timer</span> <span class=\"title\">monotonic_timer</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">tv_clock_diff</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">time_t</span> last_updated_clock_diff;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> EVENT__DISABLE_THREAD_SUPPORT</span></span><br><span class=\"line\">\t<span class=\"comment\">// 多线程支持</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 当前运行该event_base的事件循环的线程</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> th_owner_id;</span><br><span class=\"line\">\t<span class=\"comment\">// 独占锁</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *th_base_lock;</span><br><span class=\"line\">\t<span class=\"comment\">// 当前事件循环正在执行哪个事件处理器的回调函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *current_event_cond;</span><br><span class=\"line\">\t<span class=\"comment\">// 等待的线程数</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> current_event_waiters;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t<span class=\"comment\">// 正在处理的事件处理器的回调函数</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">event_callback</span> *<span class=\"title\">current_event</span>;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>事件循环, libevent的动力, 即事件循环</p>\n"},{"title":"Springboot数据交互","date":"2019-05-18T06:34:46.000Z","_content":"<div class=\"alert-red\"></div>\n<div class=\"alert-blue\"></div>\n<div class=\"alert-green\"></div>\n<!--more-->\n## 后端向前端传送\n\n这种方式需要注意 编写html的时候 提示根据return的 页面决定 return了对应的页面对应的页面就会有提示 这种方法重定向无法传递\n\n###\n```java\n@PostMapping(\"/index\")\npublic String index(Map<String, Object> map){\n\tmap.put(\"username\",\"123\");\n\treturn \"index\";\n}\n```\n### json报文 [来源](https://blog.csdn.net/chinrui/article/details/70832310)\n返回的格式为json格式\n```java\n@ResponseBody\npublic Map<String, String> login() {\n\tMap<String, String> hashMap = new HashMap<>();\n\thashMap.put(\"msg\", \"登录成功\");\n\treturn hashMap;\n}\n```\n对于上面的代码来说，还可以做进一步的优化，由于所有的 Restful 接口都只是返回数据，所以我们可以直接在类级别上添加 @ResponseBody 注解。\n而大多数情况下，@Controller 与 @ResponseBody 又会一起使用，所以我们使用 @RestController 注解来替换掉它们，从而更加简洁地实现功能。\n```java\n@RestController\n@RequestMapping(\"/sys/user\")\npublic class UserController {\n\t@RequestMapping(\"login\")\n\tpublic Map<String, String> login() {\n\t\tMap<String, String> hashMap = new HashMap<>();\n\t\thashMap.put(\"msg\", \"登录成功\");\n\t\treturn hashMap;\n\t}\n}\n```\n### 解决重定向传参问题\n**RedirectAttributes**\nRedirectAttributes attr\n\n**attr.addAttribute(\"param\", value);**\nattr.addAttribute(\"name\", \"user\");\nattr.addAttribute(\"success\", \"ok\");\nreturn \"redirect:/index\";\n这种方式相当于系统自动的拼接了url 仍然会暴露信息\n\n**attr.addFlashAttribute(\"param\", value);**\nattr.addFlashAttribute(\"status\",\"999\");\nattr.addFlashAttribute(\"message\",\"登录失败\");\nreturn \"redirect:/toLogin\";\n这种方式通过session传递, session在跳转到页面后就是马上移除对象, 刷新后即消失\n\n## 前端向后短传送\n### ajax\n```javascript\n$.ajax({\n\ttype: \"POST\",\n\tdataType: \"json\",\n\turl: \"/login\",\n\tdata: $('#loginForm').serialize(),\n\n\tsuccess: function (result) {\n\t\tif(result.info===\"登录失败\"){\n\t\t\tdocument.getElementById(\"info\").innerText=\"账号不存在或密码错误\";\n\t\t}\n\t}\n});\n```\n### 模拟表单\n```javascript\nfunction toMain(key) {\nvar input1 = $(\"<input>\");\ninput1.attr(\"type\", \"hidden\");\ninput1.attr(\"name\", \"key\");\ninput1.attr(\"value\", key);\n\nvar $form = $('<form method=\"POST\"></form>');\n$form.attr('action', \"/toMain\");\n$form.appendTo($('body'));\n$form.append(input1);\n$form.submit();\n}\n```\n\n\n### @RequestParam注解\n```java\n@PostMapping(\"/index\")\npublic String index1(@RequestParam(value = \"username\")String name){\n\treturn \"index\";\n}\n```\n\n### @PathVariable注解 使用url+额外文本传参数\n```java\nRequestMapping(\"user/get/mac/{macAddress}\")\npublic String getByMacAddress(@PathVariable String macAddress){\n　　//do something;\n}\n```\n\n### 对应的直接传递\n```java\npublic String getByMacAddress(String username, String password){\n　　对应表单直接赋值\n}\n```\n\n## 参数校验\n```java\n@RequestMapping(\"login\")\npublic Result login(@RequestBody @Valid UserModel userModel) {\n\n}\npublic class UserModel {\n\n    private String username;\n    private String password;\n\n    @NotBlank(message = \"用户名不能为空\")\n    public String getUsername() {\n        return username;\n    }\n\n    @NotBlank(message = \"密码不能为空\")\n    public String getPassword() {\n        return password;\n    }\n}\n```\n正则表达式\n```java\n@NotBlank(message = \"用户名不能为空\")\n@Pattern(\n        regexp = \"1(([38]\\\\d)|(5[^4&&\\\\d])|(4[579])|(7[0135678]))\\\\d{8}\",\n        message = \"手机号格式不合法\"\n)\npublic String getUsername() {\n    return username;\n}\n```\n","source":"_posts/Java-Springboot数据交互.md","raw":"---\ntitle: Springboot数据交互\ntags:\ncategories:\n  - Java\ndate: 2019-05-18 14:34:46\n---\n<div class=\"alert-red\"></div>\n<div class=\"alert-blue\"></div>\n<div class=\"alert-green\"></div>\n<!--more-->\n## 后端向前端传送\n\n这种方式需要注意 编写html的时候 提示根据return的 页面决定 return了对应的页面对应的页面就会有提示 这种方法重定向无法传递\n\n###\n```java\n@PostMapping(\"/index\")\npublic String index(Map<String, Object> map){\n\tmap.put(\"username\",\"123\");\n\treturn \"index\";\n}\n```\n### json报文 [来源](https://blog.csdn.net/chinrui/article/details/70832310)\n返回的格式为json格式\n```java\n@ResponseBody\npublic Map<String, String> login() {\n\tMap<String, String> hashMap = new HashMap<>();\n\thashMap.put(\"msg\", \"登录成功\");\n\treturn hashMap;\n}\n```\n对于上面的代码来说，还可以做进一步的优化，由于所有的 Restful 接口都只是返回数据，所以我们可以直接在类级别上添加 @ResponseBody 注解。\n而大多数情况下，@Controller 与 @ResponseBody 又会一起使用，所以我们使用 @RestController 注解来替换掉它们，从而更加简洁地实现功能。\n```java\n@RestController\n@RequestMapping(\"/sys/user\")\npublic class UserController {\n\t@RequestMapping(\"login\")\n\tpublic Map<String, String> login() {\n\t\tMap<String, String> hashMap = new HashMap<>();\n\t\thashMap.put(\"msg\", \"登录成功\");\n\t\treturn hashMap;\n\t}\n}\n```\n### 解决重定向传参问题\n**RedirectAttributes**\nRedirectAttributes attr\n\n**attr.addAttribute(\"param\", value);**\nattr.addAttribute(\"name\", \"user\");\nattr.addAttribute(\"success\", \"ok\");\nreturn \"redirect:/index\";\n这种方式相当于系统自动的拼接了url 仍然会暴露信息\n\n**attr.addFlashAttribute(\"param\", value);**\nattr.addFlashAttribute(\"status\",\"999\");\nattr.addFlashAttribute(\"message\",\"登录失败\");\nreturn \"redirect:/toLogin\";\n这种方式通过session传递, session在跳转到页面后就是马上移除对象, 刷新后即消失\n\n## 前端向后短传送\n### ajax\n```javascript\n$.ajax({\n\ttype: \"POST\",\n\tdataType: \"json\",\n\turl: \"/login\",\n\tdata: $('#loginForm').serialize(),\n\n\tsuccess: function (result) {\n\t\tif(result.info===\"登录失败\"){\n\t\t\tdocument.getElementById(\"info\").innerText=\"账号不存在或密码错误\";\n\t\t}\n\t}\n});\n```\n### 模拟表单\n```javascript\nfunction toMain(key) {\nvar input1 = $(\"<input>\");\ninput1.attr(\"type\", \"hidden\");\ninput1.attr(\"name\", \"key\");\ninput1.attr(\"value\", key);\n\nvar $form = $('<form method=\"POST\"></form>');\n$form.attr('action', \"/toMain\");\n$form.appendTo($('body'));\n$form.append(input1);\n$form.submit();\n}\n```\n\n\n### @RequestParam注解\n```java\n@PostMapping(\"/index\")\npublic String index1(@RequestParam(value = \"username\")String name){\n\treturn \"index\";\n}\n```\n\n### @PathVariable注解 使用url+额外文本传参数\n```java\nRequestMapping(\"user/get/mac/{macAddress}\")\npublic String getByMacAddress(@PathVariable String macAddress){\n　　//do something;\n}\n```\n\n### 对应的直接传递\n```java\npublic String getByMacAddress(String username, String password){\n　　对应表单直接赋值\n}\n```\n\n## 参数校验\n```java\n@RequestMapping(\"login\")\npublic Result login(@RequestBody @Valid UserModel userModel) {\n\n}\npublic class UserModel {\n\n    private String username;\n    private String password;\n\n    @NotBlank(message = \"用户名不能为空\")\n    public String getUsername() {\n        return username;\n    }\n\n    @NotBlank(message = \"密码不能为空\")\n    public String getPassword() {\n        return password;\n    }\n}\n```\n正则表达式\n```java\n@NotBlank(message = \"用户名不能为空\")\n@Pattern(\n        regexp = \"1(([38]\\\\d)|(5[^4&&\\\\d])|(4[579])|(7[0135678]))\\\\d{8}\",\n        message = \"手机号格式不合法\"\n)\npublic String getUsername() {\n    return username;\n}\n```\n","slug":"Java-Springboot数据交互","published":1,"updated":"2020-02-07T08:32:46.519Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucyy001qsouogh1z2hmp","content":"<div class=\"alert-red\"></div>\n<div class=\"alert-blue\"></div>\n<div class=\"alert-green\"></div>\n<a id=\"more\"></a>\n## 后端向前端传送\n\n<p>这种方式需要注意 编写html的时候 提示根据return的 页面决定 return了对应的页面对应的页面就会有提示 这种方法重定向无法传递</p>\n<p>###</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/index\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">(Map&lt;String, Object&gt; map)</span></span>&#123;</span><br><span class=\"line\">\tmap.put(<span class=\"string\">\"username\"</span>,<span class=\"string\">\"123\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"index\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"json报文-来源\"><a href=\"#json报文-来源\" class=\"headerlink\" title=\"json报文 来源\"></a>json报文 <a href=\"https://blog.csdn.net/chinrui/article/details/70832310\" target=\"_blank\" rel=\"noopener\">来源</a></h3><p>返回的格式为json格式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, String&gt; <span class=\"title\">login</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tMap&lt;String, String&gt; hashMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">\thashMap.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"登录成功\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> hashMap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于上面的代码来说，还可以做进一步的优化，由于所有的 Restful 接口都只是返回数据，所以我们可以直接在类级别上添加 @ResponseBody 注解。<br>而大多数情况下，@Controller 与 @ResponseBody 又会一起使用，所以我们使用 @RestController 注解来替换掉它们，从而更加简洁地实现功能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/sys/user\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"login\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, String&gt; <span class=\"title\">login</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tMap&lt;String, String&gt; hashMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">\t\thashMap.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"登录成功\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> hashMap;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决重定向传参问题\"><a href=\"#解决重定向传参问题\" class=\"headerlink\" title=\"解决重定向传参问题\"></a>解决重定向传参问题</h3><p><strong>RedirectAttributes</strong><br>RedirectAttributes attr</p>\n<p><strong>attr.addAttribute(“param”, value);</strong><br>attr.addAttribute(“name”, “user”);<br>attr.addAttribute(“success”, “ok”);<br>return “redirect:/index”;<br>这种方式相当于系统自动的拼接了url 仍然会暴露信息</p>\n<p><strong>attr.addFlashAttribute(“param”, value);</strong><br>attr.addFlashAttribute(“status”,”999”);<br>attr.addFlashAttribute(“message”,”登录失败”);<br>return “redirect:/toLogin”;<br>这种方式通过session传递, session在跳转到页面后就是马上移除对象, 刷新后即消失</p>\n<h2 id=\"前端向后短传送\"><a href=\"#前端向后短传送\" class=\"headerlink\" title=\"前端向后短传送\"></a>前端向后短传送</h2><h3 id=\"ajax\"><a href=\"#ajax\" class=\"headerlink\" title=\"ajax\"></a>ajax</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">\ttype: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">\tdataType: <span class=\"string\">\"json\"</span>,</span><br><span class=\"line\">\turl: <span class=\"string\">\"/login\"</span>,</span><br><span class=\"line\">\tdata: $(<span class=\"string\">'#loginForm'</span>).serialize(),</span><br><span class=\"line\"></span><br><span class=\"line\">\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(result.info===<span class=\"string\">\"登录失败\"</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"info\"</span>).innerText=<span class=\"string\">\"账号不存在或密码错误\"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"模拟表单\"><a href=\"#模拟表单\" class=\"headerlink\" title=\"模拟表单\"></a>模拟表单</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toMain</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> input1 = $(<span class=\"string\">\"&lt;input&gt;\"</span>);</span><br><span class=\"line\">input1.attr(<span class=\"string\">\"type\"</span>, <span class=\"string\">\"hidden\"</span>);</span><br><span class=\"line\">input1.attr(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"key\"</span>);</span><br><span class=\"line\">input1.attr(<span class=\"string\">\"value\"</span>, key);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> $form = $(<span class=\"string\">'&lt;form method=\"POST\"&gt;&lt;/form&gt;'</span>);</span><br><span class=\"line\">$form.attr(<span class=\"string\">'action'</span>, <span class=\"string\">\"/toMain\"</span>);</span><br><span class=\"line\">$form.appendTo($(<span class=\"string\">'body'</span>));</span><br><span class=\"line\">$form.append(input1);</span><br><span class=\"line\">$form.submit();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"RequestParam注解\"><a href=\"#RequestParam注解\" class=\"headerlink\" title=\"@RequestParam注解\"></a>@RequestParam注解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/index\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index1</span><span class=\"params\">(@RequestParam(value = <span class=\"string\">\"username\"</span>)</span>String name)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"index\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PathVariable注解-使用url-额外文本传参数\"><a href=\"#PathVariable注解-使用url-额外文本传参数\" class=\"headerlink\" title=\"@PathVariable注解 使用url+额外文本传参数\"></a>@PathVariable注解 使用url+额外文本传参数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RequestMapping(<span class=\"string\">\"user/get/mac/&#123;macAddress&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getByMacAddress</span><span class=\"params\">(@PathVariable String macAddress)</span></span>&#123;</span><br><span class=\"line\">　　<span class=\"comment\">//do something;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对应的直接传递\"><a href=\"#对应的直接传递\" class=\"headerlink\" title=\"对应的直接传递\"></a>对应的直接传递</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getByMacAddress</span><span class=\"params\">(String username, String password)</span></span>&#123;</span><br><span class=\"line\">　　对应表单直接赋值</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参数校验\"><a href=\"#参数校验\" class=\"headerlink\" title=\"参数校验\"></a>参数校验</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"login\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Result <span class=\"title\">login</span><span class=\"params\">(@RequestBody @Valid UserModel userModel)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserModel</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@NotBlank</span>(message = <span class=\"string\">\"用户名不能为空\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUsername</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@NotBlank</span>(message = <span class=\"string\">\"密码不能为空\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPassword</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正则表达式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NotBlank</span>(message = <span class=\"string\">\"用户名不能为空\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Pattern</span>(</span><br><span class=\"line\">        regexp = <span class=\"string\">\"1(([38]\\\\d)|(5[^4&amp;&amp;\\\\d])|(4[579])|(7[0135678]))\\\\d&#123;8&#125;\"</span>,</span><br><span class=\"line\">        message = <span class=\"string\">\"手机号格式不合法\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUsername</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> username;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<div class=\"alert-red\"></div>\n<div class=\"alert-blue\"></div>\n<div class=\"alert-green\"></div>","more":"## 后端向前端传送\n\n<p>这种方式需要注意 编写html的时候 提示根据return的 页面决定 return了对应的页面对应的页面就会有提示 这种方法重定向无法传递</p>\n<p>###</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/index\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">(Map&lt;String, Object&gt; map)</span></span>&#123;</span><br><span class=\"line\">\tmap.put(<span class=\"string\">\"username\"</span>,<span class=\"string\">\"123\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"index\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"json报文-来源\"><a href=\"#json报文-来源\" class=\"headerlink\" title=\"json报文 来源\"></a>json报文 <a href=\"https://blog.csdn.net/chinrui/article/details/70832310\" target=\"_blank\" rel=\"noopener\">来源</a></h3><p>返回的格式为json格式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, String&gt; <span class=\"title\">login</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tMap&lt;String, String&gt; hashMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">\thashMap.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"登录成功\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> hashMap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于上面的代码来说，还可以做进一步的优化，由于所有的 Restful 接口都只是返回数据，所以我们可以直接在类级别上添加 @ResponseBody 注解。<br>而大多数情况下，@Controller 与 @ResponseBody 又会一起使用，所以我们使用 @RestController 注解来替换掉它们，从而更加简洁地实现功能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/sys/user\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"login\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, String&gt; <span class=\"title\">login</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tMap&lt;String, String&gt; hashMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">\t\thashMap.put(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"登录成功\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> hashMap;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决重定向传参问题\"><a href=\"#解决重定向传参问题\" class=\"headerlink\" title=\"解决重定向传参问题\"></a>解决重定向传参问题</h3><p><strong>RedirectAttributes</strong><br>RedirectAttributes attr</p>\n<p><strong>attr.addAttribute(“param”, value);</strong><br>attr.addAttribute(“name”, “user”);<br>attr.addAttribute(“success”, “ok”);<br>return “redirect:/index”;<br>这种方式相当于系统自动的拼接了url 仍然会暴露信息</p>\n<p><strong>attr.addFlashAttribute(“param”, value);</strong><br>attr.addFlashAttribute(“status”,”999”);<br>attr.addFlashAttribute(“message”,”登录失败”);<br>return “redirect:/toLogin”;<br>这种方式通过session传递, session在跳转到页面后就是马上移除对象, 刷新后即消失</p>\n<h2 id=\"前端向后短传送\"><a href=\"#前端向后短传送\" class=\"headerlink\" title=\"前端向后短传送\"></a>前端向后短传送</h2><h3 id=\"ajax\"><a href=\"#ajax\" class=\"headerlink\" title=\"ajax\"></a>ajax</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">\ttype: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">\tdataType: <span class=\"string\">\"json\"</span>,</span><br><span class=\"line\">\turl: <span class=\"string\">\"/login\"</span>,</span><br><span class=\"line\">\tdata: $(<span class=\"string\">'#loginForm'</span>).serialize(),</span><br><span class=\"line\"></span><br><span class=\"line\">\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(result.info===<span class=\"string\">\"登录失败\"</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"info\"</span>).innerText=<span class=\"string\">\"账号不存在或密码错误\"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"模拟表单\"><a href=\"#模拟表单\" class=\"headerlink\" title=\"模拟表单\"></a>模拟表单</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toMain</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> input1 = $(<span class=\"string\">\"&lt;input&gt;\"</span>);</span><br><span class=\"line\">input1.attr(<span class=\"string\">\"type\"</span>, <span class=\"string\">\"hidden\"</span>);</span><br><span class=\"line\">input1.attr(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"key\"</span>);</span><br><span class=\"line\">input1.attr(<span class=\"string\">\"value\"</span>, key);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> $form = $(<span class=\"string\">'&lt;form method=\"POST\"&gt;&lt;/form&gt;'</span>);</span><br><span class=\"line\">$form.attr(<span class=\"string\">'action'</span>, <span class=\"string\">\"/toMain\"</span>);</span><br><span class=\"line\">$form.appendTo($(<span class=\"string\">'body'</span>));</span><br><span class=\"line\">$form.append(input1);</span><br><span class=\"line\">$form.submit();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"RequestParam注解\"><a href=\"#RequestParam注解\" class=\"headerlink\" title=\"@RequestParam注解\"></a>@RequestParam注解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/index\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index1</span><span class=\"params\">(@RequestParam(value = <span class=\"string\">\"username\"</span>)</span>String name)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"index\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PathVariable注解-使用url-额外文本传参数\"><a href=\"#PathVariable注解-使用url-额外文本传参数\" class=\"headerlink\" title=\"@PathVariable注解 使用url+额外文本传参数\"></a>@PathVariable注解 使用url+额外文本传参数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RequestMapping(<span class=\"string\">\"user/get/mac/&#123;macAddress&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getByMacAddress</span><span class=\"params\">(@PathVariable String macAddress)</span></span>&#123;</span><br><span class=\"line\">　　<span class=\"comment\">//do something;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对应的直接传递\"><a href=\"#对应的直接传递\" class=\"headerlink\" title=\"对应的直接传递\"></a>对应的直接传递</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getByMacAddress</span><span class=\"params\">(String username, String password)</span></span>&#123;</span><br><span class=\"line\">　　对应表单直接赋值</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参数校验\"><a href=\"#参数校验\" class=\"headerlink\" title=\"参数校验\"></a>参数校验</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"login\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Result <span class=\"title\">login</span><span class=\"params\">(@RequestBody @Valid UserModel userModel)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserModel</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@NotBlank</span>(message = <span class=\"string\">\"用户名不能为空\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUsername</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@NotBlank</span>(message = <span class=\"string\">\"密码不能为空\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPassword</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正则表达式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NotBlank</span>(message = <span class=\"string\">\"用户名不能为空\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Pattern</span>(</span><br><span class=\"line\">        regexp = <span class=\"string\">\"1(([38]\\\\d)|(5[^4&amp;&amp;\\\\d])|(4[579])|(7[0135678]))\\\\d&#123;8&#125;\"</span>,</span><br><span class=\"line\">        message = <span class=\"string\">\"手机号格式不合法\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUsername</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> username;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"纯洁的微笑Gitchat 课程笔记2","date":"2019-06-07T08:14:19.000Z","_content":"在Gitchat上 买了一个多月的 纯洁的微笑的SpringBoot讲解 这次来慢慢看看吧一共42讲 [GitChat链接,不妨给一杯咖啡](https://gitbook.cn/gitchat/column/5b86228ce15aa17d68b5b55a)\n<!--more-->\n\n**首先是约定优于配置, springboot已经定义好了大部分东西, 只有在不符合约定的时候, 才需要手动去配置相关文件**\n\n## 注解\n### @RestController\n这个注解等于`@ResponseBody ＋ @Controller`\n返回json数据的便捷注解\n\n### @RequestMapping\n`@RequestMapping(name=\"/getUser\", method= RequestMethod.POST)`\n\n## 测试\n### MockMVC\nMockMVC 可以进行POST GET 模拟请求\n```java\n@SpringBootTest\npublic class HelloWorldTest {\n\n    private MockMvc mockMvc;\n\n    @Before\n    //`@Before`注解的方法 在启动测试后首先执行, 来进行资源的初始化\n    public void setUp() throws Exception {\n        mockMvc = MockMvcBuilders.standaloneSetup(new HelloController()).build();\n    }\n\n    @Test\n    public void getHello() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.post(\"/hello\")\n          .accept(MediaType.APPLICATION_JSON_UTF8)).andDo(print());\n    }\n\n}\n```\n## 参数传递\n[之前的一篇博客, 传送门](https://blog.lsmg.xyz/2019/05/18/dataInteraction/)\n### 参数校验\n控制器\n```java\n@RequestMapping(name = \"/saveUser\", method = RequestMethod.POST)\npublic void saveUser(@Valid User user, BindingResult result) { //@Valid 代表对这个参数进行校验 BindingResult 用于存储校验结果\n    if(result.hasErrors()) {\n        List<ObjectError> list = result.getAllErrors();\n        for (ObjectError error : list) {\n            System.out.println(error.getCode()+ \"-\" + error.getDefaultMessage());\n        }\n    }\n}\n```\n实体类\n```java\n@NotEmpty(message = \"姓名不能为空\")\nprivate String name;\n@Max(value = 100, message = \"年龄不能大于100岁\")\n@Min(value= 0 ,message= \"年龄必须大于0岁！\" )\nprivate String sex;\nprivate int age;\n```\n对应的测试类\n```java\n@Test\npublic void saveUser() throws Exception {\n    mockMvc.perform(MockMvcRequestBuilders.post(\"/saveUser\")\n            .param(\"name\",\"\")\n            .param(\"age\", \"101\")\n            .param(\"sex\", \"男\")\n    );\n}\n/*Min-年龄必须大于0岁！\n  NotEmpty-姓名不能为空\n  Max-年龄不能大于100岁*/\n```\n### 校验的注解汇总\n| 注解                | 应用对象         | 检查内容       |\n| ------------------- | ---------------- | -------------- |\n| @Length(min=, max=) | 用于String对象   | 检查字符串长度 |\n| @Max(value=)        |                  | 最大值         |\n| @Min(value=)        |                  | 最小值         |\n| @NotNull            |                  | 不为空         |\n| @Past               | date 或 calendar | 时间是过去吗?  |\n| @Future             | date 或 calendar | 时间是将来吗?  |\n| @Email              | String           | 格式是邮箱吗?  |\n\n## 配置文件的使用\n\n### 读取配置文件\n```java\n//application.properties -->neo.title=lsmg\n\n@Value(\"${neo.title}\") //使用注解来获取内容\nprivate String title;\n```\n## thymeleaf\n引入命令空间\n`<html xmlns:th=\"https://www.thymeleaf.org\">`\n### 基础使用\n\n#### 字符串赋值拼接\n```java\n\"${属性名}\"\n\"'这是固定部分' + ${变化部分属性名}\"\n\n简写形式\n\"|固定部分${变化部分属性名}|\" //直接混合\n```\n\n#### 条件判断\n```java\n//if只有内容为真才会显示, unless内容为假才会显示\nth:if=\"${flag == 'yes'}\"\nth:unless=\"${flag == 'yes'}\"\n```\n#### 循环\n```html\n<table>\n    <tr  th:each=\"user,iterStat : ${users}\">\n        <td th:text=\"${user.name}\">neo</td>\n        <td th:text=\"${iterStat.index}\">index</td>\n    </tr>\n</table>\n```\n**iterStat 属性值**\nindex，当前迭代对象的 index（从 0 开始计算）；\ncount，当前迭代对象的 index（从 1 开始计算）；\nsize，被迭代对象的大小；\ncurrent，当前迭代变量；\neven/odd，布尔值，当前循环是否是偶数/奇数（从 0 开始计算）；\nfirst，布尔值，当前循环是否是第一个；\nlast，布尔值，当前循环是否是最后一个。\n\n#### URL\n`th:href=\"@{https://www.lsmg.xyz/{id}(id=${id})}\"`\n**如果需要 Thymeleaf 对 URL 进行渲染，那么务必使用 th:href、th:src 等属性**\n<div th:style=\"'background:url(' + @{${img url}} + ');'\">\n`{id}(id=${id})` 这部分方便了阅读\n\n#### 三目运算\n```java\n${age gt 30 ? '中年':'年轻'}\n\ngt：great than（大于）\nge：great equal（大于等于）\neq：equal（等于）\nlt：less than（小于）\nle：less equal（小于等于）\nne：not equal（不等于）\n```\n#### switch\n```html\n<div th:switch=\"${sex}\">\n    <p th:case=\"'woman'\">女</p>\n    <p th:case=\"'man'\">男</p>\n    <!-- *: case的默认的选项 -->\n    <p th:case=\"*\">蓝</p>\n</div>\n```\n### 高阶使用\n#### 内联`[[]]`\n如果要使用内联方式 需要在标签或者父标签 甚至是在body中加入 `th:inline=\"text/javascript/none\"`\n进行激活\n\n**看了下官方文档[传送门](https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html)**\n`th:inline=\"none\"`代表不显示,其中的`[[]]`不会被thymeleaf识别\n\n`th:inline=\"javascript\"` 代表在js中使用\n```javascript\n<script th:inline=\"javascript\">\n    ...\n    var username = [[${session.user.name}]];\n    ...\n</script>\n<script th:inline=\"javascript\">\n    ...\n    var username = \"Sebastian \\\"Fruity\\\" Applejuice\";\n    ...\n</script>\n\n<script th:inline=\"javascript\">\n    ...\n    var username = [(${session.user.name})];  // [()] 类似于 th:utext\n    ...\n</script>\n<script th:inline=\"javascript\">\n    ...\n    var username = Sebastian \"Fruity\" Applejuice;\n    ...\n</script>\n```\n上面的方式会 让它在静态显示时出现错误。\n一般需要加上注释 /**/ 来包裹`[[]]`\n\nthymeleaf支持多种格式\n\n* Strings\n* Numbers\n* Booleans\n* Arrays\n* Collections\n* Maps\n* Beans (objects with getter and setter methods)\n\n\n```javascript\n/*<![CDATA[*/\n  //这里说一下经常看到的\n  //XHTML解析器会把CDATA中的内容当作纯文本处理，\n  //里面的 < & 不会被js翻译而是直接显示\n/*]]>*/\n\n//<![CDATA[\n  //相同效果\n//*]]>*\n```\n\n#### 基本对象\n```\n#ctx：上下文对象\n#vars：上下文变量\n#locale：区域对象\n#request：（仅 Web 环境可用）HttpServletRequest 对象\n#response：（仅 Web 环境可用）HttpServletResponse 对象 //常用\n#session：（仅 Web 环境可用）HttpSession 对象 //常用\n#servletContext：（仅 Web 环境可用）ServletContext 对象\n```\n#### 内嵌变量\n[文档地址, 内容太多, 贴不过来了](https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#inlining)\n```html\n<!--格式化时间-->\n<p th:text=\"${#dates.format(date, 'yyyy-MM-dd HH:mm:ss')}\">neo</p>\n<!--创建当前时间 精确到天-->\n<p th:text=\"${#dates.createToday()}\">neo</p>\n<!--创建当前时间 精确到秒-->\n<p th:text=\"${#dates.createNow()}\">neo</p>\n\n<!--判断是否为空-->\n<p th:text=\"${#strings.isEmpty(userName)}\">userName</p>\n<!--判断 list 是否为空-->\n<p th:text=\"${#strings.listIsEmpty(users)}\">userName</p>\n<!--输出字符串长度-->\n<p th:text=\"${#strings.length(userName)}\">userName</p>\n<!--拼接字符串-->\n<p th:text=\"${#strings.concat(userName,userName,userName)}\"></p>\n<!--创建自定长度的字符串-->\n<p th:text=\"${#strings.randomAlphanumeric(count)}\">userName</p>\n```\n\n## springboot和thymeleaf上传文件\n### 配置信息\n常用部分\n```xml\n#支持的最大文件\nspring.servlet.multipart.max-file-size=100MB\n#文件请求最大限制\nspring.servlet.multipart.max-request-size=100MB\n```\n其他常用设置\n```xml\nspring.servlet.multipart.enabled=true，是否支持 multipart 上传文件\nspring.servlet.multipart.file-size-threshold=0，支持文件写入磁盘\nspring.servlet.multipart.location=，上传文件的临时目录\nspring.servlet.multipart.max-file-size=10Mb，最大支持文件大小\nspring.servlet.multipart.max-request-sizee=10Mb，最大支持请求大小\nspring.servlet.multipart.resolve-lazily=false，是否支持 multipart 上传文件时懒加载\n```\n\n### 文件上传\n解决上传文件大于 10M 出现连接重置的问题\n**终于去看了看  表达式**\n```java\n//Tomcat large file upload connection reset\n@Bean\npublic TomcatServletWebServerFactory tomcatEmbedded() {\n    TomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory();\n    tomcat.addConnectorCustomizers((TomcatConnectorCustomizer) connector -> {\n        if ((connector.getProtocolHandler() instanceof AbstractHttp11Protocol<?>)) {\n            //-1 means unlimited\n            ((AbstractHttp11Protocol<?>) connector.getProtocolHandler()).setMaxSwallowSize(-1);\n        }\n    });\n    return tomcat;\n}\n```\n前端网页\n```html\n<form method=\"POST\" action=\"/upload\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"file\" />\n    <input type=\"submit\" value=\"Submit\" />\n</form>\n```\n补充 enctype属性\n| 值                                | 描述                                                        |\n| --------------------------------- | ----------------------------------------------------------- |\n| application/x-www-form-urlencoded | 在发送前编码所有字符（默认）                                |\n| multipart/form-data               | 不对字符编码 在使用包含文件上传控件的表单时，必须使用该值。 |\n| text/plain                        | 空格转换为 \"+\" 加号，但不对特殊字符编码。                   |\n\n**RedirectAttributes**\nRedirectAttributes attr\n\n**attr.addAttribute(\"param\", value);**\nattr.addAttribute(\"name\", \"user\");\nattr.addAttribute(\"success\", \"ok\");\nreturn \"redirect:/index\";\n这种方式相当于系统自动的拼接了url 仍然会暴露信息\n\n**attr.addFlashAttribute(\"param\", value);**\nattr.addFlashAttribute(\"status\",\"999\");\nattr.addFlashAttribute(\"message\",\"登录失败\");\nreturn \"redirect:/toLogin\";\n这种方式通过session传递, session在跳转到页面后就是马上移除对象, 刷新后即消失\n\n**上传控制器**\n```java\n@PostMapping(\"/upload\")\npublic String singleFileUpload(@RequestParam(\"file\") MultipartFile file,\n                             RedirectAttributes redirectAttributes) {\n  if (file.isEmpty()) {\n      redirectAttributes.addFlashAttribute(\"message\", \"Please select a file to upload\");\n      return \"redirect:uploadStatus\";\n  }\n  try {\n      // Get the file and save it somewhere\n      byte[] bytes = file.getBytes();\n      // UPLOADED_FOLDER 文件本地存储地址\n      Path path = Paths.get(UPLOADED_FOLDER + file.getOriginalFilename());\n      Files.write(path, bytes);\n\n      redirectAttributes.addFlashAttribute(\"message\",\n              \"You successfully uploaded '\" + file.getOriginalFilename() + \"'\");\n\n  } catch (IOException e) {\n      e.printStackTrace();\n  }\n  return \"redirect:/uploadStatus\";\n}\n```\n### 多文件上传\n```html\n<form method=\"POST\" action=\"/uploadMore\" enctype=\"multipart/form-data\">\n    文件1： <input type=\"file\" name=\"file\" /><br/><br/>\n    文件2： <input type=\"file\" name=\"file\" /><br/><br/>\n    文件3： <input type=\"file\" name=\"file\" /><br/><br/>\n    <input type=\"submit\" value=\"Submit\" />\n</form>\n```\n控制器\n```java\n@PostMapping(\"/uploadMore\")\npublic String moreFileUpload(@RequestParam(\"file\") MultipartFile[] files,\n                               RedirectAttributes redirectAttributes) {\n    if (files.length==0) {\n        redirectAttributes.addFlashAttribute(\"message\", \"Please select a file to upload\");\n        return \"redirect:uploadStatus\";\n    }\n    for(MultipartFile file:files){\n        try {\n            byte[] bytes = file.getBytes();\n            Path path = Paths.get(UPLOADED_FOLDER + file.getOriginalFilename());\n            Files.write(path, bytes);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    redirectAttributes.addFlashAttribute(\"message\", \"You successfully uploaded all\");\n    return \"redirect:/uploadStatus\";\n}\n```\n## Restful api\n使用 swagger2 构建restful api\n\n## 定时任务\n### 使用注解方式\n启动类 加上注解 `@EnableScheduling` 然后在\\\n实现类上要有组件的注解@Component\n要定时的方法上加上\n```java\nprivate int count = 0;\nprivate static final SimpleDateFormat df = new SimpleDateFormat(\"HH:mm:ss\");\n\n@Scheduled(fixedRate = 1000) //单位为秒\npublic int getCount() {\n   System.out.println(df.format(new Date())+\" \"+count);\n   return ++count;\n}\n```\n @Scheduled(cron = \"*/6 * * * * *\") 的cron属性\n```java\n/*\nThe pattern is a list of six single space-separated fields: representing second, minute, hour, day, month, weekday. Month and weekday names can be given as the first three letters of the English names.\n6个由空格间隔的单独的数字  分别代表 xxxxx 月份和工作日可以用英文前三个字母代替\n*/\n```\n**星花和斜杠含义**\n\n*/10 * * * * * = every ten seconds.  */10\n这四个字符(由于第一位代表秒 *为通配符任意秒 /为每隔 10与/组合意味每十秒 */10意为 从任意秒开始每10S执行\n末尾的 * * * * * 意味任意的 分钟小时......\n\n*可以结合下面这个看*\n10 * * * * *\n这个意思为 任意的分钟小时...... 当秒为10的时候 触发\n\n**再来一个例子**\n0 0/30 8-10 * * *\n后三个星花表示任意的 天月和工作日\n第一个0表示 0S时\n第二个 0/30 表示从0Min开始每隔30Min\n第三个 `-` 表示8H和9H和10H\n如果第三个 `-` 换为`,` 则为8H和10H\n","source":"_posts/Java-Springboot基础知识2.md","raw":"---\ntitle: 纯洁的微笑Gitchat 课程笔记2\ntags:\ncategories:\n  - Java\ndate: 2019-06-07 16:14:19\n---\n在Gitchat上 买了一个多月的 纯洁的微笑的SpringBoot讲解 这次来慢慢看看吧一共42讲 [GitChat链接,不妨给一杯咖啡](https://gitbook.cn/gitchat/column/5b86228ce15aa17d68b5b55a)\n<!--more-->\n\n**首先是约定优于配置, springboot已经定义好了大部分东西, 只有在不符合约定的时候, 才需要手动去配置相关文件**\n\n## 注解\n### @RestController\n这个注解等于`@ResponseBody ＋ @Controller`\n返回json数据的便捷注解\n\n### @RequestMapping\n`@RequestMapping(name=\"/getUser\", method= RequestMethod.POST)`\n\n## 测试\n### MockMVC\nMockMVC 可以进行POST GET 模拟请求\n```java\n@SpringBootTest\npublic class HelloWorldTest {\n\n    private MockMvc mockMvc;\n\n    @Before\n    //`@Before`注解的方法 在启动测试后首先执行, 来进行资源的初始化\n    public void setUp() throws Exception {\n        mockMvc = MockMvcBuilders.standaloneSetup(new HelloController()).build();\n    }\n\n    @Test\n    public void getHello() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.post(\"/hello\")\n          .accept(MediaType.APPLICATION_JSON_UTF8)).andDo(print());\n    }\n\n}\n```\n## 参数传递\n[之前的一篇博客, 传送门](https://blog.lsmg.xyz/2019/05/18/dataInteraction/)\n### 参数校验\n控制器\n```java\n@RequestMapping(name = \"/saveUser\", method = RequestMethod.POST)\npublic void saveUser(@Valid User user, BindingResult result) { //@Valid 代表对这个参数进行校验 BindingResult 用于存储校验结果\n    if(result.hasErrors()) {\n        List<ObjectError> list = result.getAllErrors();\n        for (ObjectError error : list) {\n            System.out.println(error.getCode()+ \"-\" + error.getDefaultMessage());\n        }\n    }\n}\n```\n实体类\n```java\n@NotEmpty(message = \"姓名不能为空\")\nprivate String name;\n@Max(value = 100, message = \"年龄不能大于100岁\")\n@Min(value= 0 ,message= \"年龄必须大于0岁！\" )\nprivate String sex;\nprivate int age;\n```\n对应的测试类\n```java\n@Test\npublic void saveUser() throws Exception {\n    mockMvc.perform(MockMvcRequestBuilders.post(\"/saveUser\")\n            .param(\"name\",\"\")\n            .param(\"age\", \"101\")\n            .param(\"sex\", \"男\")\n    );\n}\n/*Min-年龄必须大于0岁！\n  NotEmpty-姓名不能为空\n  Max-年龄不能大于100岁*/\n```\n### 校验的注解汇总\n| 注解                | 应用对象         | 检查内容       |\n| ------------------- | ---------------- | -------------- |\n| @Length(min=, max=) | 用于String对象   | 检查字符串长度 |\n| @Max(value=)        |                  | 最大值         |\n| @Min(value=)        |                  | 最小值         |\n| @NotNull            |                  | 不为空         |\n| @Past               | date 或 calendar | 时间是过去吗?  |\n| @Future             | date 或 calendar | 时间是将来吗?  |\n| @Email              | String           | 格式是邮箱吗?  |\n\n## 配置文件的使用\n\n### 读取配置文件\n```java\n//application.properties -->neo.title=lsmg\n\n@Value(\"${neo.title}\") //使用注解来获取内容\nprivate String title;\n```\n## thymeleaf\n引入命令空间\n`<html xmlns:th=\"https://www.thymeleaf.org\">`\n### 基础使用\n\n#### 字符串赋值拼接\n```java\n\"${属性名}\"\n\"'这是固定部分' + ${变化部分属性名}\"\n\n简写形式\n\"|固定部分${变化部分属性名}|\" //直接混合\n```\n\n#### 条件判断\n```java\n//if只有内容为真才会显示, unless内容为假才会显示\nth:if=\"${flag == 'yes'}\"\nth:unless=\"${flag == 'yes'}\"\n```\n#### 循环\n```html\n<table>\n    <tr  th:each=\"user,iterStat : ${users}\">\n        <td th:text=\"${user.name}\">neo</td>\n        <td th:text=\"${iterStat.index}\">index</td>\n    </tr>\n</table>\n```\n**iterStat 属性值**\nindex，当前迭代对象的 index（从 0 开始计算）；\ncount，当前迭代对象的 index（从 1 开始计算）；\nsize，被迭代对象的大小；\ncurrent，当前迭代变量；\neven/odd，布尔值，当前循环是否是偶数/奇数（从 0 开始计算）；\nfirst，布尔值，当前循环是否是第一个；\nlast，布尔值，当前循环是否是最后一个。\n\n#### URL\n`th:href=\"@{https://www.lsmg.xyz/{id}(id=${id})}\"`\n**如果需要 Thymeleaf 对 URL 进行渲染，那么务必使用 th:href、th:src 等属性**\n<div th:style=\"'background:url(' + @{${img url}} + ');'\">\n`{id}(id=${id})` 这部分方便了阅读\n\n#### 三目运算\n```java\n${age gt 30 ? '中年':'年轻'}\n\ngt：great than（大于）\nge：great equal（大于等于）\neq：equal（等于）\nlt：less than（小于）\nle：less equal（小于等于）\nne：not equal（不等于）\n```\n#### switch\n```html\n<div th:switch=\"${sex}\">\n    <p th:case=\"'woman'\">女</p>\n    <p th:case=\"'man'\">男</p>\n    <!-- *: case的默认的选项 -->\n    <p th:case=\"*\">蓝</p>\n</div>\n```\n### 高阶使用\n#### 内联`[[]]`\n如果要使用内联方式 需要在标签或者父标签 甚至是在body中加入 `th:inline=\"text/javascript/none\"`\n进行激活\n\n**看了下官方文档[传送门](https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html)**\n`th:inline=\"none\"`代表不显示,其中的`[[]]`不会被thymeleaf识别\n\n`th:inline=\"javascript\"` 代表在js中使用\n```javascript\n<script th:inline=\"javascript\">\n    ...\n    var username = [[${session.user.name}]];\n    ...\n</script>\n<script th:inline=\"javascript\">\n    ...\n    var username = \"Sebastian \\\"Fruity\\\" Applejuice\";\n    ...\n</script>\n\n<script th:inline=\"javascript\">\n    ...\n    var username = [(${session.user.name})];  // [()] 类似于 th:utext\n    ...\n</script>\n<script th:inline=\"javascript\">\n    ...\n    var username = Sebastian \"Fruity\" Applejuice;\n    ...\n</script>\n```\n上面的方式会 让它在静态显示时出现错误。\n一般需要加上注释 /**/ 来包裹`[[]]`\n\nthymeleaf支持多种格式\n\n* Strings\n* Numbers\n* Booleans\n* Arrays\n* Collections\n* Maps\n* Beans (objects with getter and setter methods)\n\n\n```javascript\n/*<![CDATA[*/\n  //这里说一下经常看到的\n  //XHTML解析器会把CDATA中的内容当作纯文本处理，\n  //里面的 < & 不会被js翻译而是直接显示\n/*]]>*/\n\n//<![CDATA[\n  //相同效果\n//*]]>*\n```\n\n#### 基本对象\n```\n#ctx：上下文对象\n#vars：上下文变量\n#locale：区域对象\n#request：（仅 Web 环境可用）HttpServletRequest 对象\n#response：（仅 Web 环境可用）HttpServletResponse 对象 //常用\n#session：（仅 Web 环境可用）HttpSession 对象 //常用\n#servletContext：（仅 Web 环境可用）ServletContext 对象\n```\n#### 内嵌变量\n[文档地址, 内容太多, 贴不过来了](https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#inlining)\n```html\n<!--格式化时间-->\n<p th:text=\"${#dates.format(date, 'yyyy-MM-dd HH:mm:ss')}\">neo</p>\n<!--创建当前时间 精确到天-->\n<p th:text=\"${#dates.createToday()}\">neo</p>\n<!--创建当前时间 精确到秒-->\n<p th:text=\"${#dates.createNow()}\">neo</p>\n\n<!--判断是否为空-->\n<p th:text=\"${#strings.isEmpty(userName)}\">userName</p>\n<!--判断 list 是否为空-->\n<p th:text=\"${#strings.listIsEmpty(users)}\">userName</p>\n<!--输出字符串长度-->\n<p th:text=\"${#strings.length(userName)}\">userName</p>\n<!--拼接字符串-->\n<p th:text=\"${#strings.concat(userName,userName,userName)}\"></p>\n<!--创建自定长度的字符串-->\n<p th:text=\"${#strings.randomAlphanumeric(count)}\">userName</p>\n```\n\n## springboot和thymeleaf上传文件\n### 配置信息\n常用部分\n```xml\n#支持的最大文件\nspring.servlet.multipart.max-file-size=100MB\n#文件请求最大限制\nspring.servlet.multipart.max-request-size=100MB\n```\n其他常用设置\n```xml\nspring.servlet.multipart.enabled=true，是否支持 multipart 上传文件\nspring.servlet.multipart.file-size-threshold=0，支持文件写入磁盘\nspring.servlet.multipart.location=，上传文件的临时目录\nspring.servlet.multipart.max-file-size=10Mb，最大支持文件大小\nspring.servlet.multipart.max-request-sizee=10Mb，最大支持请求大小\nspring.servlet.multipart.resolve-lazily=false，是否支持 multipart 上传文件时懒加载\n```\n\n### 文件上传\n解决上传文件大于 10M 出现连接重置的问题\n**终于去看了看  表达式**\n```java\n//Tomcat large file upload connection reset\n@Bean\npublic TomcatServletWebServerFactory tomcatEmbedded() {\n    TomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory();\n    tomcat.addConnectorCustomizers((TomcatConnectorCustomizer) connector -> {\n        if ((connector.getProtocolHandler() instanceof AbstractHttp11Protocol<?>)) {\n            //-1 means unlimited\n            ((AbstractHttp11Protocol<?>) connector.getProtocolHandler()).setMaxSwallowSize(-1);\n        }\n    });\n    return tomcat;\n}\n```\n前端网页\n```html\n<form method=\"POST\" action=\"/upload\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"file\" />\n    <input type=\"submit\" value=\"Submit\" />\n</form>\n```\n补充 enctype属性\n| 值                                | 描述                                                        |\n| --------------------------------- | ----------------------------------------------------------- |\n| application/x-www-form-urlencoded | 在发送前编码所有字符（默认）                                |\n| multipart/form-data               | 不对字符编码 在使用包含文件上传控件的表单时，必须使用该值。 |\n| text/plain                        | 空格转换为 \"+\" 加号，但不对特殊字符编码。                   |\n\n**RedirectAttributes**\nRedirectAttributes attr\n\n**attr.addAttribute(\"param\", value);**\nattr.addAttribute(\"name\", \"user\");\nattr.addAttribute(\"success\", \"ok\");\nreturn \"redirect:/index\";\n这种方式相当于系统自动的拼接了url 仍然会暴露信息\n\n**attr.addFlashAttribute(\"param\", value);**\nattr.addFlashAttribute(\"status\",\"999\");\nattr.addFlashAttribute(\"message\",\"登录失败\");\nreturn \"redirect:/toLogin\";\n这种方式通过session传递, session在跳转到页面后就是马上移除对象, 刷新后即消失\n\n**上传控制器**\n```java\n@PostMapping(\"/upload\")\npublic String singleFileUpload(@RequestParam(\"file\") MultipartFile file,\n                             RedirectAttributes redirectAttributes) {\n  if (file.isEmpty()) {\n      redirectAttributes.addFlashAttribute(\"message\", \"Please select a file to upload\");\n      return \"redirect:uploadStatus\";\n  }\n  try {\n      // Get the file and save it somewhere\n      byte[] bytes = file.getBytes();\n      // UPLOADED_FOLDER 文件本地存储地址\n      Path path = Paths.get(UPLOADED_FOLDER + file.getOriginalFilename());\n      Files.write(path, bytes);\n\n      redirectAttributes.addFlashAttribute(\"message\",\n              \"You successfully uploaded '\" + file.getOriginalFilename() + \"'\");\n\n  } catch (IOException e) {\n      e.printStackTrace();\n  }\n  return \"redirect:/uploadStatus\";\n}\n```\n### 多文件上传\n```html\n<form method=\"POST\" action=\"/uploadMore\" enctype=\"multipart/form-data\">\n    文件1： <input type=\"file\" name=\"file\" /><br/><br/>\n    文件2： <input type=\"file\" name=\"file\" /><br/><br/>\n    文件3： <input type=\"file\" name=\"file\" /><br/><br/>\n    <input type=\"submit\" value=\"Submit\" />\n</form>\n```\n控制器\n```java\n@PostMapping(\"/uploadMore\")\npublic String moreFileUpload(@RequestParam(\"file\") MultipartFile[] files,\n                               RedirectAttributes redirectAttributes) {\n    if (files.length==0) {\n        redirectAttributes.addFlashAttribute(\"message\", \"Please select a file to upload\");\n        return \"redirect:uploadStatus\";\n    }\n    for(MultipartFile file:files){\n        try {\n            byte[] bytes = file.getBytes();\n            Path path = Paths.get(UPLOADED_FOLDER + file.getOriginalFilename());\n            Files.write(path, bytes);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    redirectAttributes.addFlashAttribute(\"message\", \"You successfully uploaded all\");\n    return \"redirect:/uploadStatus\";\n}\n```\n## Restful api\n使用 swagger2 构建restful api\n\n## 定时任务\n### 使用注解方式\n启动类 加上注解 `@EnableScheduling` 然后在\\\n实现类上要有组件的注解@Component\n要定时的方法上加上\n```java\nprivate int count = 0;\nprivate static final SimpleDateFormat df = new SimpleDateFormat(\"HH:mm:ss\");\n\n@Scheduled(fixedRate = 1000) //单位为秒\npublic int getCount() {\n   System.out.println(df.format(new Date())+\" \"+count);\n   return ++count;\n}\n```\n @Scheduled(cron = \"*/6 * * * * *\") 的cron属性\n```java\n/*\nThe pattern is a list of six single space-separated fields: representing second, minute, hour, day, month, weekday. Month and weekday names can be given as the first three letters of the English names.\n6个由空格间隔的单独的数字  分别代表 xxxxx 月份和工作日可以用英文前三个字母代替\n*/\n```\n**星花和斜杠含义**\n\n*/10 * * * * * = every ten seconds.  */10\n这四个字符(由于第一位代表秒 *为通配符任意秒 /为每隔 10与/组合意味每十秒 */10意为 从任意秒开始每10S执行\n末尾的 * * * * * 意味任意的 分钟小时......\n\n*可以结合下面这个看*\n10 * * * * *\n这个意思为 任意的分钟小时...... 当秒为10的时候 触发\n\n**再来一个例子**\n0 0/30 8-10 * * *\n后三个星花表示任意的 天月和工作日\n第一个0表示 0S时\n第二个 0/30 表示从0Min开始每隔30Min\n第三个 `-` 表示8H和9H和10H\n如果第三个 `-` 换为`,` 则为8H和10H\n","slug":"Java-Springboot基础知识2","published":1,"updated":"2020-02-27T01:49:16.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucz0001ssouo79j96njt","content":"<p>在Gitchat上 买了一个多月的 纯洁的微笑的SpringBoot讲解 这次来慢慢看看吧一共42讲 <a href=\"https://gitbook.cn/gitchat/column/5b86228ce15aa17d68b5b55a\" target=\"_blank\" rel=\"noopener\">GitChat链接,不妨给一杯咖啡</a></p>\n<a id=\"more\"></a>\n\n<p><strong>首先是约定优于配置, springboot已经定义好了大部分东西, 只有在不符合约定的时候, 才需要手动去配置相关文件</strong></p>\n<h2 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h2><h3 id=\"RestController\"><a href=\"#RestController\" class=\"headerlink\" title=\"@RestController\"></a>@RestController</h3><p>这个注解等于<code>@ResponseBody ＋ @Controller</code><br>返回json数据的便捷注解</p>\n<h3 id=\"RequestMapping\"><a href=\"#RequestMapping\" class=\"headerlink\" title=\"@RequestMapping\"></a>@RequestMapping</h3><p><code>@RequestMapping(name=&quot;/getUser&quot;, method= RequestMethod.POST)</code></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><h3 id=\"MockMVC\"><a href=\"#MockMVC\" class=\"headerlink\" title=\"MockMVC\"></a>MockMVC</h3><p>MockMVC 可以进行POST GET 模拟请求</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MockMvc mockMvc;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"comment\">//`@Before`注解的方法 在启动测试后首先执行, 来进行资源的初始化</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        mockMvc = MockMvcBuilders.standaloneSetup(<span class=\"keyword\">new</span> HelloController()).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getHello</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        mockMvc.perform(MockMvcRequestBuilders.post(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">          .accept(MediaType.APPLICATION_JSON_UTF8)).andDo(print());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参数传递\"><a href=\"#参数传递\" class=\"headerlink\" title=\"参数传递\"></a>参数传递</h2><p><a href=\"https://blog.lsmg.xyz/2019/05/18/dataInteraction/\">之前的一篇博客, 传送门</a></p>\n<h3 id=\"参数校验\"><a href=\"#参数校验\" class=\"headerlink\" title=\"参数校验\"></a>参数校验</h3><p>控制器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(name = <span class=\"string\">\"/saveUser\"</span>, method = RequestMethod.POST)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">saveUser</span><span class=\"params\">(@Valid User user, BindingResult result)</span> </span>&#123; <span class=\"comment\">//@Valid 代表对这个参数进行校验 BindingResult 用于存储校验结果</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(result.hasErrors()) &#123;</span><br><span class=\"line\">        List&lt;ObjectError&gt; list = result.getAllErrors();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ObjectError error : list) &#123;</span><br><span class=\"line\">            System.out.println(error.getCode()+ <span class=\"string\">\"-\"</span> + error.getDefaultMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实体类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NotEmpty</span>(message = <span class=\"string\">\"姓名不能为空\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"><span class=\"meta\">@Max</span>(value = <span class=\"number\">100</span>, message = <span class=\"string\">\"年龄不能大于100岁\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Min</span>(value= <span class=\"number\">0</span> ,message= <span class=\"string\">\"年龄必须大于0岁！\"</span> )</span><br><span class=\"line\"><span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br></pre></td></tr></table></figure>\n<p>对应的测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">saveUser</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    mockMvc.perform(MockMvcRequestBuilders.post(<span class=\"string\">\"/saveUser\"</span>)</span><br><span class=\"line\">            .param(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">            .param(<span class=\"string\">\"age\"</span>, <span class=\"string\">\"101\"</span>)</span><br><span class=\"line\">            .param(<span class=\"string\">\"sex\"</span>, <span class=\"string\">\"男\"</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*Min-年龄必须大于0岁！</span></span><br><span class=\"line\"><span class=\"comment\">  NotEmpty-姓名不能为空</span></span><br><span class=\"line\"><span class=\"comment\">  Max-年龄不能大于100岁*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"校验的注解汇总\"><a href=\"#校验的注解汇总\" class=\"headerlink\" title=\"校验的注解汇总\"></a>校验的注解汇总</h3><table>\n<thead>\n<tr>\n<th>注解</th>\n<th>应用对象</th>\n<th>检查内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Length(min=, max=)</td>\n<td>用于String对象</td>\n<td>检查字符串长度</td>\n</tr>\n<tr>\n<td>@Max(value=)</td>\n<td></td>\n<td>最大值</td>\n</tr>\n<tr>\n<td>@Min(value=)</td>\n<td></td>\n<td>最小值</td>\n</tr>\n<tr>\n<td>@NotNull</td>\n<td></td>\n<td>不为空</td>\n</tr>\n<tr>\n<td>@Past</td>\n<td>date 或 calendar</td>\n<td>时间是过去吗?</td>\n</tr>\n<tr>\n<td>@Future</td>\n<td>date 或 calendar</td>\n<td>时间是将来吗?</td>\n</tr>\n<tr>\n<td>@Email</td>\n<td>String</td>\n<td>格式是邮箱吗?</td>\n</tr>\n</tbody></table>\n<h2 id=\"配置文件的使用\"><a href=\"#配置文件的使用\" class=\"headerlink\" title=\"配置文件的使用\"></a>配置文件的使用</h2><h3 id=\"读取配置文件\"><a href=\"#读取配置文件\" class=\"headerlink\" title=\"读取配置文件\"></a>读取配置文件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//application.properties --&gt;neo.title=lsmg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;neo.title&#125;\"</span>) <span class=\"comment\">//使用注解来获取内容</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String title;</span><br></pre></td></tr></table></figure>\n<h2 id=\"thymeleaf\"><a href=\"#thymeleaf\" class=\"headerlink\" title=\"thymeleaf\"></a>thymeleaf</h2><p>引入命令空间<br><code>&lt;html xmlns:th=&quot;https://www.thymeleaf.org&quot;&gt;</code></p>\n<h3 id=\"基础使用\"><a href=\"#基础使用\" class=\"headerlink\" title=\"基础使用\"></a>基础使用</h3><h4 id=\"字符串赋值拼接\"><a href=\"#字符串赋值拼接\" class=\"headerlink\" title=\"字符串赋值拼接\"></a>字符串赋值拼接</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"$&#123;属性名&#125;\"</span></span><br><span class=\"line\"><span class=\"string\">\"'这是固定部分' + $&#123;变化部分属性名&#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">简写形式</span><br><span class=\"line\"><span class=\"string\">\"|固定部分$&#123;变化部分属性名&#125;|\"</span> <span class=\"comment\">//直接混合</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"条件判断\"><a href=\"#条件判断\" class=\"headerlink\" title=\"条件判断\"></a>条件判断</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//if只有内容为真才会显示, unless内容为假才会显示</span></span><br><span class=\"line\">th:<span class=\"keyword\">if</span>=<span class=\"string\">\"$&#123;flag == 'yes'&#125;\"</span></span><br><span class=\"line\">th:unless=<span class=\"string\">\"$&#123;flag == 'yes'&#125;\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>  <span class=\"attr\">th:each</span>=<span class=\"string\">\"user,iterStat : $&#123;users&#125;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;user.name&#125;\"</span>&gt;</span>neo<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;iterStat.index&#125;\"</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>iterStat 属性值</strong><br>index，当前迭代对象的 index（从 0 开始计算）；<br>count，当前迭代对象的 index（从 1 开始计算）；<br>size，被迭代对象的大小；<br>current，当前迭代变量；<br>even/odd，布尔值，当前循环是否是偶数/奇数（从 0 开始计算）；<br>first，布尔值，当前循环是否是第一个；<br>last，布尔值，当前循环是否是最后一个。</p>\n<h4 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h4><p><code>th:href=&quot;@{https://www.lsmg.xyz/{id}(id=${id})}&quot;</code><br><strong>如果需要 Thymeleaf 对 URL 进行渲染，那么务必使用 th:href、th:src 等属性</strong></p>\n<div th:style=\"'background:url(' + @{${img url}} + ');'\">\n`{id}(id=${id})` 这部分方便了阅读\n\n<h4 id=\"三目运算\"><a href=\"#三目运算\" class=\"headerlink\" title=\"三目运算\"></a>三目运算</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;age gt <span class=\"number\">30</span> ? <span class=\"string\">'中年'</span>:<span class=\"string\">'年轻'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">gt：great than（大于）</span><br><span class=\"line\">ge：great equal（大于等于）</span><br><span class=\"line\">eq：equal（等于）</span><br><span class=\"line\">lt：less than（小于）</span><br><span class=\"line\">le：less equal（小于等于）</span><br><span class=\"line\">ne：not equal（不等于）</span><br></pre></td></tr></table></figure>\n<h4 id=\"switch\"><a href=\"#switch\" class=\"headerlink\" title=\"switch\"></a>switch</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:switch</span>=<span class=\"string\">\"$&#123;sex&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:case</span>=<span class=\"string\">\"'woman'\"</span>&gt;</span>女<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:case</span>=<span class=\"string\">\"'man'\"</span>&gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- *: case的默认的选项 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:case</span>=<span class=\"string\">\"*\"</span>&gt;</span>蓝<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"高阶使用\"><a href=\"#高阶使用\" class=\"headerlink\" title=\"高阶使用\"></a>高阶使用</h3><h4 id=\"内联\"><a href=\"#内联\" class=\"headerlink\" title=\"内联[[]]\"></a>内联<code>[[]]</code></h4><p>如果要使用内联方式 需要在标签或者父标签 甚至是在body中加入 <code>th:inline=&quot;text/javascript/none&quot;</code><br>进行激活</p>\n<p><strong>看了下官方文档<a href=\"https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html\" target=\"_blank\" rel=\"noopener\">传送门</a></strong><br><code>th:inline=&quot;none&quot;</code>代表不显示,其中的<code>[[]]</code>不会被thymeleaf识别</p>\n<p><code>th:inline=&quot;javascript&quot;</code> 代表在js中使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script th:inline=<span class=\"string\">\"javascript\"</span>&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">var</span> username = [[$&#123;session.user.name&#125;]];</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script th:inline=\"javascript\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    ...</span></span><br><span class=\"line\"><span class=\"regexp\">    var username = \"Sebastian \\\"Fruity\\\" Applejuice\";</span></span><br><span class=\"line\"><span class=\"regexp\">    ...</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script th:inline=<span class=\"string\">\"javascript\"</span>&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">var</span> username = [($&#123;session.user.name&#125;)];  <span class=\"comment\">// [()] 类似于 th:utext</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script th:inline=\"javascript\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    ...</span></span><br><span class=\"line\"><span class=\"regexp\">    var username = Sebastian \"Fruity\" Applejuice;</span></span><br><span class=\"line\"><span class=\"regexp\">    ...</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>\n<p>上面的方式会 让它在静态显示时出现错误。<br>一般需要加上注释 /**/ 来包裹<code>[[]]</code></p>\n<p>thymeleaf支持多种格式</p>\n<ul>\n<li>Strings</li>\n<li>Numbers</li>\n<li>Booleans</li>\n<li>Arrays</li>\n<li>Collections</li>\n<li>Maps</li>\n<li>Beans (objects with getter and setter methods)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*&lt;![CDATA[*/</span></span><br><span class=\"line\">  <span class=\"comment\">//这里说一下经常看到的</span></span><br><span class=\"line\">  <span class=\"comment\">//XHTML解析器会把CDATA中的内容当作纯文本处理，</span></span><br><span class=\"line\">  <span class=\"comment\">//里面的 &lt; &amp; 不会被js翻译而是直接显示</span></span><br><span class=\"line\"><span class=\"comment\">/*]]&gt;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&lt;![CDATA[</span></span><br><span class=\"line\">  <span class=\"comment\">//相同效果</span></span><br><span class=\"line\"><span class=\"comment\">//*]]&gt;*</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"基本对象\"><a href=\"#基本对象\" class=\"headerlink\" title=\"基本对象\"></a>基本对象</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ctx：上下文对象</span><br><span class=\"line\">#vars：上下文变量</span><br><span class=\"line\">#locale：区域对象</span><br><span class=\"line\">#request：（仅 Web 环境可用）HttpServletRequest 对象</span><br><span class=\"line\">#response：（仅 Web 环境可用）HttpServletResponse 对象 &#x2F;&#x2F;常用</span><br><span class=\"line\">#session：（仅 Web 环境可用）HttpSession 对象 &#x2F;&#x2F;常用</span><br><span class=\"line\">#servletContext：（仅 Web 环境可用）ServletContext 对象</span><br></pre></td></tr></table></figure>\n<h4 id=\"内嵌变量\"><a href=\"#内嵌变量\" class=\"headerlink\" title=\"内嵌变量\"></a>内嵌变量</h4><p><a href=\"https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#inlining\" target=\"_blank\" rel=\"noopener\">文档地址, 内容太多, 贴不过来了</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--格式化时间--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;#dates.format(date, 'yyyy-MM-dd HH:mm:ss')&#125;\"</span>&gt;</span>neo<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--创建当前时间 精确到天--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;#dates.createToday()&#125;\"</span>&gt;</span>neo<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--创建当前时间 精确到秒--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;#dates.createNow()&#125;\"</span>&gt;</span>neo<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--判断是否为空--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;#strings.isEmpty(userName)&#125;\"</span>&gt;</span>userName<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--判断 list 是否为空--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;#strings.listIsEmpty(users)&#125;\"</span>&gt;</span>userName<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--输出字符串长度--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;#strings.length(userName)&#125;\"</span>&gt;</span>userName<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--拼接字符串--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;#strings.concat(userName,userName,userName)&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--创建自定长度的字符串--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;#strings.randomAlphanumeric(count)&#125;\"</span>&gt;</span>userName<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"springboot和thymeleaf上传文件\"><a href=\"#springboot和thymeleaf上传文件\" class=\"headerlink\" title=\"springboot和thymeleaf上传文件\"></a>springboot和thymeleaf上传文件</h2><h3 id=\"配置信息\"><a href=\"#配置信息\" class=\"headerlink\" title=\"配置信息\"></a>配置信息</h3><p>常用部分</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#支持的最大文件</span><br><span class=\"line\">spring.servlet.multipart.max-file-size=100MB</span><br><span class=\"line\">#文件请求最大限制</span><br><span class=\"line\">spring.servlet.multipart.max-request-size=100MB</span><br></pre></td></tr></table></figure>\n<p>其他常用设置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.servlet.multipart.enabled=true，是否支持 multipart 上传文件</span><br><span class=\"line\">spring.servlet.multipart.file-size-threshold=0，支持文件写入磁盘</span><br><span class=\"line\">spring.servlet.multipart.location=，上传文件的临时目录</span><br><span class=\"line\">spring.servlet.multipart.max-file-size=10Mb，最大支持文件大小</span><br><span class=\"line\">spring.servlet.multipart.max-request-sizee=10Mb，最大支持请求大小</span><br><span class=\"line\">spring.servlet.multipart.resolve-lazily=false，是否支持 multipart 上传文件时懒加载</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h3><p>解决上传文件大于 10M 出现连接重置的问题<br><strong>终于去看了看  表达式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Tomcat large file upload connection reset</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TomcatServletWebServerFactory <span class=\"title\">tomcatEmbedded</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    TomcatServletWebServerFactory tomcat = <span class=\"keyword\">new</span> TomcatServletWebServerFactory();</span><br><span class=\"line\">    tomcat.addConnectorCustomizers((TomcatConnectorCustomizer) connector -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((connector.getProtocolHandler() <span class=\"keyword\">instanceof</span> AbstractHttp11Protocol&lt;?&gt;)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//-1 means unlimited</span></span><br><span class=\"line\">            ((AbstractHttp11Protocol&lt;?&gt;) connector.getProtocolHandler()).setMaxSwallowSize(-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tomcat;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>前端网页</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/upload\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Submit\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>补充 enctype属性<br>| 值                                | 描述                                                        |<br>| ——————————— | ———————————————————– |<br>| application/x-www-form-urlencoded | 在发送前编码所有字符（默认）                                |<br>| multipart/form-data               | 不对字符编码 在使用包含文件上传控件的表单时，必须使用该值。 |<br>| text/plain                        | 空格转换为 “+” 加号，但不对特殊字符编码。                   |</p>\n<p><strong>RedirectAttributes</strong><br>RedirectAttributes attr</p>\n<p><strong>attr.addAttribute(“param”, value);</strong><br>attr.addAttribute(“name”, “user”);<br>attr.addAttribute(“success”, “ok”);<br>return “redirect:/index”;<br>这种方式相当于系统自动的拼接了url 仍然会暴露信息</p>\n<p><strong>attr.addFlashAttribute(“param”, value);</strong><br>attr.addFlashAttribute(“status”,”999”);<br>attr.addFlashAttribute(“message”,”登录失败”);<br>return “redirect:/toLogin”;<br>这种方式通过session传递, session在跳转到页面后就是马上移除对象, 刷新后即消失</p>\n<p><strong>上传控制器</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/upload\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">singleFileUpload</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"file\"</span>)</span> MultipartFile file,</span></span><br><span class=\"line\"><span class=\"function\">                             RedirectAttributes redirectAttributes) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (file.isEmpty()) &#123;</span><br><span class=\"line\">      redirectAttributes.addFlashAttribute(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"Please select a file to upload\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:uploadStatus\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Get the file and save it somewhere</span></span><br><span class=\"line\">      <span class=\"keyword\">byte</span>[] bytes = file.getBytes();</span><br><span class=\"line\">      <span class=\"comment\">// UPLOADED_FOLDER 文件本地存储地址</span></span><br><span class=\"line\">      Path path = Paths.get(UPLOADED_FOLDER + file.getOriginalFilename());</span><br><span class=\"line\">      Files.write(path, bytes);</span><br><span class=\"line\"></span><br><span class=\"line\">      redirectAttributes.addFlashAttribute(<span class=\"string\">\"message\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"You successfully uploaded '\"</span> + file.getOriginalFilename() + <span class=\"string\">\"'\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/uploadStatus\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多文件上传\"><a href=\"#多文件上传\" class=\"headerlink\" title=\"多文件上传\"></a>多文件上传</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/uploadMore\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></span><br><span class=\"line\">    文件1： <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    文件2： <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    文件3： <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Submit\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>控制器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/uploadMore\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">moreFileUpload</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"file\"</span>)</span> MultipartFile[] files,</span></span><br><span class=\"line\"><span class=\"function\">                               RedirectAttributes redirectAttributes) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (files.length==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        redirectAttributes.addFlashAttribute(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"Please select a file to upload\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:uploadStatus\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(MultipartFile file:files)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] bytes = file.getBytes();</span><br><span class=\"line\">            Path path = Paths.get(UPLOADED_FOLDER + file.getOriginalFilename());</span><br><span class=\"line\">            Files.write(path, bytes);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    redirectAttributes.addFlashAttribute(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"You successfully uploaded all\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/uploadStatus\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Restful-api\"><a href=\"#Restful-api\" class=\"headerlink\" title=\"Restful api\"></a>Restful api</h2><p>使用 swagger2 构建restful api</p>\n<h2 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a>定时任务</h2><h3 id=\"使用注解方式\"><a href=\"#使用注解方式\" class=\"headerlink\" title=\"使用注解方式\"></a>使用注解方式</h3><p>启动类 加上注解 <code>@EnableScheduling</code> 然后在<br>实现类上要有组件的注解@Component<br>要定时的方法上加上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SimpleDateFormat df = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"HH:mm:ss\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Scheduled</span>(fixedRate = <span class=\"number\">1000</span>) <span class=\"comment\">//单位为秒</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   System.out.println(df.format(<span class=\"keyword\">new</span> Date())+<span class=\"string\">\" \"</span>+count);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> ++count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> @Scheduled(cron = “*/6 * * * * *”) 的cron属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">The pattern is a list of six single space-separated fields: representing second, minute, hour, day, month, weekday. Month and weekday names can be given as the first three letters of the English names.</span></span><br><span class=\"line\"><span class=\"comment\">6个由空格间隔的单独的数字  分别代表 xxxxx 月份和工作日可以用英文前三个字母代替</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p><strong>星花和斜杠含义</strong></p>\n<p>*/10 * * * * * = every ten seconds.  */10<br>这四个字符(由于第一位代表秒 *为通配符任意秒 /为每隔 10与/组合意味每十秒 */10意为 从任意秒开始每10S执行<br>末尾的 * * * * * 意味任意的 分钟小时……</p>\n<p><em>可以结合下面这个看</em><br>10 * * * * *<br>这个意思为 任意的分钟小时…… 当秒为10的时候 触发</p>\n<p><strong>再来一个例子</strong><br>0 0/30 8-10 * * *<br>后三个星花表示任意的 天月和工作日<br>第一个0表示 0S时<br>第二个 0/30 表示从0Min开始每隔30Min<br>第三个 <code>-</code> 表示8H和9H和10H<br>如果第三个 <code>-</code> 换为<code>,</code> 则为8H和10H</p>\n","site":{"data":{}},"excerpt":"<p>在Gitchat上 买了一个多月的 纯洁的微笑的SpringBoot讲解 这次来慢慢看看吧一共42讲 <a href=\"https://gitbook.cn/gitchat/column/5b86228ce15aa17d68b5b55a\" target=\"_blank\" rel=\"noopener\">GitChat链接,不妨给一杯咖啡</a></p>","more":"<p><strong>首先是约定优于配置, springboot已经定义好了大部分东西, 只有在不符合约定的时候, 才需要手动去配置相关文件</strong></p>\n<h2 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h2><h3 id=\"RestController\"><a href=\"#RestController\" class=\"headerlink\" title=\"@RestController\"></a>@RestController</h3><p>这个注解等于<code>@ResponseBody ＋ @Controller</code><br>返回json数据的便捷注解</p>\n<h3 id=\"RequestMapping\"><a href=\"#RequestMapping\" class=\"headerlink\" title=\"@RequestMapping\"></a>@RequestMapping</h3><p><code>@RequestMapping(name=&quot;/getUser&quot;, method= RequestMethod.POST)</code></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><h3 id=\"MockMVC\"><a href=\"#MockMVC\" class=\"headerlink\" title=\"MockMVC\"></a>MockMVC</h3><p>MockMVC 可以进行POST GET 模拟请求</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MockMvc mockMvc;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"comment\">//`@Before`注解的方法 在启动测试后首先执行, 来进行资源的初始化</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        mockMvc = MockMvcBuilders.standaloneSetup(<span class=\"keyword\">new</span> HelloController()).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getHello</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        mockMvc.perform(MockMvcRequestBuilders.post(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">          .accept(MediaType.APPLICATION_JSON_UTF8)).andDo(print());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参数传递\"><a href=\"#参数传递\" class=\"headerlink\" title=\"参数传递\"></a>参数传递</h2><p><a href=\"https://blog.lsmg.xyz/2019/05/18/dataInteraction/\">之前的一篇博客, 传送门</a></p>\n<h3 id=\"参数校验\"><a href=\"#参数校验\" class=\"headerlink\" title=\"参数校验\"></a>参数校验</h3><p>控制器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(name = <span class=\"string\">\"/saveUser\"</span>, method = RequestMethod.POST)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">saveUser</span><span class=\"params\">(@Valid User user, BindingResult result)</span> </span>&#123; <span class=\"comment\">//@Valid 代表对这个参数进行校验 BindingResult 用于存储校验结果</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(result.hasErrors()) &#123;</span><br><span class=\"line\">        List&lt;ObjectError&gt; list = result.getAllErrors();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ObjectError error : list) &#123;</span><br><span class=\"line\">            System.out.println(error.getCode()+ <span class=\"string\">\"-\"</span> + error.getDefaultMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实体类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NotEmpty</span>(message = <span class=\"string\">\"姓名不能为空\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"><span class=\"meta\">@Max</span>(value = <span class=\"number\">100</span>, message = <span class=\"string\">\"年龄不能大于100岁\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Min</span>(value= <span class=\"number\">0</span> ,message= <span class=\"string\">\"年龄必须大于0岁！\"</span> )</span><br><span class=\"line\"><span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br></pre></td></tr></table></figure>\n<p>对应的测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">saveUser</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    mockMvc.perform(MockMvcRequestBuilders.post(<span class=\"string\">\"/saveUser\"</span>)</span><br><span class=\"line\">            .param(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">            .param(<span class=\"string\">\"age\"</span>, <span class=\"string\">\"101\"</span>)</span><br><span class=\"line\">            .param(<span class=\"string\">\"sex\"</span>, <span class=\"string\">\"男\"</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*Min-年龄必须大于0岁！</span></span><br><span class=\"line\"><span class=\"comment\">  NotEmpty-姓名不能为空</span></span><br><span class=\"line\"><span class=\"comment\">  Max-年龄不能大于100岁*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"校验的注解汇总\"><a href=\"#校验的注解汇总\" class=\"headerlink\" title=\"校验的注解汇总\"></a>校验的注解汇总</h3><table>\n<thead>\n<tr>\n<th>注解</th>\n<th>应用对象</th>\n<th>检查内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Length(min=, max=)</td>\n<td>用于String对象</td>\n<td>检查字符串长度</td>\n</tr>\n<tr>\n<td>@Max(value=)</td>\n<td></td>\n<td>最大值</td>\n</tr>\n<tr>\n<td>@Min(value=)</td>\n<td></td>\n<td>最小值</td>\n</tr>\n<tr>\n<td>@NotNull</td>\n<td></td>\n<td>不为空</td>\n</tr>\n<tr>\n<td>@Past</td>\n<td>date 或 calendar</td>\n<td>时间是过去吗?</td>\n</tr>\n<tr>\n<td>@Future</td>\n<td>date 或 calendar</td>\n<td>时间是将来吗?</td>\n</tr>\n<tr>\n<td>@Email</td>\n<td>String</td>\n<td>格式是邮箱吗?</td>\n</tr>\n</tbody></table>\n<h2 id=\"配置文件的使用\"><a href=\"#配置文件的使用\" class=\"headerlink\" title=\"配置文件的使用\"></a>配置文件的使用</h2><h3 id=\"读取配置文件\"><a href=\"#读取配置文件\" class=\"headerlink\" title=\"读取配置文件\"></a>读取配置文件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//application.properties --&gt;neo.title=lsmg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;neo.title&#125;\"</span>) <span class=\"comment\">//使用注解来获取内容</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String title;</span><br></pre></td></tr></table></figure>\n<h2 id=\"thymeleaf\"><a href=\"#thymeleaf\" class=\"headerlink\" title=\"thymeleaf\"></a>thymeleaf</h2><p>引入命令空间<br><code>&lt;html xmlns:th=&quot;https://www.thymeleaf.org&quot;&gt;</code></p>\n<h3 id=\"基础使用\"><a href=\"#基础使用\" class=\"headerlink\" title=\"基础使用\"></a>基础使用</h3><h4 id=\"字符串赋值拼接\"><a href=\"#字符串赋值拼接\" class=\"headerlink\" title=\"字符串赋值拼接\"></a>字符串赋值拼接</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"$&#123;属性名&#125;\"</span></span><br><span class=\"line\"><span class=\"string\">\"'这是固定部分' + $&#123;变化部分属性名&#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">简写形式</span><br><span class=\"line\"><span class=\"string\">\"|固定部分$&#123;变化部分属性名&#125;|\"</span> <span class=\"comment\">//直接混合</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"条件判断\"><a href=\"#条件判断\" class=\"headerlink\" title=\"条件判断\"></a>条件判断</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//if只有内容为真才会显示, unless内容为假才会显示</span></span><br><span class=\"line\">th:<span class=\"keyword\">if</span>=<span class=\"string\">\"$&#123;flag == 'yes'&#125;\"</span></span><br><span class=\"line\">th:unless=<span class=\"string\">\"$&#123;flag == 'yes'&#125;\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>  <span class=\"attr\">th:each</span>=<span class=\"string\">\"user,iterStat : $&#123;users&#125;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;user.name&#125;\"</span>&gt;</span>neo<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;iterStat.index&#125;\"</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>iterStat 属性值</strong><br>index，当前迭代对象的 index（从 0 开始计算）；<br>count，当前迭代对象的 index（从 1 开始计算）；<br>size，被迭代对象的大小；<br>current，当前迭代变量；<br>even/odd，布尔值，当前循环是否是偶数/奇数（从 0 开始计算）；<br>first，布尔值，当前循环是否是第一个；<br>last，布尔值，当前循环是否是最后一个。</p>\n<h4 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h4><p><code>th:href=&quot;@{https://www.lsmg.xyz/{id}(id=${id})}&quot;</code><br><strong>如果需要 Thymeleaf 对 URL 进行渲染，那么务必使用 th:href、th:src 等属性</strong></p>\n<div th:style=\"'background:url(' + @{${img url}} + ');'\">\n`{id}(id=${id})` 这部分方便了阅读\n\n<h4 id=\"三目运算\"><a href=\"#三目运算\" class=\"headerlink\" title=\"三目运算\"></a>三目运算</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;age gt <span class=\"number\">30</span> ? <span class=\"string\">'中年'</span>:<span class=\"string\">'年轻'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">gt：great than（大于）</span><br><span class=\"line\">ge：great equal（大于等于）</span><br><span class=\"line\">eq：equal（等于）</span><br><span class=\"line\">lt：less than（小于）</span><br><span class=\"line\">le：less equal（小于等于）</span><br><span class=\"line\">ne：not equal（不等于）</span><br></pre></td></tr></table></figure>\n<h4 id=\"switch\"><a href=\"#switch\" class=\"headerlink\" title=\"switch\"></a>switch</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:switch</span>=<span class=\"string\">\"$&#123;sex&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:case</span>=<span class=\"string\">\"'woman'\"</span>&gt;</span>女<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:case</span>=<span class=\"string\">\"'man'\"</span>&gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- *: case的默认的选项 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:case</span>=<span class=\"string\">\"*\"</span>&gt;</span>蓝<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"高阶使用\"><a href=\"#高阶使用\" class=\"headerlink\" title=\"高阶使用\"></a>高阶使用</h3><h4 id=\"内联\"><a href=\"#内联\" class=\"headerlink\" title=\"内联[[]]\"></a>内联<code>[[]]</code></h4><p>如果要使用内联方式 需要在标签或者父标签 甚至是在body中加入 <code>th:inline=&quot;text/javascript/none&quot;</code><br>进行激活</p>\n<p><strong>看了下官方文档<a href=\"https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html\" target=\"_blank\" rel=\"noopener\">传送门</a></strong><br><code>th:inline=&quot;none&quot;</code>代表不显示,其中的<code>[[]]</code>不会被thymeleaf识别</p>\n<p><code>th:inline=&quot;javascript&quot;</code> 代表在js中使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script th:inline=<span class=\"string\">\"javascript\"</span>&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">var</span> username = [[$&#123;session.user.name&#125;]];</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script th:inline=\"javascript\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    ...</span></span><br><span class=\"line\"><span class=\"regexp\">    var username = \"Sebastian \\\"Fruity\\\" Applejuice\";</span></span><br><span class=\"line\"><span class=\"regexp\">    ...</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script th:inline=<span class=\"string\">\"javascript\"</span>&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">var</span> username = [($&#123;session.user.name&#125;)];  <span class=\"comment\">// [()] 类似于 th:utext</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script th:inline=\"javascript\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    ...</span></span><br><span class=\"line\"><span class=\"regexp\">    var username = Sebastian \"Fruity\" Applejuice;</span></span><br><span class=\"line\"><span class=\"regexp\">    ...</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>\n<p>上面的方式会 让它在静态显示时出现错误。<br>一般需要加上注释 /**/ 来包裹<code>[[]]</code></p>\n<p>thymeleaf支持多种格式</p>\n<ul>\n<li>Strings</li>\n<li>Numbers</li>\n<li>Booleans</li>\n<li>Arrays</li>\n<li>Collections</li>\n<li>Maps</li>\n<li>Beans (objects with getter and setter methods)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*&lt;![CDATA[*/</span></span><br><span class=\"line\">  <span class=\"comment\">//这里说一下经常看到的</span></span><br><span class=\"line\">  <span class=\"comment\">//XHTML解析器会把CDATA中的内容当作纯文本处理，</span></span><br><span class=\"line\">  <span class=\"comment\">//里面的 &lt; &amp; 不会被js翻译而是直接显示</span></span><br><span class=\"line\"><span class=\"comment\">/*]]&gt;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&lt;![CDATA[</span></span><br><span class=\"line\">  <span class=\"comment\">//相同效果</span></span><br><span class=\"line\"><span class=\"comment\">//*]]&gt;*</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"基本对象\"><a href=\"#基本对象\" class=\"headerlink\" title=\"基本对象\"></a>基本对象</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ctx：上下文对象</span><br><span class=\"line\">#vars：上下文变量</span><br><span class=\"line\">#locale：区域对象</span><br><span class=\"line\">#request：（仅 Web 环境可用）HttpServletRequest 对象</span><br><span class=\"line\">#response：（仅 Web 环境可用）HttpServletResponse 对象 &#x2F;&#x2F;常用</span><br><span class=\"line\">#session：（仅 Web 环境可用）HttpSession 对象 &#x2F;&#x2F;常用</span><br><span class=\"line\">#servletContext：（仅 Web 环境可用）ServletContext 对象</span><br></pre></td></tr></table></figure>\n<h4 id=\"内嵌变量\"><a href=\"#内嵌变量\" class=\"headerlink\" title=\"内嵌变量\"></a>内嵌变量</h4><p><a href=\"https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#inlining\" target=\"_blank\" rel=\"noopener\">文档地址, 内容太多, 贴不过来了</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--格式化时间--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;#dates.format(date, 'yyyy-MM-dd HH:mm:ss')&#125;\"</span>&gt;</span>neo<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--创建当前时间 精确到天--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;#dates.createToday()&#125;\"</span>&gt;</span>neo<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--创建当前时间 精确到秒--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;#dates.createNow()&#125;\"</span>&gt;</span>neo<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--判断是否为空--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;#strings.isEmpty(userName)&#125;\"</span>&gt;</span>userName<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--判断 list 是否为空--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;#strings.listIsEmpty(users)&#125;\"</span>&gt;</span>userName<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--输出字符串长度--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;#strings.length(userName)&#125;\"</span>&gt;</span>userName<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--拼接字符串--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;#strings.concat(userName,userName,userName)&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--创建自定长度的字符串--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;#strings.randomAlphanumeric(count)&#125;\"</span>&gt;</span>userName<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"springboot和thymeleaf上传文件\"><a href=\"#springboot和thymeleaf上传文件\" class=\"headerlink\" title=\"springboot和thymeleaf上传文件\"></a>springboot和thymeleaf上传文件</h2><h3 id=\"配置信息\"><a href=\"#配置信息\" class=\"headerlink\" title=\"配置信息\"></a>配置信息</h3><p>常用部分</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#支持的最大文件</span><br><span class=\"line\">spring.servlet.multipart.max-file-size=100MB</span><br><span class=\"line\">#文件请求最大限制</span><br><span class=\"line\">spring.servlet.multipart.max-request-size=100MB</span><br></pre></td></tr></table></figure>\n<p>其他常用设置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.servlet.multipart.enabled=true，是否支持 multipart 上传文件</span><br><span class=\"line\">spring.servlet.multipart.file-size-threshold=0，支持文件写入磁盘</span><br><span class=\"line\">spring.servlet.multipart.location=，上传文件的临时目录</span><br><span class=\"line\">spring.servlet.multipart.max-file-size=10Mb，最大支持文件大小</span><br><span class=\"line\">spring.servlet.multipart.max-request-sizee=10Mb，最大支持请求大小</span><br><span class=\"line\">spring.servlet.multipart.resolve-lazily=false，是否支持 multipart 上传文件时懒加载</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h3><p>解决上传文件大于 10M 出现连接重置的问题<br><strong>终于去看了看  表达式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Tomcat large file upload connection reset</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TomcatServletWebServerFactory <span class=\"title\">tomcatEmbedded</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    TomcatServletWebServerFactory tomcat = <span class=\"keyword\">new</span> TomcatServletWebServerFactory();</span><br><span class=\"line\">    tomcat.addConnectorCustomizers((TomcatConnectorCustomizer) connector -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((connector.getProtocolHandler() <span class=\"keyword\">instanceof</span> AbstractHttp11Protocol&lt;?&gt;)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//-1 means unlimited</span></span><br><span class=\"line\">            ((AbstractHttp11Protocol&lt;?&gt;) connector.getProtocolHandler()).setMaxSwallowSize(-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tomcat;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>前端网页</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/upload\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Submit\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>补充 enctype属性<br>| 值                                | 描述                                                        |<br>| ——————————— | ———————————————————– |<br>| application/x-www-form-urlencoded | 在发送前编码所有字符（默认）                                |<br>| multipart/form-data               | 不对字符编码 在使用包含文件上传控件的表单时，必须使用该值。 |<br>| text/plain                        | 空格转换为 “+” 加号，但不对特殊字符编码。                   |</p>\n<p><strong>RedirectAttributes</strong><br>RedirectAttributes attr</p>\n<p><strong>attr.addAttribute(“param”, value);</strong><br>attr.addAttribute(“name”, “user”);<br>attr.addAttribute(“success”, “ok”);<br>return “redirect:/index”;<br>这种方式相当于系统自动的拼接了url 仍然会暴露信息</p>\n<p><strong>attr.addFlashAttribute(“param”, value);</strong><br>attr.addFlashAttribute(“status”,”999”);<br>attr.addFlashAttribute(“message”,”登录失败”);<br>return “redirect:/toLogin”;<br>这种方式通过session传递, session在跳转到页面后就是马上移除对象, 刷新后即消失</p>\n<p><strong>上传控制器</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/upload\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">singleFileUpload</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"file\"</span>)</span> MultipartFile file,</span></span><br><span class=\"line\"><span class=\"function\">                             RedirectAttributes redirectAttributes) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (file.isEmpty()) &#123;</span><br><span class=\"line\">      redirectAttributes.addFlashAttribute(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"Please select a file to upload\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:uploadStatus\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Get the file and save it somewhere</span></span><br><span class=\"line\">      <span class=\"keyword\">byte</span>[] bytes = file.getBytes();</span><br><span class=\"line\">      <span class=\"comment\">// UPLOADED_FOLDER 文件本地存储地址</span></span><br><span class=\"line\">      Path path = Paths.get(UPLOADED_FOLDER + file.getOriginalFilename());</span><br><span class=\"line\">      Files.write(path, bytes);</span><br><span class=\"line\"></span><br><span class=\"line\">      redirectAttributes.addFlashAttribute(<span class=\"string\">\"message\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"You successfully uploaded '\"</span> + file.getOriginalFilename() + <span class=\"string\">\"'\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/uploadStatus\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多文件上传\"><a href=\"#多文件上传\" class=\"headerlink\" title=\"多文件上传\"></a>多文件上传</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/uploadMore\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></span><br><span class=\"line\">    文件1： <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    文件2： <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    文件3： <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Submit\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>控制器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/uploadMore\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">moreFileUpload</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"file\"</span>)</span> MultipartFile[] files,</span></span><br><span class=\"line\"><span class=\"function\">                               RedirectAttributes redirectAttributes) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (files.length==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        redirectAttributes.addFlashAttribute(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"Please select a file to upload\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:uploadStatus\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(MultipartFile file:files)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] bytes = file.getBytes();</span><br><span class=\"line\">            Path path = Paths.get(UPLOADED_FOLDER + file.getOriginalFilename());</span><br><span class=\"line\">            Files.write(path, bytes);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    redirectAttributes.addFlashAttribute(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"You successfully uploaded all\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/uploadStatus\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Restful-api\"><a href=\"#Restful-api\" class=\"headerlink\" title=\"Restful api\"></a>Restful api</h2><p>使用 swagger2 构建restful api</p>\n<h2 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a>定时任务</h2><h3 id=\"使用注解方式\"><a href=\"#使用注解方式\" class=\"headerlink\" title=\"使用注解方式\"></a>使用注解方式</h3><p>启动类 加上注解 <code>@EnableScheduling</code> 然后在<br>实现类上要有组件的注解@Component<br>要定时的方法上加上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SimpleDateFormat df = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"HH:mm:ss\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Scheduled</span>(fixedRate = <span class=\"number\">1000</span>) <span class=\"comment\">//单位为秒</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   System.out.println(df.format(<span class=\"keyword\">new</span> Date())+<span class=\"string\">\" \"</span>+count);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> ++count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> @Scheduled(cron = “*/6 * * * * *”) 的cron属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">The pattern is a list of six single space-separated fields: representing second, minute, hour, day, month, weekday. Month and weekday names can be given as the first three letters of the English names.</span></span><br><span class=\"line\"><span class=\"comment\">6个由空格间隔的单独的数字  分别代表 xxxxx 月份和工作日可以用英文前三个字母代替</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p><strong>星花和斜杠含义</strong></p>\n<p>*/10 * * * * * = every ten seconds.  */10<br>这四个字符(由于第一位代表秒 *为通配符任意秒 /为每隔 10与/组合意味每十秒 */10意为 从任意秒开始每10S执行<br>末尾的 * * * * * 意味任意的 分钟小时……</p>\n<p><em>可以结合下面这个看</em><br>10 * * * * *<br>这个意思为 任意的分钟小时…… 当秒为10的时候 触发</p>\n<p><strong>再来一个例子</strong><br>0 0/30 8-10 * * *<br>后三个星花表示任意的 天月和工作日<br>第一个0表示 0S时<br>第二个 0/30 表示从0Min开始每隔30Min<br>第三个 <code>-</code> 表示8H和9H和10H<br>如果第三个 <code>-</code> 换为<code>,</code> 则为8H和10H</p>"},{"title":"4月11日 java文件操作","date":"2019-04-11T13:24:48.000Z","_content":"<div class=\"alert-red\">java文件操作</div>\n<div class=\"alert-blue\">#$%&^*%^&%$</div>\n<div class=\"alert-green\"></div>\n<!--more-->\n\n[博客来源](https://blog.csdn.net/yhl_jxy/article/details/79272792)\n\n![来源](https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/Java%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C.png)\n\nJava IO读写文件的IO流分为两大类，字节流和字符流，\n基于字节流的读写基类: InputStream和OutputStream\n基于字符流的读写基类: Reader和Writer\n\n如果是二进制文件，使用FileInputStream读取；如果是文本文件，使用FileReader读取；\n这两个类允许我们从文件开始至文件结尾一个字节或字符的读取文件，或者将读取的文件写入字节数组或字符数组。\n如果我们想随机的读取文件内容，可以使用RandomAccessFile。\n### 简单的文件读写\n**File file = new File(\"123.txt\");**\n#### 字节流读取文件\n```java\ntry (InputStream is = new FileInputStream(file)){\n\tbyte[] dataB=new byte[1024];\n\tis.read(dataB);\n\tSystem.out.println(\"字节文件内容:\" + new String(dataB));\n} catch (Exception e) {\n\te.printStackTrace();\n}\n```\n#### 字节流写文件\n```java\ntry(OutputStream os = new FileOutputStream(file)){\n\tbyte[] dataB = new byte[1024];\n\tString str = \"1234567890abcdef\";\n\tdataB = str.getBytes();\n\tos.write(dataB);\n}catch (Exception e){\n\te.printStackTrace();\n}\n```\n#### 字符流读取文件\n```java\nFile file = new File(\"123.txt\");\ntry (Reader reader = new FileReader(file)){\n\tchar[] dataC = new char[1024];\n\treader.read(dataC);\n\tSystem.out.println(\"字符文件内容:\"+new String(dataC));\n}catch (Exception e){\n\te.printStackTrace();\n}\n```\n#### 字符流写文件\n```java\ntry (Writer writer = new FileWriter(file)){\n\tchar[] dataC = new char[1024];\n\tString str=\"@@@@1234567890abcdef\";\n\tdataC=str.toCharArray();\n\twriter.write(dataC);\n}catch (Exception e){\n\te.printStackTrace();\n}\n```\n### 简单的写文件-指定位置\n```java\ntry (RandomAccessFile raf = new RandomAccessFile(file, \"r\")) {\n\t//获取RandomAccessFile对象文件指针的位置，初始位置是0\n\tSystem.out.println(\"RandomAccessFile文件指针的初始位置:\"+raf.getFilePointer());\n\t//移动文件指针位置\n\traf.seek(0);\n\tbyte[]  buff=new byte[1024];\n\t//用于保存实际读取的字节数\n\tint hasRead=0;\n\t//循环读取\n\twhile((hasRead=raf.read(buff))>0){\n\t\t//打印读取的内容,并将字节转为字符串输入\n\t\tSystem.out.println(new String(buff,0,hasRead));\n\t}\n} catch (Exception e) {\n\te.printStackTrace();\n}\n```\n\n","source":"_posts/Java-文件操作.md","raw":"---\ntitle: 4月11日 java文件操作\ndate: 2019-04-11 21:24:48\ntags:\ncategories:\n  - Java\n---\n<div class=\"alert-red\">java文件操作</div>\n<div class=\"alert-blue\">#$%&^*%^&%$</div>\n<div class=\"alert-green\"></div>\n<!--more-->\n\n[博客来源](https://blog.csdn.net/yhl_jxy/article/details/79272792)\n\n![来源](https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/Java%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C.png)\n\nJava IO读写文件的IO流分为两大类，字节流和字符流，\n基于字节流的读写基类: InputStream和OutputStream\n基于字符流的读写基类: Reader和Writer\n\n如果是二进制文件，使用FileInputStream读取；如果是文本文件，使用FileReader读取；\n这两个类允许我们从文件开始至文件结尾一个字节或字符的读取文件，或者将读取的文件写入字节数组或字符数组。\n如果我们想随机的读取文件内容，可以使用RandomAccessFile。\n### 简单的文件读写\n**File file = new File(\"123.txt\");**\n#### 字节流读取文件\n```java\ntry (InputStream is = new FileInputStream(file)){\n\tbyte[] dataB=new byte[1024];\n\tis.read(dataB);\n\tSystem.out.println(\"字节文件内容:\" + new String(dataB));\n} catch (Exception e) {\n\te.printStackTrace();\n}\n```\n#### 字节流写文件\n```java\ntry(OutputStream os = new FileOutputStream(file)){\n\tbyte[] dataB = new byte[1024];\n\tString str = \"1234567890abcdef\";\n\tdataB = str.getBytes();\n\tos.write(dataB);\n}catch (Exception e){\n\te.printStackTrace();\n}\n```\n#### 字符流读取文件\n```java\nFile file = new File(\"123.txt\");\ntry (Reader reader = new FileReader(file)){\n\tchar[] dataC = new char[1024];\n\treader.read(dataC);\n\tSystem.out.println(\"字符文件内容:\"+new String(dataC));\n}catch (Exception e){\n\te.printStackTrace();\n}\n```\n#### 字符流写文件\n```java\ntry (Writer writer = new FileWriter(file)){\n\tchar[] dataC = new char[1024];\n\tString str=\"@@@@1234567890abcdef\";\n\tdataC=str.toCharArray();\n\twriter.write(dataC);\n}catch (Exception e){\n\te.printStackTrace();\n}\n```\n### 简单的写文件-指定位置\n```java\ntry (RandomAccessFile raf = new RandomAccessFile(file, \"r\")) {\n\t//获取RandomAccessFile对象文件指针的位置，初始位置是0\n\tSystem.out.println(\"RandomAccessFile文件指针的初始位置:\"+raf.getFilePointer());\n\t//移动文件指针位置\n\traf.seek(0);\n\tbyte[]  buff=new byte[1024];\n\t//用于保存实际读取的字节数\n\tint hasRead=0;\n\t//循环读取\n\twhile((hasRead=raf.read(buff))>0){\n\t\t//打印读取的内容,并将字节转为字符串输入\n\t\tSystem.out.println(new String(buff,0,hasRead));\n\t}\n} catch (Exception e) {\n\te.printStackTrace();\n}\n```\n\n","slug":"Java-文件操作","published":1,"updated":"2020-02-07T08:33:09.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucz1001usouohp4k0t5w","content":"<div class=\"alert-red\">java文件操作</div>\n<div class=\"alert-blue\">#$%&^*%^&%$</div>\n<div class=\"alert-green\"></div>\n<a id=\"more\"></a>\n\n<p><a href=\"https://blog.csdn.net/yhl_jxy/article/details/79272792\" target=\"_blank\" rel=\"noopener\">博客来源</a></p>\n<p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/Java%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C.png\" alt=\"来源\"></p>\n<p>Java IO读写文件的IO流分为两大类，字节流和字符流，<br>基于字节流的读写基类: InputStream和OutputStream<br>基于字符流的读写基类: Reader和Writer</p>\n<p>如果是二进制文件，使用FileInputStream读取；如果是文本文件，使用FileReader读取；<br>这两个类允许我们从文件开始至文件结尾一个字节或字符的读取文件，或者将读取的文件写入字节数组或字符数组。<br>如果我们想随机的读取文件内容，可以使用RandomAccessFile。</p>\n<h3 id=\"简单的文件读写\"><a href=\"#简单的文件读写\" class=\"headerlink\" title=\"简单的文件读写\"></a>简单的文件读写</h3><p><strong>File file = new File(“123.txt”);</strong></p>\n<h4 id=\"字节流读取文件\"><a href=\"#字节流读取文件\" class=\"headerlink\" title=\"字节流读取文件\"></a>字节流读取文件</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> (InputStream is = <span class=\"keyword\">new</span> FileInputStream(file))&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[] dataB=<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\tis.read(dataB);</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"字节文件内容:\"</span> + <span class=\"keyword\">new</span> String(dataB));</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\te.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"字节流写文件\"><a href=\"#字节流写文件\" class=\"headerlink\" title=\"字节流写文件\"></a>字节流写文件</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>(OutputStream os = <span class=\"keyword\">new</span> FileOutputStream(file))&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[] dataB = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\tString str = <span class=\"string\">\"1234567890abcdef\"</span>;</span><br><span class=\"line\">\tdataB = str.getBytes();</span><br><span class=\"line\">\tos.write(dataB);</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">\te.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"字符流读取文件\"><a href=\"#字符流读取文件\" class=\"headerlink\" title=\"字符流读取文件\"></a>字符流读取文件</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"123.txt\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">try</span> (Reader reader = <span class=\"keyword\">new</span> FileReader(file))&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>[] dataC = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\treader.read(dataC);</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"字符文件内容:\"</span>+<span class=\"keyword\">new</span> String(dataC));</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">\te.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"字符流写文件\"><a href=\"#字符流写文件\" class=\"headerlink\" title=\"字符流写文件\"></a>字符流写文件</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> (Writer writer = <span class=\"keyword\">new</span> FileWriter(file))&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>[] dataC = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\tString str=<span class=\"string\">\"@@@@1234567890abcdef\"</span>;</span><br><span class=\"line\">\tdataC=str.toCharArray();</span><br><span class=\"line\">\twriter.write(dataC);</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">\te.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"简单的写文件-指定位置\"><a href=\"#简单的写文件-指定位置\" class=\"headerlink\" title=\"简单的写文件-指定位置\"></a>简单的写文件-指定位置</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> (RandomAccessFile raf = <span class=\"keyword\">new</span> RandomAccessFile(file, <span class=\"string\">\"r\"</span>)) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//获取RandomAccessFile对象文件指针的位置，初始位置是0</span></span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"RandomAccessFile文件指针的初始位置:\"</span>+raf.getFilePointer());</span><br><span class=\"line\">\t<span class=\"comment\">//移动文件指针位置</span></span><br><span class=\"line\">\traf.seek(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[]  buff=<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\t<span class=\"comment\">//用于保存实际读取的字节数</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> hasRead=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//循环读取</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>((hasRead=raf.read(buff))&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//打印读取的内容,并将字节转为字符串输入</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">new</span> String(buff,<span class=\"number\">0</span>,hasRead));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\te.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<div class=\"alert-red\">java文件操作</div>\n<div class=\"alert-blue\">#$%&^*%^&%$</div>\n<div class=\"alert-green\"></div>","more":"<p><a href=\"https://blog.csdn.net/yhl_jxy/article/details/79272792\" target=\"_blank\" rel=\"noopener\">博客来源</a></p>\n<p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/Java%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C.png\" alt=\"来源\"></p>\n<p>Java IO读写文件的IO流分为两大类，字节流和字符流，<br>基于字节流的读写基类: InputStream和OutputStream<br>基于字符流的读写基类: Reader和Writer</p>\n<p>如果是二进制文件，使用FileInputStream读取；如果是文本文件，使用FileReader读取；<br>这两个类允许我们从文件开始至文件结尾一个字节或字符的读取文件，或者将读取的文件写入字节数组或字符数组。<br>如果我们想随机的读取文件内容，可以使用RandomAccessFile。</p>\n<h3 id=\"简单的文件读写\"><a href=\"#简单的文件读写\" class=\"headerlink\" title=\"简单的文件读写\"></a>简单的文件读写</h3><p><strong>File file = new File(“123.txt”);</strong></p>\n<h4 id=\"字节流读取文件\"><a href=\"#字节流读取文件\" class=\"headerlink\" title=\"字节流读取文件\"></a>字节流读取文件</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> (InputStream is = <span class=\"keyword\">new</span> FileInputStream(file))&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[] dataB=<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\tis.read(dataB);</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"字节文件内容:\"</span> + <span class=\"keyword\">new</span> String(dataB));</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\te.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"字节流写文件\"><a href=\"#字节流写文件\" class=\"headerlink\" title=\"字节流写文件\"></a>字节流写文件</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>(OutputStream os = <span class=\"keyword\">new</span> FileOutputStream(file))&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[] dataB = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\tString str = <span class=\"string\">\"1234567890abcdef\"</span>;</span><br><span class=\"line\">\tdataB = str.getBytes();</span><br><span class=\"line\">\tos.write(dataB);</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">\te.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"字符流读取文件\"><a href=\"#字符流读取文件\" class=\"headerlink\" title=\"字符流读取文件\"></a>字符流读取文件</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"123.txt\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">try</span> (Reader reader = <span class=\"keyword\">new</span> FileReader(file))&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>[] dataC = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\treader.read(dataC);</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"字符文件内容:\"</span>+<span class=\"keyword\">new</span> String(dataC));</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">\te.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"字符流写文件\"><a href=\"#字符流写文件\" class=\"headerlink\" title=\"字符流写文件\"></a>字符流写文件</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> (Writer writer = <span class=\"keyword\">new</span> FileWriter(file))&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>[] dataC = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\tString str=<span class=\"string\">\"@@@@1234567890abcdef\"</span>;</span><br><span class=\"line\">\tdataC=str.toCharArray();</span><br><span class=\"line\">\twriter.write(dataC);</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">\te.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"简单的写文件-指定位置\"><a href=\"#简单的写文件-指定位置\" class=\"headerlink\" title=\"简单的写文件-指定位置\"></a>简单的写文件-指定位置</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> (RandomAccessFile raf = <span class=\"keyword\">new</span> RandomAccessFile(file, <span class=\"string\">\"r\"</span>)) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//获取RandomAccessFile对象文件指针的位置，初始位置是0</span></span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"RandomAccessFile文件指针的初始位置:\"</span>+raf.getFilePointer());</span><br><span class=\"line\">\t<span class=\"comment\">//移动文件指针位置</span></span><br><span class=\"line\">\traf.seek(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[]  buff=<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\t<span class=\"comment\">//用于保存实际读取的字节数</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> hasRead=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//循环读取</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>((hasRead=raf.read(buff))&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//打印读取的内容,并将字节转为字符串输入</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">new</span> String(buff,<span class=\"number\">0</span>,hasRead));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\te.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"2019年4月15日 java爬虫入门","date":"2019-04-16T05:02:32.000Z","_content":"<div class=\"alert-red\">java爬虫</div>\n<div class=\"alert-blue\">maven项目 下载和文件流</div>\n<div class=\"alert-green\">IDEA配置</div>\n<!--more-->\n\n这篇博客不知道为啥被覆盖了 哎还要从新写一次\n### maven项目\n通过maven项目 不需要像java项目一样去下载第三方jar包了\n```xml\n<dependencies>\n<!--        所用到的httpclient包-->\n\t<dependency>\n\t\t<groupId>org.apache.httpcomponents</groupId>\n\t\t<artifactId>httpclient</artifactId>\n\t\t<version>4.5.3</version>\n\t</dependency>\n\n\t<dependency>\n\t\t<groupId>com.google.guava</groupId>\n\t\t<artifactId>guava</artifactId>\n\t\t<version>r05</version>\n\t</dependency>\n<!--        Jsoup是一款Java的HTML解析器，可以直接解析某个URL地址，也可以解析HTML内容。其主要的功能包括解析HTM-->\n<!--        L页面，通过DOM或者CSS选择器来查找、提取数据，可以更改HTML内容-->\n\t<dependency>\n\t\t<groupId>org.jsoup</groupId>\n\t\t<artifactId>jsoup</artifactId>\n\t\t<version>1.10.3</version>\n\t</dependency>\n</dependencies>\n```\n### 下载类\n```java\n/**\n* @ClassName Download\n* @Description TODO\n* Author lsmg\n* Date 2019/4/15 18:03\n* @Version 1.0\n* 来自 https://www.cnblogs.com/lichenwei/p/4610298.html\n**/\npublic class Download {\n/**\n * @Author lsmg\n * @Description //TODO\n * @Date 23:36 2019/4/15\n * @param imgUrl 图片url地址\n * @param extension 图片的后缀名\n * @return void\n **/\nsynchronized public void imgDownload(String imgUrl, String extension){\n\ttry{\n\t\t//获取输入流\n\t\tBufferedInputStream in = new BufferedInputStream((new URL(imgUrl).openStream()));\n\n\t\t//文件名\n\t\tSimpleDateFormat df = new SimpleDateFormat(\"HH时mm分ss秒SSS毫秒\");\n\t\t//创建文件流\n\t\tFile file = new File(\"D:\\\\Pictures\\\\miku\\\\\"+df.format(new Date())+\".\"+extension);\n\t\tSystem.out.println(file.getAbsolutePath());\n\n\t\tFileOutputStream fileOutputStream = new FileOutputStream(file);\n\t\tBufferedOutputStream out = new BufferedOutputStream(fileOutputStream);\n\n\t\t//缓冲字节流\n\t\tbyte[] data = new byte[1024];\n\t\tint length = 0;\n\t\twhile ((length = in.read(data)) != -1){\n\t\t\tout.write(data,0,length); //这里划重点 这是修改后的代码没啥问题了 每次写入的长度不一定为1024 而应该是真实长度\n\n\t\t}\n\t\tSystem.out.println(\"正在下载图片 :\"+imgUrl);\n\t\tin.close();\n\t\tout.close();\n\n\t}catch (Exception e){\n\t\te.printStackTrace();\n\t}\n}\n```\n### 启动类\n使用了多线程传入参数i 作用在后边说明\n```java\npublic static void main(String[] args) {\n\tfor(int i=0;i<=10;i++){\n\t\tThread t =new FindImg(i);\n\t\tt.start();\n\t}\n}\n```\n### java爬虫\n这个网页带有分页 每次切换页数url只有页数发生了变化 干脆加入了多线程 一个线程负责一页\n```java\n/**\n * @Author lsmg\n * @Description //TODO 找到select的更好表示方式\n * @Date 23:42 2019/4/15\n * @return void\n **/\npublic void Find(){\n\n\t//建立一个请求客户端\n\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\n\tString url=\"https://pic.netbian.com/e/search/result/index.php?page=\"+index+\"&searchid=122\";\n\n\t//使用HttpGet方式请求网址\n\tHttpGet httpGet = new HttpGet(url);\n\n\t//获取网址返回结果\n\tCloseableHttpResponse response = null;\n\ttry {                     //....执行\n\t\tresponse = httpClient.execute(httpGet);\n\t}catch (Exception e){\n\t\te.printStackTrace();\n\t}\n\n\t//获取返回结构中的实体\n\tHttpEntity entity = response.getEntity();\n\n\tString html = null;\n\t//将返回实体输出\n\ttry {\n\t\thtml= EntityUtils.toString(entity);\n\t\t//System.out.println(html);\n\t\tEntityUtils.consume(entity);\n\t}catch (Exception e){\n\t\te.printStackTrace();\n\t}\n\n\t//解析html到一个document\n\tDocument document = Jsoup.parse(html);\n\n\t//提取内容\n\tElements imgJpg = document.select(\"img[src$=.jpg]\"); //select选择器 下边说明 由于返回多个结果使用Elements存储\n\n\t//下载对象\n\tDownload download = new Download();\n\n\tfor (Element element : imgJpg){\n\t\tdownload.imgDownload(\"https://pic.netbian.com\"+element.attr(\"src\"),\"jpg\");\n\t}\n}\n```\n### Jsoup-Java的HTML解析器\n这个功能强大记录两条常用的\n**[来自](https://www.voidcn.com/article/p-qdzdjxky-p.html)**\n\n[attr^=value] 利用匹配属性值开头\n[attr$=value] 利用匹配属性值结尾\n[attr*=value]包含属性值来查找元素，比如：[href*=/path/]\n还有\na[href] 带有herf内=内容的a标签\na[class=xxx] 带有xxxclass的a标签\n\nelement.attr(\"src\") 找到src的内容\n\n### 自己的方法注释\nhttps://blog.csdn.net/qq_34533072/article/details/80830738","source":"_posts/Java-爬虫.md","raw":"---\ntitle: 2019年4月15日 java爬虫入门\ntags:\ncategories:\n  - Java\ndate: 2019-04-16 13:02:32\n---\n<div class=\"alert-red\">java爬虫</div>\n<div class=\"alert-blue\">maven项目 下载和文件流</div>\n<div class=\"alert-green\">IDEA配置</div>\n<!--more-->\n\n这篇博客不知道为啥被覆盖了 哎还要从新写一次\n### maven项目\n通过maven项目 不需要像java项目一样去下载第三方jar包了\n```xml\n<dependencies>\n<!--        所用到的httpclient包-->\n\t<dependency>\n\t\t<groupId>org.apache.httpcomponents</groupId>\n\t\t<artifactId>httpclient</artifactId>\n\t\t<version>4.5.3</version>\n\t</dependency>\n\n\t<dependency>\n\t\t<groupId>com.google.guava</groupId>\n\t\t<artifactId>guava</artifactId>\n\t\t<version>r05</version>\n\t</dependency>\n<!--        Jsoup是一款Java的HTML解析器，可以直接解析某个URL地址，也可以解析HTML内容。其主要的功能包括解析HTM-->\n<!--        L页面，通过DOM或者CSS选择器来查找、提取数据，可以更改HTML内容-->\n\t<dependency>\n\t\t<groupId>org.jsoup</groupId>\n\t\t<artifactId>jsoup</artifactId>\n\t\t<version>1.10.3</version>\n\t</dependency>\n</dependencies>\n```\n### 下载类\n```java\n/**\n* @ClassName Download\n* @Description TODO\n* Author lsmg\n* Date 2019/4/15 18:03\n* @Version 1.0\n* 来自 https://www.cnblogs.com/lichenwei/p/4610298.html\n**/\npublic class Download {\n/**\n * @Author lsmg\n * @Description //TODO\n * @Date 23:36 2019/4/15\n * @param imgUrl 图片url地址\n * @param extension 图片的后缀名\n * @return void\n **/\nsynchronized public void imgDownload(String imgUrl, String extension){\n\ttry{\n\t\t//获取输入流\n\t\tBufferedInputStream in = new BufferedInputStream((new URL(imgUrl).openStream()));\n\n\t\t//文件名\n\t\tSimpleDateFormat df = new SimpleDateFormat(\"HH时mm分ss秒SSS毫秒\");\n\t\t//创建文件流\n\t\tFile file = new File(\"D:\\\\Pictures\\\\miku\\\\\"+df.format(new Date())+\".\"+extension);\n\t\tSystem.out.println(file.getAbsolutePath());\n\n\t\tFileOutputStream fileOutputStream = new FileOutputStream(file);\n\t\tBufferedOutputStream out = new BufferedOutputStream(fileOutputStream);\n\n\t\t//缓冲字节流\n\t\tbyte[] data = new byte[1024];\n\t\tint length = 0;\n\t\twhile ((length = in.read(data)) != -1){\n\t\t\tout.write(data,0,length); //这里划重点 这是修改后的代码没啥问题了 每次写入的长度不一定为1024 而应该是真实长度\n\n\t\t}\n\t\tSystem.out.println(\"正在下载图片 :\"+imgUrl);\n\t\tin.close();\n\t\tout.close();\n\n\t}catch (Exception e){\n\t\te.printStackTrace();\n\t}\n}\n```\n### 启动类\n使用了多线程传入参数i 作用在后边说明\n```java\npublic static void main(String[] args) {\n\tfor(int i=0;i<=10;i++){\n\t\tThread t =new FindImg(i);\n\t\tt.start();\n\t}\n}\n```\n### java爬虫\n这个网页带有分页 每次切换页数url只有页数发生了变化 干脆加入了多线程 一个线程负责一页\n```java\n/**\n * @Author lsmg\n * @Description //TODO 找到select的更好表示方式\n * @Date 23:42 2019/4/15\n * @return void\n **/\npublic void Find(){\n\n\t//建立一个请求客户端\n\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\n\tString url=\"https://pic.netbian.com/e/search/result/index.php?page=\"+index+\"&searchid=122\";\n\n\t//使用HttpGet方式请求网址\n\tHttpGet httpGet = new HttpGet(url);\n\n\t//获取网址返回结果\n\tCloseableHttpResponse response = null;\n\ttry {                     //....执行\n\t\tresponse = httpClient.execute(httpGet);\n\t}catch (Exception e){\n\t\te.printStackTrace();\n\t}\n\n\t//获取返回结构中的实体\n\tHttpEntity entity = response.getEntity();\n\n\tString html = null;\n\t//将返回实体输出\n\ttry {\n\t\thtml= EntityUtils.toString(entity);\n\t\t//System.out.println(html);\n\t\tEntityUtils.consume(entity);\n\t}catch (Exception e){\n\t\te.printStackTrace();\n\t}\n\n\t//解析html到一个document\n\tDocument document = Jsoup.parse(html);\n\n\t//提取内容\n\tElements imgJpg = document.select(\"img[src$=.jpg]\"); //select选择器 下边说明 由于返回多个结果使用Elements存储\n\n\t//下载对象\n\tDownload download = new Download();\n\n\tfor (Element element : imgJpg){\n\t\tdownload.imgDownload(\"https://pic.netbian.com\"+element.attr(\"src\"),\"jpg\");\n\t}\n}\n```\n### Jsoup-Java的HTML解析器\n这个功能强大记录两条常用的\n**[来自](https://www.voidcn.com/article/p-qdzdjxky-p.html)**\n\n[attr^=value] 利用匹配属性值开头\n[attr$=value] 利用匹配属性值结尾\n[attr*=value]包含属性值来查找元素，比如：[href*=/path/]\n还有\na[href] 带有herf内=内容的a标签\na[class=xxx] 带有xxxclass的a标签\n\nelement.attr(\"src\") 找到src的内容\n\n### 自己的方法注释\nhttps://blog.csdn.net/qq_34533072/article/details/80830738","slug":"Java-爬虫","published":1,"updated":"2020-02-27T01:49:16.336Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucz3001vsouo61bnfhaa","content":"<div class=\"alert-red\">java爬虫</div>\n<div class=\"alert-blue\">maven项目 下载和文件流</div>\n<div class=\"alert-green\">IDEA配置</div>\n<a id=\"more\"></a>\n\n<p>这篇博客不知道为啥被覆盖了 哎还要从新写一次</p>\n<h3 id=\"maven项目\"><a href=\"#maven项目\" class=\"headerlink\" title=\"maven项目\"></a>maven项目</h3><p>通过maven项目 不需要像java项目一样去下载第三方jar包了</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        所用到的httpclient包--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.httpcomponents<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>httpclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.google.guava<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>guava<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>r05<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        Jsoup是一款Java的HTML解析器，可以直接解析某个URL地址，也可以解析HTML内容。其主要的功能包括解析HTM--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        L页面，通过DOM或者CSS选择器来查找、提取数据，可以更改HTML内容--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.jsoup<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jsoup<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.10.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"下载类\"><a href=\"#下载类\" class=\"headerlink\" title=\"下载类\"></a>下载类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@ClassName</span> Download</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@Description</span> TODO</span></span><br><span class=\"line\"><span class=\"comment\">* Author lsmg</span></span><br><span class=\"line\"><span class=\"comment\">* Date 2019/4/15 18:03</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@Version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\">* 来自 https://www.cnblogs.com/lichenwei/p/4610298.html</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Download</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> lsmg</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> //TODO</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 23:36 2019/4/15</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> imgUrl 图片url地址</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> extension 图片的后缀名</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">synchronized</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">imgDownload</span><span class=\"params\">(String imgUrl, String extension)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取输入流</span></span><br><span class=\"line\">\t\tBufferedInputStream in = <span class=\"keyword\">new</span> BufferedInputStream((<span class=\"keyword\">new</span> URL(imgUrl).openStream()));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//文件名</span></span><br><span class=\"line\">\t\tSimpleDateFormat df = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"HH时mm分ss秒SSS毫秒\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建文件流</span></span><br><span class=\"line\">\t\tFile file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"D:\\\\Pictures\\\\miku\\\\\"</span>+df.format(<span class=\"keyword\">new</span> Date())+<span class=\"string\">\".\"</span>+extension);</span><br><span class=\"line\">\t\tSystem.out.println(file.getAbsolutePath());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tFileOutputStream fileOutputStream = <span class=\"keyword\">new</span> FileOutputStream(file);</span><br><span class=\"line\">\t\tBufferedOutputStream out = <span class=\"keyword\">new</span> BufferedOutputStream(fileOutputStream);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//缓冲字节流</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] data = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> ((length = in.read(data)) != -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t\tout.write(data,<span class=\"number\">0</span>,length); <span class=\"comment\">//这里划重点 这是修改后的代码没啥问题了 每次写入的长度不一定为1024 而应该是真实长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"正在下载图片 :\"</span>+imgUrl);</span><br><span class=\"line\">\t\tin.close();</span><br><span class=\"line\">\t\tout.close();</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动类\"><a href=\"#启动类\" class=\"headerlink\" title=\"启动类\"></a>启动类</h3><p>使用了多线程传入参数i 作用在后边说明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">\t\tThread t =<span class=\"keyword\">new</span> FindImg(i);</span><br><span class=\"line\">\t\tt.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"java爬虫\"><a href=\"#java爬虫\" class=\"headerlink\" title=\"java爬虫\"></a>java爬虫</h3><p>这个网页带有分页 每次切换页数url只有页数发生了变化 干脆加入了多线程 一个线程负责一页</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> lsmg</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> //TODO 找到select的更好表示方式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 23:42 2019/4/15</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Find</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//建立一个请求客户端</span></span><br><span class=\"line\">\tCloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">\tString url=<span class=\"string\">\"https://pic.netbian.com/e/search/result/index.php?page=\"</span>+index+<span class=\"string\">\"&amp;searchid=122\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//使用HttpGet方式请求网址</span></span><br><span class=\"line\">\tHttpGet httpGet = <span class=\"keyword\">new</span> HttpGet(url);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//获取网址返回结果</span></span><br><span class=\"line\">\tCloseableHttpResponse response = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;                     <span class=\"comment\">//....执行</span></span><br><span class=\"line\">\t\tresponse = httpClient.execute(httpGet);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//获取返回结构中的实体</span></span><br><span class=\"line\">\tHttpEntity entity = response.getEntity();</span><br><span class=\"line\"></span><br><span class=\"line\">\tString html = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//将返回实体输出</span></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\thtml= EntityUtils.toString(entity);</span><br><span class=\"line\">\t\t<span class=\"comment\">//System.out.println(html);</span></span><br><span class=\"line\">\t\tEntityUtils.consume(entity);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//解析html到一个document</span></span><br><span class=\"line\">\tDocument document = Jsoup.parse(html);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//提取内容</span></span><br><span class=\"line\">\tElements imgJpg = document.select(<span class=\"string\">\"img[src$=.jpg]\"</span>); <span class=\"comment\">//select选择器 下边说明 由于返回多个结果使用Elements存储</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//下载对象</span></span><br><span class=\"line\">\tDownload download = <span class=\"keyword\">new</span> Download();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Element element : imgJpg)&#123;</span><br><span class=\"line\">\t\tdownload.imgDownload(<span class=\"string\">\"https://pic.netbian.com\"</span>+element.attr(<span class=\"string\">\"src\"</span>),<span class=\"string\">\"jpg\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Jsoup-Java的HTML解析器\"><a href=\"#Jsoup-Java的HTML解析器\" class=\"headerlink\" title=\"Jsoup-Java的HTML解析器\"></a>Jsoup-Java的HTML解析器</h3><p>这个功能强大记录两条常用的<br><strong><a href=\"https://www.voidcn.com/article/p-qdzdjxky-p.html\" target=\"_blank\" rel=\"noopener\">来自</a></strong></p>\n<p>[attr^=value] 利用匹配属性值开头<br>[attr$=value] 利用匹配属性值结尾<br>[attr<em>=value]包含属性值来查找元素，比如：[href</em>=/path/]<br>还有<br>a[href] 带有herf内=内容的a标签<br>a[class=xxx] 带有xxxclass的a标签</p>\n<p>element.attr(“src”) 找到src的内容</p>\n<h3 id=\"自己的方法注释\"><a href=\"#自己的方法注释\" class=\"headerlink\" title=\"自己的方法注释\"></a>自己的方法注释</h3><p><a href=\"https://blog.csdn.net/qq_34533072/article/details/80830738\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_34533072/article/details/80830738</a></p>\n","site":{"data":{}},"excerpt":"<div class=\"alert-red\">java爬虫</div>\n<div class=\"alert-blue\">maven项目 下载和文件流</div>\n<div class=\"alert-green\">IDEA配置</div>","more":"<p>这篇博客不知道为啥被覆盖了 哎还要从新写一次</p>\n<h3 id=\"maven项目\"><a href=\"#maven项目\" class=\"headerlink\" title=\"maven项目\"></a>maven项目</h3><p>通过maven项目 不需要像java项目一样去下载第三方jar包了</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        所用到的httpclient包--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.httpcomponents<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>httpclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.google.guava<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>guava<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>r05<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        Jsoup是一款Java的HTML解析器，可以直接解析某个URL地址，也可以解析HTML内容。其主要的功能包括解析HTM--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        L页面，通过DOM或者CSS选择器来查找、提取数据，可以更改HTML内容--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.jsoup<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jsoup<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.10.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"下载类\"><a href=\"#下载类\" class=\"headerlink\" title=\"下载类\"></a>下载类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@ClassName</span> Download</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@Description</span> TODO</span></span><br><span class=\"line\"><span class=\"comment\">* Author lsmg</span></span><br><span class=\"line\"><span class=\"comment\">* Date 2019/4/15 18:03</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@Version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\">* 来自 https://www.cnblogs.com/lichenwei/p/4610298.html</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Download</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> lsmg</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> //TODO</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 23:36 2019/4/15</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> imgUrl 图片url地址</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> extension 图片的后缀名</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">synchronized</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">imgDownload</span><span class=\"params\">(String imgUrl, String extension)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取输入流</span></span><br><span class=\"line\">\t\tBufferedInputStream in = <span class=\"keyword\">new</span> BufferedInputStream((<span class=\"keyword\">new</span> URL(imgUrl).openStream()));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//文件名</span></span><br><span class=\"line\">\t\tSimpleDateFormat df = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"HH时mm分ss秒SSS毫秒\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建文件流</span></span><br><span class=\"line\">\t\tFile file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"D:\\\\Pictures\\\\miku\\\\\"</span>+df.format(<span class=\"keyword\">new</span> Date())+<span class=\"string\">\".\"</span>+extension);</span><br><span class=\"line\">\t\tSystem.out.println(file.getAbsolutePath());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tFileOutputStream fileOutputStream = <span class=\"keyword\">new</span> FileOutputStream(file);</span><br><span class=\"line\">\t\tBufferedOutputStream out = <span class=\"keyword\">new</span> BufferedOutputStream(fileOutputStream);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//缓冲字节流</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] data = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> ((length = in.read(data)) != -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t\tout.write(data,<span class=\"number\">0</span>,length); <span class=\"comment\">//这里划重点 这是修改后的代码没啥问题了 每次写入的长度不一定为1024 而应该是真实长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"正在下载图片 :\"</span>+imgUrl);</span><br><span class=\"line\">\t\tin.close();</span><br><span class=\"line\">\t\tout.close();</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动类\"><a href=\"#启动类\" class=\"headerlink\" title=\"启动类\"></a>启动类</h3><p>使用了多线程传入参数i 作用在后边说明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">\t\tThread t =<span class=\"keyword\">new</span> FindImg(i);</span><br><span class=\"line\">\t\tt.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"java爬虫\"><a href=\"#java爬虫\" class=\"headerlink\" title=\"java爬虫\"></a>java爬虫</h3><p>这个网页带有分页 每次切换页数url只有页数发生了变化 干脆加入了多线程 一个线程负责一页</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> lsmg</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> //TODO 找到select的更好表示方式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 23:42 2019/4/15</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Find</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//建立一个请求客户端</span></span><br><span class=\"line\">\tCloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">\tString url=<span class=\"string\">\"https://pic.netbian.com/e/search/result/index.php?page=\"</span>+index+<span class=\"string\">\"&amp;searchid=122\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//使用HttpGet方式请求网址</span></span><br><span class=\"line\">\tHttpGet httpGet = <span class=\"keyword\">new</span> HttpGet(url);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//获取网址返回结果</span></span><br><span class=\"line\">\tCloseableHttpResponse response = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;                     <span class=\"comment\">//....执行</span></span><br><span class=\"line\">\t\tresponse = httpClient.execute(httpGet);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//获取返回结构中的实体</span></span><br><span class=\"line\">\tHttpEntity entity = response.getEntity();</span><br><span class=\"line\"></span><br><span class=\"line\">\tString html = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//将返回实体输出</span></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\thtml= EntityUtils.toString(entity);</span><br><span class=\"line\">\t\t<span class=\"comment\">//System.out.println(html);</span></span><br><span class=\"line\">\t\tEntityUtils.consume(entity);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//解析html到一个document</span></span><br><span class=\"line\">\tDocument document = Jsoup.parse(html);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//提取内容</span></span><br><span class=\"line\">\tElements imgJpg = document.select(<span class=\"string\">\"img[src$=.jpg]\"</span>); <span class=\"comment\">//select选择器 下边说明 由于返回多个结果使用Elements存储</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//下载对象</span></span><br><span class=\"line\">\tDownload download = <span class=\"keyword\">new</span> Download();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Element element : imgJpg)&#123;</span><br><span class=\"line\">\t\tdownload.imgDownload(<span class=\"string\">\"https://pic.netbian.com\"</span>+element.attr(<span class=\"string\">\"src\"</span>),<span class=\"string\">\"jpg\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Jsoup-Java的HTML解析器\"><a href=\"#Jsoup-Java的HTML解析器\" class=\"headerlink\" title=\"Jsoup-Java的HTML解析器\"></a>Jsoup-Java的HTML解析器</h3><p>这个功能强大记录两条常用的<br><strong><a href=\"https://www.voidcn.com/article/p-qdzdjxky-p.html\" target=\"_blank\" rel=\"noopener\">来自</a></strong></p>\n<p>[attr^=value] 利用匹配属性值开头<br>[attr$=value] 利用匹配属性值结尾<br>[attr<em>=value]包含属性值来查找元素，比如：[href</em>=/path/]<br>还有<br>a[href] 带有herf内=内容的a标签<br>a[class=xxx] 带有xxxclass的a标签</p>\n<p>element.attr(“src”) 找到src的内容</p>\n<h3 id=\"自己的方法注释\"><a href=\"#自己的方法注释\" class=\"headerlink\" title=\"自己的方法注释\"></a>自己的方法注释</h3><p><a href=\"https://blog.csdn.net/qq_34533072/article/details/80830738\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_34533072/article/details/80830738</a></p>"},{"title":"Java设计模式","date":"2019-05-21T05:41:48.000Z","_content":"<div class=\"alert-red\">Java设计模式</div>\n<div class=\"alert-blue\"></div>\n<div class=\"alert-green\"></div>\n<!--more-->\n## 大神文章\n[自己是看的作者的书](https://blog.csdn.net/lovelion/article/details/17517213)\n\n## 单例模式\n使用单例模式可以确保一个类只有一个实例化的对象\n\n### 饿汉式单例模式\n 饿汉式单例模式 无延迟加载 不需要解决多线程问题\n```java\n/**\n * @ClassName singletonpattern.Connect\n * @Description\n * 饿汉式单例模式 无延迟加载 不需要解决多线程问题\n * Author lsmg\n * Date 2019/5/21 13:25\n * @Version 1.0\n **/\npublic class Connect {\n    private static final Connect instance = new Connect();\n\n    private Connect(){\n\n    }\n\n    public static Connect getInstance(){\n        return instance;\n    }\n}\n```\n### 懒汉式单例模式\n```java\npackage singletonpattern;\n懒汉式单例模式 实现了延迟加载,但需要解决多线程问题\n/**\n * @ClassName singletonpattern.Connect1_2\n * @Description TODO\n * 懒汉式单例模式 实现了延迟加载,但需要解决多线程问题\n * Author lsmg\n * Date 2019/5/21 13:30\n * @Version 1.0\n **/\npublic class Connect1_2 {\n    private static Connect1_2  connect1_2;\n\n    private Connect1_2(){}\n\n    //这种方式会造成多线程访问的时候实例化多个对象\n//    public  static singletonpattern.Connect1_2 getInstance(){\n//        if(connect1_2 == null){\n//            connect1_2 = new singletonpattern.Connect1_2();\n//        }\n//\n//        return connect1_2;\n//    }\n\n    //这种方式虽然确保了只有一个线程进入, 但是降低了多线程的性能\n//    public synchronized static singletonpattern.Connect1_2 getInstance(){\n//        if(connect1_2 == null){\n//            connect1_2 = new singletonpattern.Connect1_2();\n//        }\n//\n//        return connect1_2;\n//    }\n\n\n    //这种方式需要在private \"volatile\" static singletonpattern.Connect1_2 connect1_2 这样同样降低效率\n//    public synchronized static singletonpattern.Connect1_2 getInstance(){\n//        if(connect1_2 == null){\n//\n//            synchronized (singletonpattern.Connect1_2.class){\n//                if(connect1_2 == null){\n//                    connect1_2 = new singletonpattern.Connect1_2();\n//                }\n//            }\n//\n//        }\n//\n//        return connect1_2;\n//    }\n\n    //使用IoDH 方法\n    //建立一个静态内部类\n    private static class HoldeClass{\n        private final static Connect1_2 instance = new Connect1_2();\n    }\n\n    private static Connect1_2 getInstance(){\n        return HoldeClass.instance;\n    }\n}\n\n```","source":"_posts/Java-设计模式.md","raw":"---\ntitle: Java设计模式\ntags:\ncategories:\n  - Java\ndate: 2019-05-21 13:41:48\n---\n<div class=\"alert-red\">Java设计模式</div>\n<div class=\"alert-blue\"></div>\n<div class=\"alert-green\"></div>\n<!--more-->\n## 大神文章\n[自己是看的作者的书](https://blog.csdn.net/lovelion/article/details/17517213)\n\n## 单例模式\n使用单例模式可以确保一个类只有一个实例化的对象\n\n### 饿汉式单例模式\n 饿汉式单例模式 无延迟加载 不需要解决多线程问题\n```java\n/**\n * @ClassName singletonpattern.Connect\n * @Description\n * 饿汉式单例模式 无延迟加载 不需要解决多线程问题\n * Author lsmg\n * Date 2019/5/21 13:25\n * @Version 1.0\n **/\npublic class Connect {\n    private static final Connect instance = new Connect();\n\n    private Connect(){\n\n    }\n\n    public static Connect getInstance(){\n        return instance;\n    }\n}\n```\n### 懒汉式单例模式\n```java\npackage singletonpattern;\n懒汉式单例模式 实现了延迟加载,但需要解决多线程问题\n/**\n * @ClassName singletonpattern.Connect1_2\n * @Description TODO\n * 懒汉式单例模式 实现了延迟加载,但需要解决多线程问题\n * Author lsmg\n * Date 2019/5/21 13:30\n * @Version 1.0\n **/\npublic class Connect1_2 {\n    private static Connect1_2  connect1_2;\n\n    private Connect1_2(){}\n\n    //这种方式会造成多线程访问的时候实例化多个对象\n//    public  static singletonpattern.Connect1_2 getInstance(){\n//        if(connect1_2 == null){\n//            connect1_2 = new singletonpattern.Connect1_2();\n//        }\n//\n//        return connect1_2;\n//    }\n\n    //这种方式虽然确保了只有一个线程进入, 但是降低了多线程的性能\n//    public synchronized static singletonpattern.Connect1_2 getInstance(){\n//        if(connect1_2 == null){\n//            connect1_2 = new singletonpattern.Connect1_2();\n//        }\n//\n//        return connect1_2;\n//    }\n\n\n    //这种方式需要在private \"volatile\" static singletonpattern.Connect1_2 connect1_2 这样同样降低效率\n//    public synchronized static singletonpattern.Connect1_2 getInstance(){\n//        if(connect1_2 == null){\n//\n//            synchronized (singletonpattern.Connect1_2.class){\n//                if(connect1_2 == null){\n//                    connect1_2 = new singletonpattern.Connect1_2();\n//                }\n//            }\n//\n//        }\n//\n//        return connect1_2;\n//    }\n\n    //使用IoDH 方法\n    //建立一个静态内部类\n    private static class HoldeClass{\n        private final static Connect1_2 instance = new Connect1_2();\n    }\n\n    private static Connect1_2 getInstance(){\n        return HoldeClass.instance;\n    }\n}\n\n```","slug":"Java-设计模式","published":1,"updated":"2020-02-07T08:33:22.988Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucz4001ysouoavj55kuw","content":"<div class=\"alert-red\">Java设计模式</div>\n<div class=\"alert-blue\"></div>\n<div class=\"alert-green\"></div>\n<a id=\"more\"></a>\n## 大神文章\n[自己是看的作者的书](https://blog.csdn.net/lovelion/article/details/17517213)\n\n<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><p>使用单例模式可以确保一个类只有一个实例化的对象</p>\n<h3 id=\"饿汉式单例模式\"><a href=\"#饿汉式单例模式\" class=\"headerlink\" title=\"饿汉式单例模式\"></a>饿汉式单例模式</h3><p> 饿汉式单例模式 无延迟加载 不需要解决多线程问题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> singletonpattern.Connect</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> * 饿汉式单例模式 无延迟加载 不需要解决多线程问题</span></span><br><span class=\"line\"><span class=\"comment\"> * Author lsmg</span></span><br><span class=\"line\"><span class=\"comment\"> * Date 2019/5/21 13:25</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Connect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Connect instance = <span class=\"keyword\">new</span> Connect();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Connect</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connect <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"懒汉式单例模式\"><a href=\"#懒汉式单例模式\" class=\"headerlink\" title=\"懒汉式单例模式\"></a>懒汉式单例模式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> singletonpattern;</span><br><span class=\"line\">懒汉式单例模式 实现了延迟加载,但需要解决多线程问题</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> singletonpattern.Connect1_2</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> TODO</span></span><br><span class=\"line\"><span class=\"comment\"> * 懒汉式单例模式 实现了延迟加载,但需要解决多线程问题</span></span><br><span class=\"line\"><span class=\"comment\"> * Author lsmg</span></span><br><span class=\"line\"><span class=\"comment\"> * Date 2019/5/21 13:30</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Connect1_2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Connect1_2  connect1_2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Connect1_2</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这种方式会造成多线程访问的时候实例化多个对象</span></span><br><span class=\"line\"><span class=\"comment\">//    public  static singletonpattern.Connect1_2 getInstance()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        if(connect1_2 == null)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            connect1_2 = new singletonpattern.Connect1_2();</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//        return connect1_2;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这种方式虽然确保了只有一个线程进入, 但是降低了多线程的性能</span></span><br><span class=\"line\"><span class=\"comment\">//    public synchronized static singletonpattern.Connect1_2 getInstance()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        if(connect1_2 == null)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            connect1_2 = new singletonpattern.Connect1_2();</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//        return connect1_2;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这种方式需要在private \"volatile\" static singletonpattern.Connect1_2 connect1_2 这样同样降低效率</span></span><br><span class=\"line\"><span class=\"comment\">//    public synchronized static singletonpattern.Connect1_2 getInstance()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        if(connect1_2 == null)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//            synchronized (singletonpattern.Connect1_2.class)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                if(connect1_2 == null)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                    connect1_2 = new singletonpattern.Connect1_2();</span></span><br><span class=\"line\"><span class=\"comment\">//                &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//        return connect1_2;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用IoDH 方法</span></span><br><span class=\"line\">    <span class=\"comment\">//建立一个静态内部类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HoldeClass</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Connect1_2 instance = <span class=\"keyword\">new</span> Connect1_2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Connect1_2 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HoldeClass.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"alert-red\">Java设计模式</div>\n<div class=\"alert-blue\"></div>\n<div class=\"alert-green\"></div>","more":"## 大神文章\n[自己是看的作者的书](https://blog.csdn.net/lovelion/article/details/17517213)\n\n<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><p>使用单例模式可以确保一个类只有一个实例化的对象</p>\n<h3 id=\"饿汉式单例模式\"><a href=\"#饿汉式单例模式\" class=\"headerlink\" title=\"饿汉式单例模式\"></a>饿汉式单例模式</h3><p> 饿汉式单例模式 无延迟加载 不需要解决多线程问题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> singletonpattern.Connect</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> * 饿汉式单例模式 无延迟加载 不需要解决多线程问题</span></span><br><span class=\"line\"><span class=\"comment\"> * Author lsmg</span></span><br><span class=\"line\"><span class=\"comment\"> * Date 2019/5/21 13:25</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Connect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Connect instance = <span class=\"keyword\">new</span> Connect();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Connect</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connect <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"懒汉式单例模式\"><a href=\"#懒汉式单例模式\" class=\"headerlink\" title=\"懒汉式单例模式\"></a>懒汉式单例模式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> singletonpattern;</span><br><span class=\"line\">懒汉式单例模式 实现了延迟加载,但需要解决多线程问题</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> singletonpattern.Connect1_2</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> TODO</span></span><br><span class=\"line\"><span class=\"comment\"> * 懒汉式单例模式 实现了延迟加载,但需要解决多线程问题</span></span><br><span class=\"line\"><span class=\"comment\"> * Author lsmg</span></span><br><span class=\"line\"><span class=\"comment\"> * Date 2019/5/21 13:30</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Connect1_2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Connect1_2  connect1_2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Connect1_2</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这种方式会造成多线程访问的时候实例化多个对象</span></span><br><span class=\"line\"><span class=\"comment\">//    public  static singletonpattern.Connect1_2 getInstance()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        if(connect1_2 == null)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            connect1_2 = new singletonpattern.Connect1_2();</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//        return connect1_2;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这种方式虽然确保了只有一个线程进入, 但是降低了多线程的性能</span></span><br><span class=\"line\"><span class=\"comment\">//    public synchronized static singletonpattern.Connect1_2 getInstance()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        if(connect1_2 == null)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            connect1_2 = new singletonpattern.Connect1_2();</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//        return connect1_2;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这种方式需要在private \"volatile\" static singletonpattern.Connect1_2 connect1_2 这样同样降低效率</span></span><br><span class=\"line\"><span class=\"comment\">//    public synchronized static singletonpattern.Connect1_2 getInstance()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        if(connect1_2 == null)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//            synchronized (singletonpattern.Connect1_2.class)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                if(connect1_2 == null)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                    connect1_2 = new singletonpattern.Connect1_2();</span></span><br><span class=\"line\"><span class=\"comment\">//                &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//        return connect1_2;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用IoDH 方法</span></span><br><span class=\"line\">    <span class=\"comment\">//建立一个静态内部类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HoldeClass</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Connect1_2 instance = <span class=\"keyword\">new</span> Connect1_2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Connect1_2 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HoldeClass.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"java输入输出流","date":"2019-04-16T04:04:41.000Z","_content":"<div class=\"alert-red\">java输入输出流</div>\n<div class=\"alert-blue\">知识整理</div>\n<div class=\"alert-green\">IO流</div>\n<!--more-->\n\n## 输入输出的区别\n![](https://blog.lsmg.xyz/2019/04/11/4y11r/1.png)\n### InputStream、OutputStream\n处理字节流的抽象类\nInputStream 是字节输入流的所有类的超类,一般我们使用它的子类,如FileInputStream等.\nOutputStream是字节输出流的所有类的超类,一般我们使用它的子类,如FileOutputStream等.\n\n### InputStreamReader  OutputStreamWriter\n处理字符流的抽象类\nInputStreamReader 是字节流通向字符流的桥梁,它将字节流转换为字符流. **同时可以解决乱码问**题\nOutputStreamWriter是字符流通向字节流的桥梁，它将字符流转换为字节流.**同时可以解决乱码问题**\n\n### BufferedReader BufferedWriter\nBufferedReader 由Reader类扩展而来，提供通用的缓冲方式文本读取，readLine读取一个文本行，\n从字符输入流中读取文本，缓冲各个字符，从而提供字符、数组和行的高效读取。\nBufferedWriter  由Writer 类扩展而来，提供通用的缓冲方式文本写入， newLine使用平台自己的行分隔符，\n将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。\n\n## InputStream\n### BufferedInputStream-带有缓冲区域的InputStream [来自](https://blog.csdn.net/niyingxunzong/article/details/33335485)\nInputStream\n|--FilterInputStream\n|----BufferedInputStream\n\t\t\n1. BufferedInputStream对外提供滑动读取的功能实现，通过预先读入一整段原始输入流数据至缓冲区中。\n2. 外界对BufferedInputStream的读取操作实际上是在缓冲区上进行。\n3. 如果读取的数据超过了缓冲区的范围，那么BufferedInputStream负责重新从原始输入流中载入下一截数据填充缓冲区，然后外界继续通过缓冲区进行数据读取。\n这样的设计的好处是：避免了大量的磁盘网络IO，因为原始的InputStream类实现的read是即时读取的，即每一次读取都会是一次IO操作（哪怕只读取了1个字节的数据），可想而知，如果数据量巨大，这样的磁盘网络消耗非常可怕。而通过缓冲区的实现，读取可以读取缓冲区中的内容，当读取超过缓冲区的内容后再进行一次IO，载入一段数据填充缓冲，那么下一次读取一般情况下就直接可以从缓冲区读取，减少了IO操作。\n\n## OutStream\n### flush操作\n当写文件需要flush()的效果时，需要 \nFileOutputStream fos = new FileOutputStream(“c:\\a.txt”); \nBufferedOutputStream bos = new BufferedOutputStream(fos); \n也就是说，需要将FileOutputStream作为BufferedOutputStream构造函数的参数传入，然后对BufferedOutputStream进行写入操作，才能利用缓冲及flush()。\n\n查看BufferedOutputStream的源代码，发现所谓的buffer其实就是一个byte[]。 \n**BufferedOutputStream的每一次write其实是将内容写入byte[]，当buffer容量到达上限时，会触发真正的磁盘写入.**\n而另一种触发磁盘写入的办法就是调用`flush()`了。\n\n`BufferedOutputStream`在`close()`时会自动`flush ()`\n### 输出时创建中间目录\n只是创建一个文件对象不会在文件系统上创建相应的文件或目录。\n`File.mkdir()`和`File.mkdirs()`之间的区别是，后者将创建任何中间目录，如果它不存在。\n\n## 关闭流 [来自](https://blog.csdn.net/zhaoyanjun6/article/details/54894451)\nclose（）方法的作用 \n1、关闭输入流，并且释放系统资源 \n2、BufferedInputStream装饰一个 InputStream 使之具有缓冲功能，is要关闭只需要调用最终被装饰出的对象的 close()方法即可，因为它最终会调用真正数据源对象的 close()方法。因此，可以只调用外层流的close方法关闭其装饰的内层流。\n","source":"_posts/Java-输入输出流.md","raw":"---\ntitle: java输入输出流\ncategories:\n  - Java\ndate: 2019-04-16 12:04:41\ntags:\n---\n<div class=\"alert-red\">java输入输出流</div>\n<div class=\"alert-blue\">知识整理</div>\n<div class=\"alert-green\">IO流</div>\n<!--more-->\n\n## 输入输出的区别\n![](https://blog.lsmg.xyz/2019/04/11/4y11r/1.png)\n### InputStream、OutputStream\n处理字节流的抽象类\nInputStream 是字节输入流的所有类的超类,一般我们使用它的子类,如FileInputStream等.\nOutputStream是字节输出流的所有类的超类,一般我们使用它的子类,如FileOutputStream等.\n\n### InputStreamReader  OutputStreamWriter\n处理字符流的抽象类\nInputStreamReader 是字节流通向字符流的桥梁,它将字节流转换为字符流. **同时可以解决乱码问**题\nOutputStreamWriter是字符流通向字节流的桥梁，它将字符流转换为字节流.**同时可以解决乱码问题**\n\n### BufferedReader BufferedWriter\nBufferedReader 由Reader类扩展而来，提供通用的缓冲方式文本读取，readLine读取一个文本行，\n从字符输入流中读取文本，缓冲各个字符，从而提供字符、数组和行的高效读取。\nBufferedWriter  由Writer 类扩展而来，提供通用的缓冲方式文本写入， newLine使用平台自己的行分隔符，\n将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。\n\n## InputStream\n### BufferedInputStream-带有缓冲区域的InputStream [来自](https://blog.csdn.net/niyingxunzong/article/details/33335485)\nInputStream\n|--FilterInputStream\n|----BufferedInputStream\n\t\t\n1. BufferedInputStream对外提供滑动读取的功能实现，通过预先读入一整段原始输入流数据至缓冲区中。\n2. 外界对BufferedInputStream的读取操作实际上是在缓冲区上进行。\n3. 如果读取的数据超过了缓冲区的范围，那么BufferedInputStream负责重新从原始输入流中载入下一截数据填充缓冲区，然后外界继续通过缓冲区进行数据读取。\n这样的设计的好处是：避免了大量的磁盘网络IO，因为原始的InputStream类实现的read是即时读取的，即每一次读取都会是一次IO操作（哪怕只读取了1个字节的数据），可想而知，如果数据量巨大，这样的磁盘网络消耗非常可怕。而通过缓冲区的实现，读取可以读取缓冲区中的内容，当读取超过缓冲区的内容后再进行一次IO，载入一段数据填充缓冲，那么下一次读取一般情况下就直接可以从缓冲区读取，减少了IO操作。\n\n## OutStream\n### flush操作\n当写文件需要flush()的效果时，需要 \nFileOutputStream fos = new FileOutputStream(“c:\\a.txt”); \nBufferedOutputStream bos = new BufferedOutputStream(fos); \n也就是说，需要将FileOutputStream作为BufferedOutputStream构造函数的参数传入，然后对BufferedOutputStream进行写入操作，才能利用缓冲及flush()。\n\n查看BufferedOutputStream的源代码，发现所谓的buffer其实就是一个byte[]。 \n**BufferedOutputStream的每一次write其实是将内容写入byte[]，当buffer容量到达上限时，会触发真正的磁盘写入.**\n而另一种触发磁盘写入的办法就是调用`flush()`了。\n\n`BufferedOutputStream`在`close()`时会自动`flush ()`\n### 输出时创建中间目录\n只是创建一个文件对象不会在文件系统上创建相应的文件或目录。\n`File.mkdir()`和`File.mkdirs()`之间的区别是，后者将创建任何中间目录，如果它不存在。\n\n## 关闭流 [来自](https://blog.csdn.net/zhaoyanjun6/article/details/54894451)\nclose（）方法的作用 \n1、关闭输入流，并且释放系统资源 \n2、BufferedInputStream装饰一个 InputStream 使之具有缓冲功能，is要关闭只需要调用最终被装饰出的对象的 close()方法即可，因为它最终会调用真正数据源对象的 close()方法。因此，可以只调用外层流的close方法关闭其装饰的内层流。\n","slug":"Java-输入输出流","published":1,"updated":"2020-02-07T08:33:16.483Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucz50020souoek6k36uy","content":"<div class=\"alert-red\">java输入输出流</div>\n<div class=\"alert-blue\">知识整理</div>\n<div class=\"alert-green\">IO流</div>\n<a id=\"more\"></a>\n\n<h2 id=\"输入输出的区别\"><a href=\"#输入输出的区别\" class=\"headerlink\" title=\"输入输出的区别\"></a>输入输出的区别</h2><p><img src=\"https://blog.lsmg.xyz/2019/04/11/4y11r/1.png\" alt=\"\"></p>\n<h3 id=\"InputStream、OutputStream\"><a href=\"#InputStream、OutputStream\" class=\"headerlink\" title=\"InputStream、OutputStream\"></a>InputStream、OutputStream</h3><p>处理字节流的抽象类<br>InputStream 是字节输入流的所有类的超类,一般我们使用它的子类,如FileInputStream等.<br>OutputStream是字节输出流的所有类的超类,一般我们使用它的子类,如FileOutputStream等.</p>\n<h3 id=\"InputStreamReader-OutputStreamWriter\"><a href=\"#InputStreamReader-OutputStreamWriter\" class=\"headerlink\" title=\"InputStreamReader  OutputStreamWriter\"></a>InputStreamReader  OutputStreamWriter</h3><p>处理字符流的抽象类<br>InputStreamReader 是字节流通向字符流的桥梁,它将字节流转换为字符流. <strong>同时可以解决乱码问</strong>题<br>OutputStreamWriter是字符流通向字节流的桥梁，它将字符流转换为字节流.<strong>同时可以解决乱码问题</strong></p>\n<h3 id=\"BufferedReader-BufferedWriter\"><a href=\"#BufferedReader-BufferedWriter\" class=\"headerlink\" title=\"BufferedReader BufferedWriter\"></a>BufferedReader BufferedWriter</h3><p>BufferedReader 由Reader类扩展而来，提供通用的缓冲方式文本读取，readLine读取一个文本行，<br>从字符输入流中读取文本，缓冲各个字符，从而提供字符、数组和行的高效读取。<br>BufferedWriter  由Writer 类扩展而来，提供通用的缓冲方式文本写入， newLine使用平台自己的行分隔符，<br>将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。</p>\n<h2 id=\"InputStream\"><a href=\"#InputStream\" class=\"headerlink\" title=\"InputStream\"></a>InputStream</h2><h3 id=\"BufferedInputStream-带有缓冲区域的InputStream-来自\"><a href=\"#BufferedInputStream-带有缓冲区域的InputStream-来自\" class=\"headerlink\" title=\"BufferedInputStream-带有缓冲区域的InputStream 来自\"></a>BufferedInputStream-带有缓冲区域的InputStream <a href=\"https://blog.csdn.net/niyingxunzong/article/details/33335485\" target=\"_blank\" rel=\"noopener\">来自</a></h3><p>InputStream<br>|–FilterInputStream<br>|—-BufferedInputStream</p>\n<ol>\n<li>BufferedInputStream对外提供滑动读取的功能实现，通过预先读入一整段原始输入流数据至缓冲区中。</li>\n<li>外界对BufferedInputStream的读取操作实际上是在缓冲区上进行。</li>\n<li>如果读取的数据超过了缓冲区的范围，那么BufferedInputStream负责重新从原始输入流中载入下一截数据填充缓冲区，然后外界继续通过缓冲区进行数据读取。<br>这样的设计的好处是：避免了大量的磁盘网络IO，因为原始的InputStream类实现的read是即时读取的，即每一次读取都会是一次IO操作（哪怕只读取了1个字节的数据），可想而知，如果数据量巨大，这样的磁盘网络消耗非常可怕。而通过缓冲区的实现，读取可以读取缓冲区中的内容，当读取超过缓冲区的内容后再进行一次IO，载入一段数据填充缓冲，那么下一次读取一般情况下就直接可以从缓冲区读取，减少了IO操作。</li>\n</ol>\n<h2 id=\"OutStream\"><a href=\"#OutStream\" class=\"headerlink\" title=\"OutStream\"></a>OutStream</h2><h3 id=\"flush操作\"><a href=\"#flush操作\" class=\"headerlink\" title=\"flush操作\"></a>flush操作</h3><p>当写文件需要flush()的效果时，需要<br>FileOutputStream fos = new FileOutputStream(“c:\\a.txt”);<br>BufferedOutputStream bos = new BufferedOutputStream(fos);<br>也就是说，需要将FileOutputStream作为BufferedOutputStream构造函数的参数传入，然后对BufferedOutputStream进行写入操作，才能利用缓冲及flush()。</p>\n<p>查看BufferedOutputStream的源代码，发现所谓的buffer其实就是一个byte[]。<br><strong>BufferedOutputStream的每一次write其实是将内容写入byte[]，当buffer容量到达上限时，会触发真正的磁盘写入.</strong><br>而另一种触发磁盘写入的办法就是调用<code>flush()</code>了。</p>\n<p><code>BufferedOutputStream</code>在<code>close()</code>时会自动<code>flush ()</code></p>\n<h3 id=\"输出时创建中间目录\"><a href=\"#输出时创建中间目录\" class=\"headerlink\" title=\"输出时创建中间目录\"></a>输出时创建中间目录</h3><p>只是创建一个文件对象不会在文件系统上创建相应的文件或目录。<br><code>File.mkdir()</code>和<code>File.mkdirs()</code>之间的区别是，后者将创建任何中间目录，如果它不存在。</p>\n<h2 id=\"关闭流-来自\"><a href=\"#关闭流-来自\" class=\"headerlink\" title=\"关闭流 来自\"></a>关闭流 <a href=\"https://blog.csdn.net/zhaoyanjun6/article/details/54894451\" target=\"_blank\" rel=\"noopener\">来自</a></h2><p>close（）方法的作用<br>1、关闭输入流，并且释放系统资源<br>2、BufferedInputStream装饰一个 InputStream 使之具有缓冲功能，is要关闭只需要调用最终被装饰出的对象的 close()方法即可，因为它最终会调用真正数据源对象的 close()方法。因此，可以只调用外层流的close方法关闭其装饰的内层流。</p>\n","site":{"data":{}},"excerpt":"<div class=\"alert-red\">java输入输出流</div>\n<div class=\"alert-blue\">知识整理</div>\n<div class=\"alert-green\">IO流</div>","more":"<h2 id=\"输入输出的区别\"><a href=\"#输入输出的区别\" class=\"headerlink\" title=\"输入输出的区别\"></a>输入输出的区别</h2><p><img src=\"https://blog.lsmg.xyz/2019/04/11/4y11r/1.png\" alt=\"\"></p>\n<h3 id=\"InputStream、OutputStream\"><a href=\"#InputStream、OutputStream\" class=\"headerlink\" title=\"InputStream、OutputStream\"></a>InputStream、OutputStream</h3><p>处理字节流的抽象类<br>InputStream 是字节输入流的所有类的超类,一般我们使用它的子类,如FileInputStream等.<br>OutputStream是字节输出流的所有类的超类,一般我们使用它的子类,如FileOutputStream等.</p>\n<h3 id=\"InputStreamReader-OutputStreamWriter\"><a href=\"#InputStreamReader-OutputStreamWriter\" class=\"headerlink\" title=\"InputStreamReader  OutputStreamWriter\"></a>InputStreamReader  OutputStreamWriter</h3><p>处理字符流的抽象类<br>InputStreamReader 是字节流通向字符流的桥梁,它将字节流转换为字符流. <strong>同时可以解决乱码问</strong>题<br>OutputStreamWriter是字符流通向字节流的桥梁，它将字符流转换为字节流.<strong>同时可以解决乱码问题</strong></p>\n<h3 id=\"BufferedReader-BufferedWriter\"><a href=\"#BufferedReader-BufferedWriter\" class=\"headerlink\" title=\"BufferedReader BufferedWriter\"></a>BufferedReader BufferedWriter</h3><p>BufferedReader 由Reader类扩展而来，提供通用的缓冲方式文本读取，readLine读取一个文本行，<br>从字符输入流中读取文本，缓冲各个字符，从而提供字符、数组和行的高效读取。<br>BufferedWriter  由Writer 类扩展而来，提供通用的缓冲方式文本写入， newLine使用平台自己的行分隔符，<br>将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。</p>\n<h2 id=\"InputStream\"><a href=\"#InputStream\" class=\"headerlink\" title=\"InputStream\"></a>InputStream</h2><h3 id=\"BufferedInputStream-带有缓冲区域的InputStream-来自\"><a href=\"#BufferedInputStream-带有缓冲区域的InputStream-来自\" class=\"headerlink\" title=\"BufferedInputStream-带有缓冲区域的InputStream 来自\"></a>BufferedInputStream-带有缓冲区域的InputStream <a href=\"https://blog.csdn.net/niyingxunzong/article/details/33335485\" target=\"_blank\" rel=\"noopener\">来自</a></h3><p>InputStream<br>|–FilterInputStream<br>|—-BufferedInputStream</p>\n<ol>\n<li>BufferedInputStream对外提供滑动读取的功能实现，通过预先读入一整段原始输入流数据至缓冲区中。</li>\n<li>外界对BufferedInputStream的读取操作实际上是在缓冲区上进行。</li>\n<li>如果读取的数据超过了缓冲区的范围，那么BufferedInputStream负责重新从原始输入流中载入下一截数据填充缓冲区，然后外界继续通过缓冲区进行数据读取。<br>这样的设计的好处是：避免了大量的磁盘网络IO，因为原始的InputStream类实现的read是即时读取的，即每一次读取都会是一次IO操作（哪怕只读取了1个字节的数据），可想而知，如果数据量巨大，这样的磁盘网络消耗非常可怕。而通过缓冲区的实现，读取可以读取缓冲区中的内容，当读取超过缓冲区的内容后再进行一次IO，载入一段数据填充缓冲，那么下一次读取一般情况下就直接可以从缓冲区读取，减少了IO操作。</li>\n</ol>\n<h2 id=\"OutStream\"><a href=\"#OutStream\" class=\"headerlink\" title=\"OutStream\"></a>OutStream</h2><h3 id=\"flush操作\"><a href=\"#flush操作\" class=\"headerlink\" title=\"flush操作\"></a>flush操作</h3><p>当写文件需要flush()的效果时，需要<br>FileOutputStream fos = new FileOutputStream(“c:\\a.txt”);<br>BufferedOutputStream bos = new BufferedOutputStream(fos);<br>也就是说，需要将FileOutputStream作为BufferedOutputStream构造函数的参数传入，然后对BufferedOutputStream进行写入操作，才能利用缓冲及flush()。</p>\n<p>查看BufferedOutputStream的源代码，发现所谓的buffer其实就是一个byte[]。<br><strong>BufferedOutputStream的每一次write其实是将内容写入byte[]，当buffer容量到达上限时，会触发真正的磁盘写入.</strong><br>而另一种触发磁盘写入的办法就是调用<code>flush()</code>了。</p>\n<p><code>BufferedOutputStream</code>在<code>close()</code>时会自动<code>flush ()</code></p>\n<h3 id=\"输出时创建中间目录\"><a href=\"#输出时创建中间目录\" class=\"headerlink\" title=\"输出时创建中间目录\"></a>输出时创建中间目录</h3><p>只是创建一个文件对象不会在文件系统上创建相应的文件或目录。<br><code>File.mkdir()</code>和<code>File.mkdirs()</code>之间的区别是，后者将创建任何中间目录，如果它不存在。</p>\n<h2 id=\"关闭流-来自\"><a href=\"#关闭流-来自\" class=\"headerlink\" title=\"关闭流 来自\"></a>关闭流 <a href=\"https://blog.csdn.net/zhaoyanjun6/article/details/54894451\" target=\"_blank\" rel=\"noopener\">来自</a></h2><p>close（）方法的作用<br>1、关闭输入流，并且释放系统资源<br>2、BufferedInputStream装饰一个 InputStream 使之具有缓冲功能，is要关闭只需要调用最终被装饰出的对象的 close()方法即可，因为它最终会调用真正数据源对象的 close()方法。因此，可以只调用外层流的close方法关闭其装饰的内层流。</p>"},{"title":"暑假学习记录与总结","date":"2019-07-13T04:13:22.000Z","_content":"<div class=\"alert-red\">では、ゲームを始(はじ)めましょう</div>\n\n自己与研究生无缘了, 不过嘛, 是好是坏我也不知道, 现在也只能多学点技术, 去工作了, 这个暑假很重要, 所以将会每天记录下.\n\n[在线图床](https://imgurl.org/)\n[设计模式主要学习](https://blog.csdn.net/lovelion/article/details/17517213)\n设计模式次要补充 -- head first java 设计模式\n\n<!--more-->\n## 总结\n\n![](暑假学习记录与总结/4.png)\n总结一下这个暑假都干了什么, 马上就要开学了.\n七月十三日到七月十九日, 这是第一周了.这一周伴随着到处参观, 收货很少了. 那时我还在主用Java, 主要的是学习了一些设计模式, 这一周的时间对我学习C++ 帮助也是有的. 暑假学习设计模式也是出于换语言的考虑. \n第一天(七月十三日)可以说是看的最多的了解了什么是耦合和解耦, 一些简单的设计模式(简单工厂, 工厂方法, 抽象工厂, 单例模式). \n第二天(七月十四日) 开始初步试验大创项目的实现, 当时遇到一个BUG, 我需要返回一个东西, 但我还是需要返回后将他删除, 首先就是将他”复制了一份”, 然后删除, 却发现返回去的都是空的,了解到了Java如何进行深拷贝.\n七月十六日看了下Java编程思想的多态部分, 然后主要时间修改网络助手的开机启动设置, 这样开机启动设置就没有问题了.\n七月十七日收拾家伙, 休息了休息准备回家, 结果虽然我确认了好几次自己有没有带全家伙, 鼠标笔记本都带上了,\n七月十八日到达北京去我姐那里暂住了, 结果发现我…..光带回了一个鼠标, 鼠标的接收器还在USB分线器上(吐血) 然后开始了一个开源项目的阅读. 云收藏(SpringBoot框架). 发现了自己没有看懂的东西(Stirng ...), 就去了解下JDK从5-8每次更新加入的内容,了解到那个叫做可变参数需要搭配增强for循环使用\n七月十九日-七月二十日我终于实现了自己理想….怎么说呢北方最大的漫展依然没有我想象的大, 等我有机会既定要去一次南方\n\n七月二十一日到七月二十七日写了个后端练手(一个失物招领) . 使用了丝袜哥写Api文档, SpringJpa作为持久层? 这几天放松了玩了几天游戏可惜了.\n七月二十八日总结两个小项目比较靠近项目的地方, 统一返回类型, 预定义数据, SpringJpa.\n.学习了 接口 内部类 持有对象. 通过查看源码解决了一个Bug,\n七月二十九日到八月二日 编写二手交易后台.\n\n想去了解下大数据相关内容\n八月三日到八月九日 看了下关于大数据的内容, 并不是很感兴趣.\n八月十日到八月十五日 主要是写算法题目, 然后寻找自己是佛要从事游戏服务器编程\n八月十六日到八月二十四日 上午复习高数, 下午看C++\n@2019年8月24日18:21:07@\n\n\n## 大纲\n设计模式不求多, 但求会用, 极大概率调整设计模式的学习.\n此外需要刷一些常用的算法\n\n```\n7.13-7.19\n<复用类, 多态>\n---六个创建型模式\n- 简单工厂模式\n- 工厂方法模式\n- 抽象工厂模式\n- 单例模式\n- 原型模式(略过)\n- 建造者模式(略过)\n7.20-7.26\n<接口, 内部类, 持有对象>\n---七个结构型模式\n- 适配器模式\n- 桥接模式\n- 组合模式\n- 外观模式\n7.27-8.02\n<类型信息, 泛型>\n- 装饰模式\n- 享元模式(略过)\n- 代理模式\n8.03-8.09\n<数组, 容器深入研究>\n---十一个行为型模式\n- 职责链模式\n- 命令模式\n- 解释器模式(略过)\n- 迭代器模式\n- 中介者模式(略过)\n- 备忘录模式(略过)\n- 观察者模式\n8.10-8.16\n<IO, 枚举类型>\n- 状态模式\n- 策略模式\n- 模板方法模式\n- 访问者模(略过)\n8.17-8.23\n<注解, 并发>\n\n```\n# では、ゲームを始(はじ)めましょう\n## 7.13-7.19\n```\n7.13-7.19\n<复用类, 多态>\n---六个创建型模式\n- 简单工厂模式\n- 工厂方法模式\n- 抽象工厂模式\n- 单例模式\n```\n### 7月13日\n\n```\n- 简单工厂模式\n- 工厂方法模式\n- 抽象工厂模式\n- 单例模式\n```\n\n2019年7月13日12:21:17\n上午参观参观参观...... 重置了下, 这个暑期表格.今天开始第一天的打卡.下午还有参观, 然后就可以开始学了\n\n下午有b站血族直播\n下午看了一个项目, 自己不会的还是太多,,,,,, 给了源码都看不太懂.\n还是先继续看几个设计模式吧, 设计模式目前想的是, 了解大概, 等到时用到了再去详细学习\n\n#### 耦合与解耦\n耦合: 两个或两个以上的体系之间互相结合, 互相影响, 产生的一个联合起来解决问题的体系.\n这种体系, 不利于修改, 修改一个体系可能会影响到另一个体系, 使得另一个体系需要做出修改.\n解耦: 将体系之间的联系降到最低, 各司其职, 修改本身的时候, 不需要去动其他的体系\n\n#### 简单工厂模式\n简单工厂模式不属于GoF 23种设计模式\n通过设计一个父类(产品类), 由他派生出多个子类(具体产品类), 通过一个工厂类, 提供给工厂类生产方法不同的参数, 由工厂类return相应的子类, 由父类接受.\n\n解决问题: 通过工厂类, 只需要记住参数, 就可以产生相应的子类,\n存在问题: 不符合开闭原则, 每次产生新的产品, 都需要去修改相应的工厂生产方法.\n\n#### 工厂方法模式\n与简单工厂有些相似之处: 均存在一个产品父类和多个产品子类.\n不同之处在于 工厂方法模式, 设置了工厂父类, 通过派生出不同的工厂子类来return相应的子类.\n\n解决问题: 解决了简单工厂模式的开闭原则, 每次产生新的产品, 只需要派生一个相应的子类即可\n存在问题: 系统中由于新产品的产生, 类的个数将会成对增加, 会有更多的类需要处理\n\n#### 抽象工厂模式\n抽象工厂模式解决了工厂方法模式某些情况下 导致的类成对增加情况\n一个抽象工厂里包含了这个\"工厂\"的所有产品--这对应了一个产品族\n可以派生出多个工厂来实现多品牌产品--形成了一个等级结构\n![引用自上文博客](https://img-blog.csdn.net/20130713162941328?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTG92ZUxpb24=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n#### 单例模式\n这个模式理解起来很容易, 但是效果却十分的不错, 之前用过一次所以详细写一下.\n**饿汉式单例模式**\n饿汉式单例模式 无延迟加载 不需要解决多线程问题\n```java\n/**\n * @ClassName singletonpattern.Connect\n * @Description\n * 饿汉式单例模式 无延迟加载 不需要解决多线程问题\n * Author lsmg\n * Date 2019/5/21 13:25\n * @Version 1.0\n **/\npublic class Connect {\n    private static final Connect instance = new Connect();\n\n    private Connect(){\n\n    }\n\n    public static Connect getInstance(){\n        return instance;\n    }\n}\n```\n**懒汉式单例模式**\n```java\npackage singletonpattern;\n懒汉式单例模式 实现了延迟加载,但需要解决多线程问题\n/**\n * @ClassName singletonpattern.Connect1_2\n * @Description TODO\n * 懒汉式单例模式 实现了延迟加载,但需要解决多线程问题\n * Author lsmg\n * Date 2019/5/21 13:30\n * @Version 1.0\n **/\npublic class Connect1_2 {\n    private static Connect1_2  connect1_2;\n\n    private Connect1_2(){}\n\n    //这种方式会造成多线程访问的时候实例化多个对象\n//    public  static singletonpattern.Connect1_2 getInstance(){\n//        if(connect1_2 == null){\n//            connect1_2 = new singletonpattern.Connect1_2();\n//        }\n//\n//        return connect1_2;\n//    }\n\n    //这种方式虽然确保了只有一个线程进入, 但是降低了多线程的性能\n//    public synchronized static singletonpattern.Connect1_2 getInstance(){\n//        if(connect1_2 == null){\n//            connect1_2 = new singletonpattern.Connect1_2();\n//        }\n//\n//        return connect1_2;\n//    }\n\n\n    //这种方式需要在private \"volatile\" static singletonpattern.Connect1_2 connect1_2 这样同样降低效率\n//    public synchronized static singletonpattern.Connect1_2 getInstance(){\n//        if(connect1_2 == null){\n//\n//            synchronized (singletonpattern.Connect1_2.class){\n//                if(connect1_2 == null){\n//                    connect1_2 = new singletonpattern.Connect1_2();\n//                }\n//            }\n//\n//        }\n//\n//        return connect1_2;\n//    }\n```\n**使用IoDH方法结合二者优点**\n由于静态单例对象没有作为Singleton的成员变量直接初始化, 当调用`getInstance()`方法的时候, 会加载内部类HolderClass, 其中的static 由Java虚拟机保证线程安全性, 这样就结合了`饿汉式单例模式的线程安全`和`懒汉式单例模式的延迟加载`\n\n```java\n//Initialization on Demand Holder\nclass Singleton {\n\tprivate Singleton() {\n\t}\n\t\n\tprivate static class HolderClass {\n            private final static Singleton instance = new Singleton();\n\t}\n\t\n\tpublic static Singleton getInstance() {\n\t    return HolderClass.instance;\n\t}\n\t\n\tpublic static void main(String args[]) {\n\t    Singleton s1, s2; \n        s1 = Singleton.getInstance();\n\t    s2 = Singleton.getInstance();\n\t    System.out.println(s1==s2);\n\t}\n}\n```\n@2019年7月13日19:07:46 设计模式暂时到这里, 去写写代码吧@\n\n### 7月14日\n```\n复用类看了一部分, 目前还差final部分\n```\n@2019年7月14日09:43:46@\n\n下午看了看大创项目的实现, 选择了高德地图api. 中午的时候太困了 搞得我没有仔细看\n目前决定采用[动态延展路径](https://lbs.amap.com/api/amap-ui/demos/amap-ui-pathsimplifier/expand-path)  解决问题, path由ajax 异步获取更新.\n#### 小插曲-Java List深浅拷贝\n```java\n@Service(\"droneStatusService\")\npublic class DroneStatusServiceImpl implements DroneStatusService {\n\n    private Logger logger = LoggerFactory.getLogger(DroneStatusServiceImpl.class);\n\n    private List<DroneStatus> droneStatusList = new ArrayList<>();\n/**删除其他代码**/\n    @Override\n    public List<DroneStatus> listDroneStatus() {\n        List<DroneStatus> theDroneStatusList = droneStatusList;\n\t\tdroneStatusList.clear(); /**这样导致了我的return list一直为空**/\n        logger.info(\"清除一次信息list共\"+theDroneStatusList.size()+\"条\");\n\n        return theDroneStatusList;\n    }\n}\n```\n第一印象这样写, 排查方法就是想到了关于Java引用的部分.\n对于list的拷贝 `遍历循环复制`和`List的构造方法`和`list.addAll()`以及`System.arraycopy()` 这些全部是`浅复制`他们指向了同一片内存区域\n\n深复制的实现方法另实体类 实现Cloneable接口 重写clone方法\n```java\n@Override\npublic Object clone() {\n\tEntity entity = null;\n\ttry {\n\t\tentity = (Entity)  super.clone();\n\t} catch (CloneNotSupportedException e) {\n\t\te.printStackTrace();\n\t}\n\treturn entity;\n}\n```\n\n然后我写了一个工具类\n```java\npublic static List<Entity> deepCopy(List<Entity> originList) {\n\tList<Entity> entityList = new ArrayList<>();\n\tfor(Entity entity : originList) {\n\t\tentityList.add((Entity) entity.clone());\n\t}\n\n\treturn entityList;\n}\n```\n通过这个工具类实现深复制\n\t\n `IDEA CTRL+ALT+T`收获这个快捷键\n![](https://i.bmp.ovh/imgs/2019/07/9fe10225fe9a52a5.png)\n@2019年7月14日17:47:23@\n\n大创先告一段落了, 等和他们对接吧, 基本功能显示路径已经做好了.\n@2019年7月14日20:29:30@\n复用类看完了\n@2019年7月14日21:14:12@\n\n### 7月15日\n把GGO通关了, 游戏就告一段落了.\n\n### 7月16日\n```\n多态\n```\n把编程思想-多态看一下吧\n\n多态这里怎么说呢, 重要的是思想吧, 自己没用过太多, 都是一些框架需要\n@2019年7月16日08:42:35@\n\n把书里的内容过了一遍, 怎么感觉不是很实用. 但是也说了一些小问题. 继承这种东西, 自己代码里都没有用太多.\n@2019年7月16日09:25:47@\n\n改了一部分BUG, 小软件的开机启动设置修改了下, 貌似可以了.\n@2019年7月16日17:39:40@\n\n### 7月17日\n上午收拾了下,  下午的话休息了休息, 晚上去吃了顿好的, 收拾回家的东西\n\n### 7月18日\n上午坐了一上午的车, 下午到了北京, 然后把电脑的内存条换上了(现在是16G的内存了, 够用了). **难受的是, 光带了鼠标没有带鼠标的接收器!!!!!!!(我以为插件可以代替接收器, 结果插线也得要接收器... 算了吧)**\n\n#### 下午继续看了一部分 云收藏的源码看到了这个下面一个函数\n```java\npublic static void main(String[] args) {\n\tSystem.out.println(getMessage(\"1\", \"2\", \"3\", \"4\"));\n}\n\npublic static String getMessage(String template, String... keys) {\n\tint count = 0;\n\tStringBuilder templateBuilder = new StringBuilder(template);\n\tfor (String key : keys) {\n\t\ttemplateBuilder.append(key);\n\t}\n\ttemplate = templateBuilder.toString();\n\treturn template;\n}\n```\n重点不是函数的功能, 而是`String...`这不是写错了. 我去网上查了下, 这样这个函数就可以接受多个参数了\n`getMessage(\"template\", \"a\", \"b\", \"c\")` 接受参数后用 增强for循环以此取出就好\n\n`是从Java 5开始，Java语言对方法参数支持一种新写法，叫可变长度参数列表`\n\n正好在这里去搜集下每次Java更新, 所提供的新特性\n\n#### JDK5 新特性\n\n#自动装箱与拆箱\n```Java\nInteger a = new Integer(10); \n//这个问题不大\nInteger b = 100; //这里就把一个int自动转成了 integer类型(自动装箱)\n//这里用到了 Integer的 valueOf()方法 实现的自动装箱\nb += 100; //b = b + 100; 用intValue()来自动拆箱\n//实现方式 b = Integer.valueOf(b.intValue() + 200); \n```\n\n#枚举类型\n```Java\nswitch \n// switch可以 switch枚举类型\n```\n\n#静态导入\n```Java\nimport static java.lang.Math.pow; \n//静态导入的必须是静态方法\nSystem.out.println(Math.pow(2, 3)); //未使用静态导入\nSystem.out.println(pow(2, 3)); //使用静态导入\n```\n\n#可变参数\n```Java\n//可以在方法参数的类型中 加入三个`...`, 这样在方法体内可以使用for的增强循环来获得传入的多个参数.\npublic static void main(String[] args) {\n\tSystem.out.println(getMessage(\"1\", \"2\", \"3\", \"4\"));\n}\n\npublic static String getMessage(String template, String... keys) {\n\tint count = 0;\n\tStringBuilder templateBuilder = new StringBuilder(template);\n\tfor (String key : keys) {\n\t\ttemplateBuilder.append(key);\n\t}\n\ttemplate = templateBuilder.toString();\n\treturn template;\n}\n```\n\n#增强for循环\n#泛型 (Generic Type)\n#内省\n\n\n#### JDK6 新特性\n\n#Desktop类和SystemTray类\n第一个`Desktop`类\n可以用来打开系统默认浏览器浏览指定的URL\n打开系统默认邮件客户端给指定的邮箱发邮件\n用默认应用程序打开或编辑文件(比如,用记事本打开以txt为后缀名的文件)\n用系统默认的打印机打印文档\n第二个`SystemTray`类\n可以用来在系统托盘区创建一个托盘程序.\nJava的UI方面就不写太多了\n\n@2019年7月18日20:47:07@\n\n#### Springboot配置文件\n在Spring Boot中多环境配置文件名需要满足application-{profile}.properties的格式\n其中{profile}对应你的环境标识\n\n下面列举三个文件\n`application-dev.properties`：开发环境\n`application-test.properties`：测试环境\n`application-prod.properties`：生产环境\n至于哪个具体的配置文件会被加载，需要在application.properties文件中通过spring.profiles.active属性来设置，其值对应{profile}值。\n`spring.profiles.active=dev`\n\n### 7月19日\n今天的话在北京待了一天, 去看了看北方最大的漫展IDO, 怎么说呢比我想象的要小一点, 不过比徐州那个好太多了. 以后有机会的话就去南方了.\n\n## 7.20-7.26\n```\n<接口, 内部类, 持有对象>\n---七个结构型模式\n- 适配器模式\n- 桥接模式\n- 组合模式\n- 外观模式\n```\n\n### 7月20日\n今天还是胳膊有些疼, 昨天拿的东西不少, 背的也不少.走的路也不少.....\n@2019年7月20日19:39:08@\n\n现在来看一些东西吧. 上个寒假在家里留了一本Java编程思想.\n\n### 7月21日\n写了个新的小项目, 正好来练练手. 新项目单独列出一篇博客.\n\n### 7月22日\n在家里午觉睡不着我凑, 改下小项目的问题.\n@去看一下设计模式吧@\n\n#### 适配器模式\n这个设计模式怎么说呢, 挺简单的.\n就是 新建一个适配器类Adapter  引用一个需要适配的类Adaptee 这个类实现客户端的接口Target\n\n这样客户端直接调用接口 相关转换工作在接口中完成.\n\n## 7.27-8.02\n\n```\n<类型信息, 泛型>\n- 装饰模式\n- 享元模式(略过)\n- 代理模式\n```\n\n### 7月28日\n从7.23-7.25 写了个小项目, 失物招领的后端. \n总的来说有 \n#### 统一反应类型\n将所有的返回结果, 写在一个类中\n\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/%E6%9A%91%E5%81%87%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951.png)\n\n预先定义的异常信息, 则使用了enum\n\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/%E6%9A%91%E5%81%87%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952.png)\n\n封装反回数据, 使用Object\n\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/%E6%9A%91%E5%81%87%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%953.png)\n\n这样处理后就可以\n```java\nreturn new ResponseData(ExceptionMsg.DEL_FAILED);\n\nreturn new ResponseData(ExceptionMsg.DEL_FAILED);\n\nreturn  new ResponseData(ExceptionMsg.SUCCESS, lostAndFoundInfo);\n```\n\n来统一返回类型\n\n#### Spring Jpa的方便\n\n配置完毕后, 去编写相应的实体类\n```yml\nspring.datasource.url=jdbc:mysql://127.0.0.1:3306/lostandfound?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8&useSSL=true\nspring.datasource.username=root\nspring.datasource.password=root\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\n\nspring.jpa.properties.hibernate.hbm2ddl.auto=update\n\n# create：只要每次加载 Hibernate 时就都会删除上一次生成的表，然后根据 model 类再重新来生成新表. \n# create-drop：每次加载 Hibernate 时根据 model 类生成表，但是 sessionFactory 一关闭，表就自动删除。\n# update：最常用的属性，第一次加载 Hibernate 时根据 model 类会自动建立起表的结构（前提是先建立# # 好数据库），以后加载 Hibernate 时根据 model 类自动更新表结构，即使表结构改变了，但表中的行仍然存在，不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。\n#validate ：每次加载 Hibernate 时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect\n        \n```\n```java\n@Entity //这里可以通过value属性指定表名, 如果不指定则为类名\npublic class User {\n\n    @Id\n    @GeneratedValue //默认情况下会创建新表来存储id位置, 如果指定 strategy= GenerationType.IDENTITY 则会在一张表中存储位置id\n    private Long id;\n    @Column(nullable = false， unique = true)\n    private String userName;\n    @Column(nullable = false)\n    private String passWord;\n    @Column(nullable = false， unique = true)\n    private String email;\n    @Column(nullable = true， unique = true)\n    private String nickName;\n    @Column(nullable = false)\n    private String regTime;\n    //省略 getter settet 方法、构造方法  在这里getter setter 影响 Controller 的 return的内容. 有get方法才会在json中含有该项, 如果不想让该项出现在json中 则不需要写对应的get方法\n}\n```\n\n最后编写实体类对应的repository接口 继承 JpaRepository<model, Long>\n\n就可使用自带的一些方法.\n\n#### 去继续学习吧\n\n<接口, 内部类, 持有对象>\n\n重写Readable导致的bug.\n再Main方法里产生随机单词, 导致异常`BufferOverflowException` , 首先思考的是每次调用`read()`方法应该会传入一个新的`CharBuffer`吧(实际并不是, 后面说)\n\n\n```java\n// Main.java\npublic static void main(String[] args) {\n\n\tScanner scanner = new Scanner(new RandomWords(100000));\n\n\twhile (scanner.hasNext()) {\n\t\tSystem.out.println(scanner.next());\n\t}\n}\n\n// RandomWords.java\npublic class RandomWords implements Readable {\n\n\tprivate static Random random = new Random(100);\n\n\tprivate static final char[] CAPITALS =\n\t\t\t\"ABCDEFGHIGKLMNOPQRSTUVWXYZ\".toCharArray();\n\n\tprivate static final char[] LOWERS =\n\t\t\t\"abcdefghigklmnopqrstuvwxyz\".toCharArray();\n\t\n\n\tprivate int count;\n\n\tpublic RandomWords(int count) {\n\t\tthis.count = count;\n\t}\n\n\t@Override\n\tpublic int read(CharBuffer cb) throws IOException {\n\t\tif(count-- == 0) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tcb.append(CAPITALS[random.nextInt(CAPITALS.length)]);\n\n\t\tint maxCount = 4;\n\n\t\tfor (int i = 0; i < maxCount; i++) {\n\t\t\tcb.append(LOWERS[random.nextInt(LOWERS.length)]);\n\n\t\t\t//System.out.println(cb.limit() + \" - \" + cb.position());\n\t\t\tcb.append(CAPITALS[random.nextInt(CAPITALS.length)]);\n\n\t\t}\n\n\t\tcb.append(\" \");\n\t\treturn 10;\n\t}\n}\n```\n\n来到报错位置, 这一段是CharBuffer源码里的部分, 发现是由于position >= limit导致的异常, 然后查找得到这两个值得获取方法position()和limit();\n```java\nfinal int nextPutIndex() {                          // package-private\n\tif (position >= limit)\n\t\tthrow new BufferOverflowException();\n\treturn position++;\n}\n```\n在RandomWords.java代码加入 `System.out.println(cb.limit() + \" - \" + cb.position());` 位置见上文注释代码\n\n经过打印发现\n```\nAyAvFkNuM\n1024 - 1002\n1024 - 1004\n1024 - 1006\n1024 - 1008\nRcEsZqFwO\n1024 - 1012\n1024 - 1014\n1024 - 1016\n1024 - 1018\nHxEsXaStX\n1024 - 1022\n1024 - 1024\n```\nposition属性并没有随着每次调用read() 方法重置, 所以每次调用read()方法传入的是同一个 `CharBuffer`. 回到Scanner源码\n```java\n//Scanner.java\n\n//通过查找找到调用read()方法的地方\n\nprivate void readInput() {\n        if (buf.limit() == buf.capacity())\n            makeSpace();\n\n        // Prepare to receive data\n        int p = buf.position();\n        buf.position(buf.limit());\n        buf.limit(buf.capacity());\n\n        int n = 0;\n        try { //这里调用了source.read()  source就是构造方法传入的在RandomWords对象\n            n = source.read(buf);\n        } catch (IOException ioe) {\n            lastException = ioe;\n            n = -1;\n        }\n\n        if (n == -1) {\n            sourceClosed = true;\n            needInput = false;\n        }\n\n        if (n > 0)\n            needInput = false;\n\n        // Restore current position and limit for reading\n        buf.limit(buf.position());\n        buf.position(p);\n    }\n```\n\n发现其传入了`buf`参数, 查找`buf`来到\n```java\nprivate Scanner(Readable source, Pattern pattern) {\n\tassert source != null : \"source should not be null\";\n\tassert pattern != null : \"pattern should not be null\";\n\tthis.source = source;\n\tdelimPattern = pattern;\n\tbuf = CharBuffer.allocate(BUFFER_SIZE);\n\tbuf.limit(0);\n\tmatcher = delimPattern.matcher(buf);\n\tmatcher.useTransparentBounds(true);\n\tmatcher.useAnchoringBounds(false);\n\tuseLocale(Locale.getDefault(Locale.Category.FORMAT));\n}\n```\n发现是这个构造方法 对buf进行的赋值, 而\t`Scanner(Readable source)`这个构造方法也只是调用的上一个构造方法.\n\n所以问题解决了, 由于我是在一开始就实例化了一个`Scanner对象`. 导致传入`read()`方法的`buf`都是同一个 才导致的上文报错.\n\n@2019年7月28日19:18:23@\n\n囫囵吞枣的看完了接口\n看了一部分内部类. 感觉很没有实感..\n联系的太少了, 对他所说的没有感到`原来如此`\n\n### 7月29日-8月2日\n\n又写了一个二手交易的后台, 马上今天是八月二号, 这个假期也过了小一半了. \n\n最近也看了看大数据相关的, 等这几天多看看关于大数据的, 也许我会选大数据专业emmm\n@2019年8月2日20:22:20@\n去看看ElasticSearch吧, 二手交易还差一个搜索\n\n\n设置ip地址\n关闭防火墙\n关闭保护\n删除映射管理文件\n关机-->克隆四台电脑\n@2019年8月2日23:42:36@\n\n\n## 8.3-8.9\n\n### 8月3日\n\n大数据相关的删掉了, 移动到了单独的一篇博客\n\n### 8月4日\n\n大数据相关的删掉了, 移动到了单独的一篇博客\n\n### 8月8日\n\n继续学习大数据相关内容, 刷了一道算法题.待会看看Java IO流\n\n*暑期计划就到此了, 自己对于将来从事什么, 还是有些迷茫, 还是多去刷刷算法题目, 找找自己的路再走吧*","source":"_posts/大一暑假学习记录与总结.md","raw":"---\ntitle: 暑假学习记录与总结\ntags:\ncategories:\n  - 学习记录\ndate: 2019-07-13 12:13:22\n---\n<div class=\"alert-red\">では、ゲームを始(はじ)めましょう</div>\n\n自己与研究生无缘了, 不过嘛, 是好是坏我也不知道, 现在也只能多学点技术, 去工作了, 这个暑假很重要, 所以将会每天记录下.\n\n[在线图床](https://imgurl.org/)\n[设计模式主要学习](https://blog.csdn.net/lovelion/article/details/17517213)\n设计模式次要补充 -- head first java 设计模式\n\n<!--more-->\n## 总结\n\n![](暑假学习记录与总结/4.png)\n总结一下这个暑假都干了什么, 马上就要开学了.\n七月十三日到七月十九日, 这是第一周了.这一周伴随着到处参观, 收货很少了. 那时我还在主用Java, 主要的是学习了一些设计模式, 这一周的时间对我学习C++ 帮助也是有的. 暑假学习设计模式也是出于换语言的考虑. \n第一天(七月十三日)可以说是看的最多的了解了什么是耦合和解耦, 一些简单的设计模式(简单工厂, 工厂方法, 抽象工厂, 单例模式). \n第二天(七月十四日) 开始初步试验大创项目的实现, 当时遇到一个BUG, 我需要返回一个东西, 但我还是需要返回后将他删除, 首先就是将他”复制了一份”, 然后删除, 却发现返回去的都是空的,了解到了Java如何进行深拷贝.\n七月十六日看了下Java编程思想的多态部分, 然后主要时间修改网络助手的开机启动设置, 这样开机启动设置就没有问题了.\n七月十七日收拾家伙, 休息了休息准备回家, 结果虽然我确认了好几次自己有没有带全家伙, 鼠标笔记本都带上了,\n七月十八日到达北京去我姐那里暂住了, 结果发现我…..光带回了一个鼠标, 鼠标的接收器还在USB分线器上(吐血) 然后开始了一个开源项目的阅读. 云收藏(SpringBoot框架). 发现了自己没有看懂的东西(Stirng ...), 就去了解下JDK从5-8每次更新加入的内容,了解到那个叫做可变参数需要搭配增强for循环使用\n七月十九日-七月二十日我终于实现了自己理想….怎么说呢北方最大的漫展依然没有我想象的大, 等我有机会既定要去一次南方\n\n七月二十一日到七月二十七日写了个后端练手(一个失物招领) . 使用了丝袜哥写Api文档, SpringJpa作为持久层? 这几天放松了玩了几天游戏可惜了.\n七月二十八日总结两个小项目比较靠近项目的地方, 统一返回类型, 预定义数据, SpringJpa.\n.学习了 接口 内部类 持有对象. 通过查看源码解决了一个Bug,\n七月二十九日到八月二日 编写二手交易后台.\n\n想去了解下大数据相关内容\n八月三日到八月九日 看了下关于大数据的内容, 并不是很感兴趣.\n八月十日到八月十五日 主要是写算法题目, 然后寻找自己是佛要从事游戏服务器编程\n八月十六日到八月二十四日 上午复习高数, 下午看C++\n@2019年8月24日18:21:07@\n\n\n## 大纲\n设计模式不求多, 但求会用, 极大概率调整设计模式的学习.\n此外需要刷一些常用的算法\n\n```\n7.13-7.19\n<复用类, 多态>\n---六个创建型模式\n- 简单工厂模式\n- 工厂方法模式\n- 抽象工厂模式\n- 单例模式\n- 原型模式(略过)\n- 建造者模式(略过)\n7.20-7.26\n<接口, 内部类, 持有对象>\n---七个结构型模式\n- 适配器模式\n- 桥接模式\n- 组合模式\n- 外观模式\n7.27-8.02\n<类型信息, 泛型>\n- 装饰模式\n- 享元模式(略过)\n- 代理模式\n8.03-8.09\n<数组, 容器深入研究>\n---十一个行为型模式\n- 职责链模式\n- 命令模式\n- 解释器模式(略过)\n- 迭代器模式\n- 中介者模式(略过)\n- 备忘录模式(略过)\n- 观察者模式\n8.10-8.16\n<IO, 枚举类型>\n- 状态模式\n- 策略模式\n- 模板方法模式\n- 访问者模(略过)\n8.17-8.23\n<注解, 并发>\n\n```\n# では、ゲームを始(はじ)めましょう\n## 7.13-7.19\n```\n7.13-7.19\n<复用类, 多态>\n---六个创建型模式\n- 简单工厂模式\n- 工厂方法模式\n- 抽象工厂模式\n- 单例模式\n```\n### 7月13日\n\n```\n- 简单工厂模式\n- 工厂方法模式\n- 抽象工厂模式\n- 单例模式\n```\n\n2019年7月13日12:21:17\n上午参观参观参观...... 重置了下, 这个暑期表格.今天开始第一天的打卡.下午还有参观, 然后就可以开始学了\n\n下午有b站血族直播\n下午看了一个项目, 自己不会的还是太多,,,,,, 给了源码都看不太懂.\n还是先继续看几个设计模式吧, 设计模式目前想的是, 了解大概, 等到时用到了再去详细学习\n\n#### 耦合与解耦\n耦合: 两个或两个以上的体系之间互相结合, 互相影响, 产生的一个联合起来解决问题的体系.\n这种体系, 不利于修改, 修改一个体系可能会影响到另一个体系, 使得另一个体系需要做出修改.\n解耦: 将体系之间的联系降到最低, 各司其职, 修改本身的时候, 不需要去动其他的体系\n\n#### 简单工厂模式\n简单工厂模式不属于GoF 23种设计模式\n通过设计一个父类(产品类), 由他派生出多个子类(具体产品类), 通过一个工厂类, 提供给工厂类生产方法不同的参数, 由工厂类return相应的子类, 由父类接受.\n\n解决问题: 通过工厂类, 只需要记住参数, 就可以产生相应的子类,\n存在问题: 不符合开闭原则, 每次产生新的产品, 都需要去修改相应的工厂生产方法.\n\n#### 工厂方法模式\n与简单工厂有些相似之处: 均存在一个产品父类和多个产品子类.\n不同之处在于 工厂方法模式, 设置了工厂父类, 通过派生出不同的工厂子类来return相应的子类.\n\n解决问题: 解决了简单工厂模式的开闭原则, 每次产生新的产品, 只需要派生一个相应的子类即可\n存在问题: 系统中由于新产品的产生, 类的个数将会成对增加, 会有更多的类需要处理\n\n#### 抽象工厂模式\n抽象工厂模式解决了工厂方法模式某些情况下 导致的类成对增加情况\n一个抽象工厂里包含了这个\"工厂\"的所有产品--这对应了一个产品族\n可以派生出多个工厂来实现多品牌产品--形成了一个等级结构\n![引用自上文博客](https://img-blog.csdn.net/20130713162941328?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTG92ZUxpb24=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n#### 单例模式\n这个模式理解起来很容易, 但是效果却十分的不错, 之前用过一次所以详细写一下.\n**饿汉式单例模式**\n饿汉式单例模式 无延迟加载 不需要解决多线程问题\n```java\n/**\n * @ClassName singletonpattern.Connect\n * @Description\n * 饿汉式单例模式 无延迟加载 不需要解决多线程问题\n * Author lsmg\n * Date 2019/5/21 13:25\n * @Version 1.0\n **/\npublic class Connect {\n    private static final Connect instance = new Connect();\n\n    private Connect(){\n\n    }\n\n    public static Connect getInstance(){\n        return instance;\n    }\n}\n```\n**懒汉式单例模式**\n```java\npackage singletonpattern;\n懒汉式单例模式 实现了延迟加载,但需要解决多线程问题\n/**\n * @ClassName singletonpattern.Connect1_2\n * @Description TODO\n * 懒汉式单例模式 实现了延迟加载,但需要解决多线程问题\n * Author lsmg\n * Date 2019/5/21 13:30\n * @Version 1.0\n **/\npublic class Connect1_2 {\n    private static Connect1_2  connect1_2;\n\n    private Connect1_2(){}\n\n    //这种方式会造成多线程访问的时候实例化多个对象\n//    public  static singletonpattern.Connect1_2 getInstance(){\n//        if(connect1_2 == null){\n//            connect1_2 = new singletonpattern.Connect1_2();\n//        }\n//\n//        return connect1_2;\n//    }\n\n    //这种方式虽然确保了只有一个线程进入, 但是降低了多线程的性能\n//    public synchronized static singletonpattern.Connect1_2 getInstance(){\n//        if(connect1_2 == null){\n//            connect1_2 = new singletonpattern.Connect1_2();\n//        }\n//\n//        return connect1_2;\n//    }\n\n\n    //这种方式需要在private \"volatile\" static singletonpattern.Connect1_2 connect1_2 这样同样降低效率\n//    public synchronized static singletonpattern.Connect1_2 getInstance(){\n//        if(connect1_2 == null){\n//\n//            synchronized (singletonpattern.Connect1_2.class){\n//                if(connect1_2 == null){\n//                    connect1_2 = new singletonpattern.Connect1_2();\n//                }\n//            }\n//\n//        }\n//\n//        return connect1_2;\n//    }\n```\n**使用IoDH方法结合二者优点**\n由于静态单例对象没有作为Singleton的成员变量直接初始化, 当调用`getInstance()`方法的时候, 会加载内部类HolderClass, 其中的static 由Java虚拟机保证线程安全性, 这样就结合了`饿汉式单例模式的线程安全`和`懒汉式单例模式的延迟加载`\n\n```java\n//Initialization on Demand Holder\nclass Singleton {\n\tprivate Singleton() {\n\t}\n\t\n\tprivate static class HolderClass {\n            private final static Singleton instance = new Singleton();\n\t}\n\t\n\tpublic static Singleton getInstance() {\n\t    return HolderClass.instance;\n\t}\n\t\n\tpublic static void main(String args[]) {\n\t    Singleton s1, s2; \n        s1 = Singleton.getInstance();\n\t    s2 = Singleton.getInstance();\n\t    System.out.println(s1==s2);\n\t}\n}\n```\n@2019年7月13日19:07:46 设计模式暂时到这里, 去写写代码吧@\n\n### 7月14日\n```\n复用类看了一部分, 目前还差final部分\n```\n@2019年7月14日09:43:46@\n\n下午看了看大创项目的实现, 选择了高德地图api. 中午的时候太困了 搞得我没有仔细看\n目前决定采用[动态延展路径](https://lbs.amap.com/api/amap-ui/demos/amap-ui-pathsimplifier/expand-path)  解决问题, path由ajax 异步获取更新.\n#### 小插曲-Java List深浅拷贝\n```java\n@Service(\"droneStatusService\")\npublic class DroneStatusServiceImpl implements DroneStatusService {\n\n    private Logger logger = LoggerFactory.getLogger(DroneStatusServiceImpl.class);\n\n    private List<DroneStatus> droneStatusList = new ArrayList<>();\n/**删除其他代码**/\n    @Override\n    public List<DroneStatus> listDroneStatus() {\n        List<DroneStatus> theDroneStatusList = droneStatusList;\n\t\tdroneStatusList.clear(); /**这样导致了我的return list一直为空**/\n        logger.info(\"清除一次信息list共\"+theDroneStatusList.size()+\"条\");\n\n        return theDroneStatusList;\n    }\n}\n```\n第一印象这样写, 排查方法就是想到了关于Java引用的部分.\n对于list的拷贝 `遍历循环复制`和`List的构造方法`和`list.addAll()`以及`System.arraycopy()` 这些全部是`浅复制`他们指向了同一片内存区域\n\n深复制的实现方法另实体类 实现Cloneable接口 重写clone方法\n```java\n@Override\npublic Object clone() {\n\tEntity entity = null;\n\ttry {\n\t\tentity = (Entity)  super.clone();\n\t} catch (CloneNotSupportedException e) {\n\t\te.printStackTrace();\n\t}\n\treturn entity;\n}\n```\n\n然后我写了一个工具类\n```java\npublic static List<Entity> deepCopy(List<Entity> originList) {\n\tList<Entity> entityList = new ArrayList<>();\n\tfor(Entity entity : originList) {\n\t\tentityList.add((Entity) entity.clone());\n\t}\n\n\treturn entityList;\n}\n```\n通过这个工具类实现深复制\n\t\n `IDEA CTRL+ALT+T`收获这个快捷键\n![](https://i.bmp.ovh/imgs/2019/07/9fe10225fe9a52a5.png)\n@2019年7月14日17:47:23@\n\n大创先告一段落了, 等和他们对接吧, 基本功能显示路径已经做好了.\n@2019年7月14日20:29:30@\n复用类看完了\n@2019年7月14日21:14:12@\n\n### 7月15日\n把GGO通关了, 游戏就告一段落了.\n\n### 7月16日\n```\n多态\n```\n把编程思想-多态看一下吧\n\n多态这里怎么说呢, 重要的是思想吧, 自己没用过太多, 都是一些框架需要\n@2019年7月16日08:42:35@\n\n把书里的内容过了一遍, 怎么感觉不是很实用. 但是也说了一些小问题. 继承这种东西, 自己代码里都没有用太多.\n@2019年7月16日09:25:47@\n\n改了一部分BUG, 小软件的开机启动设置修改了下, 貌似可以了.\n@2019年7月16日17:39:40@\n\n### 7月17日\n上午收拾了下,  下午的话休息了休息, 晚上去吃了顿好的, 收拾回家的东西\n\n### 7月18日\n上午坐了一上午的车, 下午到了北京, 然后把电脑的内存条换上了(现在是16G的内存了, 够用了). **难受的是, 光带了鼠标没有带鼠标的接收器!!!!!!!(我以为插件可以代替接收器, 结果插线也得要接收器... 算了吧)**\n\n#### 下午继续看了一部分 云收藏的源码看到了这个下面一个函数\n```java\npublic static void main(String[] args) {\n\tSystem.out.println(getMessage(\"1\", \"2\", \"3\", \"4\"));\n}\n\npublic static String getMessage(String template, String... keys) {\n\tint count = 0;\n\tStringBuilder templateBuilder = new StringBuilder(template);\n\tfor (String key : keys) {\n\t\ttemplateBuilder.append(key);\n\t}\n\ttemplate = templateBuilder.toString();\n\treturn template;\n}\n```\n重点不是函数的功能, 而是`String...`这不是写错了. 我去网上查了下, 这样这个函数就可以接受多个参数了\n`getMessage(\"template\", \"a\", \"b\", \"c\")` 接受参数后用 增强for循环以此取出就好\n\n`是从Java 5开始，Java语言对方法参数支持一种新写法，叫可变长度参数列表`\n\n正好在这里去搜集下每次Java更新, 所提供的新特性\n\n#### JDK5 新特性\n\n#自动装箱与拆箱\n```Java\nInteger a = new Integer(10); \n//这个问题不大\nInteger b = 100; //这里就把一个int自动转成了 integer类型(自动装箱)\n//这里用到了 Integer的 valueOf()方法 实现的自动装箱\nb += 100; //b = b + 100; 用intValue()来自动拆箱\n//实现方式 b = Integer.valueOf(b.intValue() + 200); \n```\n\n#枚举类型\n```Java\nswitch \n// switch可以 switch枚举类型\n```\n\n#静态导入\n```Java\nimport static java.lang.Math.pow; \n//静态导入的必须是静态方法\nSystem.out.println(Math.pow(2, 3)); //未使用静态导入\nSystem.out.println(pow(2, 3)); //使用静态导入\n```\n\n#可变参数\n```Java\n//可以在方法参数的类型中 加入三个`...`, 这样在方法体内可以使用for的增强循环来获得传入的多个参数.\npublic static void main(String[] args) {\n\tSystem.out.println(getMessage(\"1\", \"2\", \"3\", \"4\"));\n}\n\npublic static String getMessage(String template, String... keys) {\n\tint count = 0;\n\tStringBuilder templateBuilder = new StringBuilder(template);\n\tfor (String key : keys) {\n\t\ttemplateBuilder.append(key);\n\t}\n\ttemplate = templateBuilder.toString();\n\treturn template;\n}\n```\n\n#增强for循环\n#泛型 (Generic Type)\n#内省\n\n\n#### JDK6 新特性\n\n#Desktop类和SystemTray类\n第一个`Desktop`类\n可以用来打开系统默认浏览器浏览指定的URL\n打开系统默认邮件客户端给指定的邮箱发邮件\n用默认应用程序打开或编辑文件(比如,用记事本打开以txt为后缀名的文件)\n用系统默认的打印机打印文档\n第二个`SystemTray`类\n可以用来在系统托盘区创建一个托盘程序.\nJava的UI方面就不写太多了\n\n@2019年7月18日20:47:07@\n\n#### Springboot配置文件\n在Spring Boot中多环境配置文件名需要满足application-{profile}.properties的格式\n其中{profile}对应你的环境标识\n\n下面列举三个文件\n`application-dev.properties`：开发环境\n`application-test.properties`：测试环境\n`application-prod.properties`：生产环境\n至于哪个具体的配置文件会被加载，需要在application.properties文件中通过spring.profiles.active属性来设置，其值对应{profile}值。\n`spring.profiles.active=dev`\n\n### 7月19日\n今天的话在北京待了一天, 去看了看北方最大的漫展IDO, 怎么说呢比我想象的要小一点, 不过比徐州那个好太多了. 以后有机会的话就去南方了.\n\n## 7.20-7.26\n```\n<接口, 内部类, 持有对象>\n---七个结构型模式\n- 适配器模式\n- 桥接模式\n- 组合模式\n- 外观模式\n```\n\n### 7月20日\n今天还是胳膊有些疼, 昨天拿的东西不少, 背的也不少.走的路也不少.....\n@2019年7月20日19:39:08@\n\n现在来看一些东西吧. 上个寒假在家里留了一本Java编程思想.\n\n### 7月21日\n写了个新的小项目, 正好来练练手. 新项目单独列出一篇博客.\n\n### 7月22日\n在家里午觉睡不着我凑, 改下小项目的问题.\n@去看一下设计模式吧@\n\n#### 适配器模式\n这个设计模式怎么说呢, 挺简单的.\n就是 新建一个适配器类Adapter  引用一个需要适配的类Adaptee 这个类实现客户端的接口Target\n\n这样客户端直接调用接口 相关转换工作在接口中完成.\n\n## 7.27-8.02\n\n```\n<类型信息, 泛型>\n- 装饰模式\n- 享元模式(略过)\n- 代理模式\n```\n\n### 7月28日\n从7.23-7.25 写了个小项目, 失物招领的后端. \n总的来说有 \n#### 统一反应类型\n将所有的返回结果, 写在一个类中\n\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/%E6%9A%91%E5%81%87%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951.png)\n\n预先定义的异常信息, 则使用了enum\n\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/%E6%9A%91%E5%81%87%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952.png)\n\n封装反回数据, 使用Object\n\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/%E6%9A%91%E5%81%87%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%953.png)\n\n这样处理后就可以\n```java\nreturn new ResponseData(ExceptionMsg.DEL_FAILED);\n\nreturn new ResponseData(ExceptionMsg.DEL_FAILED);\n\nreturn  new ResponseData(ExceptionMsg.SUCCESS, lostAndFoundInfo);\n```\n\n来统一返回类型\n\n#### Spring Jpa的方便\n\n配置完毕后, 去编写相应的实体类\n```yml\nspring.datasource.url=jdbc:mysql://127.0.0.1:3306/lostandfound?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8&useSSL=true\nspring.datasource.username=root\nspring.datasource.password=root\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\n\nspring.jpa.properties.hibernate.hbm2ddl.auto=update\n\n# create：只要每次加载 Hibernate 时就都会删除上一次生成的表，然后根据 model 类再重新来生成新表. \n# create-drop：每次加载 Hibernate 时根据 model 类生成表，但是 sessionFactory 一关闭，表就自动删除。\n# update：最常用的属性，第一次加载 Hibernate 时根据 model 类会自动建立起表的结构（前提是先建立# # 好数据库），以后加载 Hibernate 时根据 model 类自动更新表结构，即使表结构改变了，但表中的行仍然存在，不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。\n#validate ：每次加载 Hibernate 时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect\n        \n```\n```java\n@Entity //这里可以通过value属性指定表名, 如果不指定则为类名\npublic class User {\n\n    @Id\n    @GeneratedValue //默认情况下会创建新表来存储id位置, 如果指定 strategy= GenerationType.IDENTITY 则会在一张表中存储位置id\n    private Long id;\n    @Column(nullable = false， unique = true)\n    private String userName;\n    @Column(nullable = false)\n    private String passWord;\n    @Column(nullable = false， unique = true)\n    private String email;\n    @Column(nullable = true， unique = true)\n    private String nickName;\n    @Column(nullable = false)\n    private String regTime;\n    //省略 getter settet 方法、构造方法  在这里getter setter 影响 Controller 的 return的内容. 有get方法才会在json中含有该项, 如果不想让该项出现在json中 则不需要写对应的get方法\n}\n```\n\n最后编写实体类对应的repository接口 继承 JpaRepository<model, Long>\n\n就可使用自带的一些方法.\n\n#### 去继续学习吧\n\n<接口, 内部类, 持有对象>\n\n重写Readable导致的bug.\n再Main方法里产生随机单词, 导致异常`BufferOverflowException` , 首先思考的是每次调用`read()`方法应该会传入一个新的`CharBuffer`吧(实际并不是, 后面说)\n\n\n```java\n// Main.java\npublic static void main(String[] args) {\n\n\tScanner scanner = new Scanner(new RandomWords(100000));\n\n\twhile (scanner.hasNext()) {\n\t\tSystem.out.println(scanner.next());\n\t}\n}\n\n// RandomWords.java\npublic class RandomWords implements Readable {\n\n\tprivate static Random random = new Random(100);\n\n\tprivate static final char[] CAPITALS =\n\t\t\t\"ABCDEFGHIGKLMNOPQRSTUVWXYZ\".toCharArray();\n\n\tprivate static final char[] LOWERS =\n\t\t\t\"abcdefghigklmnopqrstuvwxyz\".toCharArray();\n\t\n\n\tprivate int count;\n\n\tpublic RandomWords(int count) {\n\t\tthis.count = count;\n\t}\n\n\t@Override\n\tpublic int read(CharBuffer cb) throws IOException {\n\t\tif(count-- == 0) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tcb.append(CAPITALS[random.nextInt(CAPITALS.length)]);\n\n\t\tint maxCount = 4;\n\n\t\tfor (int i = 0; i < maxCount; i++) {\n\t\t\tcb.append(LOWERS[random.nextInt(LOWERS.length)]);\n\n\t\t\t//System.out.println(cb.limit() + \" - \" + cb.position());\n\t\t\tcb.append(CAPITALS[random.nextInt(CAPITALS.length)]);\n\n\t\t}\n\n\t\tcb.append(\" \");\n\t\treturn 10;\n\t}\n}\n```\n\n来到报错位置, 这一段是CharBuffer源码里的部分, 发现是由于position >= limit导致的异常, 然后查找得到这两个值得获取方法position()和limit();\n```java\nfinal int nextPutIndex() {                          // package-private\n\tif (position >= limit)\n\t\tthrow new BufferOverflowException();\n\treturn position++;\n}\n```\n在RandomWords.java代码加入 `System.out.println(cb.limit() + \" - \" + cb.position());` 位置见上文注释代码\n\n经过打印发现\n```\nAyAvFkNuM\n1024 - 1002\n1024 - 1004\n1024 - 1006\n1024 - 1008\nRcEsZqFwO\n1024 - 1012\n1024 - 1014\n1024 - 1016\n1024 - 1018\nHxEsXaStX\n1024 - 1022\n1024 - 1024\n```\nposition属性并没有随着每次调用read() 方法重置, 所以每次调用read()方法传入的是同一个 `CharBuffer`. 回到Scanner源码\n```java\n//Scanner.java\n\n//通过查找找到调用read()方法的地方\n\nprivate void readInput() {\n        if (buf.limit() == buf.capacity())\n            makeSpace();\n\n        // Prepare to receive data\n        int p = buf.position();\n        buf.position(buf.limit());\n        buf.limit(buf.capacity());\n\n        int n = 0;\n        try { //这里调用了source.read()  source就是构造方法传入的在RandomWords对象\n            n = source.read(buf);\n        } catch (IOException ioe) {\n            lastException = ioe;\n            n = -1;\n        }\n\n        if (n == -1) {\n            sourceClosed = true;\n            needInput = false;\n        }\n\n        if (n > 0)\n            needInput = false;\n\n        // Restore current position and limit for reading\n        buf.limit(buf.position());\n        buf.position(p);\n    }\n```\n\n发现其传入了`buf`参数, 查找`buf`来到\n```java\nprivate Scanner(Readable source, Pattern pattern) {\n\tassert source != null : \"source should not be null\";\n\tassert pattern != null : \"pattern should not be null\";\n\tthis.source = source;\n\tdelimPattern = pattern;\n\tbuf = CharBuffer.allocate(BUFFER_SIZE);\n\tbuf.limit(0);\n\tmatcher = delimPattern.matcher(buf);\n\tmatcher.useTransparentBounds(true);\n\tmatcher.useAnchoringBounds(false);\n\tuseLocale(Locale.getDefault(Locale.Category.FORMAT));\n}\n```\n发现是这个构造方法 对buf进行的赋值, 而\t`Scanner(Readable source)`这个构造方法也只是调用的上一个构造方法.\n\n所以问题解决了, 由于我是在一开始就实例化了一个`Scanner对象`. 导致传入`read()`方法的`buf`都是同一个 才导致的上文报错.\n\n@2019年7月28日19:18:23@\n\n囫囵吞枣的看完了接口\n看了一部分内部类. 感觉很没有实感..\n联系的太少了, 对他所说的没有感到`原来如此`\n\n### 7月29日-8月2日\n\n又写了一个二手交易的后台, 马上今天是八月二号, 这个假期也过了小一半了. \n\n最近也看了看大数据相关的, 等这几天多看看关于大数据的, 也许我会选大数据专业emmm\n@2019年8月2日20:22:20@\n去看看ElasticSearch吧, 二手交易还差一个搜索\n\n\n设置ip地址\n关闭防火墙\n关闭保护\n删除映射管理文件\n关机-->克隆四台电脑\n@2019年8月2日23:42:36@\n\n\n## 8.3-8.9\n\n### 8月3日\n\n大数据相关的删掉了, 移动到了单独的一篇博客\n\n### 8月4日\n\n大数据相关的删掉了, 移动到了单独的一篇博客\n\n### 8月8日\n\n继续学习大数据相关内容, 刷了一道算法题.待会看看Java IO流\n\n*暑期计划就到此了, 自己对于将来从事什么, 还是有些迷茫, 还是多去刷刷算法题目, 找找自己的路再走吧*","slug":"大一暑假学习记录与总结","published":1,"updated":"2020-02-07T08:34:22.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucz50023souod6xb0uwv","content":"<div class=\"alert-red\">では、ゲームを始(はじ)めましょう</div>\n\n<p>自己与研究生无缘了, 不过嘛, 是好是坏我也不知道, 现在也只能多学点技术, 去工作了, 这个暑假很重要, 所以将会每天记录下.</p>\n<p><a href=\"https://imgurl.org/\" target=\"_blank\" rel=\"noopener\">在线图床</a><br><a href=\"https://blog.csdn.net/lovelion/article/details/17517213\" target=\"_blank\" rel=\"noopener\">设计模式主要学习</a><br>设计模式次要补充 – head first java 设计模式</p>\n<a id=\"more\"></a>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><img src=\"%E6%9A%91%E5%81%87%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B8%8E%E6%80%BB%E7%BB%93/4.png\" alt=\"\"><br>总结一下这个暑假都干了什么, 马上就要开学了.<br>七月十三日到七月十九日, 这是第一周了.这一周伴随着到处参观, 收货很少了. 那时我还在主用Java, 主要的是学习了一些设计模式, 这一周的时间对我学习C++ 帮助也是有的. 暑假学习设计模式也是出于换语言的考虑.<br>第一天(七月十三日)可以说是看的最多的了解了什么是耦合和解耦, 一些简单的设计模式(简单工厂, 工厂方法, 抽象工厂, 单例模式).<br>第二天(七月十四日) 开始初步试验大创项目的实现, 当时遇到一个BUG, 我需要返回一个东西, 但我还是需要返回后将他删除, 首先就是将他”复制了一份”, 然后删除, 却发现返回去的都是空的,了解到了Java如何进行深拷贝.<br>七月十六日看了下Java编程思想的多态部分, 然后主要时间修改网络助手的开机启动设置, 这样开机启动设置就没有问题了.<br>七月十七日收拾家伙, 休息了休息准备回家, 结果虽然我确认了好几次自己有没有带全家伙, 鼠标笔记本都带上了,<br>七月十八日到达北京去我姐那里暂住了, 结果发现我…..光带回了一个鼠标, 鼠标的接收器还在USB分线器上(吐血) 然后开始了一个开源项目的阅读. 云收藏(SpringBoot框架). 发现了自己没有看懂的东西(Stirng …), 就去了解下JDK从5-8每次更新加入的内容,了解到那个叫做可变参数需要搭配增强for循环使用<br>七月十九日-七月二十日我终于实现了自己理想….怎么说呢北方最大的漫展依然没有我想象的大, 等我有机会既定要去一次南方</p>\n<p>七月二十一日到七月二十七日写了个后端练手(一个失物招领) . 使用了丝袜哥写Api文档, SpringJpa作为持久层? 这几天放松了玩了几天游戏可惜了.<br>七月二十八日总结两个小项目比较靠近项目的地方, 统一返回类型, 预定义数据, SpringJpa.<br>.学习了 接口 内部类 持有对象. 通过查看源码解决了一个Bug,<br>七月二十九日到八月二日 编写二手交易后台.</p>\n<p>想去了解下大数据相关内容<br>八月三日到八月九日 看了下关于大数据的内容, 并不是很感兴趣.<br>八月十日到八月十五日 主要是写算法题目, 然后寻找自己是佛要从事游戏服务器编程<br>八月十六日到八月二十四日 上午复习高数, 下午看C++<br>@2019年8月24日18:21:07@</p>\n<h2 id=\"大纲\"><a href=\"#大纲\" class=\"headerlink\" title=\"大纲\"></a>大纲</h2><p>设计模式不求多, 但求会用, 极大概率调整设计模式的学习.<br>此外需要刷一些常用的算法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7.13-7.19</span><br><span class=\"line\">&lt;复用类, 多态&gt;</span><br><span class=\"line\">---六个创建型模式</span><br><span class=\"line\">- 简单工厂模式</span><br><span class=\"line\">- 工厂方法模式</span><br><span class=\"line\">- 抽象工厂模式</span><br><span class=\"line\">- 单例模式</span><br><span class=\"line\">- 原型模式(略过)</span><br><span class=\"line\">- 建造者模式(略过)</span><br><span class=\"line\">7.20-7.26</span><br><span class=\"line\">&lt;接口, 内部类, 持有对象&gt;</span><br><span class=\"line\">---七个结构型模式</span><br><span class=\"line\">- 适配器模式</span><br><span class=\"line\">- 桥接模式</span><br><span class=\"line\">- 组合模式</span><br><span class=\"line\">- 外观模式</span><br><span class=\"line\">7.27-8.02</span><br><span class=\"line\">&lt;类型信息, 泛型&gt;</span><br><span class=\"line\">- 装饰模式</span><br><span class=\"line\">- 享元模式(略过)</span><br><span class=\"line\">- 代理模式</span><br><span class=\"line\">8.03-8.09</span><br><span class=\"line\">&lt;数组, 容器深入研究&gt;</span><br><span class=\"line\">---十一个行为型模式</span><br><span class=\"line\">- 职责链模式</span><br><span class=\"line\">- 命令模式</span><br><span class=\"line\">- 解释器模式(略过)</span><br><span class=\"line\">- 迭代器模式</span><br><span class=\"line\">- 中介者模式(略过)</span><br><span class=\"line\">- 备忘录模式(略过)</span><br><span class=\"line\">- 观察者模式</span><br><span class=\"line\">8.10-8.16</span><br><span class=\"line\">&lt;IO, 枚举类型&gt;</span><br><span class=\"line\">- 状态模式</span><br><span class=\"line\">- 策略模式</span><br><span class=\"line\">- 模板方法模式</span><br><span class=\"line\">- 访问者模(略过)</span><br><span class=\"line\">8.17-8.23</span><br><span class=\"line\">&lt;注解, 并发&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"では、ゲームを始-はじ-めましょう\"><a href=\"#では、ゲームを始-はじ-めましょう\" class=\"headerlink\" title=\"では、ゲームを始(はじ)めましょう\"></a>では、ゲームを始(はじ)めましょう</h1><h2 id=\"7-13-7-19\"><a href=\"#7-13-7-19\" class=\"headerlink\" title=\"7.13-7.19\"></a>7.13-7.19</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7.13-7.19</span><br><span class=\"line\">&lt;复用类, 多态&gt;</span><br><span class=\"line\">---六个创建型模式</span><br><span class=\"line\">- 简单工厂模式</span><br><span class=\"line\">- 工厂方法模式</span><br><span class=\"line\">- 抽象工厂模式</span><br><span class=\"line\">- 单例模式</span><br></pre></td></tr></table></figure>\n<h3 id=\"7月13日\"><a href=\"#7月13日\" class=\"headerlink\" title=\"7月13日\"></a>7月13日</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 简单工厂模式</span><br><span class=\"line\">- 工厂方法模式</span><br><span class=\"line\">- 抽象工厂模式</span><br><span class=\"line\">- 单例模式</span><br></pre></td></tr></table></figure>\n\n<p>2019年7月13日12:21:17<br>上午参观参观参观…… 重置了下, 这个暑期表格.今天开始第一天的打卡.下午还有参观, 然后就可以开始学了</p>\n<p>下午有b站血族直播<br>下午看了一个项目, 自己不会的还是太多,,,,,, 给了源码都看不太懂.<br>还是先继续看几个设计模式吧, 设计模式目前想的是, 了解大概, 等到时用到了再去详细学习</p>\n<h4 id=\"耦合与解耦\"><a href=\"#耦合与解耦\" class=\"headerlink\" title=\"耦合与解耦\"></a>耦合与解耦</h4><p>耦合: 两个或两个以上的体系之间互相结合, 互相影响, 产生的一个联合起来解决问题的体系.<br>这种体系, 不利于修改, 修改一个体系可能会影响到另一个体系, 使得另一个体系需要做出修改.<br>解耦: 将体系之间的联系降到最低, 各司其职, 修改本身的时候, 不需要去动其他的体系</p>\n<h4 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h4><p>简单工厂模式不属于GoF 23种设计模式<br>通过设计一个父类(产品类), 由他派生出多个子类(具体产品类), 通过一个工厂类, 提供给工厂类生产方法不同的参数, 由工厂类return相应的子类, 由父类接受.</p>\n<p>解决问题: 通过工厂类, 只需要记住参数, 就可以产生相应的子类,<br>存在问题: 不符合开闭原则, 每次产生新的产品, 都需要去修改相应的工厂生产方法.</p>\n<h4 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h4><p>与简单工厂有些相似之处: 均存在一个产品父类和多个产品子类.<br>不同之处在于 工厂方法模式, 设置了工厂父类, 通过派生出不同的工厂子类来return相应的子类.</p>\n<p>解决问题: 解决了简单工厂模式的开闭原则, 每次产生新的产品, 只需要派生一个相应的子类即可<br>存在问题: 系统中由于新产品的产生, 类的个数将会成对增加, 会有更多的类需要处理</p>\n<h4 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h4><p>抽象工厂模式解决了工厂方法模式某些情况下 导致的类成对增加情况<br>一个抽象工厂里包含了这个”工厂”的所有产品–这对应了一个产品族<br>可以派生出多个工厂来实现多品牌产品–形成了一个等级结构<br><img src=\"https://img-blog.csdn.net/20130713162941328?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTG92ZUxpb24=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"引用自上文博客\"></p>\n<h4 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h4><p>这个模式理解起来很容易, 但是效果却十分的不错, 之前用过一次所以详细写一下.<br><strong>饿汉式单例模式</strong><br>饿汉式单例模式 无延迟加载 不需要解决多线程问题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> singletonpattern.Connect</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> * 饿汉式单例模式 无延迟加载 不需要解决多线程问题</span></span><br><span class=\"line\"><span class=\"comment\"> * Author lsmg</span></span><br><span class=\"line\"><span class=\"comment\"> * Date 2019/5/21 13:25</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Connect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Connect instance = <span class=\"keyword\">new</span> Connect();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Connect</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connect <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>懒汉式单例模式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> singletonpattern;</span><br><span class=\"line\">懒汉式单例模式 实现了延迟加载,但需要解决多线程问题</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> singletonpattern.Connect1_2</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> TODO</span></span><br><span class=\"line\"><span class=\"comment\"> * 懒汉式单例模式 实现了延迟加载,但需要解决多线程问题</span></span><br><span class=\"line\"><span class=\"comment\"> * Author lsmg</span></span><br><span class=\"line\"><span class=\"comment\"> * Date 2019/5/21 13:30</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Connect1_2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Connect1_2  connect1_2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Connect1_2</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这种方式会造成多线程访问的时候实例化多个对象</span></span><br><span class=\"line\"><span class=\"comment\">//    public  static singletonpattern.Connect1_2 getInstance()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        if(connect1_2 == null)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            connect1_2 = new singletonpattern.Connect1_2();</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//        return connect1_2;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这种方式虽然确保了只有一个线程进入, 但是降低了多线程的性能</span></span><br><span class=\"line\"><span class=\"comment\">//    public synchronized static singletonpattern.Connect1_2 getInstance()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        if(connect1_2 == null)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            connect1_2 = new singletonpattern.Connect1_2();</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//        return connect1_2;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这种方式需要在private \"volatile\" static singletonpattern.Connect1_2 connect1_2 这样同样降低效率</span></span><br><span class=\"line\"><span class=\"comment\">//    public synchronized static singletonpattern.Connect1_2 getInstance()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        if(connect1_2 == null)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//            synchronized (singletonpattern.Connect1_2.class)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                if(connect1_2 == null)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                    connect1_2 = new singletonpattern.Connect1_2();</span></span><br><span class=\"line\"><span class=\"comment\">//                &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//        return connect1_2;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong>使用IoDH方法结合二者优点</strong><br>由于静态单例对象没有作为Singleton的成员变量直接初始化, 当调用<code>getInstance()</code>方法的时候, 会加载内部类HolderClass, 其中的static 由Java虚拟机保证线程安全性, 这样就结合了<code>饿汉式单例模式的线程安全</code>和<code>懒汉式单例模式的延迟加载</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Initialization on Demand Holder</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HolderClass</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> HolderClass.instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">\t    Singleton s1, s2; </span><br><span class=\"line\">        s1 = Singleton.getInstance();</span><br><span class=\"line\">\t    s2 = Singleton.getInstance();</span><br><span class=\"line\">\t    System.out.println(s1==s2);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>@2019年7月13日19:07:46 设计模式暂时到这里, 去写写代码吧@</p>\n<h3 id=\"7月14日\"><a href=\"#7月14日\" class=\"headerlink\" title=\"7月14日\"></a>7月14日</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">复用类看了一部分, 目前还差final部分</span><br></pre></td></tr></table></figure>\n<p>@2019年7月14日09:43:46@</p>\n<p>下午看了看大创项目的实现, 选择了高德地图api. 中午的时候太困了 搞得我没有仔细看<br>目前决定采用<a href=\"https://lbs.amap.com/api/amap-ui/demos/amap-ui-pathsimplifier/expand-path\" target=\"_blank\" rel=\"noopener\">动态延展路径</a>  解决问题, path由ajax 异步获取更新.</p>\n<h4 id=\"小插曲-Java-List深浅拷贝\"><a href=\"#小插曲-Java-List深浅拷贝\" class=\"headerlink\" title=\"小插曲-Java List深浅拷贝\"></a>小插曲-Java List深浅拷贝</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"droneStatusService\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DroneStatusServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">DroneStatusService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Logger logger = LoggerFactory.getLogger(DroneStatusServiceImpl<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;DroneStatus&gt; droneStatusList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">/**删除其他代码**/</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;DroneStatus&gt; <span class=\"title\">listDroneStatus</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;DroneStatus&gt; theDroneStatusList = droneStatusList;</span><br><span class=\"line\">\t\tdroneStatusList.clear(); <span class=\"comment\">/**这样导致了我的return list一直为空**/</span></span><br><span class=\"line\">        logger.info(<span class=\"string\">\"清除一次信息list共\"</span>+theDroneStatusList.size()+<span class=\"string\">\"条\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> theDroneStatusList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第一印象这样写, 排查方法就是想到了关于Java引用的部分.<br>对于list的拷贝 <code>遍历循环复制</code>和<code>List的构造方法</code>和<code>list.addAll()</code>以及<code>System.arraycopy()</code> 这些全部是<code>浅复制</code>他们指向了同一片内存区域</p>\n<p>深复制的实现方法另实体类 实现Cloneable接口 重写clone方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tEntity entity = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tentity = (Entity)  <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我写了一个工具类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Entity&gt; <span class=\"title\">deepCopy</span><span class=\"params\">(List&lt;Entity&gt; originList)</span> </span>&#123;</span><br><span class=\"line\">\tList&lt;Entity&gt; entityList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(Entity entity : originList) &#123;</span><br><span class=\"line\">\t\tentityList.add((Entity) entity.clone());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> entityList;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过这个工具类实现深复制</p>\n<p> <code>IDEA CTRL+ALT+T</code>收获这个快捷键<br><img src=\"https://i.bmp.ovh/imgs/2019/07/9fe10225fe9a52a5.png\" alt=\"\"><br>@2019年7月14日17:47:23@</p>\n<p>大创先告一段落了, 等和他们对接吧, 基本功能显示路径已经做好了.<br>@2019年7月14日20:29:30@<br>复用类看完了<br>@2019年7月14日21:14:12@</p>\n<h3 id=\"7月15日\"><a href=\"#7月15日\" class=\"headerlink\" title=\"7月15日\"></a>7月15日</h3><p>把GGO通关了, 游戏就告一段落了.</p>\n<h3 id=\"7月16日\"><a href=\"#7月16日\" class=\"headerlink\" title=\"7月16日\"></a>7月16日</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">多态</span><br></pre></td></tr></table></figure>\n<p>把编程思想-多态看一下吧</p>\n<p>多态这里怎么说呢, 重要的是思想吧, 自己没用过太多, 都是一些框架需要<br>@2019年7月16日08:42:35@</p>\n<p>把书里的内容过了一遍, 怎么感觉不是很实用. 但是也说了一些小问题. 继承这种东西, 自己代码里都没有用太多.<br>@2019年7月16日09:25:47@</p>\n<p>改了一部分BUG, 小软件的开机启动设置修改了下, 貌似可以了.<br>@2019年7月16日17:39:40@</p>\n<h3 id=\"7月17日\"><a href=\"#7月17日\" class=\"headerlink\" title=\"7月17日\"></a>7月17日</h3><p>上午收拾了下,  下午的话休息了休息, 晚上去吃了顿好的, 收拾回家的东西</p>\n<h3 id=\"7月18日\"><a href=\"#7月18日\" class=\"headerlink\" title=\"7月18日\"></a>7月18日</h3><p>上午坐了一上午的车, 下午到了北京, 然后把电脑的内存条换上了(现在是16G的内存了, 够用了). <strong>难受的是, 光带了鼠标没有带鼠标的接收器!!!!!!!(我以为插件可以代替接收器, 结果插线也得要接收器… 算了吧)</strong></p>\n<h4 id=\"下午继续看了一部分-云收藏的源码看到了这个下面一个函数\"><a href=\"#下午继续看了一部分-云收藏的源码看到了这个下面一个函数\" class=\"headerlink\" title=\"下午继续看了一部分 云收藏的源码看到了这个下面一个函数\"></a>下午继续看了一部分 云收藏的源码看到了这个下面一个函数</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\tSystem.out.println(getMessage(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>, <span class=\"string\">\"4\"</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getMessage</span><span class=\"params\">(String template, String... keys)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tStringBuilder templateBuilder = <span class=\"keyword\">new</span> StringBuilder(template);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (String key : keys) &#123;</span><br><span class=\"line\">\t\ttemplateBuilder.append(key);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttemplate = templateBuilder.toString();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> template;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重点不是函数的功能, 而是<code>String...</code>这不是写错了. 我去网上查了下, 这样这个函数就可以接受多个参数了<br><code>getMessage(&quot;template&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</code> 接受参数后用 增强for循环以此取出就好</p>\n<p><code>是从Java 5开始，Java语言对方法参数支持一种新写法，叫可变长度参数列表</code></p>\n<p>正好在这里去搜集下每次Java更新, 所提供的新特性</p>\n<h4 id=\"JDK5-新特性\"><a href=\"#JDK5-新特性\" class=\"headerlink\" title=\"JDK5 新特性\"></a>JDK5 新特性</h4><p>#自动装箱与拆箱</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer a = <span class=\"keyword\">new</span> Integer(<span class=\"number\">10</span>); </span><br><span class=\"line\"><span class=\"comment\">//这个问题不大</span></span><br><span class=\"line\">Integer b = <span class=\"number\">100</span>; <span class=\"comment\">//这里就把一个int自动转成了 integer类型(自动装箱)</span></span><br><span class=\"line\"><span class=\"comment\">//这里用到了 Integer的 valueOf()方法 实现的自动装箱</span></span><br><span class=\"line\">b += <span class=\"number\">100</span>; <span class=\"comment\">//b = b + 100; 用intValue()来自动拆箱</span></span><br><span class=\"line\"><span class=\"comment\">//实现方式 b = Integer.valueOf(b.intValue() + 200);</span></span><br></pre></td></tr></table></figure>\n\n<p>#枚举类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> </span><br><span class=\"line\"><span class=\"comment\">// switch可以 switch枚举类型</span></span><br></pre></td></tr></table></figure>\n\n<p>#静态导入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.Math.pow; </span><br><span class=\"line\"><span class=\"comment\">//静态导入的必须是静态方法</span></span><br><span class=\"line\">System.out.println(Math.pow(<span class=\"number\">2</span>, <span class=\"number\">3</span>)); <span class=\"comment\">//未使用静态导入</span></span><br><span class=\"line\">System.out.println(pow(<span class=\"number\">2</span>, <span class=\"number\">3</span>)); <span class=\"comment\">//使用静态导入</span></span><br></pre></td></tr></table></figure>\n\n<p>#可变参数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//可以在方法参数的类型中 加入三个`...`, 这样在方法体内可以使用for的增强循环来获得传入的多个参数.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\tSystem.out.println(getMessage(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>, <span class=\"string\">\"4\"</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getMessage</span><span class=\"params\">(String template, String... keys)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tStringBuilder templateBuilder = <span class=\"keyword\">new</span> StringBuilder(template);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (String key : keys) &#123;</span><br><span class=\"line\">\t\ttemplateBuilder.append(key);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttemplate = templateBuilder.toString();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> template;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>#增强for循环<br>#泛型 (Generic Type)<br>#内省</p>\n<h4 id=\"JDK6-新特性\"><a href=\"#JDK6-新特性\" class=\"headerlink\" title=\"JDK6 新特性\"></a>JDK6 新特性</h4><p>#Desktop类和SystemTray类<br>第一个<code>Desktop</code>类<br>可以用来打开系统默认浏览器浏览指定的URL<br>打开系统默认邮件客户端给指定的邮箱发邮件<br>用默认应用程序打开或编辑文件(比如,用记事本打开以txt为后缀名的文件)<br>用系统默认的打印机打印文档<br>第二个<code>SystemTray</code>类<br>可以用来在系统托盘区创建一个托盘程序.<br>Java的UI方面就不写太多了</p>\n<p>@2019年7月18日20:47:07@</p>\n<h4 id=\"Springboot配置文件\"><a href=\"#Springboot配置文件\" class=\"headerlink\" title=\"Springboot配置文件\"></a>Springboot配置文件</h4><p>在Spring Boot中多环境配置文件名需要满足application-{profile}.properties的格式<br>其中{profile}对应你的环境标识</p>\n<p>下面列举三个文件<br><code>application-dev.properties</code>：开发环境<br><code>application-test.properties</code>：测试环境<br><code>application-prod.properties</code>：生产环境<br>至于哪个具体的配置文件会被加载，需要在application.properties文件中通过spring.profiles.active属性来设置，其值对应{profile}值。<br><code>spring.profiles.active=dev</code></p>\n<h3 id=\"7月19日\"><a href=\"#7月19日\" class=\"headerlink\" title=\"7月19日\"></a>7月19日</h3><p>今天的话在北京待了一天, 去看了看北方最大的漫展IDO, 怎么说呢比我想象的要小一点, 不过比徐州那个好太多了. 以后有机会的话就去南方了.</p>\n<h2 id=\"7-20-7-26\"><a href=\"#7-20-7-26\" class=\"headerlink\" title=\"7.20-7.26\"></a>7.20-7.26</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;接口, 内部类, 持有对象&gt;</span><br><span class=\"line\">---七个结构型模式</span><br><span class=\"line\">- 适配器模式</span><br><span class=\"line\">- 桥接模式</span><br><span class=\"line\">- 组合模式</span><br><span class=\"line\">- 外观模式</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7月20日\"><a href=\"#7月20日\" class=\"headerlink\" title=\"7月20日\"></a>7月20日</h3><p>今天还是胳膊有些疼, 昨天拿的东西不少, 背的也不少.走的路也不少…..<br>@2019年7月20日19:39:08@</p>\n<p>现在来看一些东西吧. 上个寒假在家里留了一本Java编程思想.</p>\n<h3 id=\"7月21日\"><a href=\"#7月21日\" class=\"headerlink\" title=\"7月21日\"></a>7月21日</h3><p>写了个新的小项目, 正好来练练手. 新项目单独列出一篇博客.</p>\n<h3 id=\"7月22日\"><a href=\"#7月22日\" class=\"headerlink\" title=\"7月22日\"></a>7月22日</h3><p>在家里午觉睡不着我凑, 改下小项目的问题.<br>@去看一下设计模式吧@</p>\n<h4 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h4><p>这个设计模式怎么说呢, 挺简单的.<br>就是 新建一个适配器类Adapter  引用一个需要适配的类Adaptee 这个类实现客户端的接口Target</p>\n<p>这样客户端直接调用接口 相关转换工作在接口中完成.</p>\n<h2 id=\"7-27-8-02\"><a href=\"#7-27-8-02\" class=\"headerlink\" title=\"7.27-8.02\"></a>7.27-8.02</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;类型信息, 泛型&gt;</span><br><span class=\"line\">- 装饰模式</span><br><span class=\"line\">- 享元模式(略过)</span><br><span class=\"line\">- 代理模式</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7月28日\"><a href=\"#7月28日\" class=\"headerlink\" title=\"7月28日\"></a>7月28日</h3><p>从7.23-7.25 写了个小项目, 失物招领的后端.<br>总的来说有 </p>\n<h4 id=\"统一反应类型\"><a href=\"#统一反应类型\" class=\"headerlink\" title=\"统一反应类型\"></a>统一反应类型</h4><p>将所有的返回结果, 写在一个类中</p>\n<p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/%E6%9A%91%E5%81%87%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951.png\" alt=\"\"></p>\n<p>预先定义的异常信息, 则使用了enum</p>\n<p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/%E6%9A%91%E5%81%87%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952.png\" alt=\"\"></p>\n<p>封装反回数据, 使用Object</p>\n<p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/%E6%9A%91%E5%81%87%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%953.png\" alt=\"\"></p>\n<p>这样处理后就可以</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseData(ExceptionMsg.DEL_FAILED);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseData(ExceptionMsg.DEL_FAILED);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span>  <span class=\"keyword\">new</span> ResponseData(ExceptionMsg.SUCCESS, lostAndFoundInfo);</span><br></pre></td></tr></table></figure>\n\n<p>来统一返回类型</p>\n<h4 id=\"Spring-Jpa的方便\"><a href=\"#Spring-Jpa的方便\" class=\"headerlink\" title=\"Spring Jpa的方便\"></a>Spring Jpa的方便</h4><p>配置完毕后, 去编写相应的实体类</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/lostandfound?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span></span><br><span class=\"line\"><span class=\"string\">spring.datasource.username=root</span></span><br><span class=\"line\"><span class=\"string\">spring.datasource.password=root</span></span><br><span class=\"line\"><span class=\"string\">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">spring.jpa.properties.hibernate.hbm2ddl.auto=update</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># create：只要每次加载 Hibernate 时就都会删除上一次生成的表，然后根据 model 类再重新来生成新表. </span></span><br><span class=\"line\"><span class=\"comment\"># create-drop：每次加载 Hibernate 时根据 model 类生成表，但是 sessionFactory 一关闭，表就自动删除。</span></span><br><span class=\"line\"><span class=\"comment\"># update：最常用的属性，第一次加载 Hibernate 时根据 model 类会自动建立起表的结构（前提是先建立# # 好数据库），以后加载 Hibernate 时根据 model 类自动更新表结构，即使表结构改变了，但表中的行仍然存在，不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。</span></span><br><span class=\"line\"><span class=\"comment\">#validate ：每次加载 Hibernate 时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。</span></span><br><span class=\"line\"><span class=\"string\">spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span> <span class=\"comment\">//这里可以通过value属性指定表名, 如果不指定则为类名</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span> <span class=\"comment\">//默认情况下会创建新表来存储id位置, 如果指定 strategy= GenerationType.IDENTITY 则会在一张表中存储位置id</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>， unique = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String passWord;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>， unique = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">true</span>， unique = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String nickName;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String regTime;</span><br><span class=\"line\">    <span class=\"comment\">//省略 getter settet 方法、构造方法  在这里getter setter 影响 Controller 的 return的内容. 有get方法才会在json中含有该项, 如果不想让该项出现在json中 则不需要写对应的get方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后编写实体类对应的repository接口 继承 JpaRepository&lt;model, Long&gt;</p>\n<p>就可使用自带的一些方法.</p>\n<h4 id=\"去继续学习吧\"><a href=\"#去继续学习吧\" class=\"headerlink\" title=\"去继续学习吧\"></a>去继续学习吧</h4><p>&lt;接口, 内部类, 持有对象&gt;</p>\n<p>重写Readable导致的bug.<br>再Main方法里产生随机单词, 导致异常<code>BufferOverflowException</code> , 首先思考的是每次调用<code>read()</code>方法应该会传入一个新的<code>CharBuffer</code>吧(实际并不是, 后面说)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Main.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tScanner scanner = <span class=\"keyword\">new</span> Scanner(<span class=\"keyword\">new</span> RandomWords(<span class=\"number\">100000</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (scanner.hasNext()) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(scanner.next());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// RandomWords.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomWords</span> <span class=\"keyword\">implements</span> <span class=\"title\">Readable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Random random = <span class=\"keyword\">new</span> Random(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span>[] CAPITALS =</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"ABCDEFGHIGKLMNOPQRSTUVWXYZ\"</span>.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span>[] LOWERS =</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"abcdefghigklmnopqrstuvwxyz\"</span>.toCharArray();</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RandomWords</span><span class=\"params\">(<span class=\"keyword\">int</span> count)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.count = count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">(CharBuffer cb)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(count-- == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tcb.append(CAPITALS[random.nextInt(CAPITALS.length)]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> maxCount = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; maxCount; i++) &#123;</span><br><span class=\"line\">\t\t\tcb.append(LOWERS[random.nextInt(LOWERS.length)]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//System.out.println(cb.limit() + \" - \" + cb.position());</span></span><br><span class=\"line\">\t\t\tcb.append(CAPITALS[random.nextInt(CAPITALS.length)]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tcb.append(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>来到报错位置, 这一段是CharBuffer源码里的部分, 发现是由于position &gt;= limit导致的异常, 然后查找得到这两个值得获取方法position()和limit();</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">nextPutIndex</span><span class=\"params\">()</span> </span>&#123;                          <span class=\"comment\">// package-private</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (position &gt;= limit)</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BufferOverflowException();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> position++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在RandomWords.java代码加入 <code>System.out.println(cb.limit() + &quot; - &quot; + cb.position());</code> 位置见上文注释代码</p>\n<p>经过打印发现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AyAvFkNuM</span><br><span class=\"line\">1024 - 1002</span><br><span class=\"line\">1024 - 1004</span><br><span class=\"line\">1024 - 1006</span><br><span class=\"line\">1024 - 1008</span><br><span class=\"line\">RcEsZqFwO</span><br><span class=\"line\">1024 - 1012</span><br><span class=\"line\">1024 - 1014</span><br><span class=\"line\">1024 - 1016</span><br><span class=\"line\">1024 - 1018</span><br><span class=\"line\">HxEsXaStX</span><br><span class=\"line\">1024 - 1022</span><br><span class=\"line\">1024 - 1024</span><br></pre></td></tr></table></figure>\n<p>position属性并没有随着每次调用read() 方法重置, 所以每次调用read()方法传入的是同一个 <code>CharBuffer</code>. 回到Scanner源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Scanner.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过查找找到调用read()方法的地方</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">readInput</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (buf.limit() == buf.capacity())</span><br><span class=\"line\">            makeSpace();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Prepare to receive data</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> p = buf.position();</span><br><span class=\"line\">        buf.position(buf.limit());</span><br><span class=\"line\">        buf.limit(buf.capacity());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123; <span class=\"comment\">//这里调用了source.read()  source就是构造方法传入的在RandomWords对象</span></span><br><span class=\"line\">            n = source.read(buf);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException ioe) &#123;</span><br><span class=\"line\">            lastException = ioe;</span><br><span class=\"line\">            n = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            sourceClosed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            needInput = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            needInput = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Restore current position and limit for reading</span></span><br><span class=\"line\">        buf.limit(buf.position());</span><br><span class=\"line\">        buf.position(p);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>发现其传入了<code>buf</code>参数, 查找<code>buf</code>来到</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Scanner</span><span class=\"params\">(Readable source, Pattern pattern)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">assert</span> source != <span class=\"keyword\">null</span> : <span class=\"string\">\"source should not be null\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">assert</span> pattern != <span class=\"keyword\">null</span> : <span class=\"string\">\"pattern should not be null\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.source = source;</span><br><span class=\"line\">\tdelimPattern = pattern;</span><br><span class=\"line\">\tbuf = CharBuffer.allocate(BUFFER_SIZE);</span><br><span class=\"line\">\tbuf.limit(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tmatcher = delimPattern.matcher(buf);</span><br><span class=\"line\">\tmatcher.useTransparentBounds(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\tmatcher.useAnchoringBounds(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">\tuseLocale(Locale.getDefault(Locale.Category.FORMAT));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发现是这个构造方法 对buf进行的赋值, 而    <code>Scanner(Readable source)</code>这个构造方法也只是调用的上一个构造方法.</p>\n<p>所以问题解决了, 由于我是在一开始就实例化了一个<code>Scanner对象</code>. 导致传入<code>read()</code>方法的<code>buf</code>都是同一个 才导致的上文报错.</p>\n<p>@2019年7月28日19:18:23@</p>\n<p>囫囵吞枣的看完了接口<br>看了一部分内部类. 感觉很没有实感..<br>联系的太少了, 对他所说的没有感到<code>原来如此</code></p>\n<h3 id=\"7月29日-8月2日\"><a href=\"#7月29日-8月2日\" class=\"headerlink\" title=\"7月29日-8月2日\"></a>7月29日-8月2日</h3><p>又写了一个二手交易的后台, 马上今天是八月二号, 这个假期也过了小一半了. </p>\n<p>最近也看了看大数据相关的, 等这几天多看看关于大数据的, 也许我会选大数据专业emmm<br>@2019年8月2日20:22:20@<br>去看看ElasticSearch吧, 二手交易还差一个搜索</p>\n<p>设置ip地址<br>关闭防火墙<br>关闭保护<br>删除映射管理文件<br>关机–&gt;克隆四台电脑<br>@2019年8月2日23:42:36@</p>\n<h2 id=\"8-3-8-9\"><a href=\"#8-3-8-9\" class=\"headerlink\" title=\"8.3-8.9\"></a>8.3-8.9</h2><h3 id=\"8月3日\"><a href=\"#8月3日\" class=\"headerlink\" title=\"8月3日\"></a>8月3日</h3><p>大数据相关的删掉了, 移动到了单独的一篇博客</p>\n<h3 id=\"8月4日\"><a href=\"#8月4日\" class=\"headerlink\" title=\"8月4日\"></a>8月4日</h3><p>大数据相关的删掉了, 移动到了单独的一篇博客</p>\n<h3 id=\"8月8日\"><a href=\"#8月8日\" class=\"headerlink\" title=\"8月8日\"></a>8月8日</h3><p>继续学习大数据相关内容, 刷了一道算法题.待会看看Java IO流</p>\n<p><em>暑期计划就到此了, 自己对于将来从事什么, 还是有些迷茫, 还是多去刷刷算法题目, 找找自己的路再走吧</em></p>\n","site":{"data":{}},"excerpt":"<div class=\"alert-red\">では、ゲームを始(はじ)めましょう</div>\n\n<p>自己与研究生无缘了, 不过嘛, 是好是坏我也不知道, 现在也只能多学点技术, 去工作了, 这个暑假很重要, 所以将会每天记录下.</p>\n<p><a href=\"https://imgurl.org/\" target=\"_blank\" rel=\"noopener\">在线图床</a><br><a href=\"https://blog.csdn.net/lovelion/article/details/17517213\" target=\"_blank\" rel=\"noopener\">设计模式主要学习</a><br>设计模式次要补充 – head first java 设计模式</p>","more":"<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><img src=\"%E6%9A%91%E5%81%87%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B8%8E%E6%80%BB%E7%BB%93/4.png\" alt=\"\"><br>总结一下这个暑假都干了什么, 马上就要开学了.<br>七月十三日到七月十九日, 这是第一周了.这一周伴随着到处参观, 收货很少了. 那时我还在主用Java, 主要的是学习了一些设计模式, 这一周的时间对我学习C++ 帮助也是有的. 暑假学习设计模式也是出于换语言的考虑.<br>第一天(七月十三日)可以说是看的最多的了解了什么是耦合和解耦, 一些简单的设计模式(简单工厂, 工厂方法, 抽象工厂, 单例模式).<br>第二天(七月十四日) 开始初步试验大创项目的实现, 当时遇到一个BUG, 我需要返回一个东西, 但我还是需要返回后将他删除, 首先就是将他”复制了一份”, 然后删除, 却发现返回去的都是空的,了解到了Java如何进行深拷贝.<br>七月十六日看了下Java编程思想的多态部分, 然后主要时间修改网络助手的开机启动设置, 这样开机启动设置就没有问题了.<br>七月十七日收拾家伙, 休息了休息准备回家, 结果虽然我确认了好几次自己有没有带全家伙, 鼠标笔记本都带上了,<br>七月十八日到达北京去我姐那里暂住了, 结果发现我…..光带回了一个鼠标, 鼠标的接收器还在USB分线器上(吐血) 然后开始了一个开源项目的阅读. 云收藏(SpringBoot框架). 发现了自己没有看懂的东西(Stirng …), 就去了解下JDK从5-8每次更新加入的内容,了解到那个叫做可变参数需要搭配增强for循环使用<br>七月十九日-七月二十日我终于实现了自己理想….怎么说呢北方最大的漫展依然没有我想象的大, 等我有机会既定要去一次南方</p>\n<p>七月二十一日到七月二十七日写了个后端练手(一个失物招领) . 使用了丝袜哥写Api文档, SpringJpa作为持久层? 这几天放松了玩了几天游戏可惜了.<br>七月二十八日总结两个小项目比较靠近项目的地方, 统一返回类型, 预定义数据, SpringJpa.<br>.学习了 接口 内部类 持有对象. 通过查看源码解决了一个Bug,<br>七月二十九日到八月二日 编写二手交易后台.</p>\n<p>想去了解下大数据相关内容<br>八月三日到八月九日 看了下关于大数据的内容, 并不是很感兴趣.<br>八月十日到八月十五日 主要是写算法题目, 然后寻找自己是佛要从事游戏服务器编程<br>八月十六日到八月二十四日 上午复习高数, 下午看C++<br>@2019年8月24日18:21:07@</p>\n<h2 id=\"大纲\"><a href=\"#大纲\" class=\"headerlink\" title=\"大纲\"></a>大纲</h2><p>设计模式不求多, 但求会用, 极大概率调整设计模式的学习.<br>此外需要刷一些常用的算法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7.13-7.19</span><br><span class=\"line\">&lt;复用类, 多态&gt;</span><br><span class=\"line\">---六个创建型模式</span><br><span class=\"line\">- 简单工厂模式</span><br><span class=\"line\">- 工厂方法模式</span><br><span class=\"line\">- 抽象工厂模式</span><br><span class=\"line\">- 单例模式</span><br><span class=\"line\">- 原型模式(略过)</span><br><span class=\"line\">- 建造者模式(略过)</span><br><span class=\"line\">7.20-7.26</span><br><span class=\"line\">&lt;接口, 内部类, 持有对象&gt;</span><br><span class=\"line\">---七个结构型模式</span><br><span class=\"line\">- 适配器模式</span><br><span class=\"line\">- 桥接模式</span><br><span class=\"line\">- 组合模式</span><br><span class=\"line\">- 外观模式</span><br><span class=\"line\">7.27-8.02</span><br><span class=\"line\">&lt;类型信息, 泛型&gt;</span><br><span class=\"line\">- 装饰模式</span><br><span class=\"line\">- 享元模式(略过)</span><br><span class=\"line\">- 代理模式</span><br><span class=\"line\">8.03-8.09</span><br><span class=\"line\">&lt;数组, 容器深入研究&gt;</span><br><span class=\"line\">---十一个行为型模式</span><br><span class=\"line\">- 职责链模式</span><br><span class=\"line\">- 命令模式</span><br><span class=\"line\">- 解释器模式(略过)</span><br><span class=\"line\">- 迭代器模式</span><br><span class=\"line\">- 中介者模式(略过)</span><br><span class=\"line\">- 备忘录模式(略过)</span><br><span class=\"line\">- 观察者模式</span><br><span class=\"line\">8.10-8.16</span><br><span class=\"line\">&lt;IO, 枚举类型&gt;</span><br><span class=\"line\">- 状态模式</span><br><span class=\"line\">- 策略模式</span><br><span class=\"line\">- 模板方法模式</span><br><span class=\"line\">- 访问者模(略过)</span><br><span class=\"line\">8.17-8.23</span><br><span class=\"line\">&lt;注解, 并发&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"では、ゲームを始-はじ-めましょう\"><a href=\"#では、ゲームを始-はじ-めましょう\" class=\"headerlink\" title=\"では、ゲームを始(はじ)めましょう\"></a>では、ゲームを始(はじ)めましょう</h1><h2 id=\"7-13-7-19\"><a href=\"#7-13-7-19\" class=\"headerlink\" title=\"7.13-7.19\"></a>7.13-7.19</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7.13-7.19</span><br><span class=\"line\">&lt;复用类, 多态&gt;</span><br><span class=\"line\">---六个创建型模式</span><br><span class=\"line\">- 简单工厂模式</span><br><span class=\"line\">- 工厂方法模式</span><br><span class=\"line\">- 抽象工厂模式</span><br><span class=\"line\">- 单例模式</span><br></pre></td></tr></table></figure>\n<h3 id=\"7月13日\"><a href=\"#7月13日\" class=\"headerlink\" title=\"7月13日\"></a>7月13日</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 简单工厂模式</span><br><span class=\"line\">- 工厂方法模式</span><br><span class=\"line\">- 抽象工厂模式</span><br><span class=\"line\">- 单例模式</span><br></pre></td></tr></table></figure>\n\n<p>2019年7月13日12:21:17<br>上午参观参观参观…… 重置了下, 这个暑期表格.今天开始第一天的打卡.下午还有参观, 然后就可以开始学了</p>\n<p>下午有b站血族直播<br>下午看了一个项目, 自己不会的还是太多,,,,,, 给了源码都看不太懂.<br>还是先继续看几个设计模式吧, 设计模式目前想的是, 了解大概, 等到时用到了再去详细学习</p>\n<h4 id=\"耦合与解耦\"><a href=\"#耦合与解耦\" class=\"headerlink\" title=\"耦合与解耦\"></a>耦合与解耦</h4><p>耦合: 两个或两个以上的体系之间互相结合, 互相影响, 产生的一个联合起来解决问题的体系.<br>这种体系, 不利于修改, 修改一个体系可能会影响到另一个体系, 使得另一个体系需要做出修改.<br>解耦: 将体系之间的联系降到最低, 各司其职, 修改本身的时候, 不需要去动其他的体系</p>\n<h4 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h4><p>简单工厂模式不属于GoF 23种设计模式<br>通过设计一个父类(产品类), 由他派生出多个子类(具体产品类), 通过一个工厂类, 提供给工厂类生产方法不同的参数, 由工厂类return相应的子类, 由父类接受.</p>\n<p>解决问题: 通过工厂类, 只需要记住参数, 就可以产生相应的子类,<br>存在问题: 不符合开闭原则, 每次产生新的产品, 都需要去修改相应的工厂生产方法.</p>\n<h4 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h4><p>与简单工厂有些相似之处: 均存在一个产品父类和多个产品子类.<br>不同之处在于 工厂方法模式, 设置了工厂父类, 通过派生出不同的工厂子类来return相应的子类.</p>\n<p>解决问题: 解决了简单工厂模式的开闭原则, 每次产生新的产品, 只需要派生一个相应的子类即可<br>存在问题: 系统中由于新产品的产生, 类的个数将会成对增加, 会有更多的类需要处理</p>\n<h4 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h4><p>抽象工厂模式解决了工厂方法模式某些情况下 导致的类成对增加情况<br>一个抽象工厂里包含了这个”工厂”的所有产品–这对应了一个产品族<br>可以派生出多个工厂来实现多品牌产品–形成了一个等级结构<br><img src=\"https://img-blog.csdn.net/20130713162941328?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTG92ZUxpb24=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"引用自上文博客\"></p>\n<h4 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h4><p>这个模式理解起来很容易, 但是效果却十分的不错, 之前用过一次所以详细写一下.<br><strong>饿汉式单例模式</strong><br>饿汉式单例模式 无延迟加载 不需要解决多线程问题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> singletonpattern.Connect</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> * 饿汉式单例模式 无延迟加载 不需要解决多线程问题</span></span><br><span class=\"line\"><span class=\"comment\"> * Author lsmg</span></span><br><span class=\"line\"><span class=\"comment\"> * Date 2019/5/21 13:25</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Connect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Connect instance = <span class=\"keyword\">new</span> Connect();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Connect</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connect <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>懒汉式单例模式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> singletonpattern;</span><br><span class=\"line\">懒汉式单例模式 实现了延迟加载,但需要解决多线程问题</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> singletonpattern.Connect1_2</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> TODO</span></span><br><span class=\"line\"><span class=\"comment\"> * 懒汉式单例模式 实现了延迟加载,但需要解决多线程问题</span></span><br><span class=\"line\"><span class=\"comment\"> * Author lsmg</span></span><br><span class=\"line\"><span class=\"comment\"> * Date 2019/5/21 13:30</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Connect1_2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Connect1_2  connect1_2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Connect1_2</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这种方式会造成多线程访问的时候实例化多个对象</span></span><br><span class=\"line\"><span class=\"comment\">//    public  static singletonpattern.Connect1_2 getInstance()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        if(connect1_2 == null)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            connect1_2 = new singletonpattern.Connect1_2();</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//        return connect1_2;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这种方式虽然确保了只有一个线程进入, 但是降低了多线程的性能</span></span><br><span class=\"line\"><span class=\"comment\">//    public synchronized static singletonpattern.Connect1_2 getInstance()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        if(connect1_2 == null)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            connect1_2 = new singletonpattern.Connect1_2();</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//        return connect1_2;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这种方式需要在private \"volatile\" static singletonpattern.Connect1_2 connect1_2 这样同样降低效率</span></span><br><span class=\"line\"><span class=\"comment\">//    public synchronized static singletonpattern.Connect1_2 getInstance()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        if(connect1_2 == null)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//            synchronized (singletonpattern.Connect1_2.class)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                if(connect1_2 == null)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                    connect1_2 = new singletonpattern.Connect1_2();</span></span><br><span class=\"line\"><span class=\"comment\">//                &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//        return connect1_2;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong>使用IoDH方法结合二者优点</strong><br>由于静态单例对象没有作为Singleton的成员变量直接初始化, 当调用<code>getInstance()</code>方法的时候, 会加载内部类HolderClass, 其中的static 由Java虚拟机保证线程安全性, 这样就结合了<code>饿汉式单例模式的线程安全</code>和<code>懒汉式单例模式的延迟加载</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Initialization on Demand Holder</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HolderClass</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> HolderClass.instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">\t    Singleton s1, s2; </span><br><span class=\"line\">        s1 = Singleton.getInstance();</span><br><span class=\"line\">\t    s2 = Singleton.getInstance();</span><br><span class=\"line\">\t    System.out.println(s1==s2);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>@2019年7月13日19:07:46 设计模式暂时到这里, 去写写代码吧@</p>\n<h3 id=\"7月14日\"><a href=\"#7月14日\" class=\"headerlink\" title=\"7月14日\"></a>7月14日</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">复用类看了一部分, 目前还差final部分</span><br></pre></td></tr></table></figure>\n<p>@2019年7月14日09:43:46@</p>\n<p>下午看了看大创项目的实现, 选择了高德地图api. 中午的时候太困了 搞得我没有仔细看<br>目前决定采用<a href=\"https://lbs.amap.com/api/amap-ui/demos/amap-ui-pathsimplifier/expand-path\" target=\"_blank\" rel=\"noopener\">动态延展路径</a>  解决问题, path由ajax 异步获取更新.</p>\n<h4 id=\"小插曲-Java-List深浅拷贝\"><a href=\"#小插曲-Java-List深浅拷贝\" class=\"headerlink\" title=\"小插曲-Java List深浅拷贝\"></a>小插曲-Java List深浅拷贝</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"droneStatusService\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DroneStatusServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">DroneStatusService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Logger logger = LoggerFactory.getLogger(DroneStatusServiceImpl<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;DroneStatus&gt; droneStatusList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">/**删除其他代码**/</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;DroneStatus&gt; <span class=\"title\">listDroneStatus</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;DroneStatus&gt; theDroneStatusList = droneStatusList;</span><br><span class=\"line\">\t\tdroneStatusList.clear(); <span class=\"comment\">/**这样导致了我的return list一直为空**/</span></span><br><span class=\"line\">        logger.info(<span class=\"string\">\"清除一次信息list共\"</span>+theDroneStatusList.size()+<span class=\"string\">\"条\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> theDroneStatusList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第一印象这样写, 排查方法就是想到了关于Java引用的部分.<br>对于list的拷贝 <code>遍历循环复制</code>和<code>List的构造方法</code>和<code>list.addAll()</code>以及<code>System.arraycopy()</code> 这些全部是<code>浅复制</code>他们指向了同一片内存区域</p>\n<p>深复制的实现方法另实体类 实现Cloneable接口 重写clone方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tEntity entity = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tentity = (Entity)  <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我写了一个工具类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Entity&gt; <span class=\"title\">deepCopy</span><span class=\"params\">(List&lt;Entity&gt; originList)</span> </span>&#123;</span><br><span class=\"line\">\tList&lt;Entity&gt; entityList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(Entity entity : originList) &#123;</span><br><span class=\"line\">\t\tentityList.add((Entity) entity.clone());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> entityList;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过这个工具类实现深复制</p>\n<p> <code>IDEA CTRL+ALT+T</code>收获这个快捷键<br><img src=\"https://i.bmp.ovh/imgs/2019/07/9fe10225fe9a52a5.png\" alt=\"\"><br>@2019年7月14日17:47:23@</p>\n<p>大创先告一段落了, 等和他们对接吧, 基本功能显示路径已经做好了.<br>@2019年7月14日20:29:30@<br>复用类看完了<br>@2019年7月14日21:14:12@</p>\n<h3 id=\"7月15日\"><a href=\"#7月15日\" class=\"headerlink\" title=\"7月15日\"></a>7月15日</h3><p>把GGO通关了, 游戏就告一段落了.</p>\n<h3 id=\"7月16日\"><a href=\"#7月16日\" class=\"headerlink\" title=\"7月16日\"></a>7月16日</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">多态</span><br></pre></td></tr></table></figure>\n<p>把编程思想-多态看一下吧</p>\n<p>多态这里怎么说呢, 重要的是思想吧, 自己没用过太多, 都是一些框架需要<br>@2019年7月16日08:42:35@</p>\n<p>把书里的内容过了一遍, 怎么感觉不是很实用. 但是也说了一些小问题. 继承这种东西, 自己代码里都没有用太多.<br>@2019年7月16日09:25:47@</p>\n<p>改了一部分BUG, 小软件的开机启动设置修改了下, 貌似可以了.<br>@2019年7月16日17:39:40@</p>\n<h3 id=\"7月17日\"><a href=\"#7月17日\" class=\"headerlink\" title=\"7月17日\"></a>7月17日</h3><p>上午收拾了下,  下午的话休息了休息, 晚上去吃了顿好的, 收拾回家的东西</p>\n<h3 id=\"7月18日\"><a href=\"#7月18日\" class=\"headerlink\" title=\"7月18日\"></a>7月18日</h3><p>上午坐了一上午的车, 下午到了北京, 然后把电脑的内存条换上了(现在是16G的内存了, 够用了). <strong>难受的是, 光带了鼠标没有带鼠标的接收器!!!!!!!(我以为插件可以代替接收器, 结果插线也得要接收器… 算了吧)</strong></p>\n<h4 id=\"下午继续看了一部分-云收藏的源码看到了这个下面一个函数\"><a href=\"#下午继续看了一部分-云收藏的源码看到了这个下面一个函数\" class=\"headerlink\" title=\"下午继续看了一部分 云收藏的源码看到了这个下面一个函数\"></a>下午继续看了一部分 云收藏的源码看到了这个下面一个函数</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\tSystem.out.println(getMessage(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>, <span class=\"string\">\"4\"</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getMessage</span><span class=\"params\">(String template, String... keys)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tStringBuilder templateBuilder = <span class=\"keyword\">new</span> StringBuilder(template);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (String key : keys) &#123;</span><br><span class=\"line\">\t\ttemplateBuilder.append(key);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttemplate = templateBuilder.toString();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> template;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重点不是函数的功能, 而是<code>String...</code>这不是写错了. 我去网上查了下, 这样这个函数就可以接受多个参数了<br><code>getMessage(&quot;template&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</code> 接受参数后用 增强for循环以此取出就好</p>\n<p><code>是从Java 5开始，Java语言对方法参数支持一种新写法，叫可变长度参数列表</code></p>\n<p>正好在这里去搜集下每次Java更新, 所提供的新特性</p>\n<h4 id=\"JDK5-新特性\"><a href=\"#JDK5-新特性\" class=\"headerlink\" title=\"JDK5 新特性\"></a>JDK5 新特性</h4><p>#自动装箱与拆箱</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer a = <span class=\"keyword\">new</span> Integer(<span class=\"number\">10</span>); </span><br><span class=\"line\"><span class=\"comment\">//这个问题不大</span></span><br><span class=\"line\">Integer b = <span class=\"number\">100</span>; <span class=\"comment\">//这里就把一个int自动转成了 integer类型(自动装箱)</span></span><br><span class=\"line\"><span class=\"comment\">//这里用到了 Integer的 valueOf()方法 实现的自动装箱</span></span><br><span class=\"line\">b += <span class=\"number\">100</span>; <span class=\"comment\">//b = b + 100; 用intValue()来自动拆箱</span></span><br><span class=\"line\"><span class=\"comment\">//实现方式 b = Integer.valueOf(b.intValue() + 200);</span></span><br></pre></td></tr></table></figure>\n\n<p>#枚举类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> </span><br><span class=\"line\"><span class=\"comment\">// switch可以 switch枚举类型</span></span><br></pre></td></tr></table></figure>\n\n<p>#静态导入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.Math.pow; </span><br><span class=\"line\"><span class=\"comment\">//静态导入的必须是静态方法</span></span><br><span class=\"line\">System.out.println(Math.pow(<span class=\"number\">2</span>, <span class=\"number\">3</span>)); <span class=\"comment\">//未使用静态导入</span></span><br><span class=\"line\">System.out.println(pow(<span class=\"number\">2</span>, <span class=\"number\">3</span>)); <span class=\"comment\">//使用静态导入</span></span><br></pre></td></tr></table></figure>\n\n<p>#可变参数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//可以在方法参数的类型中 加入三个`...`, 这样在方法体内可以使用for的增强循环来获得传入的多个参数.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\tSystem.out.println(getMessage(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>, <span class=\"string\">\"4\"</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getMessage</span><span class=\"params\">(String template, String... keys)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tStringBuilder templateBuilder = <span class=\"keyword\">new</span> StringBuilder(template);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (String key : keys) &#123;</span><br><span class=\"line\">\t\ttemplateBuilder.append(key);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttemplate = templateBuilder.toString();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> template;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>#增强for循环<br>#泛型 (Generic Type)<br>#内省</p>\n<h4 id=\"JDK6-新特性\"><a href=\"#JDK6-新特性\" class=\"headerlink\" title=\"JDK6 新特性\"></a>JDK6 新特性</h4><p>#Desktop类和SystemTray类<br>第一个<code>Desktop</code>类<br>可以用来打开系统默认浏览器浏览指定的URL<br>打开系统默认邮件客户端给指定的邮箱发邮件<br>用默认应用程序打开或编辑文件(比如,用记事本打开以txt为后缀名的文件)<br>用系统默认的打印机打印文档<br>第二个<code>SystemTray</code>类<br>可以用来在系统托盘区创建一个托盘程序.<br>Java的UI方面就不写太多了</p>\n<p>@2019年7月18日20:47:07@</p>\n<h4 id=\"Springboot配置文件\"><a href=\"#Springboot配置文件\" class=\"headerlink\" title=\"Springboot配置文件\"></a>Springboot配置文件</h4><p>在Spring Boot中多环境配置文件名需要满足application-{profile}.properties的格式<br>其中{profile}对应你的环境标识</p>\n<p>下面列举三个文件<br><code>application-dev.properties</code>：开发环境<br><code>application-test.properties</code>：测试环境<br><code>application-prod.properties</code>：生产环境<br>至于哪个具体的配置文件会被加载，需要在application.properties文件中通过spring.profiles.active属性来设置，其值对应{profile}值。<br><code>spring.profiles.active=dev</code></p>\n<h3 id=\"7月19日\"><a href=\"#7月19日\" class=\"headerlink\" title=\"7月19日\"></a>7月19日</h3><p>今天的话在北京待了一天, 去看了看北方最大的漫展IDO, 怎么说呢比我想象的要小一点, 不过比徐州那个好太多了. 以后有机会的话就去南方了.</p>\n<h2 id=\"7-20-7-26\"><a href=\"#7-20-7-26\" class=\"headerlink\" title=\"7.20-7.26\"></a>7.20-7.26</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;接口, 内部类, 持有对象&gt;</span><br><span class=\"line\">---七个结构型模式</span><br><span class=\"line\">- 适配器模式</span><br><span class=\"line\">- 桥接模式</span><br><span class=\"line\">- 组合模式</span><br><span class=\"line\">- 外观模式</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7月20日\"><a href=\"#7月20日\" class=\"headerlink\" title=\"7月20日\"></a>7月20日</h3><p>今天还是胳膊有些疼, 昨天拿的东西不少, 背的也不少.走的路也不少…..<br>@2019年7月20日19:39:08@</p>\n<p>现在来看一些东西吧. 上个寒假在家里留了一本Java编程思想.</p>\n<h3 id=\"7月21日\"><a href=\"#7月21日\" class=\"headerlink\" title=\"7月21日\"></a>7月21日</h3><p>写了个新的小项目, 正好来练练手. 新项目单独列出一篇博客.</p>\n<h3 id=\"7月22日\"><a href=\"#7月22日\" class=\"headerlink\" title=\"7月22日\"></a>7月22日</h3><p>在家里午觉睡不着我凑, 改下小项目的问题.<br>@去看一下设计模式吧@</p>\n<h4 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h4><p>这个设计模式怎么说呢, 挺简单的.<br>就是 新建一个适配器类Adapter  引用一个需要适配的类Adaptee 这个类实现客户端的接口Target</p>\n<p>这样客户端直接调用接口 相关转换工作在接口中完成.</p>\n<h2 id=\"7-27-8-02\"><a href=\"#7-27-8-02\" class=\"headerlink\" title=\"7.27-8.02\"></a>7.27-8.02</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;类型信息, 泛型&gt;</span><br><span class=\"line\">- 装饰模式</span><br><span class=\"line\">- 享元模式(略过)</span><br><span class=\"line\">- 代理模式</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7月28日\"><a href=\"#7月28日\" class=\"headerlink\" title=\"7月28日\"></a>7月28日</h3><p>从7.23-7.25 写了个小项目, 失物招领的后端.<br>总的来说有 </p>\n<h4 id=\"统一反应类型\"><a href=\"#统一反应类型\" class=\"headerlink\" title=\"统一反应类型\"></a>统一反应类型</h4><p>将所有的返回结果, 写在一个类中</p>\n<p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/%E6%9A%91%E5%81%87%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951.png\" alt=\"\"></p>\n<p>预先定义的异常信息, 则使用了enum</p>\n<p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/%E6%9A%91%E5%81%87%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952.png\" alt=\"\"></p>\n<p>封装反回数据, 使用Object</p>\n<p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/%E6%9A%91%E5%81%87%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%953.png\" alt=\"\"></p>\n<p>这样处理后就可以</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseData(ExceptionMsg.DEL_FAILED);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseData(ExceptionMsg.DEL_FAILED);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span>  <span class=\"keyword\">new</span> ResponseData(ExceptionMsg.SUCCESS, lostAndFoundInfo);</span><br></pre></td></tr></table></figure>\n\n<p>来统一返回类型</p>\n<h4 id=\"Spring-Jpa的方便\"><a href=\"#Spring-Jpa的方便\" class=\"headerlink\" title=\"Spring Jpa的方便\"></a>Spring Jpa的方便</h4><p>配置完毕后, 去编写相应的实体类</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/lostandfound?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span></span><br><span class=\"line\"><span class=\"string\">spring.datasource.username=root</span></span><br><span class=\"line\"><span class=\"string\">spring.datasource.password=root</span></span><br><span class=\"line\"><span class=\"string\">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">spring.jpa.properties.hibernate.hbm2ddl.auto=update</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># create：只要每次加载 Hibernate 时就都会删除上一次生成的表，然后根据 model 类再重新来生成新表. </span></span><br><span class=\"line\"><span class=\"comment\"># create-drop：每次加载 Hibernate 时根据 model 类生成表，但是 sessionFactory 一关闭，表就自动删除。</span></span><br><span class=\"line\"><span class=\"comment\"># update：最常用的属性，第一次加载 Hibernate 时根据 model 类会自动建立起表的结构（前提是先建立# # 好数据库），以后加载 Hibernate 时根据 model 类自动更新表结构，即使表结构改变了，但表中的行仍然存在，不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。</span></span><br><span class=\"line\"><span class=\"comment\">#validate ：每次加载 Hibernate 时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。</span></span><br><span class=\"line\"><span class=\"string\">spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span> <span class=\"comment\">//这里可以通过value属性指定表名, 如果不指定则为类名</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span> <span class=\"comment\">//默认情况下会创建新表来存储id位置, 如果指定 strategy= GenerationType.IDENTITY 则会在一张表中存储位置id</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>， unique = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String passWord;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>， unique = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">true</span>， unique = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String nickName;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String regTime;</span><br><span class=\"line\">    <span class=\"comment\">//省略 getter settet 方法、构造方法  在这里getter setter 影响 Controller 的 return的内容. 有get方法才会在json中含有该项, 如果不想让该项出现在json中 则不需要写对应的get方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后编写实体类对应的repository接口 继承 JpaRepository&lt;model, Long&gt;</p>\n<p>就可使用自带的一些方法.</p>\n<h4 id=\"去继续学习吧\"><a href=\"#去继续学习吧\" class=\"headerlink\" title=\"去继续学习吧\"></a>去继续学习吧</h4><p>&lt;接口, 内部类, 持有对象&gt;</p>\n<p>重写Readable导致的bug.<br>再Main方法里产生随机单词, 导致异常<code>BufferOverflowException</code> , 首先思考的是每次调用<code>read()</code>方法应该会传入一个新的<code>CharBuffer</code>吧(实际并不是, 后面说)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Main.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tScanner scanner = <span class=\"keyword\">new</span> Scanner(<span class=\"keyword\">new</span> RandomWords(<span class=\"number\">100000</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (scanner.hasNext()) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(scanner.next());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// RandomWords.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomWords</span> <span class=\"keyword\">implements</span> <span class=\"title\">Readable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Random random = <span class=\"keyword\">new</span> Random(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span>[] CAPITALS =</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"ABCDEFGHIGKLMNOPQRSTUVWXYZ\"</span>.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span>[] LOWERS =</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"abcdefghigklmnopqrstuvwxyz\"</span>.toCharArray();</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RandomWords</span><span class=\"params\">(<span class=\"keyword\">int</span> count)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.count = count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">(CharBuffer cb)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(count-- == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tcb.append(CAPITALS[random.nextInt(CAPITALS.length)]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> maxCount = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; maxCount; i++) &#123;</span><br><span class=\"line\">\t\t\tcb.append(LOWERS[random.nextInt(LOWERS.length)]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//System.out.println(cb.limit() + \" - \" + cb.position());</span></span><br><span class=\"line\">\t\t\tcb.append(CAPITALS[random.nextInt(CAPITALS.length)]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tcb.append(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>来到报错位置, 这一段是CharBuffer源码里的部分, 发现是由于position &gt;= limit导致的异常, 然后查找得到这两个值得获取方法position()和limit();</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">nextPutIndex</span><span class=\"params\">()</span> </span>&#123;                          <span class=\"comment\">// package-private</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (position &gt;= limit)</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BufferOverflowException();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> position++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在RandomWords.java代码加入 <code>System.out.println(cb.limit() + &quot; - &quot; + cb.position());</code> 位置见上文注释代码</p>\n<p>经过打印发现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AyAvFkNuM</span><br><span class=\"line\">1024 - 1002</span><br><span class=\"line\">1024 - 1004</span><br><span class=\"line\">1024 - 1006</span><br><span class=\"line\">1024 - 1008</span><br><span class=\"line\">RcEsZqFwO</span><br><span class=\"line\">1024 - 1012</span><br><span class=\"line\">1024 - 1014</span><br><span class=\"line\">1024 - 1016</span><br><span class=\"line\">1024 - 1018</span><br><span class=\"line\">HxEsXaStX</span><br><span class=\"line\">1024 - 1022</span><br><span class=\"line\">1024 - 1024</span><br></pre></td></tr></table></figure>\n<p>position属性并没有随着每次调用read() 方法重置, 所以每次调用read()方法传入的是同一个 <code>CharBuffer</code>. 回到Scanner源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Scanner.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过查找找到调用read()方法的地方</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">readInput</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (buf.limit() == buf.capacity())</span><br><span class=\"line\">            makeSpace();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Prepare to receive data</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> p = buf.position();</span><br><span class=\"line\">        buf.position(buf.limit());</span><br><span class=\"line\">        buf.limit(buf.capacity());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123; <span class=\"comment\">//这里调用了source.read()  source就是构造方法传入的在RandomWords对象</span></span><br><span class=\"line\">            n = source.read(buf);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException ioe) &#123;</span><br><span class=\"line\">            lastException = ioe;</span><br><span class=\"line\">            n = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            sourceClosed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            needInput = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            needInput = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Restore current position and limit for reading</span></span><br><span class=\"line\">        buf.limit(buf.position());</span><br><span class=\"line\">        buf.position(p);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>发现其传入了<code>buf</code>参数, 查找<code>buf</code>来到</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Scanner</span><span class=\"params\">(Readable source, Pattern pattern)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">assert</span> source != <span class=\"keyword\">null</span> : <span class=\"string\">\"source should not be null\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">assert</span> pattern != <span class=\"keyword\">null</span> : <span class=\"string\">\"pattern should not be null\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.source = source;</span><br><span class=\"line\">\tdelimPattern = pattern;</span><br><span class=\"line\">\tbuf = CharBuffer.allocate(BUFFER_SIZE);</span><br><span class=\"line\">\tbuf.limit(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tmatcher = delimPattern.matcher(buf);</span><br><span class=\"line\">\tmatcher.useTransparentBounds(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\tmatcher.useAnchoringBounds(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">\tuseLocale(Locale.getDefault(Locale.Category.FORMAT));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发现是这个构造方法 对buf进行的赋值, 而    <code>Scanner(Readable source)</code>这个构造方法也只是调用的上一个构造方法.</p>\n<p>所以问题解决了, 由于我是在一开始就实例化了一个<code>Scanner对象</code>. 导致传入<code>read()</code>方法的<code>buf</code>都是同一个 才导致的上文报错.</p>\n<p>@2019年7月28日19:18:23@</p>\n<p>囫囵吞枣的看完了接口<br>看了一部分内部类. 感觉很没有实感..<br>联系的太少了, 对他所说的没有感到<code>原来如此</code></p>\n<h3 id=\"7月29日-8月2日\"><a href=\"#7月29日-8月2日\" class=\"headerlink\" title=\"7月29日-8月2日\"></a>7月29日-8月2日</h3><p>又写了一个二手交易的后台, 马上今天是八月二号, 这个假期也过了小一半了. </p>\n<p>最近也看了看大数据相关的, 等这几天多看看关于大数据的, 也许我会选大数据专业emmm<br>@2019年8月2日20:22:20@<br>去看看ElasticSearch吧, 二手交易还差一个搜索</p>\n<p>设置ip地址<br>关闭防火墙<br>关闭保护<br>删除映射管理文件<br>关机–&gt;克隆四台电脑<br>@2019年8月2日23:42:36@</p>\n<h2 id=\"8-3-8-9\"><a href=\"#8-3-8-9\" class=\"headerlink\" title=\"8.3-8.9\"></a>8.3-8.9</h2><h3 id=\"8月3日\"><a href=\"#8月3日\" class=\"headerlink\" title=\"8月3日\"></a>8月3日</h3><p>大数据相关的删掉了, 移动到了单独的一篇博客</p>\n<h3 id=\"8月4日\"><a href=\"#8月4日\" class=\"headerlink\" title=\"8月4日\"></a>8月4日</h3><p>大数据相关的删掉了, 移动到了单独的一篇博客</p>\n<h3 id=\"8月8日\"><a href=\"#8月8日\" class=\"headerlink\" title=\"8月8日\"></a>8月8日</h3><p>继续学习大数据相关内容, 刷了一道算法题.待会看看Java IO流</p>\n<p><em>暑期计划就到此了, 自己对于将来从事什么, 还是有些迷茫, 还是多去刷刷算法题目, 找找自己的路再走吧</em></p>"},{"title":"游戏知识-腾讯游戏学院-如何进入游戏开发行业","date":"2019-12-22T12:50:02.000Z","_content":"\n由于自己了解的实在是不足, 所以来腾讯游戏课堂来学习一些架构之类的东西 来完善自己的知识面\n[想做游戏吗？如何开始我的游戏开发职业生涯](https://gameinstitute.qq.com/course/detail/10156)\n<!--more-->\n做游戏不会重复做同样的工作, 项目不同\n\n","source":"_posts/游戏知识-腾讯游戏学院-如何进入游戏开发行业.md","raw":"---\ntitle: 游戏知识-腾讯游戏学院-如何进入游戏开发行业\ntags:\n  - 腾讯游戏学院\ncategories:\n  - 游戏知识\n  - 腾讯游戏学院\ndate: 2019-12-22 20:50:02\n---\n\n由于自己了解的实在是不足, 所以来腾讯游戏课堂来学习一些架构之类的东西 来完善自己的知识面\n[想做游戏吗？如何开始我的游戏开发职业生涯](https://gameinstitute.qq.com/course/detail/10156)\n<!--more-->\n做游戏不会重复做同样的工作, 项目不同\n\n","slug":"游戏知识-腾讯游戏学院-如何进入游戏开发行业","published":1,"updated":"2020-03-05T14:04:56.802Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucz60025souoei5e9s3e","content":"<p>由于自己了解的实在是不足, 所以来腾讯游戏课堂来学习一些架构之类的东西 来完善自己的知识面<br><a href=\"https://gameinstitute.qq.com/course/detail/10156\" target=\"_blank\" rel=\"noopener\">想做游戏吗？如何开始我的游戏开发职业生涯</a></p>\n<a id=\"more\"></a>\n<p>做游戏不会重复做同样的工作, 项目不同</p>\n","site":{"data":{}},"excerpt":"<p>由于自己了解的实在是不足, 所以来腾讯游戏课堂来学习一些架构之类的东西 来完善自己的知识面<br><a href=\"https://gameinstitute.qq.com/course/detail/10156\" target=\"_blank\" rel=\"noopener\">想做游戏吗？如何开始我的游戏开发职业生涯</a></p>","more":"<p>做游戏不会重复做同样的工作, 项目不同</p>"},{"title":"游戏知识-服务器-服务器通信","date":"2019-12-22T12:50:02.000Z","_content":"\n由于自己了解的实在是不足, 所以来腾讯游戏课堂来学习一些架构之类的东西 来完善自己的知识面\n[服务器通信](https://gameinstitute.qq.com/course/detail/10096)\n<!--more-->\n# 概述\n作业型-单纯多个client对一个server .. 比如我开始写过的聊天室程序\n\n# CS通信\nDNS协议-基于UDP协议\n\nTCP\n面向连接的可靠的有时序性的-流式协议\n窗口管理\n流量控制\n数据确认\nUDP\n无连接不保证可靠性的无法保证时序-报文协议\n\nQQ-CS\n网络状况较好-UDP????-好吧还是处理了\n网络状况差-TCP\n大文件-TCP-TCP适合大文件交互, 因为他保持连接流式协议~\n\n微信-CS\n前台运行-TCP长连接\n后台运行-TCP短连接\n查看文章-HTTP(TCP短连接)\n\nQQ-早期产品, 花最少的前~榨干性能\n微信-腾讯后期产品\n\n----------------\n字符串\n自定义\nProtobuf\n\n序列化反序列化.\n\nUDP协议-不要让单个包的数据量超过1K, 否则会由于分片等 导致一个大包一旦一个分片失败就都失败\n\n存在的问题\n1. 客户端和服务端数据一直对不上\n可能是字节序的问题 - 字节序转换(网络字节数传送)\n2. 服务器发送的数据延迟-小包\nNAGLE算法-小包并不是立即发送-等存多了在一起发送-可以禁用掉~~\n3. 数据较大或者网络波动\n发送缓冲区慢了.. 适当加大发送缓冲区\n\n非阻塞IO\nO_NONBLOCK\n多路复用\nselect\npoll\nepoll\n\n# SS通信\nTCP-最常用\nUDP-非关键数据-日志服务-内网通信网络状况好可以超过MTU\n非SOCKET通信-进程间通信?-管道-信号-共享内存-信息队列-文件..","source":"_posts/游戏知识-服务器-服务器通信.md","raw":"---\ntitle: 游戏知识-服务器-服务器通信\ntags:\n  - 腾讯游戏学院\ncategories:\n  - 游戏知识\n  - 服务器\ndate: 2019-12-22 20:50:02\n---\n\n由于自己了解的实在是不足, 所以来腾讯游戏课堂来学习一些架构之类的东西 来完善自己的知识面\n[服务器通信](https://gameinstitute.qq.com/course/detail/10096)\n<!--more-->\n# 概述\n作业型-单纯多个client对一个server .. 比如我开始写过的聊天室程序\n\n# CS通信\nDNS协议-基于UDP协议\n\nTCP\n面向连接的可靠的有时序性的-流式协议\n窗口管理\n流量控制\n数据确认\nUDP\n无连接不保证可靠性的无法保证时序-报文协议\n\nQQ-CS\n网络状况较好-UDP????-好吧还是处理了\n网络状况差-TCP\n大文件-TCP-TCP适合大文件交互, 因为他保持连接流式协议~\n\n微信-CS\n前台运行-TCP长连接\n后台运行-TCP短连接\n查看文章-HTTP(TCP短连接)\n\nQQ-早期产品, 花最少的前~榨干性能\n微信-腾讯后期产品\n\n----------------\n字符串\n自定义\nProtobuf\n\n序列化反序列化.\n\nUDP协议-不要让单个包的数据量超过1K, 否则会由于分片等 导致一个大包一旦一个分片失败就都失败\n\n存在的问题\n1. 客户端和服务端数据一直对不上\n可能是字节序的问题 - 字节序转换(网络字节数传送)\n2. 服务器发送的数据延迟-小包\nNAGLE算法-小包并不是立即发送-等存多了在一起发送-可以禁用掉~~\n3. 数据较大或者网络波动\n发送缓冲区慢了.. 适当加大发送缓冲区\n\n非阻塞IO\nO_NONBLOCK\n多路复用\nselect\npoll\nepoll\n\n# SS通信\nTCP-最常用\nUDP-非关键数据-日志服务-内网通信网络状况好可以超过MTU\n非SOCKET通信-进程间通信?-管道-信号-共享内存-信息队列-文件..","slug":"游戏知识-服务器-服务器通信","published":1,"updated":"2020-03-05T14:04:59.979Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmucz70028souocpx10hz6","content":"<p>由于自己了解的实在是不足, 所以来腾讯游戏课堂来学习一些架构之类的东西 来完善自己的知识面<br><a href=\"https://gameinstitute.qq.com/course/detail/10096\" target=\"_blank\" rel=\"noopener\">服务器通信</a></p>\n<a id=\"more\"></a>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>作业型-单纯多个client对一个server .. 比如我开始写过的聊天室程序</p>\n<h1 id=\"CS通信\"><a href=\"#CS通信\" class=\"headerlink\" title=\"CS通信\"></a>CS通信</h1><p>DNS协议-基于UDP协议</p>\n<p>TCP<br>面向连接的可靠的有时序性的-流式协议<br>窗口管理<br>流量控制<br>数据确认<br>UDP<br>无连接不保证可靠性的无法保证时序-报文协议</p>\n<p>QQ-CS<br>网络状况较好-UDP????-好吧还是处理了<br>网络状况差-TCP<br>大文件-TCP-TCP适合大文件交互, 因为他保持连接流式协议~</p>\n<p>微信-CS<br>前台运行-TCP长连接<br>后台运行-TCP短连接<br>查看文章-HTTP(TCP短连接)</p>\n<p>QQ-早期产品, 花最少的前~榨干性能<br>微信-腾讯后期产品</p>\n<hr>\n<p>字符串<br>自定义<br>Protobuf</p>\n<p>序列化反序列化.</p>\n<p>UDP协议-不要让单个包的数据量超过1K, 否则会由于分片等 导致一个大包一旦一个分片失败就都失败</p>\n<p>存在的问题</p>\n<ol>\n<li>客户端和服务端数据一直对不上<br>可能是字节序的问题 - 字节序转换(网络字节数传送)</li>\n<li>服务器发送的数据延迟-小包<br>NAGLE算法-小包并不是立即发送-等存多了在一起发送-可以禁用掉~~</li>\n<li>数据较大或者网络波动<br>发送缓冲区慢了.. 适当加大发送缓冲区</li>\n</ol>\n<p>非阻塞IO<br>O_NONBLOCK<br>多路复用<br>select<br>poll<br>epoll</p>\n<h1 id=\"SS通信\"><a href=\"#SS通信\" class=\"headerlink\" title=\"SS通信\"></a>SS通信</h1><p>TCP-最常用<br>UDP-非关键数据-日志服务-内网通信网络状况好可以超过MTU<br>非SOCKET通信-进程间通信?-管道-信号-共享内存-信息队列-文件..</p>\n","site":{"data":{}},"excerpt":"<p>由于自己了解的实在是不足, 所以来腾讯游戏课堂来学习一些架构之类的东西 来完善自己的知识面<br><a href=\"https://gameinstitute.qq.com/course/detail/10096\" target=\"_blank\" rel=\"noopener\">服务器通信</a></p>","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>作业型-单纯多个client对一个server .. 比如我开始写过的聊天室程序</p>\n<h1 id=\"CS通信\"><a href=\"#CS通信\" class=\"headerlink\" title=\"CS通信\"></a>CS通信</h1><p>DNS协议-基于UDP协议</p>\n<p>TCP<br>面向连接的可靠的有时序性的-流式协议<br>窗口管理<br>流量控制<br>数据确认<br>UDP<br>无连接不保证可靠性的无法保证时序-报文协议</p>\n<p>QQ-CS<br>网络状况较好-UDP????-好吧还是处理了<br>网络状况差-TCP<br>大文件-TCP-TCP适合大文件交互, 因为他保持连接流式协议~</p>\n<p>微信-CS<br>前台运行-TCP长连接<br>后台运行-TCP短连接<br>查看文章-HTTP(TCP短连接)</p>\n<p>QQ-早期产品, 花最少的前~榨干性能<br>微信-腾讯后期产品</p>\n<hr>\n<p>字符串<br>自定义<br>Protobuf</p>\n<p>序列化反序列化.</p>\n<p>UDP协议-不要让单个包的数据量超过1K, 否则会由于分片等 导致一个大包一旦一个分片失败就都失败</p>\n<p>存在的问题</p>\n<ol>\n<li>客户端和服务端数据一直对不上<br>可能是字节序的问题 - 字节序转换(网络字节数传送)</li>\n<li>服务器发送的数据延迟-小包<br>NAGLE算法-小包并不是立即发送-等存多了在一起发送-可以禁用掉~~</li>\n<li>数据较大或者网络波动<br>发送缓冲区慢了.. 适当加大发送缓冲区</li>\n</ol>\n<p>非阻塞IO<br>O_NONBLOCK<br>多路复用<br>select<br>poll<br>epoll</p>\n<h1 id=\"SS通信\"><a href=\"#SS通信\" class=\"headerlink\" title=\"SS通信\"></a>SS通信</h1><p>TCP-最常用<br>UDP-非关键数据-日志服务-内网通信网络状况好可以超过MTU<br>非SOCKET通信-进程间通信?-管道-信号-共享内存-信息队列-文件..</p>"},{"title":"联机打砖块","date":"2020-02-17T14:49:56.000Z","_content":"这篇博客写的有点晚了, 自己的打砖块 已经写了一个段落了. 不过问题不大.\n\n重要的部分还在后面, 目前还没写到\n\n# 前言\n因为自己发现需要多做一些项目, 然后逐渐的丰富这些项目 来学习. 希望不断地提升自己, 让自己离鹅厂越来越近. 同时写博客能够让我了解得更深刻\n\n在看到知乎`日撸代码100行`的一篇推荐博客\n\n[UE4的C++教程汇总 - 日撸代码100行的文章 - 知乎](https://zhuanlan.zhihu.com/p/92422059)\n找到了那个油管的游戏制作.\n\n[这个连接-Unreal Engine 4 Tutorials](https://www.youtube.com/playlist?list=PLZhNP5qJ2IA0KK3ddSl2JWEL8jOcGe6xY)\n选择了一个游戏-打砖块\n\n那个小游戏还是很简单的 也学到了不少的东西. 不过我想了想 我既然是做游戏服务器, 我为什么不把打砖块修改成联机版打砖块??   不对!!!!我想把那个博主发布的我喜欢的游戏都改成联机版. 然后慢慢丰富游戏前端和后端的功能, 想到这里 我晚上失眠了.... 越想越兴奋.\n\n自己的话 注意下代码复用. 尤其是后端的代码. 每次把经常用的代码块抽出来 然后总结出一个自己的框架?库?\n\n# 联机的实现\n```c++\n// a.h\nUFUNCTION(BlueprintCallable, Category = \"TCP Network\")\nbool CreateSocket(const FString IPStr, int32 Port);\n\nUFUNCTION(BlueprintCallable, Category = \"TCP Network\")\nbool SendMessage(FString Msg);\n\nUFUNCTION(BlueprintCallable, Category = \"TCP Network\")\nFString RecvMessage();\n\nFString StringFromUint8Array(TArray<uint8> Array);\n\nFIPv4Address Ip;\n\nFSocket* ClientFd;\n\n// a.cpp\nbool ANetActor::CreateSocket(const FString IPStr, int32 Port)\n{\n\t// 将字符串ip转换为点分十进制ip\n\tFIPv4Address::Parse(IPStr, Ip);\n\n\t// 将十进制ip 转化成网络地址\n\tTSharedPtr<FInternetAddr> addr = ISocketSubsystem::Get(PLATFORM_SOCKETSUBSYSTEM)->CreateInternetAddr();\n\taddr->SetIp(Ip.Value);\n\taddr->SetPort(Port);\n\n\t// 创建TCP Socket 文件描述符\n\tClientFd = ISocketSubsystem::Get(PLATFORM_SOCKETSUBSYSTEM)->CreateSocket(NAME_Stream, TEXT(\"TCP SOCKET\"), false);\n\n\t\n\tif (ClientFd->Connect(*addr))\n\t{\n\t\t// 连接成功\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Connect success!\"));\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\t// 连接失败\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Connect failed!\"));\n\t\treturn false;\n\t}\n}\n\nbool ANetActor::SendMessage(FString Msg)\n{\n\t//后面直接传送json数据\n\tTCHAR* SeriallizedMsg = Msg.GetCharArray().GetData();\n\tint32 MsgSize = FCString::Strlen(SeriallizedMsg);\n\tint32 Send = 0;\n\n\tif (ClientFd->Send((uint8*)TCHAR_TO_UTF8(SeriallizedMsg), MsgSize, Send))\n\t{\n\t\tUE_LOG(LogTemp, Log, TEXT(\"MsgSend-Success->%s\"), *Msg);\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\tUE_LOG(LogTemp, Log, TEXT(\"MsgSend-Failed->%s\"), *Msg);\n\t\treturn false;\n\t}\n}\n\nFString ANetActor::RecvMessage()\n{\n\tif (!ClientFd)\n\t{\n\t\treturn \"\";\n\t}\n\n\tTArray<uint8> RecvData;\n\tuint32 Size;\n\tuint32 Element = 0;\n\n\twhile (ClientFd->HasPendingData(Size))\n\t{\n\t\tRecvData.Init(Element, FMath::Min(Size, 65507u)); // 65535 - 20 Ip头 - 8 Tcp头\n\t\tint32 Read = 0;\n\t\tClientFd->Recv(RecvData.GetData(), RecvData.Num(), Read);\n\t}\n\n\tif (RecvData.Num() <= 0)\n\t{\n\t\treturn \"\";\n\t}\n\n\tconst FString RecvJsonString = StringFromUint8Array(RecvData);\n\tUE_LOG(LogTemp, Log, TEXT(\"MsgRecv-Success->%s\"), *RecvJsonString);\n\n\treturn RecvJsonString;\n}\n```\n蓝图连接\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E5%B0%8F%E6%B8%B8%E6%88%8F/%E6%89%93%E7%A0%96%E5%9D%97/socket%E8%93%9D%E5%9B%BE.png)\n\n这样就能连接到TCP的后台了","source":"_posts/小游戏-联机打砖块.md","raw":"---\ntitle: 联机打砖块\ndate: 2020-02-17 22:49:56\ntags:\n  - 小游戏\n\ncategories:\n  - 小游戏\n---\n这篇博客写的有点晚了, 自己的打砖块 已经写了一个段落了. 不过问题不大.\n\n重要的部分还在后面, 目前还没写到\n\n# 前言\n因为自己发现需要多做一些项目, 然后逐渐的丰富这些项目 来学习. 希望不断地提升自己, 让自己离鹅厂越来越近. 同时写博客能够让我了解得更深刻\n\n在看到知乎`日撸代码100行`的一篇推荐博客\n\n[UE4的C++教程汇总 - 日撸代码100行的文章 - 知乎](https://zhuanlan.zhihu.com/p/92422059)\n找到了那个油管的游戏制作.\n\n[这个连接-Unreal Engine 4 Tutorials](https://www.youtube.com/playlist?list=PLZhNP5qJ2IA0KK3ddSl2JWEL8jOcGe6xY)\n选择了一个游戏-打砖块\n\n那个小游戏还是很简单的 也学到了不少的东西. 不过我想了想 我既然是做游戏服务器, 我为什么不把打砖块修改成联机版打砖块??   不对!!!!我想把那个博主发布的我喜欢的游戏都改成联机版. 然后慢慢丰富游戏前端和后端的功能, 想到这里 我晚上失眠了.... 越想越兴奋.\n\n自己的话 注意下代码复用. 尤其是后端的代码. 每次把经常用的代码块抽出来 然后总结出一个自己的框架?库?\n\n# 联机的实现\n```c++\n// a.h\nUFUNCTION(BlueprintCallable, Category = \"TCP Network\")\nbool CreateSocket(const FString IPStr, int32 Port);\n\nUFUNCTION(BlueprintCallable, Category = \"TCP Network\")\nbool SendMessage(FString Msg);\n\nUFUNCTION(BlueprintCallable, Category = \"TCP Network\")\nFString RecvMessage();\n\nFString StringFromUint8Array(TArray<uint8> Array);\n\nFIPv4Address Ip;\n\nFSocket* ClientFd;\n\n// a.cpp\nbool ANetActor::CreateSocket(const FString IPStr, int32 Port)\n{\n\t// 将字符串ip转换为点分十进制ip\n\tFIPv4Address::Parse(IPStr, Ip);\n\n\t// 将十进制ip 转化成网络地址\n\tTSharedPtr<FInternetAddr> addr = ISocketSubsystem::Get(PLATFORM_SOCKETSUBSYSTEM)->CreateInternetAddr();\n\taddr->SetIp(Ip.Value);\n\taddr->SetPort(Port);\n\n\t// 创建TCP Socket 文件描述符\n\tClientFd = ISocketSubsystem::Get(PLATFORM_SOCKETSUBSYSTEM)->CreateSocket(NAME_Stream, TEXT(\"TCP SOCKET\"), false);\n\n\t\n\tif (ClientFd->Connect(*addr))\n\t{\n\t\t// 连接成功\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Connect success!\"));\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\t// 连接失败\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Connect failed!\"));\n\t\treturn false;\n\t}\n}\n\nbool ANetActor::SendMessage(FString Msg)\n{\n\t//后面直接传送json数据\n\tTCHAR* SeriallizedMsg = Msg.GetCharArray().GetData();\n\tint32 MsgSize = FCString::Strlen(SeriallizedMsg);\n\tint32 Send = 0;\n\n\tif (ClientFd->Send((uint8*)TCHAR_TO_UTF8(SeriallizedMsg), MsgSize, Send))\n\t{\n\t\tUE_LOG(LogTemp, Log, TEXT(\"MsgSend-Success->%s\"), *Msg);\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\tUE_LOG(LogTemp, Log, TEXT(\"MsgSend-Failed->%s\"), *Msg);\n\t\treturn false;\n\t}\n}\n\nFString ANetActor::RecvMessage()\n{\n\tif (!ClientFd)\n\t{\n\t\treturn \"\";\n\t}\n\n\tTArray<uint8> RecvData;\n\tuint32 Size;\n\tuint32 Element = 0;\n\n\twhile (ClientFd->HasPendingData(Size))\n\t{\n\t\tRecvData.Init(Element, FMath::Min(Size, 65507u)); // 65535 - 20 Ip头 - 8 Tcp头\n\t\tint32 Read = 0;\n\t\tClientFd->Recv(RecvData.GetData(), RecvData.Num(), Read);\n\t}\n\n\tif (RecvData.Num() <= 0)\n\t{\n\t\treturn \"\";\n\t}\n\n\tconst FString RecvJsonString = StringFromUint8Array(RecvData);\n\tUE_LOG(LogTemp, Log, TEXT(\"MsgRecv-Success->%s\"), *RecvJsonString);\n\n\treturn RecvJsonString;\n}\n```\n蓝图连接\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E5%B0%8F%E6%B8%B8%E6%88%8F/%E6%89%93%E7%A0%96%E5%9D%97/socket%E8%93%9D%E5%9B%BE.png)\n\n这样就能连接到TCP的后台了","slug":"小游戏-联机打砖块","published":1,"updated":"2020-02-19T14:35:22.496Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmuczb002bsouo62is9iwc","content":"<p>这篇博客写的有点晚了, 自己的打砖块 已经写了一个段落了. 不过问题不大.</p>\n<p>重要的部分还在后面, 目前还没写到</p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>因为自己发现需要多做一些项目, 然后逐渐的丰富这些项目 来学习. 希望不断地提升自己, 让自己离鹅厂越来越近. 同时写博客能够让我了解得更深刻</p>\n<p>在看到知乎<code>日撸代码100行</code>的一篇推荐博客</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/92422059\" target=\"_blank\" rel=\"noopener\">UE4的C++教程汇总 - 日撸代码100行的文章 - 知乎</a><br>找到了那个油管的游戏制作.</p>\n<p><a href=\"https://www.youtube.com/playlist?list=PLZhNP5qJ2IA0KK3ddSl2JWEL8jOcGe6xY\" target=\"_blank\" rel=\"noopener\">这个连接-Unreal Engine 4 Tutorials</a><br>选择了一个游戏-打砖块</p>\n<p>那个小游戏还是很简单的 也学到了不少的东西. 不过我想了想 我既然是做游戏服务器, 我为什么不把打砖块修改成联机版打砖块??   不对!!!!我想把那个博主发布的我喜欢的游戏都改成联机版. 然后慢慢丰富游戏前端和后端的功能, 想到这里 我晚上失眠了…. 越想越兴奋.</p>\n<p>自己的话 注意下代码复用. 尤其是后端的代码. 每次把经常用的代码块抽出来 然后总结出一个自己的框架?库?</p>\n<h1 id=\"联机的实现\"><a href=\"#联机的实现\" class=\"headerlink\" title=\"联机的实现\"></a>联机的实现</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.h</span></span><br><span class=\"line\">UFUNCTION(BlueprintCallable, Category = <span class=\"string\">\"TCP Network\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">CreateSocket</span><span class=\"params\">(<span class=\"keyword\">const</span> FString IPStr, int32 Port)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">UFUNCTION(BlueprintCallable, Category = <span class=\"string\">\"TCP Network\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">SendMessage</span><span class=\"params\">(FString Msg)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">UFUNCTION(BlueprintCallable, Category = <span class=\"string\">\"TCP Network\"</span>)</span><br><span class=\"line\"><span class=\"function\">FString <span class=\"title\">RecvMessage</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">FString <span class=\"title\">StringFromUint8Array</span><span class=\"params\">(TArray&lt;uint8&gt; Array)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">FIPv4Address Ip;</span><br><span class=\"line\"></span><br><span class=\"line\">FSocket* ClientFd;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ANetActor::CreateSocket</span><span class=\"params\">(<span class=\"keyword\">const</span> FString IPStr, int32 Port)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 将字符串ip转换为点分十进制ip</span></span><br><span class=\"line\">\tFIPv4Address::Parse(IPStr, Ip);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 将十进制ip 转化成网络地址</span></span><br><span class=\"line\">\tTSharedPtr&lt;FInternetAddr&gt; addr = ISocketSubsystem::Get(PLATFORM_SOCKETSUBSYSTEM)-&gt;CreateInternetAddr();</span><br><span class=\"line\">\taddr-&gt;SetIp(Ip.Value);</span><br><span class=\"line\">\taddr-&gt;SetPort(Port);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建TCP Socket 文件描述符</span></span><br><span class=\"line\">\tClientFd = ISocketSubsystem::Get(PLATFORM_SOCKETSUBSYSTEM)-&gt;CreateSocket(NAME_Stream, TEXT(<span class=\"string\">\"TCP SOCKET\"</span>), <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ClientFd-&gt;Connect(*addr))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 连接成功</span></span><br><span class=\"line\">\t\tUE_LOG(LogTemp, Warning, TEXT(<span class=\"string\">\"Connect success!\"</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 连接失败</span></span><br><span class=\"line\">\t\tUE_LOG(LogTemp, Warning, TEXT(<span class=\"string\">\"Connect failed!\"</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ANetActor::SendMessage</span><span class=\"params\">(FString Msg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//后面直接传送json数据</span></span><br><span class=\"line\">\tTCHAR* SeriallizedMsg = Msg.GetCharArray().GetData();</span><br><span class=\"line\">\tint32 MsgSize = FCString::Strlen(SeriallizedMsg);</span><br><span class=\"line\">\tint32 Send = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ClientFd-&gt;Send((uint8*)TCHAR_TO_UTF8(SeriallizedMsg), MsgSize, Send))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tUE_LOG(LogTemp, Log, TEXT(<span class=\"string\">\"MsgSend-Success-&gt;%s\"</span>), *Msg);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tUE_LOG(LogTemp, Log, TEXT(<span class=\"string\">\"MsgSend-Failed-&gt;%s\"</span>), *Msg);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">FString <span class=\"title\">ANetActor::RecvMessage</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!ClientFd)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tTArray&lt;uint8&gt; RecvData;</span><br><span class=\"line\">\tuint32 Size;</span><br><span class=\"line\">\tuint32 Element = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (ClientFd-&gt;HasPendingData(Size))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tRecvData.Init(Element, FMath::Min(Size, <span class=\"number\">65507u</span>)); <span class=\"comment\">// 65535 - 20 Ip头 - 8 Tcp头</span></span><br><span class=\"line\">\t\tint32 Read = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tClientFd-&gt;Recv(RecvData.GetData(), RecvData.Num(), Read);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (RecvData.Num() &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> FString RecvJsonString = StringFromUint8Array(RecvData);</span><br><span class=\"line\">\tUE_LOG(LogTemp, Log, TEXT(<span class=\"string\">\"MsgRecv-Success-&gt;%s\"</span>), *RecvJsonString);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> RecvJsonString;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>蓝图连接<br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E5%B0%8F%E6%B8%B8%E6%88%8F/%E6%89%93%E7%A0%96%E5%9D%97/socket%E8%93%9D%E5%9B%BE.png\" alt=\"\"></p>\n<p>这样就能连接到TCP的后台了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这篇博客写的有点晚了, 自己的打砖块 已经写了一个段落了. 不过问题不大.</p>\n<p>重要的部分还在后面, 目前还没写到</p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>因为自己发现需要多做一些项目, 然后逐渐的丰富这些项目 来学习. 希望不断地提升自己, 让自己离鹅厂越来越近. 同时写博客能够让我了解得更深刻</p>\n<p>在看到知乎<code>日撸代码100行</code>的一篇推荐博客</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/92422059\" target=\"_blank\" rel=\"noopener\">UE4的C++教程汇总 - 日撸代码100行的文章 - 知乎</a><br>找到了那个油管的游戏制作.</p>\n<p><a href=\"https://www.youtube.com/playlist?list=PLZhNP5qJ2IA0KK3ddSl2JWEL8jOcGe6xY\" target=\"_blank\" rel=\"noopener\">这个连接-Unreal Engine 4 Tutorials</a><br>选择了一个游戏-打砖块</p>\n<p>那个小游戏还是很简单的 也学到了不少的东西. 不过我想了想 我既然是做游戏服务器, 我为什么不把打砖块修改成联机版打砖块??   不对!!!!我想把那个博主发布的我喜欢的游戏都改成联机版. 然后慢慢丰富游戏前端和后端的功能, 想到这里 我晚上失眠了…. 越想越兴奋.</p>\n<p>自己的话 注意下代码复用. 尤其是后端的代码. 每次把经常用的代码块抽出来 然后总结出一个自己的框架?库?</p>\n<h1 id=\"联机的实现\"><a href=\"#联机的实现\" class=\"headerlink\" title=\"联机的实现\"></a>联机的实现</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.h</span></span><br><span class=\"line\">UFUNCTION(BlueprintCallable, Category = <span class=\"string\">\"TCP Network\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">CreateSocket</span><span class=\"params\">(<span class=\"keyword\">const</span> FString IPStr, int32 Port)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">UFUNCTION(BlueprintCallable, Category = <span class=\"string\">\"TCP Network\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">SendMessage</span><span class=\"params\">(FString Msg)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">UFUNCTION(BlueprintCallable, Category = <span class=\"string\">\"TCP Network\"</span>)</span><br><span class=\"line\"><span class=\"function\">FString <span class=\"title\">RecvMessage</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">FString <span class=\"title\">StringFromUint8Array</span><span class=\"params\">(TArray&lt;uint8&gt; Array)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">FIPv4Address Ip;</span><br><span class=\"line\"></span><br><span class=\"line\">FSocket* ClientFd;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ANetActor::CreateSocket</span><span class=\"params\">(<span class=\"keyword\">const</span> FString IPStr, int32 Port)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 将字符串ip转换为点分十进制ip</span></span><br><span class=\"line\">\tFIPv4Address::Parse(IPStr, Ip);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 将十进制ip 转化成网络地址</span></span><br><span class=\"line\">\tTSharedPtr&lt;FInternetAddr&gt; addr = ISocketSubsystem::Get(PLATFORM_SOCKETSUBSYSTEM)-&gt;CreateInternetAddr();</span><br><span class=\"line\">\taddr-&gt;SetIp(Ip.Value);</span><br><span class=\"line\">\taddr-&gt;SetPort(Port);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建TCP Socket 文件描述符</span></span><br><span class=\"line\">\tClientFd = ISocketSubsystem::Get(PLATFORM_SOCKETSUBSYSTEM)-&gt;CreateSocket(NAME_Stream, TEXT(<span class=\"string\">\"TCP SOCKET\"</span>), <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ClientFd-&gt;Connect(*addr))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 连接成功</span></span><br><span class=\"line\">\t\tUE_LOG(LogTemp, Warning, TEXT(<span class=\"string\">\"Connect success!\"</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 连接失败</span></span><br><span class=\"line\">\t\tUE_LOG(LogTemp, Warning, TEXT(<span class=\"string\">\"Connect failed!\"</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ANetActor::SendMessage</span><span class=\"params\">(FString Msg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//后面直接传送json数据</span></span><br><span class=\"line\">\tTCHAR* SeriallizedMsg = Msg.GetCharArray().GetData();</span><br><span class=\"line\">\tint32 MsgSize = FCString::Strlen(SeriallizedMsg);</span><br><span class=\"line\">\tint32 Send = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ClientFd-&gt;Send((uint8*)TCHAR_TO_UTF8(SeriallizedMsg), MsgSize, Send))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tUE_LOG(LogTemp, Log, TEXT(<span class=\"string\">\"MsgSend-Success-&gt;%s\"</span>), *Msg);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tUE_LOG(LogTemp, Log, TEXT(<span class=\"string\">\"MsgSend-Failed-&gt;%s\"</span>), *Msg);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">FString <span class=\"title\">ANetActor::RecvMessage</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!ClientFd)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tTArray&lt;uint8&gt; RecvData;</span><br><span class=\"line\">\tuint32 Size;</span><br><span class=\"line\">\tuint32 Element = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (ClientFd-&gt;HasPendingData(Size))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tRecvData.Init(Element, FMath::Min(Size, <span class=\"number\">65507u</span>)); <span class=\"comment\">// 65535 - 20 Ip头 - 8 Tcp头</span></span><br><span class=\"line\">\t\tint32 Read = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tClientFd-&gt;Recv(RecvData.GetData(), RecvData.Num(), Read);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (RecvData.Num() &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> FString RecvJsonString = StringFromUint8Array(RecvData);</span><br><span class=\"line\">\tUE_LOG(LogTemp, Log, TEXT(<span class=\"string\">\"MsgRecv-Success-&gt;%s\"</span>), *RecvJsonString);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> RecvJsonString;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>蓝图连接<br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E5%B0%8F%E6%B8%B8%E6%88%8F/%E6%89%93%E7%A0%96%E5%9D%97/socket%E8%93%9D%E5%9B%BE.png\" alt=\"\"></p>\n<p>这样就能连接到TCP的后台了</p>\n"},{"title":"球球","date":"2020-03-05T13:50:02.000Z","_content":"\n[休闲: 球球](https://gameinstitute.qq.com/course/detail/10110)\n\nP2P 模式........ 好吧没有采用基本模式\n采用了变种, 从客户端中选取主客户端 局域网游戏会采用\n\n\n**状态同步**\nMMO用的多, 断线重连简单 直接返回状态\n\n收到命令集 计算后 返回结果 防作弊 服务器压力大 包量大\n\n预表现emm\n\n\n**帧同步**\n服务器广播客户端发送的指令集, 断线重连需要补上丢失的帧\n\n预表现emm\n\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E8%AF%BE%E5%A0%82/%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%B8%A7%E5%90%8C%E6%AD%A5%E5%AF%B9%E6%AF%94.png)\n\n航标\n终于知道游戏瞬移是怎么回事了\n\n影子追随\n\n心跳包矫正时间 获取延迟等等\n\n\n王者 帧同步.\n\n守望先锋 16ms一个包\n\nRTT网络延迟\n\n预表现","source":"_posts/游戏知识-腾讯游戏学院-球球.md","raw":"---\ntitle: 球球\ntags:\n  - 腾讯游戏学院\ncategories:\n  - 游戏知识\n  - 服务器\ndate: 2020-03-05 21:50:02\n---\n\n[休闲: 球球](https://gameinstitute.qq.com/course/detail/10110)\n\nP2P 模式........ 好吧没有采用基本模式\n采用了变种, 从客户端中选取主客户端 局域网游戏会采用\n\n\n**状态同步**\nMMO用的多, 断线重连简单 直接返回状态\n\n收到命令集 计算后 返回结果 防作弊 服务器压力大 包量大\n\n预表现emm\n\n\n**帧同步**\n服务器广播客户端发送的指令集, 断线重连需要补上丢失的帧\n\n预表现emm\n\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E8%AF%BE%E5%A0%82/%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%B8%A7%E5%90%8C%E6%AD%A5%E5%AF%B9%E6%AF%94.png)\n\n航标\n终于知道游戏瞬移是怎么回事了\n\n影子追随\n\n心跳包矫正时间 获取延迟等等\n\n\n王者 帧同步.\n\n守望先锋 16ms一个包\n\nRTT网络延迟\n\n预表现","slug":"游戏知识-腾讯游戏学院-球球","published":1,"updated":"2020-03-05T14:42:14.972Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmuczb002esouo9ccl867s","content":"<p><a href=\"https://gameinstitute.qq.com/course/detail/10110\" target=\"_blank\" rel=\"noopener\">休闲: 球球</a></p>\n<p>P2P 模式…….. 好吧没有采用基本模式<br>采用了变种, 从客户端中选取主客户端 局域网游戏会采用</p>\n<p><strong>状态同步</strong><br>MMO用的多, 断线重连简单 直接返回状态</p>\n<p>收到命令集 计算后 返回结果 防作弊 服务器压力大 包量大</p>\n<p>预表现emm</p>\n<p><strong>帧同步</strong><br>服务器广播客户端发送的指令集, 断线重连需要补上丢失的帧</p>\n<p>预表现emm</p>\n<p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E8%AF%BE%E5%A0%82/%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%B8%A7%E5%90%8C%E6%AD%A5%E5%AF%B9%E6%AF%94.png\" alt=\"\"></p>\n<p>航标<br>终于知道游戏瞬移是怎么回事了</p>\n<p>影子追随</p>\n<p>心跳包矫正时间 获取延迟等等</p>\n<p>王者 帧同步.</p>\n<p>守望先锋 16ms一个包</p>\n<p>RTT网络延迟</p>\n<p>预表现</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://gameinstitute.qq.com/course/detail/10110\" target=\"_blank\" rel=\"noopener\">休闲: 球球</a></p>\n<p>P2P 模式…….. 好吧没有采用基本模式<br>采用了变种, 从客户端中选取主客户端 局域网游戏会采用</p>\n<p><strong>状态同步</strong><br>MMO用的多, 断线重连简单 直接返回状态</p>\n<p>收到命令集 计算后 返回结果 防作弊 服务器压力大 包量大</p>\n<p>预表现emm</p>\n<p><strong>帧同步</strong><br>服务器广播客户端发送的指令集, 断线重连需要补上丢失的帧</p>\n<p>预表现emm</p>\n<p><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E8%AF%BE%E5%A0%82/%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%B8%A7%E5%90%8C%E6%AD%A5%E5%AF%B9%E6%AF%94.png\" alt=\"\"></p>\n<p>航标<br>终于知道游戏瞬移是怎么回事了</p>\n<p>影子追随</p>\n<p>心跳包矫正时间 获取延迟等等</p>\n<p>王者 帧同步.</p>\n<p>守望先锋 16ms一个包</p>\n<p>RTT网络延迟</p>\n<p>预表现</p>\n"},{"title":"大二寒假及下学期学习记录","date":"2020-02-01T09:30:32.000Z","_content":"\n现在是`2020年2月1日17:32:50` 寒假过半? 目前还不知道寒假什么时候开学. 为了自己能够前往心目中的公司, 学习是必不可少的.\n学习的同时 应该要注意总结, 防止一天或者一周下来白忙活\n我们寒假开始是一月九号 到我开始寒假学习的一月二十三号 这些天没有学习用来玩了, 好在后面拾了回来\n从二十三号到现在二月一号, 每天学习的长度和质量总算是在慢慢上升\n距离下一个寒假只剩下一年的时间了, 需要更加的努力, 为了大三暑假能够进入心中的公司 大三寒假的实习必不可少了. 加倍努力吧\n\n这篇博客的标题起初是`大二寒假学习记录`后来改成了`大二寒假及下学期学习记录`寒假的学习必不可少, 下学期更要抓紧时间了.\n\n# 二月\n## 一日2020年2月1日17:39:59\n\n前几天把博客从我自己的服务器迁移到了coding上, 方便以后我乱搞服务器, 现在服务器上没有重要的内容了\n至于实际的学习方面, 我开始整理我的博客[主要是这篇](https://blog.lsmg.xyz/2019/08/CPP-Linux-%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/)这篇现在算告一段落了, 主要是把自己以前学过的用一用. 空洞的写下api\n理解不是很深刻.[这两天修改的这一篇](https://blog.lsmg.xyz/2019/08/CPP-Linux-%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86/). 第二篇自己缺少的东西很多, 由于当时学习到了后面实在是学不下去了.\n所以现在把后面的部分重新写了一下. 高级部分的线程和进程的部分 实在是太走马观花. 等我顺序学到了 再多写一些例子\n\n今天的话, 练习了下poll系统调用, 写了一个poll的demo, 然后是整理了下信号的部分, 信号这里整理的依然很少 平时用到的不多, 需要多加使用\n主要是定时器这里了 定时器把原来的内容删掉了 从新写目前只写完了socket定时\n\n接下来打算还是多写一些项目 多思考一些 等我整理完了高级部分 就准备去看开源项目?每次看开源项目都感觉自己差的太多, 不知道从哪里看起\n所以搭配着别人的笔记学习下看源码. 当然看源码之前还是要会大概的使用. 高级部分自然包括了libevent的使用部分\n\n跑去写项目了\n\n## 二日2020年2月2日18:03:23\n\n罪过罪过, 昨天晚上十一点半 玩了一把军团TD 结果玩到了十二点半 ..... 最后一点半才睡觉\n今天早上小十一点才起床.\n我依稀记得我八点被闹钟叫起来emm 然后想着定八点半的闹钟 再睡一会, 结果闹钟没定我就睡着了.\n\n起来后整理了整理吃了午饭, 就下午小一点了, 打开高级部分 学习`信号SIGALRM定时`\n\n代码量就400行 一直到我写今天的博客 才算完工\n\n**先写一下遇到的一个问题吧**\n首先表现出来的是`超时后 服务器没有断开连接`\n然后我去打断点, 发现不是定时器链表部分的问题. 是定时信号没有触发`epoll_wait`.\n这里我看了下代码, 发现定时器没有启动加上了`alarm(5)`, 我本意是理解了书上的代码 再去自己写, 结果还是理解的不深刻, 竟然丢了启动定时器的函数.\n然后我又运行了下`发现还是没有运行到`\n然后发现`epoll_wait 返回-1 设置EINTR`, 后来查阅了下说是被信号处理器中断, 思考可能是与IDE下断点有关??????\n最后发现自己没有把信号的管道添加到`epollfd`中再一细看发现丢了关于信号管道的四行代码...\n\n这个问题应该是很容易排查. 事后感觉应该这样思考\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/epoll%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5.png)\n以后尽量总结正确的思考模式, 虽然不知道有没有用 但要试一试.\n\n**项目收获方面**\n虽然这个项目只有400多行代码, 但我自己是绝对写不出来的. 只能尽量总结书上代码的好处\n1. 首先肯定是使用alarm超时产生信号SIGALRM来触发回调函数 实现定时\n2. 信号回调函数, 没有直接去触发定时器tick函数, 而是通过一个管道传到了epollfd中, 然后从epollfd的函数中触发相关的if 再去调用tick函数\n```c++\nvoid timer_handler() //真正的生效部分\n{\n    timer_lst.tick();\n    alarm(TIMESLOT);\n}\nvoid sig_handler(int sig)\n{\n    int save_errno = errno;\n    int msg = sig;\n    send(pipefd[1], (char*)&msg, 1, 0); // pipefd[0]注册进了epoll中 接受到来的信号\n    errno = save_errno;\n}\n\nvoid addsig(int sig)// 信号添加\n{\n    struct sigaction sa{};\n    sa.sa_flags |= SA_RESTART;\n    sa.sa_handler = sig_handler;\n    sigfillset(&sa.sa_mask);\n    exit_if(sigaction(sig, &sa, nullptr) == -1, \"add sig error\");\n}\n\nchar signals[1024]; // 信号接收, 可能存在多个信号 所以用返回的字节数来逐个取出信号\nret = recv(sockfd, signals, sizeof(signals), 0); 取出后使用switch来分离信号\n```\n3. 将大部分常量 #define\n大概只能总结出这一些来了, 完整的代码我贴在github上吧\n\n## 五日 2020年2月6日09:16:23\n三和四号 基本都在玩FF14, 发现自己并不是玩游戏了, 感觉被FF14玩了, 就是那种感觉累了不想玩了, 但却离自己定的小目标远 然后坚持\nemm 其实感觉这个时候应该下游戏.\n想想自己这大学一年半玩过的游戏 血族我算是玩的时间最长的大概前前后后我玩了五年, 应该是上半年把 我弃坑了. 游戏后面太氪了, 不得不退游了.\n后面崩三啥的也玩过, 发现自己并不适合肝的游戏. 最近一个月入坑了fgo, 开始的几个星期还是玩的累了, 自己太肝了, 最近这几天感觉休闲了不少, \n心态也正常了, 所以暂且会玩一玩.\n\n主要还是后面这些吧, 我发现自己逐渐有了一个念头: 累了就去玩会游戏, 就去看会直播, 刷刷B站. 后来我感觉这些浪费时间就去搜索了一下\n**玩游戏算浪费时间吗**, 刚才去找了下. 没找到我之前看过的那篇. 结论就是为什么自己不是累了就去小睡一下, 或者看看书,再或者刷刷新的科技圈\n长长见识? 自己尝试了看书, 发现自己并不是太抗拒. 以后试试把.\n\n最后自己作为一个想开发游戏的人, 总感觉不玩游戏是不合适的, 但要玩的适度, 毕竟自己还有一年的时间就要找寒假实习, 为了自己的大三暑假进入大厂打下基础.\n平衡好才是上策.\n\n接下文, 我发现自己有点?(自信点把点去掉)好高骛远了, 好高骛远会消磨一个人的兴趣和信心. 最终决定不做什么大游戏, 不研究什么框架, 先用自己所会的写一个小游戏,\n一是为了试着重新拾起兴趣, 二是如果只学而不去写项目, 没有太大收获的\n\n昨天一天都是策划和编写一个游戏, 游戏逻辑十分的简单. 猜数字 初期的流程图我大概画了下, 姑且算作第一版吧 下面放出来, 我后面可以逐渐丰富这个东西 加上日志登录\n断线重连等等功能.感觉还是可以的~~ 尽管逻辑很简单.\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E5%B0%8F%E6%B8%B8%E6%88%8F-%E7%8C%9C%E6%95%B0%E5%AD%97/%E6%B8%B8%E6%88%8F%E6%B5%81%E7%A8%8B1.png)\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E5%B0%8F%E6%B8%B8%E6%88%8F-%E7%8C%9C%E6%95%B0%E5%AD%97/%E6%B8%B8%E6%88%8F%E6%A0%B8%E5%BF%83%E9%80%BB%E8%BE%911.png)\n\n听说在写代码前规划好, 可以更好地组织代码, 昨天尝试了下感觉还不错. 我在写代码前把游戏的流程图画了一下, 然后标上了哪里会有什么数据交互,\n之后我去写了数据包头格式\n**头部**\n\n| 偏移量 | 长度 | 含义\n| --- | --- | --- |\n| 0 | 4 | 封包总大小 |\n| 4 | 2 | 头部长度 |\n| 6 | 2 | 操作码 |\n\n**操作码**\n\n| 代码 | 含义 | 数据格式 |\n| --- | --- | --- |\n| 00 | 登录 | |\n| 01 | 桌位信息(服务器发送桌位列表) | [1000-0-4][1001-0-4] |\n| 02 | 桌位操作信息(客户端加入 退出桌位) | 1000 |\n| 03 | 服务器桌位操作信息反馈(加入退出成功1 加入退出失败0) | 1 |\n| 04 | 准备 | 无 |\n| 05 | 取消准备 | 无 |\n| 06 | 服务器广播桌位信息 | 4[11][10][00][00] (桌位总数, 有人1 准备1) |\n| A1 | 服务器广播游戏开始 | 空 |\n| A2 | 服务器下发轮到的客户端 | 空 |\n| A3 | 客户端发送猜测的数字 | 50 |\n| A4 | 服务器发送猜测数字反馈 (数据合理1, 数据非法0) | 1 |\n| A5 | 服务器广播游戏状态 | 50-0-75[A][B] (A玩家猜出50 当前范围 0到75 B玩家准备) |\n\n然后草拟了一下 用到的类 用到的数据结构 分几个类 怎么联系起来, 最终我才去写代码, 感觉比一边写\n一边想要好不少. 写的过程中也发现了一些问题\n1. `EPOLLRDHUP`这个绑定在listenfd还是newfd?? 如果是newfd还能理解下原理, listenfd就有点理解不了.(试了下, 是newfd)\n2. \n```c++\nFoo *a;\nFoos b[3];\nb[1] = *a;\n// 修改a不会影响b[1], 这个问题听到过, 自己真正试了试才发现如此\n```\n\n姑且昨天的就补上这些吧. 今天打算把游戏的服务器跑起来\n\n## 六日 2020年2月6日22:12:36\n忙忙碌碌的一天就又要结束了. 今天一天把剩下的一部分逻辑代码写了一部分. 主要是写自定义协议的序列化和反序列化. 起初打算\n用char* body 来存储, 按照上面定义的格式传输. 后来一想, 这样我就不就是在原地打转吗. 就去网上找了找相关的代码, 看看别人怎么写的\n\n主要是看的这一篇博客[手把手教你实现自定义的应用层协议](https://blog.csdn.net/ACb0y/article/details/61421006)\n看了之后收获不少. 收获总结在下面吧\n\n1. 两个头文件互相include\n\t这个是今天了解的最奇葩的一个问题, 如果两个头文件互相include 会出问题. 这个明天开一篇 采坑博客\n\t与此连带的还有class 前置声明, 再者可以到编译相关的问题\n2. 今天了解了一下CMAKE和MAKE的区别和联系, 总算知道了为啥好多安装的时候先cmake 再 make\n3. 还是关于CMAKE 稍微整理了点CMAKE的使用. 随用随整理, 目前不打算一次性整理太多\n4. Git操作不熟练. 我本地写好了代码文件, commit 然后从服务器pull了一个仅包含readme的仓库, 然后reset\n\t自己写的代码文件全没了, 只剩下README.md 还好之前整理过reflog, 明天也需要在整理下\n5. 安装了jsoncpp, 亿图图示等一些软件. 写了下关于字节对齐的问题. 亿图图示目前感觉挺不错\n\n代码方面的收获 主要就是看的那篇博客学到的.\n1. 首先就是学会了自定了协议 序列化和反序列化怎么写 代码更美. 虽然可能我看的博客可能不是最好的, \n\t但对我目前来说足够美了, 不过写一遍远远不够.\n2. 学到了巧妙地对 `uint8_t*`类型的指针(指向流数据缓冲区)转换成`uint16_t*`等指针类型, 进行解引用 得到原本的数据, 然后对\n\t `uint8_t*`类型的指针`+2`就可以跳过一个`uint16_t`, 虽然这些能够理解, 但实际应用这是第一次\n3. 对于如何更好的组织一个数据结构 有了更深的体会.\n4. 使用vector来存储剩余的包字节, 相比使用一个定长数组进行strcpy 方便了不少\n5. 使用erase擦除也是第一次实际应用\n6. 更好的使用指针\n\n定一下明天的任务吧, 试运行\n1. 定义游戏的json格式, 把所有的json都定义出来 √\n2. 游戏完成度达到能够正确解析包并分发到合理的部分即可 √\n3. 写一遍采坑博客-头文件互相引用 √\n4. 针对今天Git遇到的文件 在做研究下√\n5. 简单学习下jsoncpp的使用√\n\n## 七日 2020年2月7日10:14:53\n2020年2月7日10:14:53\n今天博客写的格外早, 主要是又遇到一个奇葩问题(其实是我自己使用有误)\n我昨天最后发现代码跑不起来, 就没有管, 今天看了下跑不起来是因为`未定义引用`\n好吧, 未定义引用, 我检查了一下发现不对啊, 我加上了\n`target_link_libraries(Guess -ljsoncpp network game)`\n我当时是这样写的, 结果就是报错`未定义引用`, 然后我把报错的部分另开一个项目放进去\n运行起来没问题?????.\n然后我把报错的代码放在我项目的main文件中, 结果原来的报错也消失了 main中的也没报错?????\n最后阴差阳错发现这个博客[初入职常见问题：gcc编译时对’xxxx’未定义的引用](https://blog.csdn.net/qq_33249383/article/details/88908218). 我发现其中的一段话\n```\n这个主要的原因是gcc编译的时候，各个文件依赖顺序的问题。\n在gcc编译的时候，如果文件a依赖于文件b，那么编译的时候必须把a放前面，b放后面。\n例如:在main.c中使用了pthread库相关函数，那么编译的时候必须是main.c在前，-lpthread在后。 gcc main.c -lpthread -o a.out 。\n```\n虽然使用的是cmake然后make 不确定编译器, 但我感觉应该试一试. 因为我的软件是编译`network.a`的时候报错,\n结果我改成了如下\n`target_link_libraries(Guess network game -ljsoncpp)`\n发现报错消失了......\n\n以前一直没有在意这里的顺序问题. 现在知道了问题所在 去搜索target_link_libraries顺序问题\n找到了一堆解释 哎....\n\n2020年2月7日18:10:20\n终于把头文件互相引用给搞明白了, 感觉这篇博客写的还可以吧, 就发到了[csdn上面](https://blog.csdn.net/qq_26790181/article/details/104213520),自己的博客上也会发的. 就先这样吧\n今天的第三项任务完成了, 概第四项任务了Git\n\n2020年2月7日22:17:41\n今天的任务完成了 还发现一个联系git的网站... 真的是纯偶然发现的[这个](https://learngitbranching.js.org/)\n大创那里今天看了下文档 找了找模板 还可以吧 明天的话\n\n1. 游戏把服务器端写完 一半\n2. 把找到的大创模板改到springboot上面去  后续再套\n3. 练习并搞懂两道中等算法题目\n4. 在有时间的话把牛客整理了\n\n## 八日九日 2020年2月9日18:04:35\n简单写下吧, 昨天 不小心挂彩了, 还好运气还好, 没有太大的伤, 不然特别时期真的难搞.\n不幸中的万幸\n\n今天一天都没写代码 或许明天会好一些把\n\n# 十日 \n2020年2月10日10:02:22\n今天问题不大了, 继续写游戏的服务器\n写完服务器后, 做算法题吧\n\n# 十四日\n昨天基本问题就不大了, 眼睛周围青了一圈成了大熊猫, 经过四天的休息 看东西倒是不流眼泪了.\n今天的话, 实际的学习方面有\n\n终于自己还是要找开源项目看看了, 不过今天2020年2月14日17:08:40头脑不是很清醒, 中午没有睡好. 看了个大概就没看了\n[nginx剖析](https://tengine.taobao.org/book/chapter_02.html)\n\n偶尔发现了一本书, 这不就是我想要看的吗!!!!!!, 准备看这本书 这本书从输入网址到网页返回都很详细的写了写\n![](https://pic2.zhimg.com/v2-1336c859990173751b77ad9eb4318602_r.jpg)\n\n# 十五日\n理论上大二寒假就要过完了. 昨天晚上想了很多\n\n先说一下游戏把: 感觉自己不喜欢玩手机游戏了, 手机游戏非肝即氪 自己没有时间去肝游戏, 肝游戏不会给你工作, 自己没有钱去氪金, 自己又非.抱着这种念头时间长了, 自己对游戏更加提不起兴趣了. 而我又想去做游戏, 一个不想玩游戏的人能做游戏吗? 虽说我的不想玩是在各种因素长时间影响下形成的.\n\n\n再说下我对编程吧: 怎么说呢, 我在大二上学期的上半学期之前, 都很喜欢写代码的, 我能在电脑前面坐上一整天. 后来我对代码提不起兴趣了. 原因的话昨天晚上整理了下.\n1. 目的不同了: 我在大二上学期的上半学期之前(包括大一整个学期)都是抱着解决某个问题去写软件的, 说起来是为自己写代码?首先就是我学的Javaweb为了解决校园网登录难的问题, 我用Java写一个客户端, 同时配上了后台和下载站(用的阿里云的OSS). 我记得的那段时间真的快乐. 后面我又为解决手动签到的问题, 做了个签到软件, 也是如此.------后来我学习的目的就是为了增进自己的知识(目的只有一个--进入大公司), 变成了为了学而学(之所以为了学而学是感觉时间真的有限, 我想在大三暑假能够实习, 我只有一年半的时间), 而不是之前, 通过做自己喜欢的东西不会了就去补一补. 长时间这样学习我大二上整个学期一个正经的项目都没有, 长时间为了学而学消磨了我的兴趣??\n2. 我发现我现在好像失去了对编程的乐趣, 现在写项目总想写出更优的结构, 总想写出大项目, 然而我的能力不足. 想实现和无法实现的思想一直持续着, 也是消磨的原因之一? 我现在在想我是不是期初就对linux服务器不感兴趣? 可我感觉当初自己确实想去的, 我想着游戏行业的人员兴趣基本相同, 能够一起做游戏,一边骂着策划脑洞一边做2333, 而不是做自己不喜欢的网站后端, 我发现目前自己都是一个人学习, 一个人做着, 何谈团队的乐趣?\n\n\n症状就如上了, 自己也得想想办法了.\n1. 首要任务找个人(找个团队)一起做游戏吧, 自己一个人的话, 说不上我向往的一起写代码的氛围\n2. 找到团队之后, 就能通过一边做游戏一边学习自己的不足了\n3. 我长时间的学习, 做不出自己满意的项目也是原因之一吧.\n4. 手机游戏的话, 暂时不去玩网游了. 我自己更适合单机? 找人做独立游戏?? emm不错\n\n# 十六日\n爆肝学习了一天3dmax , 现在是会基本的操作 能够完成一些简单的建模了.\n\n从B站找个那个课程也是很不错\n[3Dmax2018零基础入门教程（第一，二，三，四，五阶段）](https://www.bilibili.com/video/av18210293/)\n\n一天的事件我就从 P0看到了\tP51 过得很快, 但感觉掌握的还能接受\n\n-----\n|按键|功能|\n|---|---|\n|||\n|shift|绘制直线|\n|删除键|可以回退一次|\n|||\n|W|移动|\n|E|旋转|\n|R|缩放|\n|||\n|F3|线框显示模式|\n|F4|实体+线框限时模式|\n|||\n|Shift|按住可以复制|\n|||\n|Alt+T+A|阵列|\n|Alt+T+M|镜像|\n|Alt+A+对齐|\n|Shitf+I|间隔工具|\n|||\n|Ctrl+X|专家模式, 隐藏所有多余的东西 获得最大的空间|\n|Alt+X|半透明显示|\n|Ctrl+Shift+X|变换虚拟体显示切换 可以看到变换虚拟体的明显变化|\n|O|自适应降级|\n\n**编辑样条线->顶点**\n优化 在线上添加点\n焊接 连接两点\n自动焊接 两点在距离之内自动焊接\n\n**车削修改器**\n将二维图形 指定一个轴然后旋转 得到立体图形\n\n**可编辑多边形**\n*细分曲面*\n迭代次数2-3\n无需子层级修改后 可以勾选 等值线显示(勾选后 显示真实的渲染线? 不勾选显得线条少 利于编辑子层面)\n*细分置换-经常使用置换网格WSM修改器*\n需要给立体图形 设置好材质球 材质球需要置换这个属性的贴图\n*绘制变形-未学-用于雕刻地形*\n**倒角剖面和扫描的区别**\n1. 结合点不同\n2. 倒角剖面不能用三维轮廓, 扫描可以使用三维轮廓\n3. 倒角剖面不能将 图形包含图形(一个圆中再画一个圆) 的图形作为剖面,扫描可以.\n\n------\n\n好了暑假也算是结束了\n\n哦对了 我还在做一个游戏 从YouTube上看到一个打砖块游戏.\n这只是开始, 因为我是做服务器的所以我要把游戏改成双人联机哒!!!!目前进展还不错\n\n我打算模仿一个知乎大佬在知乎更新下专栏? 貌似可以诶\n\n网上讲解服务器的不少 讲解客户端的不少  讲解一套的就少了\n\n好了博客整理下 寒假结束了","source":"_posts/大二寒假学习记录与总结.md","raw":"---\ntitle: 大二寒假及下学期学习记录\ndate: 2020-02-01 17:30:32\ncategories:\n  - 学习记录\n---\n\n现在是`2020年2月1日17:32:50` 寒假过半? 目前还不知道寒假什么时候开学. 为了自己能够前往心目中的公司, 学习是必不可少的.\n学习的同时 应该要注意总结, 防止一天或者一周下来白忙活\n我们寒假开始是一月九号 到我开始寒假学习的一月二十三号 这些天没有学习用来玩了, 好在后面拾了回来\n从二十三号到现在二月一号, 每天学习的长度和质量总算是在慢慢上升\n距离下一个寒假只剩下一年的时间了, 需要更加的努力, 为了大三暑假能够进入心中的公司 大三寒假的实习必不可少了. 加倍努力吧\n\n这篇博客的标题起初是`大二寒假学习记录`后来改成了`大二寒假及下学期学习记录`寒假的学习必不可少, 下学期更要抓紧时间了.\n\n# 二月\n## 一日2020年2月1日17:39:59\n\n前几天把博客从我自己的服务器迁移到了coding上, 方便以后我乱搞服务器, 现在服务器上没有重要的内容了\n至于实际的学习方面, 我开始整理我的博客[主要是这篇](https://blog.lsmg.xyz/2019/08/CPP-Linux-%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/)这篇现在算告一段落了, 主要是把自己以前学过的用一用. 空洞的写下api\n理解不是很深刻.[这两天修改的这一篇](https://blog.lsmg.xyz/2019/08/CPP-Linux-%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86/). 第二篇自己缺少的东西很多, 由于当时学习到了后面实在是学不下去了.\n所以现在把后面的部分重新写了一下. 高级部分的线程和进程的部分 实在是太走马观花. 等我顺序学到了 再多写一些例子\n\n今天的话, 练习了下poll系统调用, 写了一个poll的demo, 然后是整理了下信号的部分, 信号这里整理的依然很少 平时用到的不多, 需要多加使用\n主要是定时器这里了 定时器把原来的内容删掉了 从新写目前只写完了socket定时\n\n接下来打算还是多写一些项目 多思考一些 等我整理完了高级部分 就准备去看开源项目?每次看开源项目都感觉自己差的太多, 不知道从哪里看起\n所以搭配着别人的笔记学习下看源码. 当然看源码之前还是要会大概的使用. 高级部分自然包括了libevent的使用部分\n\n跑去写项目了\n\n## 二日2020年2月2日18:03:23\n\n罪过罪过, 昨天晚上十一点半 玩了一把军团TD 结果玩到了十二点半 ..... 最后一点半才睡觉\n今天早上小十一点才起床.\n我依稀记得我八点被闹钟叫起来emm 然后想着定八点半的闹钟 再睡一会, 结果闹钟没定我就睡着了.\n\n起来后整理了整理吃了午饭, 就下午小一点了, 打开高级部分 学习`信号SIGALRM定时`\n\n代码量就400行 一直到我写今天的博客 才算完工\n\n**先写一下遇到的一个问题吧**\n首先表现出来的是`超时后 服务器没有断开连接`\n然后我去打断点, 发现不是定时器链表部分的问题. 是定时信号没有触发`epoll_wait`.\n这里我看了下代码, 发现定时器没有启动加上了`alarm(5)`, 我本意是理解了书上的代码 再去自己写, 结果还是理解的不深刻, 竟然丢了启动定时器的函数.\n然后我又运行了下`发现还是没有运行到`\n然后发现`epoll_wait 返回-1 设置EINTR`, 后来查阅了下说是被信号处理器中断, 思考可能是与IDE下断点有关??????\n最后发现自己没有把信号的管道添加到`epollfd`中再一细看发现丢了关于信号管道的四行代码...\n\n这个问题应该是很容易排查. 事后感觉应该这样思考\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/epoll%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5.png)\n以后尽量总结正确的思考模式, 虽然不知道有没有用 但要试一试.\n\n**项目收获方面**\n虽然这个项目只有400多行代码, 但我自己是绝对写不出来的. 只能尽量总结书上代码的好处\n1. 首先肯定是使用alarm超时产生信号SIGALRM来触发回调函数 实现定时\n2. 信号回调函数, 没有直接去触发定时器tick函数, 而是通过一个管道传到了epollfd中, 然后从epollfd的函数中触发相关的if 再去调用tick函数\n```c++\nvoid timer_handler() //真正的生效部分\n{\n    timer_lst.tick();\n    alarm(TIMESLOT);\n}\nvoid sig_handler(int sig)\n{\n    int save_errno = errno;\n    int msg = sig;\n    send(pipefd[1], (char*)&msg, 1, 0); // pipefd[0]注册进了epoll中 接受到来的信号\n    errno = save_errno;\n}\n\nvoid addsig(int sig)// 信号添加\n{\n    struct sigaction sa{};\n    sa.sa_flags |= SA_RESTART;\n    sa.sa_handler = sig_handler;\n    sigfillset(&sa.sa_mask);\n    exit_if(sigaction(sig, &sa, nullptr) == -1, \"add sig error\");\n}\n\nchar signals[1024]; // 信号接收, 可能存在多个信号 所以用返回的字节数来逐个取出信号\nret = recv(sockfd, signals, sizeof(signals), 0); 取出后使用switch来分离信号\n```\n3. 将大部分常量 #define\n大概只能总结出这一些来了, 完整的代码我贴在github上吧\n\n## 五日 2020年2月6日09:16:23\n三和四号 基本都在玩FF14, 发现自己并不是玩游戏了, 感觉被FF14玩了, 就是那种感觉累了不想玩了, 但却离自己定的小目标远 然后坚持\nemm 其实感觉这个时候应该下游戏.\n想想自己这大学一年半玩过的游戏 血族我算是玩的时间最长的大概前前后后我玩了五年, 应该是上半年把 我弃坑了. 游戏后面太氪了, 不得不退游了.\n后面崩三啥的也玩过, 发现自己并不适合肝的游戏. 最近一个月入坑了fgo, 开始的几个星期还是玩的累了, 自己太肝了, 最近这几天感觉休闲了不少, \n心态也正常了, 所以暂且会玩一玩.\n\n主要还是后面这些吧, 我发现自己逐渐有了一个念头: 累了就去玩会游戏, 就去看会直播, 刷刷B站. 后来我感觉这些浪费时间就去搜索了一下\n**玩游戏算浪费时间吗**, 刚才去找了下. 没找到我之前看过的那篇. 结论就是为什么自己不是累了就去小睡一下, 或者看看书,再或者刷刷新的科技圈\n长长见识? 自己尝试了看书, 发现自己并不是太抗拒. 以后试试把.\n\n最后自己作为一个想开发游戏的人, 总感觉不玩游戏是不合适的, 但要玩的适度, 毕竟自己还有一年的时间就要找寒假实习, 为了自己的大三暑假进入大厂打下基础.\n平衡好才是上策.\n\n接下文, 我发现自己有点?(自信点把点去掉)好高骛远了, 好高骛远会消磨一个人的兴趣和信心. 最终决定不做什么大游戏, 不研究什么框架, 先用自己所会的写一个小游戏,\n一是为了试着重新拾起兴趣, 二是如果只学而不去写项目, 没有太大收获的\n\n昨天一天都是策划和编写一个游戏, 游戏逻辑十分的简单. 猜数字 初期的流程图我大概画了下, 姑且算作第一版吧 下面放出来, 我后面可以逐渐丰富这个东西 加上日志登录\n断线重连等等功能.感觉还是可以的~~ 尽管逻辑很简单.\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E5%B0%8F%E6%B8%B8%E6%88%8F-%E7%8C%9C%E6%95%B0%E5%AD%97/%E6%B8%B8%E6%88%8F%E6%B5%81%E7%A8%8B1.png)\n![](https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E5%B0%8F%E6%B8%B8%E6%88%8F-%E7%8C%9C%E6%95%B0%E5%AD%97/%E6%B8%B8%E6%88%8F%E6%A0%B8%E5%BF%83%E9%80%BB%E8%BE%911.png)\n\n听说在写代码前规划好, 可以更好地组织代码, 昨天尝试了下感觉还不错. 我在写代码前把游戏的流程图画了一下, 然后标上了哪里会有什么数据交互,\n之后我去写了数据包头格式\n**头部**\n\n| 偏移量 | 长度 | 含义\n| --- | --- | --- |\n| 0 | 4 | 封包总大小 |\n| 4 | 2 | 头部长度 |\n| 6 | 2 | 操作码 |\n\n**操作码**\n\n| 代码 | 含义 | 数据格式 |\n| --- | --- | --- |\n| 00 | 登录 | |\n| 01 | 桌位信息(服务器发送桌位列表) | [1000-0-4][1001-0-4] |\n| 02 | 桌位操作信息(客户端加入 退出桌位) | 1000 |\n| 03 | 服务器桌位操作信息反馈(加入退出成功1 加入退出失败0) | 1 |\n| 04 | 准备 | 无 |\n| 05 | 取消准备 | 无 |\n| 06 | 服务器广播桌位信息 | 4[11][10][00][00] (桌位总数, 有人1 准备1) |\n| A1 | 服务器广播游戏开始 | 空 |\n| A2 | 服务器下发轮到的客户端 | 空 |\n| A3 | 客户端发送猜测的数字 | 50 |\n| A4 | 服务器发送猜测数字反馈 (数据合理1, 数据非法0) | 1 |\n| A5 | 服务器广播游戏状态 | 50-0-75[A][B] (A玩家猜出50 当前范围 0到75 B玩家准备) |\n\n然后草拟了一下 用到的类 用到的数据结构 分几个类 怎么联系起来, 最终我才去写代码, 感觉比一边写\n一边想要好不少. 写的过程中也发现了一些问题\n1. `EPOLLRDHUP`这个绑定在listenfd还是newfd?? 如果是newfd还能理解下原理, listenfd就有点理解不了.(试了下, 是newfd)\n2. \n```c++\nFoo *a;\nFoos b[3];\nb[1] = *a;\n// 修改a不会影响b[1], 这个问题听到过, 自己真正试了试才发现如此\n```\n\n姑且昨天的就补上这些吧. 今天打算把游戏的服务器跑起来\n\n## 六日 2020年2月6日22:12:36\n忙忙碌碌的一天就又要结束了. 今天一天把剩下的一部分逻辑代码写了一部分. 主要是写自定义协议的序列化和反序列化. 起初打算\n用char* body 来存储, 按照上面定义的格式传输. 后来一想, 这样我就不就是在原地打转吗. 就去网上找了找相关的代码, 看看别人怎么写的\n\n主要是看的这一篇博客[手把手教你实现自定义的应用层协议](https://blog.csdn.net/ACb0y/article/details/61421006)\n看了之后收获不少. 收获总结在下面吧\n\n1. 两个头文件互相include\n\t这个是今天了解的最奇葩的一个问题, 如果两个头文件互相include 会出问题. 这个明天开一篇 采坑博客\n\t与此连带的还有class 前置声明, 再者可以到编译相关的问题\n2. 今天了解了一下CMAKE和MAKE的区别和联系, 总算知道了为啥好多安装的时候先cmake 再 make\n3. 还是关于CMAKE 稍微整理了点CMAKE的使用. 随用随整理, 目前不打算一次性整理太多\n4. Git操作不熟练. 我本地写好了代码文件, commit 然后从服务器pull了一个仅包含readme的仓库, 然后reset\n\t自己写的代码文件全没了, 只剩下README.md 还好之前整理过reflog, 明天也需要在整理下\n5. 安装了jsoncpp, 亿图图示等一些软件. 写了下关于字节对齐的问题. 亿图图示目前感觉挺不错\n\n代码方面的收获 主要就是看的那篇博客学到的.\n1. 首先就是学会了自定了协议 序列化和反序列化怎么写 代码更美. 虽然可能我看的博客可能不是最好的, \n\t但对我目前来说足够美了, 不过写一遍远远不够.\n2. 学到了巧妙地对 `uint8_t*`类型的指针(指向流数据缓冲区)转换成`uint16_t*`等指针类型, 进行解引用 得到原本的数据, 然后对\n\t `uint8_t*`类型的指针`+2`就可以跳过一个`uint16_t`, 虽然这些能够理解, 但实际应用这是第一次\n3. 对于如何更好的组织一个数据结构 有了更深的体会.\n4. 使用vector来存储剩余的包字节, 相比使用一个定长数组进行strcpy 方便了不少\n5. 使用erase擦除也是第一次实际应用\n6. 更好的使用指针\n\n定一下明天的任务吧, 试运行\n1. 定义游戏的json格式, 把所有的json都定义出来 √\n2. 游戏完成度达到能够正确解析包并分发到合理的部分即可 √\n3. 写一遍采坑博客-头文件互相引用 √\n4. 针对今天Git遇到的文件 在做研究下√\n5. 简单学习下jsoncpp的使用√\n\n## 七日 2020年2月7日10:14:53\n2020年2月7日10:14:53\n今天博客写的格外早, 主要是又遇到一个奇葩问题(其实是我自己使用有误)\n我昨天最后发现代码跑不起来, 就没有管, 今天看了下跑不起来是因为`未定义引用`\n好吧, 未定义引用, 我检查了一下发现不对啊, 我加上了\n`target_link_libraries(Guess -ljsoncpp network game)`\n我当时是这样写的, 结果就是报错`未定义引用`, 然后我把报错的部分另开一个项目放进去\n运行起来没问题?????.\n然后我把报错的代码放在我项目的main文件中, 结果原来的报错也消失了 main中的也没报错?????\n最后阴差阳错发现这个博客[初入职常见问题：gcc编译时对’xxxx’未定义的引用](https://blog.csdn.net/qq_33249383/article/details/88908218). 我发现其中的一段话\n```\n这个主要的原因是gcc编译的时候，各个文件依赖顺序的问题。\n在gcc编译的时候，如果文件a依赖于文件b，那么编译的时候必须把a放前面，b放后面。\n例如:在main.c中使用了pthread库相关函数，那么编译的时候必须是main.c在前，-lpthread在后。 gcc main.c -lpthread -o a.out 。\n```\n虽然使用的是cmake然后make 不确定编译器, 但我感觉应该试一试. 因为我的软件是编译`network.a`的时候报错,\n结果我改成了如下\n`target_link_libraries(Guess network game -ljsoncpp)`\n发现报错消失了......\n\n以前一直没有在意这里的顺序问题. 现在知道了问题所在 去搜索target_link_libraries顺序问题\n找到了一堆解释 哎....\n\n2020年2月7日18:10:20\n终于把头文件互相引用给搞明白了, 感觉这篇博客写的还可以吧, 就发到了[csdn上面](https://blog.csdn.net/qq_26790181/article/details/104213520),自己的博客上也会发的. 就先这样吧\n今天的第三项任务完成了, 概第四项任务了Git\n\n2020年2月7日22:17:41\n今天的任务完成了 还发现一个联系git的网站... 真的是纯偶然发现的[这个](https://learngitbranching.js.org/)\n大创那里今天看了下文档 找了找模板 还可以吧 明天的话\n\n1. 游戏把服务器端写完 一半\n2. 把找到的大创模板改到springboot上面去  后续再套\n3. 练习并搞懂两道中等算法题目\n4. 在有时间的话把牛客整理了\n\n## 八日九日 2020年2月9日18:04:35\n简单写下吧, 昨天 不小心挂彩了, 还好运气还好, 没有太大的伤, 不然特别时期真的难搞.\n不幸中的万幸\n\n今天一天都没写代码 或许明天会好一些把\n\n# 十日 \n2020年2月10日10:02:22\n今天问题不大了, 继续写游戏的服务器\n写完服务器后, 做算法题吧\n\n# 十四日\n昨天基本问题就不大了, 眼睛周围青了一圈成了大熊猫, 经过四天的休息 看东西倒是不流眼泪了.\n今天的话, 实际的学习方面有\n\n终于自己还是要找开源项目看看了, 不过今天2020年2月14日17:08:40头脑不是很清醒, 中午没有睡好. 看了个大概就没看了\n[nginx剖析](https://tengine.taobao.org/book/chapter_02.html)\n\n偶尔发现了一本书, 这不就是我想要看的吗!!!!!!, 准备看这本书 这本书从输入网址到网页返回都很详细的写了写\n![](https://pic2.zhimg.com/v2-1336c859990173751b77ad9eb4318602_r.jpg)\n\n# 十五日\n理论上大二寒假就要过完了. 昨天晚上想了很多\n\n先说一下游戏把: 感觉自己不喜欢玩手机游戏了, 手机游戏非肝即氪 自己没有时间去肝游戏, 肝游戏不会给你工作, 自己没有钱去氪金, 自己又非.抱着这种念头时间长了, 自己对游戏更加提不起兴趣了. 而我又想去做游戏, 一个不想玩游戏的人能做游戏吗? 虽说我的不想玩是在各种因素长时间影响下形成的.\n\n\n再说下我对编程吧: 怎么说呢, 我在大二上学期的上半学期之前, 都很喜欢写代码的, 我能在电脑前面坐上一整天. 后来我对代码提不起兴趣了. 原因的话昨天晚上整理了下.\n1. 目的不同了: 我在大二上学期的上半学期之前(包括大一整个学期)都是抱着解决某个问题去写软件的, 说起来是为自己写代码?首先就是我学的Javaweb为了解决校园网登录难的问题, 我用Java写一个客户端, 同时配上了后台和下载站(用的阿里云的OSS). 我记得的那段时间真的快乐. 后面我又为解决手动签到的问题, 做了个签到软件, 也是如此.------后来我学习的目的就是为了增进自己的知识(目的只有一个--进入大公司), 变成了为了学而学(之所以为了学而学是感觉时间真的有限, 我想在大三暑假能够实习, 我只有一年半的时间), 而不是之前, 通过做自己喜欢的东西不会了就去补一补. 长时间这样学习我大二上整个学期一个正经的项目都没有, 长时间为了学而学消磨了我的兴趣??\n2. 我发现我现在好像失去了对编程的乐趣, 现在写项目总想写出更优的结构, 总想写出大项目, 然而我的能力不足. 想实现和无法实现的思想一直持续着, 也是消磨的原因之一? 我现在在想我是不是期初就对linux服务器不感兴趣? 可我感觉当初自己确实想去的, 我想着游戏行业的人员兴趣基本相同, 能够一起做游戏,一边骂着策划脑洞一边做2333, 而不是做自己不喜欢的网站后端, 我发现目前自己都是一个人学习, 一个人做着, 何谈团队的乐趣?\n\n\n症状就如上了, 自己也得想想办法了.\n1. 首要任务找个人(找个团队)一起做游戏吧, 自己一个人的话, 说不上我向往的一起写代码的氛围\n2. 找到团队之后, 就能通过一边做游戏一边学习自己的不足了\n3. 我长时间的学习, 做不出自己满意的项目也是原因之一吧.\n4. 手机游戏的话, 暂时不去玩网游了. 我自己更适合单机? 找人做独立游戏?? emm不错\n\n# 十六日\n爆肝学习了一天3dmax , 现在是会基本的操作 能够完成一些简单的建模了.\n\n从B站找个那个课程也是很不错\n[3Dmax2018零基础入门教程（第一，二，三，四，五阶段）](https://www.bilibili.com/video/av18210293/)\n\n一天的事件我就从 P0看到了\tP51 过得很快, 但感觉掌握的还能接受\n\n-----\n|按键|功能|\n|---|---|\n|||\n|shift|绘制直线|\n|删除键|可以回退一次|\n|||\n|W|移动|\n|E|旋转|\n|R|缩放|\n|||\n|F3|线框显示模式|\n|F4|实体+线框限时模式|\n|||\n|Shift|按住可以复制|\n|||\n|Alt+T+A|阵列|\n|Alt+T+M|镜像|\n|Alt+A+对齐|\n|Shitf+I|间隔工具|\n|||\n|Ctrl+X|专家模式, 隐藏所有多余的东西 获得最大的空间|\n|Alt+X|半透明显示|\n|Ctrl+Shift+X|变换虚拟体显示切换 可以看到变换虚拟体的明显变化|\n|O|自适应降级|\n\n**编辑样条线->顶点**\n优化 在线上添加点\n焊接 连接两点\n自动焊接 两点在距离之内自动焊接\n\n**车削修改器**\n将二维图形 指定一个轴然后旋转 得到立体图形\n\n**可编辑多边形**\n*细分曲面*\n迭代次数2-3\n无需子层级修改后 可以勾选 等值线显示(勾选后 显示真实的渲染线? 不勾选显得线条少 利于编辑子层面)\n*细分置换-经常使用置换网格WSM修改器*\n需要给立体图形 设置好材质球 材质球需要置换这个属性的贴图\n*绘制变形-未学-用于雕刻地形*\n**倒角剖面和扫描的区别**\n1. 结合点不同\n2. 倒角剖面不能用三维轮廓, 扫描可以使用三维轮廓\n3. 倒角剖面不能将 图形包含图形(一个圆中再画一个圆) 的图形作为剖面,扫描可以.\n\n------\n\n好了暑假也算是结束了\n\n哦对了 我还在做一个游戏 从YouTube上看到一个打砖块游戏.\n这只是开始, 因为我是做服务器的所以我要把游戏改成双人联机哒!!!!目前进展还不错\n\n我打算模仿一个知乎大佬在知乎更新下专栏? 貌似可以诶\n\n网上讲解服务器的不少 讲解客户端的不少  讲解一套的就少了\n\n好了博客整理下 寒假结束了","slug":"大二寒假学习记录与总结","published":1,"updated":"2020-02-27T01:49:16.339Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fmuczc002gsouofknhbb6i","content":"<p>现在是<code>2020年2月1日17:32:50</code> 寒假过半? 目前还不知道寒假什么时候开学. 为了自己能够前往心目中的公司, 学习是必不可少的.<br>学习的同时 应该要注意总结, 防止一天或者一周下来白忙活<br>我们寒假开始是一月九号 到我开始寒假学习的一月二十三号 这些天没有学习用来玩了, 好在后面拾了回来<br>从二十三号到现在二月一号, 每天学习的长度和质量总算是在慢慢上升<br>距离下一个寒假只剩下一年的时间了, 需要更加的努力, 为了大三暑假能够进入心中的公司 大三寒假的实习必不可少了. 加倍努力吧</p>\n<p>这篇博客的标题起初是<code>大二寒假学习记录</code>后来改成了<code>大二寒假及下学期学习记录</code>寒假的学习必不可少, 下学期更要抓紧时间了.</p>\n<h1 id=\"二月\"><a href=\"#二月\" class=\"headerlink\" title=\"二月\"></a>二月</h1><h2 id=\"一日2020年2月1日17-39-59\"><a href=\"#一日2020年2月1日17-39-59\" class=\"headerlink\" title=\"一日2020年2月1日17:39:59\"></a>一日2020年2月1日17:39:59</h2><p>前几天把博客从我自己的服务器迁移到了coding上, 方便以后我乱搞服务器, 现在服务器上没有重要的内容了<br>至于实际的学习方面, 我开始整理我的博客<a href=\"https://blog.lsmg.xyz/2019/08/CPP-Linux-%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/\">主要是这篇</a>这篇现在算告一段落了, 主要是把自己以前学过的用一用. 空洞的写下api<br>理解不是很深刻.<a href=\"https://blog.lsmg.xyz/2019/08/CPP-Linux-%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86/\">这两天修改的这一篇</a>. 第二篇自己缺少的东西很多, 由于当时学习到了后面实在是学不下去了.<br>所以现在把后面的部分重新写了一下. 高级部分的线程和进程的部分 实在是太走马观花. 等我顺序学到了 再多写一些例子</p>\n<p>今天的话, 练习了下poll系统调用, 写了一个poll的demo, 然后是整理了下信号的部分, 信号这里整理的依然很少 平时用到的不多, 需要多加使用<br>主要是定时器这里了 定时器把原来的内容删掉了 从新写目前只写完了socket定时</p>\n<p>接下来打算还是多写一些项目 多思考一些 等我整理完了高级部分 就准备去看开源项目?每次看开源项目都感觉自己差的太多, 不知道从哪里看起<br>所以搭配着别人的笔记学习下看源码. 当然看源码之前还是要会大概的使用. 高级部分自然包括了libevent的使用部分</p>\n<p>跑去写项目了</p>\n<h2 id=\"二日2020年2月2日18-03-23\"><a href=\"#二日2020年2月2日18-03-23\" class=\"headerlink\" title=\"二日2020年2月2日18:03:23\"></a>二日2020年2月2日18:03:23</h2><p>罪过罪过, 昨天晚上十一点半 玩了一把军团TD 结果玩到了十二点半 ….. 最后一点半才睡觉<br>今天早上小十一点才起床.<br>我依稀记得我八点被闹钟叫起来emm 然后想着定八点半的闹钟 再睡一会, 结果闹钟没定我就睡着了.</p>\n<p>起来后整理了整理吃了午饭, 就下午小一点了, 打开高级部分 学习<code>信号SIGALRM定时</code></p>\n<p>代码量就400行 一直到我写今天的博客 才算完工</p>\n<p><strong>先写一下遇到的一个问题吧</strong><br>首先表现出来的是<code>超时后 服务器没有断开连接</code><br>然后我去打断点, 发现不是定时器链表部分的问题. 是定时信号没有触发<code>epoll_wait</code>.<br>这里我看了下代码, 发现定时器没有启动加上了<code>alarm(5)</code>, 我本意是理解了书上的代码 再去自己写, 结果还是理解的不深刻, 竟然丢了启动定时器的函数.<br>然后我又运行了下<code>发现还是没有运行到</code><br>然后发现<code>epoll_wait 返回-1 设置EINTR</code>, 后来查阅了下说是被信号处理器中断, 思考可能是与IDE下断点有关??????<br>最后发现自己没有把信号的管道添加到<code>epollfd</code>中再一细看发现丢了关于信号管道的四行代码…</p>\n<p>这个问题应该是很容易排查. 事后感觉应该这样思考<br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/epoll%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5.png\" alt=\"\"><br>以后尽量总结正确的思考模式, 虽然不知道有没有用 但要试一试.</p>\n<p><strong>项目收获方面</strong><br>虽然这个项目只有400多行代码, 但我自己是绝对写不出来的. 只能尽量总结书上代码的好处</p>\n<ol>\n<li>首先肯定是使用alarm超时产生信号SIGALRM来触发回调函数 实现定时</li>\n<li>信号回调函数, 没有直接去触发定时器tick函数, 而是通过一个管道传到了epollfd中, 然后从epollfd的函数中触发相关的if 再去调用tick函数<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">timer_handler</span><span class=\"params\">()</span> <span class=\"comment\">//真正的生效部分</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    timer_lst.tick();</span><br><span class=\"line\">    alarm(TIMESLOT);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sig_handler</span><span class=\"params\">(<span class=\"keyword\">int</span> sig)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> save_errno = errno;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> msg = sig;</span><br><span class=\"line\">    send(pipefd[<span class=\"number\">1</span>], (<span class=\"keyword\">char</span>*)&amp;msg, <span class=\"number\">1</span>, <span class=\"number\">0</span>); <span class=\"comment\">// pipefd[0]注册进了epoll中 接受到来的信号</span></span><br><span class=\"line\">    errno = save_errno;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addsig</span><span class=\"params\">(<span class=\"keyword\">int</span> sig)</span><span class=\"comment\">// 信号添加</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sigaction</span> <span class=\"title\">sa</span>&#123;</span>&#125;;</span><br><span class=\"line\">    sa.sa_flags |= SA_RESTART;</span><br><span class=\"line\">    sa.sa_handler = sig_handler;</span><br><span class=\"line\">    sigfillset(&amp;sa.sa_mask);</span><br><span class=\"line\">    exit_if(sigaction(sig, &amp;sa, <span class=\"literal\">nullptr</span>) == <span class=\"number\">-1</span>, <span class=\"string\">\"add sig error\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> signals[<span class=\"number\">1024</span>]; <span class=\"comment\">// 信号接收, 可能存在多个信号 所以用返回的字节数来逐个取出信号</span></span><br><span class=\"line\">ret = recv(sockfd, signals, <span class=\"keyword\">sizeof</span>(signals), <span class=\"number\">0</span>); 取出后使用<span class=\"keyword\">switch</span>来分离信号</span><br></pre></td></tr></table></figure></li>\n<li>将大部分常量 #define<br>大概只能总结出这一些来了, 完整的代码我贴在github上吧</li>\n</ol>\n<h2 id=\"五日-2020年2月6日09-16-23\"><a href=\"#五日-2020年2月6日09-16-23\" class=\"headerlink\" title=\"五日 2020年2月6日09:16:23\"></a>五日 2020年2月6日09:16:23</h2><p>三和四号 基本都在玩FF14, 发现自己并不是玩游戏了, 感觉被FF14玩了, 就是那种感觉累了不想玩了, 但却离自己定的小目标远 然后坚持<br>emm 其实感觉这个时候应该下游戏.<br>想想自己这大学一年半玩过的游戏 血族我算是玩的时间最长的大概前前后后我玩了五年, 应该是上半年把 我弃坑了. 游戏后面太氪了, 不得不退游了.<br>后面崩三啥的也玩过, 发现自己并不适合肝的游戏. 最近一个月入坑了fgo, 开始的几个星期还是玩的累了, 自己太肝了, 最近这几天感觉休闲了不少,<br>心态也正常了, 所以暂且会玩一玩.</p>\n<p>主要还是后面这些吧, 我发现自己逐渐有了一个念头: 累了就去玩会游戏, 就去看会直播, 刷刷B站. 后来我感觉这些浪费时间就去搜索了一下<br><strong>玩游戏算浪费时间吗</strong>, 刚才去找了下. 没找到我之前看过的那篇. 结论就是为什么自己不是累了就去小睡一下, 或者看看书,再或者刷刷新的科技圈<br>长长见识? 自己尝试了看书, 发现自己并不是太抗拒. 以后试试把.</p>\n<p>最后自己作为一个想开发游戏的人, 总感觉不玩游戏是不合适的, 但要玩的适度, 毕竟自己还有一年的时间就要找寒假实习, 为了自己的大三暑假进入大厂打下基础.<br>平衡好才是上策.</p>\n<p>接下文, 我发现自己有点?(自信点把点去掉)好高骛远了, 好高骛远会消磨一个人的兴趣和信心. 最终决定不做什么大游戏, 不研究什么框架, 先用自己所会的写一个小游戏,<br>一是为了试着重新拾起兴趣, 二是如果只学而不去写项目, 没有太大收获的</p>\n<p>昨天一天都是策划和编写一个游戏, 游戏逻辑十分的简单. 猜数字 初期的流程图我大概画了下, 姑且算作第一版吧 下面放出来, 我后面可以逐渐丰富这个东西 加上日志登录<br>断线重连等等功能.感觉还是可以的~~ 尽管逻辑很简单.<br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E5%B0%8F%E6%B8%B8%E6%88%8F-%E7%8C%9C%E6%95%B0%E5%AD%97/%E6%B8%B8%E6%88%8F%E6%B5%81%E7%A8%8B1.png\" alt=\"\"><br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E5%B0%8F%E6%B8%B8%E6%88%8F-%E7%8C%9C%E6%95%B0%E5%AD%97/%E6%B8%B8%E6%88%8F%E6%A0%B8%E5%BF%83%E9%80%BB%E8%BE%911.png\" alt=\"\"></p>\n<p>听说在写代码前规划好, 可以更好地组织代码, 昨天尝试了下感觉还不错. 我在写代码前把游戏的流程图画了一下, 然后标上了哪里会有什么数据交互,<br>之后我去写了数据包头格式<br><strong>头部</strong></p>\n<table>\n<thead>\n<tr>\n<th>偏移量</th>\n<th>长度</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>4</td>\n<td>封包总大小</td>\n</tr>\n<tr>\n<td>4</td>\n<td>2</td>\n<td>头部长度</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2</td>\n<td>操作码</td>\n</tr>\n</tbody></table>\n<p><strong>操作码</strong></p>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>含义</th>\n<th>数据格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>00</td>\n<td>登录</td>\n<td></td>\n</tr>\n<tr>\n<td>01</td>\n<td>桌位信息(服务器发送桌位列表)</td>\n<td>[1000-0-4][1001-0-4]</td>\n</tr>\n<tr>\n<td>02</td>\n<td>桌位操作信息(客户端加入 退出桌位)</td>\n<td>1000</td>\n</tr>\n<tr>\n<td>03</td>\n<td>服务器桌位操作信息反馈(加入退出成功1 加入退出失败0)</td>\n<td>1</td>\n</tr>\n<tr>\n<td>04</td>\n<td>准备</td>\n<td>无</td>\n</tr>\n<tr>\n<td>05</td>\n<td>取消准备</td>\n<td>无</td>\n</tr>\n<tr>\n<td>06</td>\n<td>服务器广播桌位信息</td>\n<td>4[11][10][00][00] (桌位总数, 有人1 准备1)</td>\n</tr>\n<tr>\n<td>A1</td>\n<td>服务器广播游戏开始</td>\n<td>空</td>\n</tr>\n<tr>\n<td>A2</td>\n<td>服务器下发轮到的客户端</td>\n<td>空</td>\n</tr>\n<tr>\n<td>A3</td>\n<td>客户端发送猜测的数字</td>\n<td>50</td>\n</tr>\n<tr>\n<td>A4</td>\n<td>服务器发送猜测数字反馈 (数据合理1, 数据非法0)</td>\n<td>1</td>\n</tr>\n<tr>\n<td>A5</td>\n<td>服务器广播游戏状态</td>\n<td>50-0-75[A][B] (A玩家猜出50 当前范围 0到75 B玩家准备)</td>\n</tr>\n</tbody></table>\n<p>然后草拟了一下 用到的类 用到的数据结构 分几个类 怎么联系起来, 最终我才去写代码, 感觉比一边写<br>一边想要好不少. 写的过程中也发现了一些问题</p>\n<ol>\n<li><code>EPOLLRDHUP</code>这个绑定在listenfd还是newfd?? 如果是newfd还能理解下原理, listenfd就有点理解不了.(试了下, 是newfd)</li>\n<li><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Foo *a;</span><br><span class=\"line\">Foos b[<span class=\"number\">3</span>];</span><br><span class=\"line\">b[<span class=\"number\">1</span>] = *a;</span><br><span class=\"line\"><span class=\"comment\">// 修改a不会影响b[1], 这个问题听到过, 自己真正试了试才发现如此</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>姑且昨天的就补上这些吧. 今天打算把游戏的服务器跑起来</p>\n<h2 id=\"六日-2020年2月6日22-12-36\"><a href=\"#六日-2020年2月6日22-12-36\" class=\"headerlink\" title=\"六日 2020年2月6日22:12:36\"></a>六日 2020年2月6日22:12:36</h2><p>忙忙碌碌的一天就又要结束了. 今天一天把剩下的一部分逻辑代码写了一部分. 主要是写自定义协议的序列化和反序列化. 起初打算<br>用char* body 来存储, 按照上面定义的格式传输. 后来一想, 这样我就不就是在原地打转吗. 就去网上找了找相关的代码, 看看别人怎么写的</p>\n<p>主要是看的这一篇博客<a href=\"https://blog.csdn.net/ACb0y/article/details/61421006\" target=\"_blank\" rel=\"noopener\">手把手教你实现自定义的应用层协议</a><br>看了之后收获不少. 收获总结在下面吧</p>\n<ol>\n<li>两个头文件互相include<br> 这个是今天了解的最奇葩的一个问题, 如果两个头文件互相include 会出问题. 这个明天开一篇 采坑博客<br> 与此连带的还有class 前置声明, 再者可以到编译相关的问题</li>\n<li>今天了解了一下CMAKE和MAKE的区别和联系, 总算知道了为啥好多安装的时候先cmake 再 make</li>\n<li>还是关于CMAKE 稍微整理了点CMAKE的使用. 随用随整理, 目前不打算一次性整理太多</li>\n<li>Git操作不熟练. 我本地写好了代码文件, commit 然后从服务器pull了一个仅包含readme的仓库, 然后reset<br> 自己写的代码文件全没了, 只剩下README.md 还好之前整理过reflog, 明天也需要在整理下</li>\n<li>安装了jsoncpp, 亿图图示等一些软件. 写了下关于字节对齐的问题. 亿图图示目前感觉挺不错</li>\n</ol>\n<p>代码方面的收获 主要就是看的那篇博客学到的.</p>\n<ol>\n<li>首先就是学会了自定了协议 序列化和反序列化怎么写 代码更美. 虽然可能我看的博客可能不是最好的,<br> 但对我目前来说足够美了, 不过写一遍远远不够.</li>\n<li>学到了巧妙地对 <code>uint8_t*</code>类型的指针(指向流数据缓冲区)转换成<code>uint16_t*</code>等指针类型, 进行解引用 得到原本的数据, 然后对<br>  <code>uint8_t*</code>类型的指针<code>+2</code>就可以跳过一个<code>uint16_t</code>, 虽然这些能够理解, 但实际应用这是第一次</li>\n<li>对于如何更好的组织一个数据结构 有了更深的体会.</li>\n<li>使用vector来存储剩余的包字节, 相比使用一个定长数组进行strcpy 方便了不少</li>\n<li>使用erase擦除也是第一次实际应用</li>\n<li>更好的使用指针</li>\n</ol>\n<p>定一下明天的任务吧, 试运行</p>\n<ol>\n<li>定义游戏的json格式, 把所有的json都定义出来 √</li>\n<li>游戏完成度达到能够正确解析包并分发到合理的部分即可 √</li>\n<li>写一遍采坑博客-头文件互相引用 √</li>\n<li>针对今天Git遇到的文件 在做研究下√</li>\n<li>简单学习下jsoncpp的使用√</li>\n</ol>\n<h2 id=\"七日-2020年2月7日10-14-53\"><a href=\"#七日-2020年2月7日10-14-53\" class=\"headerlink\" title=\"七日 2020年2月7日10:14:53\"></a>七日 2020年2月7日10:14:53</h2><p>2020年2月7日10:14:53<br>今天博客写的格外早, 主要是又遇到一个奇葩问题(其实是我自己使用有误)<br>我昨天最后发现代码跑不起来, 就没有管, 今天看了下跑不起来是因为<code>未定义引用</code><br>好吧, 未定义引用, 我检查了一下发现不对啊, 我加上了<br><code>target_link_libraries(Guess -ljsoncpp network game)</code><br>我当时是这样写的, 结果就是报错<code>未定义引用</code>, 然后我把报错的部分另开一个项目放进去<br>运行起来没问题?????.<br>然后我把报错的代码放在我项目的main文件中, 结果原来的报错也消失了 main中的也没报错?????<br>最后阴差阳错发现这个博客<a href=\"https://blog.csdn.net/qq_33249383/article/details/88908218\" target=\"_blank\" rel=\"noopener\">初入职常见问题：gcc编译时对’xxxx’未定义的引用</a>. 我发现其中的一段话</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个主要的原因是gcc编译的时候，各个文件依赖顺序的问题。</span><br><span class=\"line\">在gcc编译的时候，如果文件a依赖于文件b，那么编译的时候必须把a放前面，b放后面。</span><br><span class=\"line\">例如:在main.c中使用了pthread库相关函数，那么编译的时候必须是main.c在前，-lpthread在后。 gcc main.c -lpthread -o a.out 。</span><br></pre></td></tr></table></figure>\n<p>虽然使用的是cmake然后make 不确定编译器, 但我感觉应该试一试. 因为我的软件是编译<code>network.a</code>的时候报错,<br>结果我改成了如下<br><code>target_link_libraries(Guess network game -ljsoncpp)</code><br>发现报错消失了……</p>\n<p>以前一直没有在意这里的顺序问题. 现在知道了问题所在 去搜索target_link_libraries顺序问题<br>找到了一堆解释 哎….</p>\n<p>2020年2月7日18:10:20<br>终于把头文件互相引用给搞明白了, 感觉这篇博客写的还可以吧, 就发到了<a href=\"https://blog.csdn.net/qq_26790181/article/details/104213520\" target=\"_blank\" rel=\"noopener\">csdn上面</a>,自己的博客上也会发的. 就先这样吧<br>今天的第三项任务完成了, 概第四项任务了Git</p>\n<p>2020年2月7日22:17:41<br>今天的任务完成了 还发现一个联系git的网站… 真的是纯偶然发现的<a href=\"https://learngitbranching.js.org/\" target=\"_blank\" rel=\"noopener\">这个</a><br>大创那里今天看了下文档 找了找模板 还可以吧 明天的话</p>\n<ol>\n<li>游戏把服务器端写完 一半</li>\n<li>把找到的大创模板改到springboot上面去  后续再套</li>\n<li>练习并搞懂两道中等算法题目</li>\n<li>在有时间的话把牛客整理了</li>\n</ol>\n<h2 id=\"八日九日-2020年2月9日18-04-35\"><a href=\"#八日九日-2020年2月9日18-04-35\" class=\"headerlink\" title=\"八日九日 2020年2月9日18:04:35\"></a>八日九日 2020年2月9日18:04:35</h2><p>简单写下吧, 昨天 不小心挂彩了, 还好运气还好, 没有太大的伤, 不然特别时期真的难搞.<br>不幸中的万幸</p>\n<p>今天一天都没写代码 或许明天会好一些把</p>\n<h1 id=\"十日\"><a href=\"#十日\" class=\"headerlink\" title=\"十日\"></a>十日</h1><p>2020年2月10日10:02:22<br>今天问题不大了, 继续写游戏的服务器<br>写完服务器后, 做算法题吧</p>\n<h1 id=\"十四日\"><a href=\"#十四日\" class=\"headerlink\" title=\"十四日\"></a>十四日</h1><p>昨天基本问题就不大了, 眼睛周围青了一圈成了大熊猫, 经过四天的休息 看东西倒是不流眼泪了.<br>今天的话, 实际的学习方面有</p>\n<p>终于自己还是要找开源项目看看了, 不过今天2020年2月14日17:08:40头脑不是很清醒, 中午没有睡好. 看了个大概就没看了<br><a href=\"https://tengine.taobao.org/book/chapter_02.html\" target=\"_blank\" rel=\"noopener\">nginx剖析</a></p>\n<p>偶尔发现了一本书, 这不就是我想要看的吗!!!!!!, 准备看这本书 这本书从输入网址到网页返回都很详细的写了写<br><img src=\"https://pic2.zhimg.com/v2-1336c859990173751b77ad9eb4318602_r.jpg\" alt=\"\"></p>\n<h1 id=\"十五日\"><a href=\"#十五日\" class=\"headerlink\" title=\"十五日\"></a>十五日</h1><p>理论上大二寒假就要过完了. 昨天晚上想了很多</p>\n<p>先说一下游戏把: 感觉自己不喜欢玩手机游戏了, 手机游戏非肝即氪 自己没有时间去肝游戏, 肝游戏不会给你工作, 自己没有钱去氪金, 自己又非.抱着这种念头时间长了, 自己对游戏更加提不起兴趣了. 而我又想去做游戏, 一个不想玩游戏的人能做游戏吗? 虽说我的不想玩是在各种因素长时间影响下形成的.</p>\n<p>再说下我对编程吧: 怎么说呢, 我在大二上学期的上半学期之前, 都很喜欢写代码的, 我能在电脑前面坐上一整天. 后来我对代码提不起兴趣了. 原因的话昨天晚上整理了下.</p>\n<ol>\n<li>目的不同了: 我在大二上学期的上半学期之前(包括大一整个学期)都是抱着解决某个问题去写软件的, 说起来是为自己写代码?首先就是我学的Javaweb为了解决校园网登录难的问题, 我用Java写一个客户端, 同时配上了后台和下载站(用的阿里云的OSS). 我记得的那段时间真的快乐. 后面我又为解决手动签到的问题, 做了个签到软件, 也是如此.——后来我学习的目的就是为了增进自己的知识(目的只有一个–进入大公司), 变成了为了学而学(之所以为了学而学是感觉时间真的有限, 我想在大三暑假能够实习, 我只有一年半的时间), 而不是之前, 通过做自己喜欢的东西不会了就去补一补. 长时间这样学习我大二上整个学期一个正经的项目都没有, 长时间为了学而学消磨了我的兴趣??</li>\n<li>我发现我现在好像失去了对编程的乐趣, 现在写项目总想写出更优的结构, 总想写出大项目, 然而我的能力不足. 想实现和无法实现的思想一直持续着, 也是消磨的原因之一? 我现在在想我是不是期初就对linux服务器不感兴趣? 可我感觉当初自己确实想去的, 我想着游戏行业的人员兴趣基本相同, 能够一起做游戏,一边骂着策划脑洞一边做2333, 而不是做自己不喜欢的网站后端, 我发现目前自己都是一个人学习, 一个人做着, 何谈团队的乐趣?</li>\n</ol>\n<p>症状就如上了, 自己也得想想办法了.</p>\n<ol>\n<li>首要任务找个人(找个团队)一起做游戏吧, 自己一个人的话, 说不上我向往的一起写代码的氛围</li>\n<li>找到团队之后, 就能通过一边做游戏一边学习自己的不足了</li>\n<li>我长时间的学习, 做不出自己满意的项目也是原因之一吧.</li>\n<li>手机游戏的话, 暂时不去玩网游了. 我自己更适合单机? 找人做独立游戏?? emm不错</li>\n</ol>\n<h1 id=\"十六日\"><a href=\"#十六日\" class=\"headerlink\" title=\"十六日\"></a>十六日</h1><p>爆肝学习了一天3dmax , 现在是会基本的操作 能够完成一些简单的建模了.</p>\n<p>从B站找个那个课程也是很不错<br><a href=\"https://www.bilibili.com/video/av18210293/\" target=\"_blank\" rel=\"noopener\">3Dmax2018零基础入门教程（第一，二，三，四，五阶段）</a></p>\n<p>一天的事件我就从 P0看到了    P51 过得很快, 但感觉掌握的还能接受</p>\n<hr>\n<table>\n<thead>\n<tr>\n<th>按键</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>shift</td>\n<td>绘制直线</td>\n</tr>\n<tr>\n<td>删除键</td>\n<td>可以回退一次</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>W</td>\n<td>移动</td>\n</tr>\n<tr>\n<td>E</td>\n<td>旋转</td>\n</tr>\n<tr>\n<td>R</td>\n<td>缩放</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>F3</td>\n<td>线框显示模式</td>\n</tr>\n<tr>\n<td>F4</td>\n<td>实体+线框限时模式</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Shift</td>\n<td>按住可以复制</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Alt+T+A</td>\n<td>阵列</td>\n</tr>\n<tr>\n<td>Alt+T+M</td>\n<td>镜像</td>\n</tr>\n<tr>\n<td>Alt+A+对齐</td>\n<td></td>\n</tr>\n<tr>\n<td>Shitf+I</td>\n<td>间隔工具</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Ctrl+X</td>\n<td>专家模式, 隐藏所有多余的东西 获得最大的空间</td>\n</tr>\n<tr>\n<td>Alt+X</td>\n<td>半透明显示</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+X</td>\n<td>变换虚拟体显示切换 可以看到变换虚拟体的明显变化</td>\n</tr>\n<tr>\n<td>O</td>\n<td>自适应降级</td>\n</tr>\n</tbody></table>\n<p><strong>编辑样条线-&gt;顶点</strong><br>优化 在线上添加点<br>焊接 连接两点<br>自动焊接 两点在距离之内自动焊接</p>\n<p><strong>车削修改器</strong><br>将二维图形 指定一个轴然后旋转 得到立体图形</p>\n<p><strong>可编辑多边形</strong><br><em>细分曲面</em><br>迭代次数2-3<br>无需子层级修改后 可以勾选 等值线显示(勾选后 显示真实的渲染线? 不勾选显得线条少 利于编辑子层面)<br><em>细分置换-经常使用置换网格WSM修改器</em><br>需要给立体图形 设置好材质球 材质球需要置换这个属性的贴图<br><em>绘制变形-未学-用于雕刻地形</em><br><strong>倒角剖面和扫描的区别</strong></p>\n<ol>\n<li>结合点不同</li>\n<li>倒角剖面不能用三维轮廓, 扫描可以使用三维轮廓</li>\n<li>倒角剖面不能将 图形包含图形(一个圆中再画一个圆) 的图形作为剖面,扫描可以.</li>\n</ol>\n<hr>\n<p>好了暑假也算是结束了</p>\n<p>哦对了 我还在做一个游戏 从YouTube上看到一个打砖块游戏.<br>这只是开始, 因为我是做服务器的所以我要把游戏改成双人联机哒!!!!目前进展还不错</p>\n<p>我打算模仿一个知乎大佬在知乎更新下专栏? 貌似可以诶</p>\n<p>网上讲解服务器的不少 讲解客户端的不少  讲解一套的就少了</p>\n<p>好了博客整理下 寒假结束了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>现在是<code>2020年2月1日17:32:50</code> 寒假过半? 目前还不知道寒假什么时候开学. 为了自己能够前往心目中的公司, 学习是必不可少的.<br>学习的同时 应该要注意总结, 防止一天或者一周下来白忙活<br>我们寒假开始是一月九号 到我开始寒假学习的一月二十三号 这些天没有学习用来玩了, 好在后面拾了回来<br>从二十三号到现在二月一号, 每天学习的长度和质量总算是在慢慢上升<br>距离下一个寒假只剩下一年的时间了, 需要更加的努力, 为了大三暑假能够进入心中的公司 大三寒假的实习必不可少了. 加倍努力吧</p>\n<p>这篇博客的标题起初是<code>大二寒假学习记录</code>后来改成了<code>大二寒假及下学期学习记录</code>寒假的学习必不可少, 下学期更要抓紧时间了.</p>\n<h1 id=\"二月\"><a href=\"#二月\" class=\"headerlink\" title=\"二月\"></a>二月</h1><h2 id=\"一日2020年2月1日17-39-59\"><a href=\"#一日2020年2月1日17-39-59\" class=\"headerlink\" title=\"一日2020年2月1日17:39:59\"></a>一日2020年2月1日17:39:59</h2><p>前几天把博客从我自己的服务器迁移到了coding上, 方便以后我乱搞服务器, 现在服务器上没有重要的内容了<br>至于实际的学习方面, 我开始整理我的博客<a href=\"https://blog.lsmg.xyz/2019/08/CPP-Linux-%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/\">主要是这篇</a>这篇现在算告一段落了, 主要是把自己以前学过的用一用. 空洞的写下api<br>理解不是很深刻.<a href=\"https://blog.lsmg.xyz/2019/08/CPP-Linux-%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86/\">这两天修改的这一篇</a>. 第二篇自己缺少的东西很多, 由于当时学习到了后面实在是学不下去了.<br>所以现在把后面的部分重新写了一下. 高级部分的线程和进程的部分 实在是太走马观花. 等我顺序学到了 再多写一些例子</p>\n<p>今天的话, 练习了下poll系统调用, 写了一个poll的demo, 然后是整理了下信号的部分, 信号这里整理的依然很少 平时用到的不多, 需要多加使用<br>主要是定时器这里了 定时器把原来的内容删掉了 从新写目前只写完了socket定时</p>\n<p>接下来打算还是多写一些项目 多思考一些 等我整理完了高级部分 就准备去看开源项目?每次看开源项目都感觉自己差的太多, 不知道从哪里看起<br>所以搭配着别人的笔记学习下看源码. 当然看源码之前还是要会大概的使用. 高级部分自然包括了libevent的使用部分</p>\n<p>跑去写项目了</p>\n<h2 id=\"二日2020年2月2日18-03-23\"><a href=\"#二日2020年2月2日18-03-23\" class=\"headerlink\" title=\"二日2020年2月2日18:03:23\"></a>二日2020年2月2日18:03:23</h2><p>罪过罪过, 昨天晚上十一点半 玩了一把军团TD 结果玩到了十二点半 ….. 最后一点半才睡觉<br>今天早上小十一点才起床.<br>我依稀记得我八点被闹钟叫起来emm 然后想着定八点半的闹钟 再睡一会, 结果闹钟没定我就睡着了.</p>\n<p>起来后整理了整理吃了午饭, 就下午小一点了, 打开高级部分 学习<code>信号SIGALRM定时</code></p>\n<p>代码量就400行 一直到我写今天的博客 才算完工</p>\n<p><strong>先写一下遇到的一个问题吧</strong><br>首先表现出来的是<code>超时后 服务器没有断开连接</code><br>然后我去打断点, 发现不是定时器链表部分的问题. 是定时信号没有触发<code>epoll_wait</code>.<br>这里我看了下代码, 发现定时器没有启动加上了<code>alarm(5)</code>, 我本意是理解了书上的代码 再去自己写, 结果还是理解的不深刻, 竟然丢了启动定时器的函数.<br>然后我又运行了下<code>发现还是没有运行到</code><br>然后发现<code>epoll_wait 返回-1 设置EINTR</code>, 后来查阅了下说是被信号处理器中断, 思考可能是与IDE下断点有关??????<br>最后发现自己没有把信号的管道添加到<code>epollfd</code>中再一细看发现丢了关于信号管道的四行代码…</p>\n<p>这个问题应该是很容易排查. 事后感觉应该这样思考<br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/epoll%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5.png\" alt=\"\"><br>以后尽量总结正确的思考模式, 虽然不知道有没有用 但要试一试.</p>\n<p><strong>项目收获方面</strong><br>虽然这个项目只有400多行代码, 但我自己是绝对写不出来的. 只能尽量总结书上代码的好处</p>\n<ol>\n<li>首先肯定是使用alarm超时产生信号SIGALRM来触发回调函数 实现定时</li>\n<li>信号回调函数, 没有直接去触发定时器tick函数, 而是通过一个管道传到了epollfd中, 然后从epollfd的函数中触发相关的if 再去调用tick函数<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">timer_handler</span><span class=\"params\">()</span> <span class=\"comment\">//真正的生效部分</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    timer_lst.tick();</span><br><span class=\"line\">    alarm(TIMESLOT);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sig_handler</span><span class=\"params\">(<span class=\"keyword\">int</span> sig)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> save_errno = errno;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> msg = sig;</span><br><span class=\"line\">    send(pipefd[<span class=\"number\">1</span>], (<span class=\"keyword\">char</span>*)&amp;msg, <span class=\"number\">1</span>, <span class=\"number\">0</span>); <span class=\"comment\">// pipefd[0]注册进了epoll中 接受到来的信号</span></span><br><span class=\"line\">    errno = save_errno;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addsig</span><span class=\"params\">(<span class=\"keyword\">int</span> sig)</span><span class=\"comment\">// 信号添加</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sigaction</span> <span class=\"title\">sa</span>&#123;</span>&#125;;</span><br><span class=\"line\">    sa.sa_flags |= SA_RESTART;</span><br><span class=\"line\">    sa.sa_handler = sig_handler;</span><br><span class=\"line\">    sigfillset(&amp;sa.sa_mask);</span><br><span class=\"line\">    exit_if(sigaction(sig, &amp;sa, <span class=\"literal\">nullptr</span>) == <span class=\"number\">-1</span>, <span class=\"string\">\"add sig error\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> signals[<span class=\"number\">1024</span>]; <span class=\"comment\">// 信号接收, 可能存在多个信号 所以用返回的字节数来逐个取出信号</span></span><br><span class=\"line\">ret = recv(sockfd, signals, <span class=\"keyword\">sizeof</span>(signals), <span class=\"number\">0</span>); 取出后使用<span class=\"keyword\">switch</span>来分离信号</span><br></pre></td></tr></table></figure></li>\n<li>将大部分常量 #define<br>大概只能总结出这一些来了, 完整的代码我贴在github上吧</li>\n</ol>\n<h2 id=\"五日-2020年2月6日09-16-23\"><a href=\"#五日-2020年2月6日09-16-23\" class=\"headerlink\" title=\"五日 2020年2月6日09:16:23\"></a>五日 2020年2月6日09:16:23</h2><p>三和四号 基本都在玩FF14, 发现自己并不是玩游戏了, 感觉被FF14玩了, 就是那种感觉累了不想玩了, 但却离自己定的小目标远 然后坚持<br>emm 其实感觉这个时候应该下游戏.<br>想想自己这大学一年半玩过的游戏 血族我算是玩的时间最长的大概前前后后我玩了五年, 应该是上半年把 我弃坑了. 游戏后面太氪了, 不得不退游了.<br>后面崩三啥的也玩过, 发现自己并不适合肝的游戏. 最近一个月入坑了fgo, 开始的几个星期还是玩的累了, 自己太肝了, 最近这几天感觉休闲了不少,<br>心态也正常了, 所以暂且会玩一玩.</p>\n<p>主要还是后面这些吧, 我发现自己逐渐有了一个念头: 累了就去玩会游戏, 就去看会直播, 刷刷B站. 后来我感觉这些浪费时间就去搜索了一下<br><strong>玩游戏算浪费时间吗</strong>, 刚才去找了下. 没找到我之前看过的那篇. 结论就是为什么自己不是累了就去小睡一下, 或者看看书,再或者刷刷新的科技圈<br>长长见识? 自己尝试了看书, 发现自己并不是太抗拒. 以后试试把.</p>\n<p>最后自己作为一个想开发游戏的人, 总感觉不玩游戏是不合适的, 但要玩的适度, 毕竟自己还有一年的时间就要找寒假实习, 为了自己的大三暑假进入大厂打下基础.<br>平衡好才是上策.</p>\n<p>接下文, 我发现自己有点?(自信点把点去掉)好高骛远了, 好高骛远会消磨一个人的兴趣和信心. 最终决定不做什么大游戏, 不研究什么框架, 先用自己所会的写一个小游戏,<br>一是为了试着重新拾起兴趣, 二是如果只学而不去写项目, 没有太大收获的</p>\n<p>昨天一天都是策划和编写一个游戏, 游戏逻辑十分的简单. 猜数字 初期的流程图我大概画了下, 姑且算作第一版吧 下面放出来, 我后面可以逐渐丰富这个东西 加上日志登录<br>断线重连等等功能.感觉还是可以的~~ 尽管逻辑很简单.<br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E5%B0%8F%E6%B8%B8%E6%88%8F-%E7%8C%9C%E6%95%B0%E5%AD%97/%E6%B8%B8%E6%88%8F%E6%B5%81%E7%A8%8B1.png\" alt=\"\"><br><img src=\"https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E5%B0%8F%E6%B8%B8%E6%88%8F-%E7%8C%9C%E6%95%B0%E5%AD%97/%E6%B8%B8%E6%88%8F%E6%A0%B8%E5%BF%83%E9%80%BB%E8%BE%911.png\" alt=\"\"></p>\n<p>听说在写代码前规划好, 可以更好地组织代码, 昨天尝试了下感觉还不错. 我在写代码前把游戏的流程图画了一下, 然后标上了哪里会有什么数据交互,<br>之后我去写了数据包头格式<br><strong>头部</strong></p>\n<table>\n<thead>\n<tr>\n<th>偏移量</th>\n<th>长度</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>4</td>\n<td>封包总大小</td>\n</tr>\n<tr>\n<td>4</td>\n<td>2</td>\n<td>头部长度</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2</td>\n<td>操作码</td>\n</tr>\n</tbody></table>\n<p><strong>操作码</strong></p>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>含义</th>\n<th>数据格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>00</td>\n<td>登录</td>\n<td></td>\n</tr>\n<tr>\n<td>01</td>\n<td>桌位信息(服务器发送桌位列表)</td>\n<td>[1000-0-4][1001-0-4]</td>\n</tr>\n<tr>\n<td>02</td>\n<td>桌位操作信息(客户端加入 退出桌位)</td>\n<td>1000</td>\n</tr>\n<tr>\n<td>03</td>\n<td>服务器桌位操作信息反馈(加入退出成功1 加入退出失败0)</td>\n<td>1</td>\n</tr>\n<tr>\n<td>04</td>\n<td>准备</td>\n<td>无</td>\n</tr>\n<tr>\n<td>05</td>\n<td>取消准备</td>\n<td>无</td>\n</tr>\n<tr>\n<td>06</td>\n<td>服务器广播桌位信息</td>\n<td>4[11][10][00][00] (桌位总数, 有人1 准备1)</td>\n</tr>\n<tr>\n<td>A1</td>\n<td>服务器广播游戏开始</td>\n<td>空</td>\n</tr>\n<tr>\n<td>A2</td>\n<td>服务器下发轮到的客户端</td>\n<td>空</td>\n</tr>\n<tr>\n<td>A3</td>\n<td>客户端发送猜测的数字</td>\n<td>50</td>\n</tr>\n<tr>\n<td>A4</td>\n<td>服务器发送猜测数字反馈 (数据合理1, 数据非法0)</td>\n<td>1</td>\n</tr>\n<tr>\n<td>A5</td>\n<td>服务器广播游戏状态</td>\n<td>50-0-75[A][B] (A玩家猜出50 当前范围 0到75 B玩家准备)</td>\n</tr>\n</tbody></table>\n<p>然后草拟了一下 用到的类 用到的数据结构 分几个类 怎么联系起来, 最终我才去写代码, 感觉比一边写<br>一边想要好不少. 写的过程中也发现了一些问题</p>\n<ol>\n<li><code>EPOLLRDHUP</code>这个绑定在listenfd还是newfd?? 如果是newfd还能理解下原理, listenfd就有点理解不了.(试了下, 是newfd)</li>\n<li><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Foo *a;</span><br><span class=\"line\">Foos b[<span class=\"number\">3</span>];</span><br><span class=\"line\">b[<span class=\"number\">1</span>] = *a;</span><br><span class=\"line\"><span class=\"comment\">// 修改a不会影响b[1], 这个问题听到过, 自己真正试了试才发现如此</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>姑且昨天的就补上这些吧. 今天打算把游戏的服务器跑起来</p>\n<h2 id=\"六日-2020年2月6日22-12-36\"><a href=\"#六日-2020年2月6日22-12-36\" class=\"headerlink\" title=\"六日 2020年2月6日22:12:36\"></a>六日 2020年2月6日22:12:36</h2><p>忙忙碌碌的一天就又要结束了. 今天一天把剩下的一部分逻辑代码写了一部分. 主要是写自定义协议的序列化和反序列化. 起初打算<br>用char* body 来存储, 按照上面定义的格式传输. 后来一想, 这样我就不就是在原地打转吗. 就去网上找了找相关的代码, 看看别人怎么写的</p>\n<p>主要是看的这一篇博客<a href=\"https://blog.csdn.net/ACb0y/article/details/61421006\" target=\"_blank\" rel=\"noopener\">手把手教你实现自定义的应用层协议</a><br>看了之后收获不少. 收获总结在下面吧</p>\n<ol>\n<li>两个头文件互相include<br> 这个是今天了解的最奇葩的一个问题, 如果两个头文件互相include 会出问题. 这个明天开一篇 采坑博客<br> 与此连带的还有class 前置声明, 再者可以到编译相关的问题</li>\n<li>今天了解了一下CMAKE和MAKE的区别和联系, 总算知道了为啥好多安装的时候先cmake 再 make</li>\n<li>还是关于CMAKE 稍微整理了点CMAKE的使用. 随用随整理, 目前不打算一次性整理太多</li>\n<li>Git操作不熟练. 我本地写好了代码文件, commit 然后从服务器pull了一个仅包含readme的仓库, 然后reset<br> 自己写的代码文件全没了, 只剩下README.md 还好之前整理过reflog, 明天也需要在整理下</li>\n<li>安装了jsoncpp, 亿图图示等一些软件. 写了下关于字节对齐的问题. 亿图图示目前感觉挺不错</li>\n</ol>\n<p>代码方面的收获 主要就是看的那篇博客学到的.</p>\n<ol>\n<li>首先就是学会了自定了协议 序列化和反序列化怎么写 代码更美. 虽然可能我看的博客可能不是最好的,<br> 但对我目前来说足够美了, 不过写一遍远远不够.</li>\n<li>学到了巧妙地对 <code>uint8_t*</code>类型的指针(指向流数据缓冲区)转换成<code>uint16_t*</code>等指针类型, 进行解引用 得到原本的数据, 然后对<br>  <code>uint8_t*</code>类型的指针<code>+2</code>就可以跳过一个<code>uint16_t</code>, 虽然这些能够理解, 但实际应用这是第一次</li>\n<li>对于如何更好的组织一个数据结构 有了更深的体会.</li>\n<li>使用vector来存储剩余的包字节, 相比使用一个定长数组进行strcpy 方便了不少</li>\n<li>使用erase擦除也是第一次实际应用</li>\n<li>更好的使用指针</li>\n</ol>\n<p>定一下明天的任务吧, 试运行</p>\n<ol>\n<li>定义游戏的json格式, 把所有的json都定义出来 √</li>\n<li>游戏完成度达到能够正确解析包并分发到合理的部分即可 √</li>\n<li>写一遍采坑博客-头文件互相引用 √</li>\n<li>针对今天Git遇到的文件 在做研究下√</li>\n<li>简单学习下jsoncpp的使用√</li>\n</ol>\n<h2 id=\"七日-2020年2月7日10-14-53\"><a href=\"#七日-2020年2月7日10-14-53\" class=\"headerlink\" title=\"七日 2020年2月7日10:14:53\"></a>七日 2020年2月7日10:14:53</h2><p>2020年2月7日10:14:53<br>今天博客写的格外早, 主要是又遇到一个奇葩问题(其实是我自己使用有误)<br>我昨天最后发现代码跑不起来, 就没有管, 今天看了下跑不起来是因为<code>未定义引用</code><br>好吧, 未定义引用, 我检查了一下发现不对啊, 我加上了<br><code>target_link_libraries(Guess -ljsoncpp network game)</code><br>我当时是这样写的, 结果就是报错<code>未定义引用</code>, 然后我把报错的部分另开一个项目放进去<br>运行起来没问题?????.<br>然后我把报错的代码放在我项目的main文件中, 结果原来的报错也消失了 main中的也没报错?????<br>最后阴差阳错发现这个博客<a href=\"https://blog.csdn.net/qq_33249383/article/details/88908218\" target=\"_blank\" rel=\"noopener\">初入职常见问题：gcc编译时对’xxxx’未定义的引用</a>. 我发现其中的一段话</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个主要的原因是gcc编译的时候，各个文件依赖顺序的问题。</span><br><span class=\"line\">在gcc编译的时候，如果文件a依赖于文件b，那么编译的时候必须把a放前面，b放后面。</span><br><span class=\"line\">例如:在main.c中使用了pthread库相关函数，那么编译的时候必须是main.c在前，-lpthread在后。 gcc main.c -lpthread -o a.out 。</span><br></pre></td></tr></table></figure>\n<p>虽然使用的是cmake然后make 不确定编译器, 但我感觉应该试一试. 因为我的软件是编译<code>network.a</code>的时候报错,<br>结果我改成了如下<br><code>target_link_libraries(Guess network game -ljsoncpp)</code><br>发现报错消失了……</p>\n<p>以前一直没有在意这里的顺序问题. 现在知道了问题所在 去搜索target_link_libraries顺序问题<br>找到了一堆解释 哎….</p>\n<p>2020年2月7日18:10:20<br>终于把头文件互相引用给搞明白了, 感觉这篇博客写的还可以吧, 就发到了<a href=\"https://blog.csdn.net/qq_26790181/article/details/104213520\" target=\"_blank\" rel=\"noopener\">csdn上面</a>,自己的博客上也会发的. 就先这样吧<br>今天的第三项任务完成了, 概第四项任务了Git</p>\n<p>2020年2月7日22:17:41<br>今天的任务完成了 还发现一个联系git的网站… 真的是纯偶然发现的<a href=\"https://learngitbranching.js.org/\" target=\"_blank\" rel=\"noopener\">这个</a><br>大创那里今天看了下文档 找了找模板 还可以吧 明天的话</p>\n<ol>\n<li>游戏把服务器端写完 一半</li>\n<li>把找到的大创模板改到springboot上面去  后续再套</li>\n<li>练习并搞懂两道中等算法题目</li>\n<li>在有时间的话把牛客整理了</li>\n</ol>\n<h2 id=\"八日九日-2020年2月9日18-04-35\"><a href=\"#八日九日-2020年2月9日18-04-35\" class=\"headerlink\" title=\"八日九日 2020年2月9日18:04:35\"></a>八日九日 2020年2月9日18:04:35</h2><p>简单写下吧, 昨天 不小心挂彩了, 还好运气还好, 没有太大的伤, 不然特别时期真的难搞.<br>不幸中的万幸</p>\n<p>今天一天都没写代码 或许明天会好一些把</p>\n<h1 id=\"十日\"><a href=\"#十日\" class=\"headerlink\" title=\"十日\"></a>十日</h1><p>2020年2月10日10:02:22<br>今天问题不大了, 继续写游戏的服务器<br>写完服务器后, 做算法题吧</p>\n<h1 id=\"十四日\"><a href=\"#十四日\" class=\"headerlink\" title=\"十四日\"></a>十四日</h1><p>昨天基本问题就不大了, 眼睛周围青了一圈成了大熊猫, 经过四天的休息 看东西倒是不流眼泪了.<br>今天的话, 实际的学习方面有</p>\n<p>终于自己还是要找开源项目看看了, 不过今天2020年2月14日17:08:40头脑不是很清醒, 中午没有睡好. 看了个大概就没看了<br><a href=\"https://tengine.taobao.org/book/chapter_02.html\" target=\"_blank\" rel=\"noopener\">nginx剖析</a></p>\n<p>偶尔发现了一本书, 这不就是我想要看的吗!!!!!!, 准备看这本书 这本书从输入网址到网页返回都很详细的写了写<br><img src=\"https://pic2.zhimg.com/v2-1336c859990173751b77ad9eb4318602_r.jpg\" alt=\"\"></p>\n<h1 id=\"十五日\"><a href=\"#十五日\" class=\"headerlink\" title=\"十五日\"></a>十五日</h1><p>理论上大二寒假就要过完了. 昨天晚上想了很多</p>\n<p>先说一下游戏把: 感觉自己不喜欢玩手机游戏了, 手机游戏非肝即氪 自己没有时间去肝游戏, 肝游戏不会给你工作, 自己没有钱去氪金, 自己又非.抱着这种念头时间长了, 自己对游戏更加提不起兴趣了. 而我又想去做游戏, 一个不想玩游戏的人能做游戏吗? 虽说我的不想玩是在各种因素长时间影响下形成的.</p>\n<p>再说下我对编程吧: 怎么说呢, 我在大二上学期的上半学期之前, 都很喜欢写代码的, 我能在电脑前面坐上一整天. 后来我对代码提不起兴趣了. 原因的话昨天晚上整理了下.</p>\n<ol>\n<li>目的不同了: 我在大二上学期的上半学期之前(包括大一整个学期)都是抱着解决某个问题去写软件的, 说起来是为自己写代码?首先就是我学的Javaweb为了解决校园网登录难的问题, 我用Java写一个客户端, 同时配上了后台和下载站(用的阿里云的OSS). 我记得的那段时间真的快乐. 后面我又为解决手动签到的问题, 做了个签到软件, 也是如此.——后来我学习的目的就是为了增进自己的知识(目的只有一个–进入大公司), 变成了为了学而学(之所以为了学而学是感觉时间真的有限, 我想在大三暑假能够实习, 我只有一年半的时间), 而不是之前, 通过做自己喜欢的东西不会了就去补一补. 长时间这样学习我大二上整个学期一个正经的项目都没有, 长时间为了学而学消磨了我的兴趣??</li>\n<li>我发现我现在好像失去了对编程的乐趣, 现在写项目总想写出更优的结构, 总想写出大项目, 然而我的能力不足. 想实现和无法实现的思想一直持续着, 也是消磨的原因之一? 我现在在想我是不是期初就对linux服务器不感兴趣? 可我感觉当初自己确实想去的, 我想着游戏行业的人员兴趣基本相同, 能够一起做游戏,一边骂着策划脑洞一边做2333, 而不是做自己不喜欢的网站后端, 我发现目前自己都是一个人学习, 一个人做着, 何谈团队的乐趣?</li>\n</ol>\n<p>症状就如上了, 自己也得想想办法了.</p>\n<ol>\n<li>首要任务找个人(找个团队)一起做游戏吧, 自己一个人的话, 说不上我向往的一起写代码的氛围</li>\n<li>找到团队之后, 就能通过一边做游戏一边学习自己的不足了</li>\n<li>我长时间的学习, 做不出自己满意的项目也是原因之一吧.</li>\n<li>手机游戏的话, 暂时不去玩网游了. 我自己更适合单机? 找人做独立游戏?? emm不错</li>\n</ol>\n<h1 id=\"十六日\"><a href=\"#十六日\" class=\"headerlink\" title=\"十六日\"></a>十六日</h1><p>爆肝学习了一天3dmax , 现在是会基本的操作 能够完成一些简单的建模了.</p>\n<p>从B站找个那个课程也是很不错<br><a href=\"https://www.bilibili.com/video/av18210293/\" target=\"_blank\" rel=\"noopener\">3Dmax2018零基础入门教程（第一，二，三，四，五阶段）</a></p>\n<p>一天的事件我就从 P0看到了    P51 过得很快, 但感觉掌握的还能接受</p>\n<hr>\n<table>\n<thead>\n<tr>\n<th>按键</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>shift</td>\n<td>绘制直线</td>\n</tr>\n<tr>\n<td>删除键</td>\n<td>可以回退一次</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>W</td>\n<td>移动</td>\n</tr>\n<tr>\n<td>E</td>\n<td>旋转</td>\n</tr>\n<tr>\n<td>R</td>\n<td>缩放</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>F3</td>\n<td>线框显示模式</td>\n</tr>\n<tr>\n<td>F4</td>\n<td>实体+线框限时模式</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Shift</td>\n<td>按住可以复制</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Alt+T+A</td>\n<td>阵列</td>\n</tr>\n<tr>\n<td>Alt+T+M</td>\n<td>镜像</td>\n</tr>\n<tr>\n<td>Alt+A+对齐</td>\n<td></td>\n</tr>\n<tr>\n<td>Shitf+I</td>\n<td>间隔工具</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Ctrl+X</td>\n<td>专家模式, 隐藏所有多余的东西 获得最大的空间</td>\n</tr>\n<tr>\n<td>Alt+X</td>\n<td>半透明显示</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+X</td>\n<td>变换虚拟体显示切换 可以看到变换虚拟体的明显变化</td>\n</tr>\n<tr>\n<td>O</td>\n<td>自适应降级</td>\n</tr>\n</tbody></table>\n<p><strong>编辑样条线-&gt;顶点</strong><br>优化 在线上添加点<br>焊接 连接两点<br>自动焊接 两点在距离之内自动焊接</p>\n<p><strong>车削修改器</strong><br>将二维图形 指定一个轴然后旋转 得到立体图形</p>\n<p><strong>可编辑多边形</strong><br><em>细分曲面</em><br>迭代次数2-3<br>无需子层级修改后 可以勾选 等值线显示(勾选后 显示真实的渲染线? 不勾选显得线条少 利于编辑子层面)<br><em>细分置换-经常使用置换网格WSM修改器</em><br>需要给立体图形 设置好材质球 材质球需要置换这个属性的贴图<br><em>绘制变形-未学-用于雕刻地形</em><br><strong>倒角剖面和扫描的区别</strong></p>\n<ol>\n<li>结合点不同</li>\n<li>倒角剖面不能用三维轮廓, 扫描可以使用三维轮廓</li>\n<li>倒角剖面不能将 图形包含图形(一个圆中再画一个圆) 的图形作为剖面,扫描可以.</li>\n</ol>\n<hr>\n<p>好了暑假也算是结束了</p>\n<p>哦对了 我还在做一个游戏 从YouTube上看到一个打砖块游戏.<br>这只是开始, 因为我是做服务器的所以我要把游戏改成双人联机哒!!!!目前进展还不错</p>\n<p>我打算模仿一个知乎大佬在知乎更新下专栏? 貌似可以诶</p>\n<p>网上讲解服务器的不少 讲解客户端的不少  讲解一套的就少了</p>\n<p>好了博客整理下 寒假结束了</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck7fmucy90003souo2wid3vx6","category_id":"ck7fmucye000asouoc1j468jm","_id":"ck7fmucyi000hsouo9taifv7i"},{"post_id":"ck7fmucyg000fsouo6vqw41o8","category_id":"ck7fmucy80002souoas6m6nad","_id":"ck7fmucyk000lsouohia30316"},{"post_id":"ck7fmucyg000fsouo6vqw41o8","category_id":"ck7fmucyg000esouo94ct8zn4","_id":"ck7fmucyl000osouofxm2a4s4"},{"post_id":"ck7fmucya0004souodir324mi","category_id":"ck7fmucy80002souoas6m6nad","_id":"ck7fmucyl000qsouoeriqg8vz"},{"post_id":"ck7fmucya0004souodir324mi","category_id":"ck7fmucyg000esouo94ct8zn4","_id":"ck7fmucym000tsouo3bl82gfs"},{"post_id":"ck7fmucy20000souoer7ifula","category_id":"ck7fmucy80002souoas6m6nad","_id":"ck7fmucyn000wsouobuj41ttk"},{"post_id":"ck7fmucy20000souoer7ifula","category_id":"ck7fmucyg000esouo94ct8zn4","_id":"ck7fmucyo000zsouo8ty66uk3"},{"post_id":"ck7fmucyd0008souoa1o9clxd","category_id":"ck7fmucy80002souoas6m6nad","_id":"ck7fmucyp0013souobuk1ecom"},{"post_id":"ck7fmucyd0008souoa1o9clxd","category_id":"ck7fmucyg000esouo94ct8zn4","_id":"ck7fmucyq0015souoho6kgbck"},{"post_id":"ck7fmucy70001souo7ty93sdd","category_id":"ck7fmucy80002souoas6m6nad","_id":"ck7fmucyr0018souogdmq5er9"},{"post_id":"ck7fmucy70001souo7ty93sdd","category_id":"ck7fmucyg000esouo94ct8zn4","_id":"ck7fmucys001csouohxa760h3"},{"post_id":"ck7fmucye0009souoaufhd2t9","category_id":"ck7fmucy80002souoas6m6nad","_id":"ck7fmucyw001isouoefrl21fv"},{"post_id":"ck7fmucye0009souoaufhd2t9","category_id":"ck7fmucyp0012souo0ssp5vlr","_id":"ck7fmucyw001lsouob1k0e4xt"},{"post_id":"ck7fmucyf000csouo0m63hy4c","category_id":"ck7fmucy80002souoas6m6nad","_id":"ck7fmucyx001osouo28de3gzc"},{"post_id":"ck7fmucyf000csouo0m63hy4c","category_id":"ck7fmucyp0012souo0ssp5vlr","_id":"ck7fmucz0001rsouock4jgkuy"},{"post_id":"ck7fmucyh000gsouohb8zcyz3","category_id":"ck7fmucy80002souoas6m6nad","_id":"ck7fmucz3001xsouo1rnrbx8u"},{"post_id":"ck7fmucyh000gsouohb8zcyz3","category_id":"ck7fmucyx001nsouo6edt1lsy","_id":"ck7fmucz4001zsouob2y1665e"},{"post_id":"ck7fmucyi000jsouob51d5zkw","category_id":"ck7fmucy80002souoas6m6nad","_id":"ck7fmucz50022souoeszug2s2"},{"post_id":"ck7fmucyi000jsouob51d5zkw","category_id":"ck7fmucyp0012souo0ssp5vlr","_id":"ck7fmucz60024souohqtvd5ec"},{"post_id":"ck7fmucyj000ksouo70kbfy0s","category_id":"ck7fmucy80002souoas6m6nad","_id":"ck7fmucz70027souo6zp27xmu"},{"post_id":"ck7fmucyj000ksouo70kbfy0s","category_id":"ck7fmucyx001nsouo6edt1lsy","_id":"ck7fmucza0029souo8at0cn90"},{"post_id":"ck7fmucyk000nsouo2jm1czht","category_id":"ck7fmucy80002souoas6m6nad","_id":"ck7fmuczb002csouo529e2hwc"},{"post_id":"ck7fmucyk000nsouo2jm1czht","category_id":"ck7fmucyx001nsouo6edt1lsy","_id":"ck7fmuczc002fsouo95wf6s2n"},{"post_id":"ck7fmucyb0006souoh5e814al","category_id":"ck7fmucyk000msouoecp8017r","_id":"ck7fmuczd002isouo39kj9f81"},{"post_id":"ck7fmucyb0006souoh5e814al","category_id":"ck7fmucz60026souoapu857qv","_id":"ck7fmuczd002lsouo32hj2b43"},{"post_id":"ck7fmucyl000psouo10bc1d9a","category_id":"ck7fmucy80002souoas6m6nad","_id":"ck7fmucze002qsouohcbrfs9t"},{"post_id":"ck7fmucyl000psouo10bc1d9a","category_id":"ck7fmuczb002dsouoe1bhd3qa","_id":"ck7fmucze002rsouofbgh96w6"},{"post_id":"ck7fmucym000ssouobt1rgl6d","category_id":"ck7fmucy80002souoas6m6nad","_id":"ck7fmucze002tsouo2v76ckyo"},{"post_id":"ck7fmucym000ssouobt1rgl6d","category_id":"ck7fmucyx001nsouo6edt1lsy","_id":"ck7fmuczf002vsouo1vm3ah0x"},{"post_id":"ck7fmucyn000vsouoc2vcc0mo","category_id":"ck7fmucy80002souoas6m6nad","_id":"ck7fmuczf002xsouo352tf0w2"},{"post_id":"ck7fmucyn000vsouoc2vcc0mo","category_id":"ck7fmucyx001nsouo6edt1lsy","_id":"ck7fmuczf002ysouo1ihdhprm"},{"post_id":"ck7fmucyo000ysouo4dwu0isa","category_id":"ck7fmucy80002souoas6m6nad","_id":"ck7fmuczf002zsouo1nht1b7d"},{"post_id":"ck7fmucyo000ysouo4dwu0isa","category_id":"ck7fmucyx001nsouo6edt1lsy","_id":"ck7fmuczg0031souo923ddm8i"},{"post_id":"ck7fmucyq0014souoavklgya3","category_id":"ck7fmucy80002souoas6m6nad","_id":"ck7fmuczg0033souo2mxj1sne"},{"post_id":"ck7fmucyq0014souoavklgya3","category_id":"ck7fmuczf0030souo7b9whahc","_id":"ck7fmuczg0035souoel7u7xw4"},{"post_id":"ck7fmucyr0019souo0k7i93yt","category_id":"ck7fmuczg0034souo214k5r1u","_id":"ck7fmuczh0038souo9d5i2kz8"},{"post_id":"ck7fmucys001dsouo094e093p","category_id":"ck7fmuczg0034souo214k5r1u","_id":"ck7fmuczh003asouo2gdwhrkd"},{"post_id":"ck7fmucyv001gsouo0dhndw0r","category_id":"ck7fmuczg0034souo214k5r1u","_id":"ck7fmuczi003csouoahxh5rf3"},{"post_id":"ck7fmucyw001ksouof3igb0b8","category_id":"ck7fmuczg0034souo214k5r1u","_id":"ck7fmuczi003dsouo1d37ccrh"},{"post_id":"ck7fmucyf000dsouo6hk5hjer","category_id":"ck7fmucyk000msouoecp8017r","_id":"ck7fmuczi003gsouo5zq8hyy8"},{"post_id":"ck7fmucyf000dsouo6hk5hjer","category_id":"ck7fmuczi003bsouohsgf3mrv","_id":"ck7fmuczj003hsouoel239bqx"},{"post_id":"ck7fmucyx001msouofntw3g6w","category_id":"ck7fmucy80002souoas6m6nad","_id":"ck7fmuczj003jsouo5hsbhpkx"},{"post_id":"ck7fmucyx001msouofntw3g6w","category_id":"ck7fmuczf0030souo7b9whahc","_id":"ck7fmuczj003ksouo46g8de1m"},{"post_id":"ck7fmucyy001qsouogh1z2hmp","category_id":"ck7fmuczg0034souo214k5r1u","_id":"ck7fmuczj003msouobokc4zes"},{"post_id":"ck7fmucz0001ssouo79j96njt","category_id":"ck7fmuczg0034souo214k5r1u","_id":"ck7fmuczk003osouoe3hj9xf0"},{"post_id":"ck7fmucz1001usouohp4k0t5w","category_id":"ck7fmuczg0034souo214k5r1u","_id":"ck7fmuczk003qsouobor87vzl"},{"post_id":"ck7fmucz3001vsouo61bnfhaa","category_id":"ck7fmuczg0034souo214k5r1u","_id":"ck7fmuczk003ssouog1vshfk8"},{"post_id":"ck7fmucz4001ysouoavj55kuw","category_id":"ck7fmuczg0034souo214k5r1u","_id":"ck7fmuczl003usouofd5id4fb"},{"post_id":"ck7fmucz50020souoek6k36uy","category_id":"ck7fmuczg0034souo214k5r1u","_id":"ck7fmuczl003vsouoft7z0sqc"},{"post_id":"ck7fmucz50023souod6xb0uwv","category_id":"ck7fmuczl003tsouocszu4aig","_id":"ck7fmuczl003xsouo2bl96q32"},{"post_id":"ck7fmuczb002bsouo62is9iwc","category_id":"ck7fmuczm003zsouoapcvho3v","_id":"ck7fmuczm0042souoeuia5hgf"},{"post_id":"ck7fmuczc002gsouofknhbb6i","category_id":"ck7fmuczl003tsouocszu4aig","_id":"ck7fmuczn0044souo8n3r7xc1"},{"post_id":"ck7fmucyo0010souo3zfwb07g","category_id":"ck7fmuczf002wsouo5heogeqf","_id":"ck7fmuczn0046souo0la47xb4"},{"post_id":"ck7fmucyo0010souo3zfwb07g","category_id":"ck7fmuczn0043souo65tacdtn","_id":"ck7fmuczo0048souo8a1q0dfe"},{"post_id":"ck7fmucyq0016souo4hgtfrrw","category_id":"ck7fmucy80002souoas6m6nad","_id":"ck7fmuczo0049souo401m8luv"},{"post_id":"ck7fmucyq0016souo4hgtfrrw","category_id":"ck7fmuczg0032souoclbt9d46","_id":"ck7fmuczo004bsouo4suo6la6"},{"post_id":"ck7fmucyq0016souo4hgtfrrw","category_id":"ck7fmuczn0045souo1i4e0tef","_id":"ck7fmuczo004csouof44x3ww5"},{"post_id":"ck7fmucz60025souoei5e9s3e","category_id":"ck7fmuczl003wsouogxwhennt","_id":"ck7fmuczo004esouo2f3dgwmw"},{"post_id":"ck7fmucz60025souoei5e9s3e","category_id":"ck7fmuczn0047souo70997whf","_id":"ck7fmuczp004fsouo3l4jaiul"},{"post_id":"ck7fmucz70028souocpx10hz6","category_id":"ck7fmuczl003wsouogxwhennt","_id":"ck7fmuczp004gsouo4agpcjyd"},{"post_id":"ck7fmucz70028souocpx10hz6","category_id":"ck7fmuczo004asouo9ms0hcjg","_id":"ck7fmuczp004hsouo0wyt8mwg"},{"post_id":"ck7fmuczb002esouo9ccl867s","category_id":"ck7fmuczl003wsouogxwhennt","_id":"ck7fmuczp004isouo0dqxeec0"},{"post_id":"ck7fmuczb002esouo9ccl867s","category_id":"ck7fmuczo004asouo9ms0hcjg","_id":"ck7fmuczp004jsouo2z5u8cve"}],"PostTag":[{"post_id":"ck7fmucy90003souo2wid3vx6","tag_id":"ck7fmucyb0005souo4imy3g1j","_id":"ck7fmucyf000bsouohjif38cg"},{"post_id":"ck7fmucyl000psouo10bc1d9a","tag_id":"ck7fmucyn000usouo69t8g3at","_id":"ck7fmucys001asouo9vic4420"},{"post_id":"ck7fmucyl000psouo10bc1d9a","tag_id":"ck7fmucyp0011souo2d508lk6","_id":"ck7fmucyt001esouoc6k7gqjk"},{"post_id":"ck7fmucyo0010souo3zfwb07g","tag_id":"ck7fmucyr0017souoartj5imv","_id":"ck7fmucyw001jsouo24st5sjn"},{"post_id":"ck7fmucyq0016souo4hgtfrrw","tag_id":"ck7fmucyt001fsouofc5r9rdb","_id":"ck7fmucyy001psouoba1gdzys"},{"post_id":"ck7fmuczb002esouo9ccl867s","tag_id":"ck7fmucza002asouo0pr4atvp","_id":"ck7fmuczd002jsouodtstbf4w"},{"post_id":"ck7fmucz60025souoei5e9s3e","tag_id":"ck7fmucza002asouo0pr4atvp","_id":"ck7fmuczd002msouobzd620jd"},{"post_id":"ck7fmucz70028souocpx10hz6","tag_id":"ck7fmucza002asouo0pr4atvp","_id":"ck7fmucze002osouo5yjlf6tr"},{"post_id":"ck7fmuczb002bsouo62is9iwc","tag_id":"ck7fmuczd002nsouog8be6l6k","_id":"ck7fmucze002usouogxws123r"}],"Tag":[{"name":"3DMAX","_id":"ck7fmucyb0005souo4imy3g1j"},{"name":"CPP踩坑记","_id":"ck7fmucyn000usouo69t8g3at"},{"name":"CPP","_id":"ck7fmucyp0011souo2d508lk6"},{"name":"Git操作","_id":"ck7fmucyr0017souoartj5imv"},{"name":"Mysql","_id":"ck7fmucyt001fsouofc5r9rdb"},{"name":"腾讯游戏学院","_id":"ck7fmucza002asouo0pr4atvp"},{"name":"小游戏","_id":"ck7fmuczd002nsouog8be6l6k"}]}}