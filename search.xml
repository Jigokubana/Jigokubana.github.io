<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>游戏知识-服务器-服务器通信</title>
      <link href="/2019/12/%E6%B8%B8%E6%88%8F%E7%9F%A5%E8%AF%86-%E6%9C%8D%E5%8A%A1%E5%99%A8-%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%80%9A%E4%BF%A1/"/>
      <url>/2019/12/%E6%B8%B8%E6%88%8F%E7%9F%A5%E8%AF%86-%E6%9C%8D%E5%8A%A1%E5%99%A8-%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p>由于自己了解的实在是不足, 所以来腾讯游戏课堂来学习一些架构之类的东西 来完善自己的知识面<br><a href="https://gameinstitute.qq.com/course/detail/10096" target="_blank" rel="noopener">服务器通信</a></p><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>作业型-单纯多个client对一个server .. 比如我开始写过的聊天室程序</p><h1 id="CS通信"><a href="#CS通信" class="headerlink" title="CS通信"></a>CS通信</h1><p><img src="" alt="浏览器访问过程"><br>DNS协议-基于UDP协议</p><p>TCP<br>面向连接的可靠的有时序性的-流式协议<br>窗口管理<br>流量控制<br>数据确认<br>UDP<br>无连接不保证可靠性的无法保证时序-报文协议</p><p>QQ-CS<br>网络状况较好-UDP????-好吧还是处理了<br>网络状况差-TCP<br>大文件-TCP-TCP适合大文件交互, 因为他保持连接流式协议~</p><p>微信-CS<br>前台运行-TCP长连接<br>后台运行-TCP短连接<br>查看文章-HTTP(TCP短连接)</p><p>QQ-早期产品, 花最少的前~榨干性能<br>微信-腾讯后期产品</p><hr><p>字符串<br>自定义<br>Protobuf</p><p>序列化反序列化.</p><p>UDP协议-不要让单个包的数据量超过1K, 否则会由于分片等 导致一个大包一旦一个分片失败就都失败</p><p>存在的问题</p><ol><li>客户端和服务端数据一直对不上<br>可能是字节序的问题 - 字节序转换(网络字节数传送)</li><li>服务器发送的数据延迟-小包<br>NAGLE算法-小包并不是立即发送-等存多了在一起发送-可以禁用掉~~</li><li>数据较大或者网络波动<br>发送缓冲区慢了.. 适当加大发送缓冲区</li></ol><p>非阻塞IO<br>O_NONBLOCK<br>多路复用<br>select<br>poll<br>epoll</p><h1 id="SS通信"><a href="#SS通信" class="headerlink" title="SS通信"></a>SS通信</h1><p><img src="" alt="服务器间通信"><br>TCP-最常用<br>UDP-非关键数据-日志服务-内网通信网络状况好可以超过MTU<br>非SOCKET通信-进程间通信?-管道-信号-共享内存-信息队列-文件..</p>]]></content>
      
      
      <categories>
          
          <category> 游戏知识 </category>
          
          <category> 服务器 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>游戏知识-杂谈-如何进入游戏开发行业</title>
      <link href="/2019/12/%E6%B8%B8%E6%88%8F%E7%9F%A5%E8%AF%86-%E6%9D%82%E8%B0%88-%E5%A6%82%E4%BD%95%E8%BF%9B%E5%85%A5%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E8%A1%8C%E4%B8%9A/"/>
      <url>/2019/12/%E6%B8%B8%E6%88%8F%E7%9F%A5%E8%AF%86-%E6%9D%82%E8%B0%88-%E5%A6%82%E4%BD%95%E8%BF%9B%E5%85%A5%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E8%A1%8C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<p>由于自己了解的实在是不足, 所以来腾讯游戏课堂来学习一些架构之类的东西 来完善自己的知识面<br><a href="https://gameinstitute.qq.com/course/detail/10156" target="_blank" rel="noopener">想做游戏吗？如何开始我的游戏开发职业生涯</a></p><a id="more"></a><p>做游戏不会重复做同样的工作, 项目不同</p>]]></content>
      
      
      <categories>
          
          <category> 游戏知识 </category>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux-菜鸟入门</title>
      <link href="/2019/10/Linux-%E8%8F%9C%E9%B8%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2019/10/Linux-%E8%8F%9C%E9%B8%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>如果写起来C++有点不想写的话, 就来学一点Linux 日常中也是能用到. 这次先选择一个简单的网址来学习了<br><a href="https://www.zhihu.com/question/30328004/answer/751243297" target="_blank" rel="noopener">网址推荐的知乎问答</a><br><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/base/01_use_man.html" target="_blank" rel="noopener">学习网页</a></p><a id="more"></a><h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><p>这部分是我之前整理的一些, 整合到这里</p><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plain">du -s .&#x2F;*# 查看当前目录的占比<br><br>19M.&#x2F;bin<br>4.0K.&#x2F;etc<br>4.0K.&#x2F;games<br>40K.&#x2F;include<br>98M.&#x2F;lib<br>55M.&#x2F;lib64<br>7.8M.&#x2F;libexec<br>132K.&#x2F;local<br>24M.&#x2F;sbin<br>182M.&#x2F;share<br>12K.&#x2F;src<br>0.&#x2F;tmp<br></code></pre></td></tr></table></figure><p><strong>vi</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">打开文件<br>vi /path/to/somefile<br>vi +#4 :打开文件，并定位于第#4行 <br>vi + 打开文件，定位至最后一行<br>vi +/PATTERN : 打开文件，定位至第一次被PATTERN匹配到的行的行首<br><br>关闭文件<br>:q! 不保存并退出  动过了，后悔了<br>shift + zz 或直接两个大写Z: 保存并退出   不需要冒号，编辑模式<br><br>移动<br>f b 翻屏<br>n ? 查找上一个下一个<br>w 下一个单词词首<br>0 绝对行首 $绝对行位 ^首字符<br></code></pre></td></tr></table></figure><p>** 限**</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">useradd lsmg001<br>groupadd lsmg<br><br>chown root:lsmg share # chown + 拥有者 + : + 拥有组 + 目录<br>chmod o-rx share # chmod u(用户)g(组)o(其他人) + wrx <br>可以用数字代表 wrx 4 2 1 最多为7代表wrx<br></code></pre></td></tr></table></figure><p><strong>镜像更改</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">https:&#x2F;&#x2F;opsx.alibaba.com&#x2F;mirror?lang&#x3D;zh-CN<br></code></pre></td></tr></table></figure><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><ol><li><code>etc/sysconfig/network-scripts/</code></li></ol><p>ifcfg-eth0 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">DEVICE=eth0<br><span class="hljs-meta">#</span><span class="bash">HWADDR=00:0C:29:78:06:E4 <span class="hljs-comment"># 需要注释掉, 因为克隆虚拟机的时候mac地址会改变而文件不会改变, 导致两者不同</span></span><br>TYPE=Ethernet<br>UUID=effa4a9a-0ca5-414b-95c1-516a3b9f1d5d<br>ONBOOT=yes# 默认此网卡为关闭状态, linux是能关的功能就是关闭的<br>NM_CONTROLLED=yes<br>BOOTPROTO=static # 更改为静态方式, 需要配置以下四个选项<br>IPADDR=192.168.9.31 # 需要在vm的地址段内 编辑-映射虚拟-NAT模式-子网ip<br>NETMASK=255.255.255.0<br>GATEWAY=192.168.9.2<br>DNS1=114.114.114.114<br></code></pre></td></tr></table></figure><ol start="2"><li><p>在 <code>etc/sysconfig</code> 中有一个network文件, </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">NETWORKING=yes<br>HOSTNAME=node0001<br></code></pre></td></tr></table></figure></li><li><p>在<code>/etc/</code>中的hosts文件可以修改映射</p></li><li><p>需要删除<code>/etc/udev/rules.d/70-persistent-net.rules</code>文件</p></li><li><p>关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">servcie iptables stop                     --临时关闭防火墙<br>chkconfig iptables off                    --永久关闭防火墙<br></code></pre></td></tr></table></figure></li><li><p><code>vi /etc/selinux/config</code> 将SELINUX改为disabled</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 入门学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础算法学习记录</title>
      <link href="/2019/08/Algorithm/"/>
      <url>/2019/08/Algorithm/</url>
      
        <content type="html"><![CDATA[<p>这篇博客, 记录下基础的算法. 当然不是仅仅的copy 答案了<br>记录一些以外的东西</p><a id="more"></a><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><ul><li>哈希表 保持一个元素和一个元素的对应关系<br>保持数组中的每个元素与其下标相互对应的最好方法-哈希表<br>在C++中使用<code>hash_map</code> </li></ul><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/6/linked-list/41/" target="_blank" rel="noopener">删除链表中的节点</a></p><p><img src="https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.jpg" alt=""></p><p>这个题目, 跟课程上讲过的题目不太一样.<br>它的输入是需要删除的节点, 那么怎么获得前一个节点呢?<br>按照以往的思维是从头遍历, 但是这个没有给前面的节点.</p><p>所以想了下直接用<code>覆盖的方式删除节点</code>, 把待删除节点的next节点的val copy到待删除节点,<br>修改下待删除节点的next指向. 节点确实消失掉了.<br>既然要立志做游戏服务器, 考虑下, 丢掉的节点没有被删除掉, 还残留在内存中, 所以先保存删除节点的next节点的指针, 复制完毕后delete掉.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteNode</span><span class="hljs-params">(ListNode* node)</span> </span>&#123;<br>        <br>        ListNode* temp = node -&gt; next;<br>        node -&gt; val = node -&gt; next -&gt; val;<br>        node -&gt; next = node -&gt; next -&gt; next;<br>        <br>        <span class="hljs-keyword">delete</span> temp;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>以后做题目 迁移到英文版力扣吧, 执行时间稳定, 也有新式的解法</strong></p><p><a href="https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards/" target="_blank" rel="noopener">914. X of a Kind in a Deck of Cards</a></p><p>这道题目也算是没有理解透题目, 起初只想了简单的情况, 这点需要改进</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">hasGroupsSizeX</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; deck)</span> </span>&#123;<br>        <br>        <span class="hljs-keyword">int</span> card[<span class="hljs-number">10000</span>] &#123;&#125;; <span class="hljs-comment">// C++ 11 新出部分</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> num1 : deck) &#123; <span class="hljs-comment">// 利用二维数组 下标和值得两个对照</span><br>            card[num1]++;<br>        &#125;<br>        <br>        <span class="hljs-keyword">int</span> <span class="hljs-built_in">begin</span> = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(card[++<span class="hljs-built_in">begin</span>] == <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">// 取到第一个卡牌数     </span><br>        &#125;<br>        <span class="hljs-keyword">int</span> a= card[<span class="hljs-built_in">begin</span>];<br>        <span class="hljs-keyword">while</span>(card[++<span class="hljs-built_in">begin</span>] == <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">// 取到第二个卡牌数</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">begin</span> == <span class="hljs-number">9999</span>) &#123; <span class="hljs-comment">// 如果整个输入 只有一种卡牌的情况</span><br>                <span class="hljs-keyword">if</span>(a != <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">int</span> b = card[<span class="hljs-built_in">begin</span>];<br>        <span class="hljs-keyword">int</span> temp = maxNum(a, b);<br>        <span class="hljs-keyword">if</span>(temp == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-built_in">begin</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span>(card[i] == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>            temp = maxNum(card[i], temp);<br>            <span class="hljs-keyword">if</span>(temp == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-comment">// 辗转相除求最大公约数</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxNum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> temp = b;<br>        <span class="hljs-keyword">while</span>(a % b != <span class="hljs-number">0</span>) &#123;<br>            temp = a%b;<br>            a = b;<br>            b = temp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> temp;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.com/problems/long-pressed-name/" target="_blank" rel="noopener">925. Long Pressed Name</a><br>第一版自己写的 没有分离函数, 第二版把函数抽离了出来</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <br>    <br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isLongPressedName</span><span class="hljs-params">(<span class="hljs-built_in">string</span> name, <span class="hljs-built_in">string</span> typed)</span> </span>&#123;<br>        <br>        <span class="hljs-keyword">int</span> name_length = name.length();<br>        <span class="hljs-keyword">int</span> typed_length = typed.length();<br>        <br>        <span class="hljs-keyword">if</span>(typed_length &lt; name_length) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">int</span> name_letter_times[name_length] = &#123;<span class="hljs-number">1</span>&#125;;<br>        <span class="hljs-keyword">int</span> name_letter[name_length] = &#123;name[<span class="hljs-number">0</span>]&#125;;<br>        <span class="hljs-keyword">int</span> name_letter_sub = <span class="hljs-number">1</span>;<br>        <br>        <span class="hljs-keyword">int</span> typed_letterr_times[typed_length] = &#123;<span class="hljs-number">1</span>&#125;;<br>        <span class="hljs-keyword">int</span> typed_letter[typed_length] = &#123;typed[<span class="hljs-number">0</span>]&#125;;<br>        <span class="hljs-keyword">int</span> typed_letter_sub = <span class="hljs-number">1</span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; name_length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(name[i] != name_letter[name_letter_sub - <span class="hljs-number">1</span>]) &#123;<br>                name_letter[name_letter_sub] = name[i];<br>                name_letter_sub++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                name_letter_times[name_letter_sub <span class="hljs-number">-1</span>]++;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; typed_length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(typed[i] != typed_letter[typed_letter_sub - <span class="hljs-number">1</span>]) &#123;<br>                typed_letter[typed_letter_sub] = typed[i];<br>                typed_letter_sub++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                typed_letterr_times[typed_letter_sub <span class="hljs-number">-1</span>]++;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(name_letter_sub != typed_letter_sub) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; name_letter_sub; i++) &#123;<br>            <span class="hljs-keyword">if</span>(name_letter_times[i] &gt; typed_letterr_times[i]) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这里遇到了问题, 起初我使用指针把数组传进去, 在函数里分配内存后 获得, 但是收到的是空.<br>后面改成了return 这个数组 成功取到了. 速度没有提升, 使用空间也变多了. 但是抽离出了一个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span>* <span class="hljs-title">getSimpleAndTime</span><span class="hljs-params">(<span class="hljs-built_in">string</span> input, <span class="hljs-keyword">int</span>* output_letter_length)</span> </span>&#123;<br><br><span class="hljs-keyword">int</span> input_length = input.length();<br><span class="hljs-keyword">int</span>* output_letter = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[input_length];<br>output_letter[<span class="hljs-number">0</span>] = input[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">int</span>* output_letter_times = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[input_length];<br>output_letter_times[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; input_length; i++) &#123;<br><span class="hljs-keyword">if</span> (input[i] != output_letter[*output_letter_length - <span class="hljs-number">1</span>]) &#123;<br>output_letter[*output_letter_length] = input[i];<br>(*output_letter_length)++;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>output_letter_times[*output_letter_length - <span class="hljs-number">1</span>]++;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> output_letter_times;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isLongPressedName</span><span class="hljs-params">(<span class="hljs-built_in">string</span> name, <span class="hljs-built_in">string</span> typed)</span> </span>&#123;<br><br><br><span class="hljs-keyword">int</span>* name_letter_times = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">int</span> name_letter_sub = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">int</span>* typed_letterr_times = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">int</span> typed_letter_sub = <span class="hljs-number">1</span>;<br><br>name_letter_times = getSimpleAndTime(name, &amp;name_letter_sub);<br>typed_letterr_times = getSimpleAndTime(typed, &amp;typed_letter_sub);<br><br><span class="hljs-keyword">if</span> (name_letter_sub != typed_letter_sub) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; name_letter_sub; i++) &#123;<br><span class="hljs-keyword">if</span> (name_letter_times[i] &gt; typed_letterr_times[i]) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>察看了题解, 发现题解的算法更好, 虽然简单但却没有想到</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isLongPressedName</span><span class="hljs-params">(<span class="hljs-built_in">string</span> name, <span class="hljs-built_in">string</span> typed)</span> </span>&#123;<br><span class="hljs-keyword">int</span> p1=<span class="hljs-number">0</span>,p2=<span class="hljs-number">0</span>;   <span class="hljs-comment">// p1 for name string and p2 for typed</span><br><span class="hljs-keyword">int</span> c=<span class="hljs-number">0</span>;                           <span class="hljs-comment">// counts number of matched char</span><br><span class="hljs-keyword">while</span>(p2&lt;typed.length())&#123;                 <span class="hljs-comment">//loop until typed string gets over</span><br><span class="hljs-comment">/*<br>* 这里直接用name字符串匹配typed字符串 只要 按顺序 在typed中找到所有name的字符即可<br>*/</span><br><span class="hljs-keyword">if</span>(name[p1]==typed[p2])&#123;               <span class="hljs-comment">// if charachter matches move pointers ahead</span><br>p1++;                                               <span class="hljs-comment">//and increment the char count</span><br>p2++;<br>c++;<br><span class="hljs-keyword">continue</span>;<br>&#125; <br>p2++;                                           <span class="hljs-comment">//else continue traversal</span><br>&#125;<br><br><span class="hljs-keyword">return</span> c==name.length();                 <span class="hljs-comment">//finally if count matches the name length</span><br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/two-sum/solution/" target="_blank" rel="noopener">两数之和, 多解</a><br>两队之和有最暴力的双层循环 <code>TO(n^2)</code>和<code>AO(1)</code><br>看题解有两个方法一遍哈希和两边哈希</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 一遍哈希</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; the_map;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); ++i)<br>        &#123;<br>            the_map.insert(make_pair(nums[i], i));<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); ++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (the_map.count(target - nums[i]) &gt; <span class="hljs-number">0</span> &amp;&amp; the_map[target - nums[i]] != i)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&#123;i, the_map[target - nums[i]] &#125;;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&#123;&#125;;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 基础算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++服务器学习大纲</title>
      <link href="/2019/08/C++%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%A4%A7%E7%BA%B2/"/>
      <url>/2019/08/C++%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%A4%A7%E7%BA%B2/</url>
      
        <content type="html"><![CDATA[<p>服务器相关的编程大纲</p><a id="more"></a><h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><p>先找本书入入门, 也算是为以后学习正课打打基础了. 第一本就是&lt;linux 高性能服务器编程&gt;<br>读书记录在另一篇博客中</p><p>首先得有linux环境使用了 vs + ssh连接ubuntu虚拟机的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">dpkg -l | grep ssh &#x2F;&#x2F; 查看有无安装ssh服务器<br>sudo apt-get install openssh-server &#x2F;&#x2F; 安装<br></code></pre></td></tr></table></figure><p>解决vi无效乱码问题</p><p>Ubuntu 预装的vi 对应的是vim-tiny 需要改成 vim-full</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">#卸载<br>sudo apt-get remove vim-common <br>#安装<br>sudo apt-get install vim<br></code></pre></td></tr></table></figure><p>解决Ubuntu ens33 网卡消失的问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">service network-manager stop  # 先停止服务<br># 删除文件<br>sudo rm -rf &#x2F;var&#x2F;lib&#x2F;NetworkManager&#x2F;NetworkManager.state <br>#重启服务器<br>service network-manager start<br></code></pre></td></tr></table></figure><h1 id="操作系统-暂不考虑-大二下有课程-可以先了解些基础"><a href="#操作系统-暂不考虑-大二下有课程-可以先了解些基础" class="headerlink" title="操作系统 - 暂不考虑, 大二下有课程, 可以先了解些基础"></a>操作系统 - 暂不考虑, 大二下有课程, 可以先了解些基础</h1><h1 id="数据库-暂不考虑-大二下有课程-可以先了解些基础"><a href="#数据库-暂不考虑-大二下有课程-可以先了解些基础" class="headerlink" title="数据库 - 暂不考虑, 大二下有课程, 可以先了解些基础"></a>数据库 - 暂不考虑, 大二下有课程, 可以先了解些基础</h1><h1 id="网络基础知识-暂不考虑-大二下有课程-可以先了解些基础"><a href="#网络基础知识-暂不考虑-大二下有课程-可以先了解些基础" class="headerlink" title="网络基础知识 - 暂不考虑, 大二下有课程, 可以先了解些基础"></a>网络基础知识 - 暂不考虑, 大二下有课程, 可以先了解些基础</h1>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
          <category> 学习计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 服务器编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA基本使用记录</title>
      <link href="/2019/07/Java-IDEA/"/>
      <url>/2019/07/Java-IDEA/</url>
      
        <content type="html"><![CDATA[<div class="alert-red">目前主要记录一部分快捷键</div><a id="more"></a><h3 id="快捷编辑部分"><a href="#快捷编辑部分" class="headerlink" title="快捷编辑部分"></a>快捷编辑部分</h3><p>Ctrl + Y    删除光标所在行 或 删除选中的行 （必备）<br>剪切复制    默认都可以对本行操作<br>Ctrl + Delete    删除光标后面的单词或是中文句 （必备）<br>Ctrl + BackSpace    删除光标前面的单词或是中文句 （必备）</p><hr><p>Ctrl + Alt + Enter    光标所在行上空出一行，光标定位到新行 （必备）<br>Ctrl + Shift + Z    取消撤销 （必备）<br>Ctrl + Shift + Alt + V    无格式黏贴 （必备）</p><h3 id="快捷移动"><a href="#快捷移动" class="headerlink" title="快捷移动"></a>快捷移动</h3><p>Ctrl + <code>[</code>    移动光标到当前所在代码的花括号开始位置<br>Ctrl + <code>]</code>    移动光标到当前所在代码的花括号结束位置<br>Ctrl + F3    调转到所选中的词的下一个引用位置 （必备）</p><p>Ctrl + 左方向键    光标跳转到当前单词 / 中文句的左侧开头位置 （必备）<br>Ctrl + 右方向键    光标跳转到当前单词 / 中文句的右侧开头位置 （必备）<br>Ctrl + 前方向键    等效于鼠标滚轮向前效果 （必备）<br>Ctrl + 后方向键    等效于鼠标滚轮向后效果 （必备）</p><hr><p><em>Ctrl + Alt + 左方向键    退回到上一个操作的地方 （必备）<br>Ctrl + Alt + 右方向键    前进到上一个操作的地方 （必备）</em></p><h3 id="查找部分"><a href="#查找部分" class="headerlink" title="查找部分"></a>查找部分</h3><p>Ctrl + W    递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 （必备）<br>Ctrl + Shift + W    递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 （必备）</p><p>Ctrl + E    显示最近打开的文件记录列表 （必备）<br>Ctrl + N    根据输入的 类名 查找类文件 （必备）<br>Ctrl + U    前往当前光标所在的方法的父类的方法 / 接口定义 （必备）<br>Ctrl + B    进入光标所在的方法/变量的接口或是定义处，等效于 Ctrl + 左键单击 （必备）</p><hr><p>Shift + F2    跳转到上一个高亮错误 或 警告位置</p><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>Ctrl + P    方法参数提示显示 （必备）<br>Ctrl + Q    光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容<br>Ctrl + +    展开代码<br>Ctrl + -    折叠代码</p><hr><h3 id="修改编码"><a href="#修改编码" class="headerlink" title="修改编码"></a>修改编码</h3><p>File -&gt; Settings -&gt; File Encodings -&gt; Default encoding for properties file -&gt; UTF-8<br>然后需要勾选<br><code>Transparent native-to-ascii conversion</code></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> IDEA的使用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>暑假学习记录与总结</title>
      <link href="/2019/07/%E6%9A%91%E5%81%87%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
      <url>/2019/07/%E6%9A%91%E5%81%87%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B8%8E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<div class="alert-red">では、ゲームを始(はじ)めましょう</div><p>自己与研究生无缘了, 不过嘛, 是好是坏我也不知道, 现在也只能多学点技术, 去工作了, 这个暑假很重要, 所以将会每天记录下.</p><p><a href="https://imgurl.org/" target="_blank" rel="noopener">在线图床</a><br><a href="https://blog.csdn.net/lovelion/article/details/17517213" target="_blank" rel="noopener">设计模式主要学习</a><br>设计模式次要补充 – head first java 设计模式</p><a id="more"></a><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="%E6%9A%91%E5%81%87%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B8%8E%E6%80%BB%E7%BB%93/4.png" alt=""><br>总结一下这个暑假都干了什么, 马上就要开学了.<br>七月十三日到七月十九日, 这是第一周了.这一周伴随着到处参观, 收货很少了. 那时我还在主用Java, 主要的是学习了一些设计模式, 这一周的时间对我学习C++ 帮助也是有的. 暑假学习设计模式也是出于换语言的考虑.<br>第一天(七月十三日)可以说是看的最多的了解了什么是耦合和解耦, 一些简单的设计模式(简单工厂, 工厂方法, 抽象工厂, 单例模式).<br>第二天(七月十四日) 开始初步试验大创项目的实现, 当时遇到一个BUG, 我需要返回一个东西, 但我还是需要返回后将他删除, 首先就是将他”复制了一份”, 然后删除, 却发现返回去的都是空的,了解到了Java如何进行深拷贝.<br>七月十六日看了下Java编程思想的多态部分, 然后主要时间修改网络助手的开机启动设置, 这样开机启动设置就没有问题了.<br>七月十七日收拾家伙, 休息了休息准备回家, 结果虽然我确认了好几次自己有没有带全家伙, 鼠标笔记本都带上了,<br>七月十八日到达北京去我姐那里暂住了, 结果发现我…..光带回了一个鼠标, 鼠标的接收器还在USB分线器上(吐血) 然后开始了一个开源项目的阅读. 云收藏(SpringBoot框架). 发现了自己没有看懂的东西(Stirng …), 就去了解下JDK从5-8每次更新加入的内容,了解到那个叫做可变参数需要搭配增强for循环使用<br>七月十九日-七月二十日我终于实现了自己理想….怎么说呢北方最大的漫展依然没有我想象的大, 等我有机会既定要去一次南方</p><p>七月二十一日到七月二十七日写了个后端练手(一个失物招领) . 使用了丝袜哥写Api文档, SpringJpa作为持久层? 这几天放松了玩了几天游戏可惜了.<br>七月二十八日总结两个小项目比较靠近项目的地方, 统一返回类型, 预定义数据, SpringJpa.<br>.学习了 接口 内部类 持有对象. 通过查看源码解决了一个Bug,<br>七月二十九日到八月二日 编写二手交易后台.</p><p>想去了解下大数据相关内容<br>八月三日到八月九日 看了下关于大数据的内容, 并不是很感兴趣.<br>八月十日到八月十五日 主要是写算法题目, 然后寻找自己是佛要从事游戏服务器编程<br>八月十六日到八月二十四日 上午复习高数, 下午看C++<br>@2019年8月24日18:21:07@</p><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p>设计模式不求多, 但求会用, 极大概率调整设计模式的学习.<br>此外需要刷一些常用的算法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs plain">7.13-7.19<br>&lt;复用类, 多态&gt;<br>---六个创建型模式<br>- 简单工厂模式<br>- 工厂方法模式<br>- 抽象工厂模式<br>- 单例模式<br>- 原型模式(略过)<br>- 建造者模式(略过)<br>7.20-7.26<br>&lt;接口, 内部类, 持有对象&gt;<br>---七个结构型模式<br>- 适配器模式<br>- 桥接模式<br>- 组合模式<br>- 外观模式<br>7.27-8.02<br>&lt;类型信息, 泛型&gt;<br>- 装饰模式<br>- 享元模式(略过)<br>- 代理模式<br>8.03-8.09<br>&lt;数组, 容器深入研究&gt;<br>---十一个行为型模式<br>- 职责链模式<br>- 命令模式<br>- 解释器模式(略过)<br>- 迭代器模式<br>- 中介者模式(略过)<br>- 备忘录模式(略过)<br>- 观察者模式<br>8.10-8.16<br>&lt;IO, 枚举类型&gt;<br>- 状态模式<br>- 策略模式<br>- 模板方法模式<br>- 访问者模(略过)<br>8.17-8.23<br>&lt;注解, 并发&gt;<br></code></pre></td></tr></table></figure><h1 id="では、ゲームを始-はじ-めましょう"><a href="#では、ゲームを始-はじ-めましょう" class="headerlink" title="では、ゲームを始(はじ)めましょう"></a>では、ゲームを始(はじ)めましょう</h1><h2 id="7-13-7-19"><a href="#7-13-7-19" class="headerlink" title="7.13-7.19"></a>7.13-7.19</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">7.13-7.19<br>&lt;复用类, 多态&gt;<br>---六个创建型模式<br>- 简单工厂模式<br>- 工厂方法模式<br>- 抽象工厂模式<br>- 单例模式<br></code></pre></td></tr></table></figure><h3 id="7月13日"><a href="#7月13日" class="headerlink" title="7月13日"></a>7月13日</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">- 简单工厂模式<br>- 工厂方法模式<br>- 抽象工厂模式<br>- 单例模式<br></code></pre></td></tr></table></figure><p>2019年7月13日12:21:17<br>上午参观参观参观…… 重置了下, 这个暑期表格.今天开始第一天的打卡.下午还有参观, 然后就可以开始学了</p><p>下午有b站血族直播<br>下午看了一个项目, 自己不会的还是太多,,,,,, 给了源码都看不太懂.<br>还是先继续看几个设计模式吧, 设计模式目前想的是, 了解大概, 等到时用到了再去详细学习</p><h4 id="耦合与解耦"><a href="#耦合与解耦" class="headerlink" title="耦合与解耦"></a>耦合与解耦</h4><p>耦合: 两个或两个以上的体系之间互相结合, 互相影响, 产生的一个联合起来解决问题的体系.<br>这种体系, 不利于修改, 修改一个体系可能会影响到另一个体系, 使得另一个体系需要做出修改.<br>解耦: 将体系之间的联系降到最低, 各司其职, 修改本身的时候, 不需要去动其他的体系</p><h4 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h4><p>简单工厂模式不属于GoF 23种设计模式<br>通过设计一个父类(产品类), 由他派生出多个子类(具体产品类), 通过一个工厂类, 提供给工厂类生产方法不同的参数, 由工厂类return相应的子类, 由父类接受.</p><p>解决问题: 通过工厂类, 只需要记住参数, 就可以产生相应的子类,<br>存在问题: 不符合开闭原则, 每次产生新的产品, 都需要去修改相应的工厂生产方法.</p><h4 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><p>与简单工厂有些相似之处: 均存在一个产品父类和多个产品子类.<br>不同之处在于 工厂方法模式, 设置了工厂父类, 通过派生出不同的工厂子类来return相应的子类.</p><p>解决问题: 解决了简单工厂模式的开闭原则, 每次产生新的产品, 只需要派生一个相应的子类即可<br>存在问题: 系统中由于新产品的产生, 类的个数将会成对增加, 会有更多的类需要处理</p><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><p>抽象工厂模式解决了工厂方法模式某些情况下 导致的类成对增加情况<br>一个抽象工厂里包含了这个”工厂”的所有产品–这对应了一个产品族<br>可以派生出多个工厂来实现多品牌产品–形成了一个等级结构<br><img src="https://img-blog.csdn.net/20130713162941328?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTG92ZUxpb24=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="引用自上文博客"></p><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>这个模式理解起来很容易, 但是效果却十分的不错, 之前用过一次所以详细写一下.<br><strong>饿汉式单例模式</strong><br>饿汉式单例模式 无延迟加载 不需要解决多线程问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**<br> * <span class="hljs-doctag">@ClassName</span> singletonpattern.Connect<br> * <span class="hljs-doctag">@Description</span><br> * 饿汉式单例模式 无延迟加载 不需要解决多线程问题<br> * Author lsmg<br> * Date 2019/5/21 13:25<br> * <span class="hljs-doctag">@Version</span> 1.0<br> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Connect</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Connect instance = <span class="hljs-keyword">new</span> Connect();<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Connect</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connect <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>懒汉式单例模式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> singletonpattern;<br>懒汉式单例模式 实现了延迟加载,但需要解决多线程问题<br><span class="hljs-comment">/**<br> * <span class="hljs-doctag">@ClassName</span> singletonpattern.Connect1_2<br> * <span class="hljs-doctag">@Description</span> TODO<br> * 懒汉式单例模式 实现了延迟加载,但需要解决多线程问题<br> * Author lsmg<br> * Date 2019/5/21 13:30<br> * <span class="hljs-doctag">@Version</span> 1.0<br> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Connect1_2</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Connect1_2  connect1_2;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Connect1_2</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-comment">//这种方式会造成多线程访问的时候实例化多个对象</span><br><span class="hljs-comment">//    public  static singletonpattern.Connect1_2 getInstance()&#123;</span><br><span class="hljs-comment">//        if(connect1_2 == null)&#123;</span><br><span class="hljs-comment">//            connect1_2 = new singletonpattern.Connect1_2();</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        return connect1_2;</span><br><span class="hljs-comment">//    &#125;</span><br><br>    <span class="hljs-comment">//这种方式虽然确保了只有一个线程进入, 但是降低了多线程的性能</span><br><span class="hljs-comment">//    public synchronized static singletonpattern.Connect1_2 getInstance()&#123;</span><br><span class="hljs-comment">//        if(connect1_2 == null)&#123;</span><br><span class="hljs-comment">//            connect1_2 = new singletonpattern.Connect1_2();</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        return connect1_2;</span><br><span class="hljs-comment">//    &#125;</span><br><br><br>    <span class="hljs-comment">//这种方式需要在private "volatile" static singletonpattern.Connect1_2 connect1_2 这样同样降低效率</span><br><span class="hljs-comment">//    public synchronized static singletonpattern.Connect1_2 getInstance()&#123;</span><br><span class="hljs-comment">//        if(connect1_2 == null)&#123;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//            synchronized (singletonpattern.Connect1_2.class)&#123;</span><br><span class="hljs-comment">//                if(connect1_2 == null)&#123;</span><br><span class="hljs-comment">//                    connect1_2 = new singletonpattern.Connect1_2();</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        return connect1_2;</span><br><span class="hljs-comment">//    &#125;</span><br></code></pre></td></tr></table></figure><p><strong>使用IoDH方法结合二者优点</strong><br>由于静态单例对象没有作为Singleton的成员变量直接初始化, 当调用<code>getInstance()</code>方法的时候, 会加载内部类HolderClass, 其中的static 由Java虚拟机保证线程安全性, 这样就结合了<code>饿汉式单例模式的线程安全</code>和<code>懒汉式单例模式的延迟加载</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Initialization on Demand Holder</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HolderClass</span> </span>&#123;<br>            <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Singleton instance = <span class="hljs-keyword">new</span> Singleton();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> HolderClass.instance;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>&#123;<br>    Singleton s1, s2; <br>        s1 = Singleton.getInstance();<br>    s2 = Singleton.getInstance();<br>    System.out.println(s1==s2);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>@2019年7月13日19:07:46 设计模式暂时到这里, 去写写代码吧@</p><h3 id="7月14日"><a href="#7月14日" class="headerlink" title="7月14日"></a>7月14日</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">复用类看了一部分, 目前还差final部分<br></code></pre></td></tr></table></figure><p>@2019年7月14日09:43:46@</p><p>下午看了看大创项目的实现, 选择了高德地图api. 中午的时候太困了 搞得我没有仔细看<br>目前决定采用<a href="https://lbs.amap.com/api/amap-ui/demos/amap-ui-pathsimplifier/expand-path" target="_blank" rel="noopener">动态延展路径</a>  解决问题, path由ajax 异步获取更新.</p><h4 id="小插曲-Java-List深浅拷贝"><a href="#小插曲-Java-List深浅拷贝" class="headerlink" title="小插曲-Java List深浅拷贝"></a>小插曲-Java List深浅拷贝</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span>(<span class="hljs-string">"droneStatusService"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DroneStatusServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">DroneStatusService</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Logger logger = LoggerFactory.getLogger(DroneStatusServiceImpl<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br><br>    <span class="hljs-keyword">private</span> List&lt;DroneStatus&gt; droneStatusList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><span class="hljs-comment">/**删除其他代码**/</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;DroneStatus&gt; <span class="hljs-title">listDroneStatus</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;DroneStatus&gt; theDroneStatusList = droneStatusList;<br>droneStatusList.clear(); <span class="hljs-comment">/**这样导致了我的return list一直为空**/</span><br>        logger.info(<span class="hljs-string">"清除一次信息list共"</span>+theDroneStatusList.size()+<span class="hljs-string">"条"</span>);<br><br>        <span class="hljs-keyword">return</span> theDroneStatusList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第一印象这样写, 排查方法就是想到了关于Java引用的部分.<br>对于list的拷贝 <code>遍历循环复制</code>和<code>List的构造方法</code>和<code>list.addAll()</code>以及<code>System.arraycopy()</code> 这些全部是<code>浅复制</code>他们指向了同一片内存区域</p><p>深复制的实现方法另实体类 实现Cloneable接口 重写clone方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> </span>&#123;<br>Entity entity = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>entity = (Entity)  <span class="hljs-keyword">super</span>.clone();<br>&#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">return</span> entity;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我写了一个工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Entity&gt; <span class="hljs-title">deepCopy</span><span class="hljs-params">(List&lt;Entity&gt; originList)</span> </span>&#123;<br>List&lt;Entity&gt; entityList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><span class="hljs-keyword">for</span>(Entity entity : originList) &#123;<br>entityList.add((Entity) entity.clone());<br>&#125;<br><br><span class="hljs-keyword">return</span> entityList;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过这个工具类实现深复制</p><p> <code>IDEA CTRL+ALT+T</code>收获这个快捷键<br><img src="https://i.bmp.ovh/imgs/2019/07/9fe10225fe9a52a5.png" alt=""><br>@2019年7月14日17:47:23@</p><p>大创先告一段落了, 等和他们对接吧, 基本功能显示路径已经做好了.<br>@2019年7月14日20:29:30@<br>复用类看完了<br>@2019年7月14日21:14:12@</p><h3 id="7月15日"><a href="#7月15日" class="headerlink" title="7月15日"></a>7月15日</h3><p>把GGO通关了, 游戏就告一段落了.</p><h3 id="7月16日"><a href="#7月16日" class="headerlink" title="7月16日"></a>7月16日</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">多态<br></code></pre></td></tr></table></figure><p>把编程思想-多态看一下吧</p><p>多态这里怎么说呢, 重要的是思想吧, 自己没用过太多, 都是一些框架需要<br>@2019年7月16日08:42:35@</p><p>把书里的内容过了一遍, 怎么感觉不是很实用. 但是也说了一些小问题. 继承这种东西, 自己代码里都没有用太多.<br>@2019年7月16日09:25:47@</p><p>改了一部分BUG, 小软件的开机启动设置修改了下, 貌似可以了.<br>@2019年7月16日17:39:40@</p><h3 id="7月17日"><a href="#7月17日" class="headerlink" title="7月17日"></a>7月17日</h3><p>上午收拾了下,  下午的话休息了休息, 晚上去吃了顿好的, 收拾回家的东西</p><h3 id="7月18日"><a href="#7月18日" class="headerlink" title="7月18日"></a>7月18日</h3><p>上午坐了一上午的车, 下午到了北京, 然后把电脑的内存条换上了(现在是16G的内存了, 够用了). <strong>难受的是, 光带了鼠标没有带鼠标的接收器!!!!!!!(我以为插件可以代替接收器, 结果插线也得要接收器… 算了吧)</strong></p><h4 id="下午继续看了一部分-云收藏的源码看到了这个下面一个函数"><a href="#下午继续看了一部分-云收藏的源码看到了这个下面一个函数" class="headerlink" title="下午继续看了一部分 云收藏的源码看到了这个下面一个函数"></a>下午继续看了一部分 云收藏的源码看到了这个下面一个函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>System.out.println(getMessage(<span class="hljs-string">"1"</span>, <span class="hljs-string">"2"</span>, <span class="hljs-string">"3"</span>, <span class="hljs-string">"4"</span>));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getMessage</span><span class="hljs-params">(String template, String... keys)</span> </span>&#123;<br><span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>StringBuilder templateBuilder = <span class="hljs-keyword">new</span> StringBuilder(template);<br><span class="hljs-keyword">for</span> (String key : keys) &#123;<br>templateBuilder.append(key);<br>&#125;<br>template = templateBuilder.toString();<br><span class="hljs-keyword">return</span> template;<br>&#125;<br></code></pre></td></tr></table></figure><p>重点不是函数的功能, 而是<code>String...</code>这不是写错了. 我去网上查了下, 这样这个函数就可以接受多个参数了<br><code>getMessage(&quot;template&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</code> 接受参数后用 增强for循环以此取出就好</p><p><code>是从Java 5开始，Java语言对方法参数支持一种新写法，叫可变长度参数列表</code></p><p>正好在这里去搜集下每次Java更新, 所提供的新特性</p><h4 id="JDK5-新特性"><a href="#JDK5-新特性" class="headerlink" title="JDK5 新特性"></a>JDK5 新特性</h4><p>#自动装箱与拆箱</p><figure class="highlight Java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java">Integer a = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">10</span>); <br><span class="hljs-comment">//这个问题不大</span><br>Integer b = <span class="hljs-number">100</span>; <span class="hljs-comment">//这里就把一个int自动转成了 integer类型(自动装箱)</span><br><span class="hljs-comment">//这里用到了 Integer的 valueOf()方法 实现的自动装箱</span><br>b += <span class="hljs-number">100</span>; <span class="hljs-comment">//b = b + 100; 用intValue()来自动拆箱</span><br><span class="hljs-comment">//实现方式 b = Integer.valueOf(b.intValue() + 200);</span><br></code></pre></td></tr></table></figure><p>#枚举类型</p><figure class="highlight Java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">switch</span> <br><span class="hljs-comment">// switch可以 switch枚举类型</span><br></code></pre></td></tr></table></figure><p>#静态导入</p><figure class="highlight Java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.Math.pow; <br><span class="hljs-comment">//静态导入的必须是静态方法</span><br>System.out.println(Math.pow(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)); <span class="hljs-comment">//未使用静态导入</span><br>System.out.println(pow(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)); <span class="hljs-comment">//使用静态导入</span><br></code></pre></td></tr></table></figure><p>#可变参数</p><figure class="highlight Java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//可以在方法参数的类型中 加入三个`...`, 这样在方法体内可以使用for的增强循环来获得传入的多个参数.</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>System.out.println(getMessage(<span class="hljs-string">"1"</span>, <span class="hljs-string">"2"</span>, <span class="hljs-string">"3"</span>, <span class="hljs-string">"4"</span>));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getMessage</span><span class="hljs-params">(String template, String... keys)</span> </span>&#123;<br><span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>StringBuilder templateBuilder = <span class="hljs-keyword">new</span> StringBuilder(template);<br><span class="hljs-keyword">for</span> (String key : keys) &#123;<br>templateBuilder.append(key);<br>&#125;<br>template = templateBuilder.toString();<br><span class="hljs-keyword">return</span> template;<br>&#125;<br></code></pre></td></tr></table></figure><p>#增强for循环<br>#泛型 (Generic Type)<br>#内省</p><h4 id="JDK6-新特性"><a href="#JDK6-新特性" class="headerlink" title="JDK6 新特性"></a>JDK6 新特性</h4><p>#Desktop类和SystemTray类<br>第一个<code>Desktop</code>类<br>可以用来打开系统默认浏览器浏览指定的URL<br>打开系统默认邮件客户端给指定的邮箱发邮件<br>用默认应用程序打开或编辑文件(比如,用记事本打开以txt为后缀名的文件)<br>用系统默认的打印机打印文档<br>第二个<code>SystemTray</code>类<br>可以用来在系统托盘区创建一个托盘程序.<br>Java的UI方面就不写太多了</p><p>@2019年7月18日20:47:07@</p><h4 id="Springboot配置文件"><a href="#Springboot配置文件" class="headerlink" title="Springboot配置文件"></a>Springboot配置文件</h4><p>在Spring Boot中多环境配置文件名需要满足application-{profile}.properties的格式<br>其中{profile}对应你的环境标识</p><p>下面列举三个文件<br><code>application-dev.properties</code>：开发环境<br><code>application-test.properties</code>：测试环境<br><code>application-prod.properties</code>：生产环境<br>至于哪个具体的配置文件会被加载，需要在application.properties文件中通过spring.profiles.active属性来设置，其值对应{profile}值。<br><code>spring.profiles.active=dev</code></p><h3 id="7月19日"><a href="#7月19日" class="headerlink" title="7月19日"></a>7月19日</h3><p>今天的话在北京待了一天, 去看了看北方最大的漫展IDO, 怎么说呢比我想象的要小一点, 不过比徐州那个好太多了. 以后有机会的话就去南方了.</p><h2 id="7-20-7-26"><a href="#7-20-7-26" class="headerlink" title="7.20-7.26"></a>7.20-7.26</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;接口, 内部类, 持有对象&gt;<br>---七个结构型模式<br>- 适配器模式<br>- 桥接模式<br>- 组合模式<br>- 外观模式<br></code></pre></td></tr></table></figure><h3 id="7月20日"><a href="#7月20日" class="headerlink" title="7月20日"></a>7月20日</h3><p>今天还是胳膊有些疼, 昨天拿的东西不少, 背的也不少.走的路也不少…..<br>@2019年7月20日19:39:08@</p><p>现在来看一些东西吧. 上个寒假在家里留了一本Java编程思想.</p><h3 id="7月21日"><a href="#7月21日" class="headerlink" title="7月21日"></a>7月21日</h3><p>写了个新的小项目, 正好来练练手. 新项目单独列出一篇博客.</p><h3 id="7月22日"><a href="#7月22日" class="headerlink" title="7月22日"></a>7月22日</h3><p>在家里午觉睡不着我凑, 改下小项目的问题.<br>@去看一下设计模式吧@</p><h4 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h4><p>这个设计模式怎么说呢, 挺简单的.<br>就是 新建一个适配器类Adapter  引用一个需要适配的类Adaptee 这个类实现客户端的接口Target</p><p>这样客户端直接调用接口 相关转换工作在接口中完成.</p><h2 id="7-27-8-02"><a href="#7-27-8-02" class="headerlink" title="7.27-8.02"></a>7.27-8.02</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;类型信息, 泛型&gt;<br>- 装饰模式<br>- 享元模式(略过)<br>- 代理模式<br></code></pre></td></tr></table></figure><h3 id="7月28日"><a href="#7月28日" class="headerlink" title="7月28日"></a>7月28日</h3><p>从7.23-7.25 写了个小项目, 失物招领的后端.<br>总的来说有 </p><h4 id="统一反应类型"><a href="#统一反应类型" class="headerlink" title="统一反应类型"></a>统一反应类型</h4><p>将所有的返回结果, 写在一个类中</p><p><img src="https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/%E6%9A%91%E5%81%87%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951.png" alt=""></p><p>预先定义的异常信息, 则使用了enum</p><p><img src="https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/%E6%9A%91%E5%81%87%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952.png" alt=""></p><p>封装反回数据, 使用Object</p><p><img src="https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/%E6%9A%91%E5%81%87%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%953.png" alt=""></p><p>这样处理后就可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResponseData(ExceptionMsg.DEL_FAILED);<br><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResponseData(ExceptionMsg.DEL_FAILED);<br><br><span class="hljs-keyword">return</span>  <span class="hljs-keyword">new</span> ResponseData(ExceptionMsg.SUCCESS, lostAndFoundInfo);<br></code></pre></td></tr></table></figure><p>来统一返回类型</p><h4 id="Spring-Jpa的方便"><a href="#Spring-Jpa的方便" class="headerlink" title="Spring Jpa的方便"></a>Spring Jpa的方便</h4><p>配置完毕后, 去编写相应的实体类</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/lostandfound?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span><br><span class="hljs-string">spring.datasource.username=root</span><br><span class="hljs-string">spring.datasource.password=root</span><br><span class="hljs-string">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><br><span class="hljs-string">spring.jpa.properties.hibernate.hbm2ddl.auto=update</span><br><br><span class="hljs-comment"># create：只要每次加载 Hibernate 时就都会删除上一次生成的表，然后根据 model 类再重新来生成新表. </span><br><span class="hljs-comment"># create-drop：每次加载 Hibernate 时根据 model 类生成表，但是 sessionFactory 一关闭，表就自动删除。</span><br><span class="hljs-comment"># update：最常用的属性，第一次加载 Hibernate 时根据 model 类会自动建立起表的结构（前提是先建立# # 好数据库），以后加载 Hibernate 时根据 model 类自动更新表结构，即使表结构改变了，但表中的行仍然存在，不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。</span><br><span class="hljs-comment">#validate ：每次加载 Hibernate 时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。</span><br><span class="hljs-string">spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span> <span class="hljs-comment">//这里可以通过value属性指定表名, 如果不指定则为类名</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue</span> <span class="hljs-comment">//默认情况下会创建新表来存储id位置, 如果指定 strategy= GenerationType.IDENTITY 则会在一张表中存储位置id</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-meta">@Column</span>(nullable = <span class="hljs-keyword">false</span>， unique = <span class="hljs-keyword">true</span>)<br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-meta">@Column</span>(nullable = <span class="hljs-keyword">false</span>)<br>    <span class="hljs-keyword">private</span> String passWord;<br>    <span class="hljs-meta">@Column</span>(nullable = <span class="hljs-keyword">false</span>， unique = <span class="hljs-keyword">true</span>)<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-meta">@Column</span>(nullable = <span class="hljs-keyword">true</span>， unique = <span class="hljs-keyword">true</span>)<br>    <span class="hljs-keyword">private</span> String nickName;<br>    <span class="hljs-meta">@Column</span>(nullable = <span class="hljs-keyword">false</span>)<br>    <span class="hljs-keyword">private</span> String regTime;<br>    <span class="hljs-comment">//省略 getter settet 方法、构造方法  在这里getter setter 影响 Controller 的 return的内容. 有get方法才会在json中含有该项, 如果不想让该项出现在json中 则不需要写对应的get方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>最后编写实体类对应的repository接口 继承 JpaRepository&lt;model, Long&gt;</p><p>就可使用自带的一些方法.</p><h4 id="去继续学习吧"><a href="#去继续学习吧" class="headerlink" title="去继续学习吧"></a>去继续学习吧</h4><p>&lt;接口, 内部类, 持有对象&gt;</p><p>重写Readable导致的bug.<br>再Main方法里产生随机单词, 导致异常<code>BufferOverflowException</code> , 首先思考的是每次调用<code>read()</code>方法应该会传入一个新的<code>CharBuffer</code>吧(实际并不是, 后面说)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Main.java</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>Scanner scanner = <span class="hljs-keyword">new</span> Scanner(<span class="hljs-keyword">new</span> RandomWords(<span class="hljs-number">100000</span>));<br><br><span class="hljs-keyword">while</span> (scanner.hasNext()) &#123;<br>System.out.println(scanner.next());<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// RandomWords.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomWords</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Readable</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Random random = <span class="hljs-keyword">new</span> Random(<span class="hljs-number">100</span>);<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">char</span>[] CAPITALS =<br><span class="hljs-string">"ABCDEFGHIGKLMNOPQRSTUVWXYZ"</span>.toCharArray();<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">char</span>[] LOWERS =<br><span class="hljs-string">"abcdefghigklmnopqrstuvwxyz"</span>.toCharArray();<br><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> count;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RandomWords</span><span class="hljs-params">(<span class="hljs-keyword">int</span> count)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.count = count;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">(CharBuffer cb)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-keyword">if</span>(count-- == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br>cb.append(CAPITALS[random.nextInt(CAPITALS.length)]);<br><br><span class="hljs-keyword">int</span> maxCount = <span class="hljs-number">4</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; maxCount; i++) &#123;<br>cb.append(LOWERS[random.nextInt(LOWERS.length)]);<br><br><span class="hljs-comment">//System.out.println(cb.limit() + " - " + cb.position());</span><br>cb.append(CAPITALS[random.nextInt(CAPITALS.length)]);<br><br>&#125;<br><br>cb.append(<span class="hljs-string">" "</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>来到报错位置, 这一段是CharBuffer源码里的部分, 发现是由于position &gt;= limit导致的异常, 然后查找得到这两个值得获取方法position()和limit();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">nextPutIndex</span><span class="hljs-params">()</span> </span>&#123;                          <span class="hljs-comment">// package-private</span><br><span class="hljs-keyword">if</span> (position &gt;= limit)<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BufferOverflowException();<br><span class="hljs-keyword">return</span> position++;<br>&#125;<br></code></pre></td></tr></table></figure><p>在RandomWords.java代码加入 <code>System.out.println(cb.limit() + &quot; - &quot; + cb.position());</code> 位置见上文注释代码</p><p>经过打印发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plain">AyAvFkNuM<br>1024 - 1002<br>1024 - 1004<br>1024 - 1006<br>1024 - 1008<br>RcEsZqFwO<br>1024 - 1012<br>1024 - 1014<br>1024 - 1016<br>1024 - 1018<br>HxEsXaStX<br>1024 - 1022<br>1024 - 1024<br></code></pre></td></tr></table></figure><p>position属性并没有随着每次调用read() 方法重置, 所以每次调用read()方法传入的是同一个 <code>CharBuffer</code>. 回到Scanner源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Scanner.java</span><br><br><span class="hljs-comment">//通过查找找到调用read()方法的地方</span><br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readInput</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (buf.limit() == buf.capacity())<br>            makeSpace();<br><br>        <span class="hljs-comment">// Prepare to receive data</span><br>        <span class="hljs-keyword">int</span> p = buf.position();<br>        buf.position(buf.limit());<br>        buf.limit(buf.capacity());<br><br>        <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> &#123; <span class="hljs-comment">//这里调用了source.read()  source就是构造方法传入的在RandomWords对象</span><br>            n = source.read(buf);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException ioe) &#123;<br>            lastException = ioe;<br>            n = -<span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (n == -<span class="hljs-number">1</span>) &#123;<br>            sourceClosed = <span class="hljs-keyword">true</span>;<br>            needInput = <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">0</span>)<br>            needInput = <span class="hljs-keyword">false</span>;<br><br>        <span class="hljs-comment">// Restore current position and limit for reading</span><br>        buf.limit(buf.position());<br>        buf.position(p);<br>    &#125;<br></code></pre></td></tr></table></figure><p>发现其传入了<code>buf</code>参数, 查找<code>buf</code>来到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Scanner</span><span class="hljs-params">(Readable source, Pattern pattern)</span> </span>&#123;<br><span class="hljs-keyword">assert</span> source != <span class="hljs-keyword">null</span> : <span class="hljs-string">"source should not be null"</span>;<br><span class="hljs-keyword">assert</span> pattern != <span class="hljs-keyword">null</span> : <span class="hljs-string">"pattern should not be null"</span>;<br><span class="hljs-keyword">this</span>.source = source;<br>delimPattern = pattern;<br>buf = CharBuffer.allocate(BUFFER_SIZE);<br>buf.limit(<span class="hljs-number">0</span>);<br>matcher = delimPattern.matcher(buf);<br>matcher.useTransparentBounds(<span class="hljs-keyword">true</span>);<br>matcher.useAnchoringBounds(<span class="hljs-keyword">false</span>);<br>useLocale(Locale.getDefault(Locale.Category.FORMAT));<br>&#125;<br></code></pre></td></tr></table></figure><p>发现是这个构造方法 对buf进行的赋值, 而    <code>Scanner(Readable source)</code>这个构造方法也只是调用的上一个构造方法.</p><p>所以问题解决了, 由于我是在一开始就实例化了一个<code>Scanner对象</code>. 导致传入<code>read()</code>方法的<code>buf</code>都是同一个 才导致的上文报错.</p><p>@2019年7月28日19:18:23@</p><p>囫囵吞枣的看完了接口<br>看了一部分内部类. 感觉很没有实感..<br>联系的太少了, 对他所说的没有感到<code>原来如此</code></p><h3 id="7月29日-8月2日"><a href="#7月29日-8月2日" class="headerlink" title="7月29日-8月2日"></a>7月29日-8月2日</h3><p>又写了一个二手交易的后台, 马上今天是八月二号, 这个假期也过了小一半了. </p><p>最近也看了看大数据相关的, 等这几天多看看关于大数据的, 也许我会选大数据专业emmm<br>@2019年8月2日20:22:20@<br>去看看ElasticSearch吧, 二手交易还差一个搜索</p><p>设置ip地址<br>关闭防火墙<br>关闭保护<br>删除映射管理文件<br>关机–&gt;克隆四台电脑<br>@2019年8月2日23:42:36@</p><h2 id="8-3-8-9"><a href="#8-3-8-9" class="headerlink" title="8.3-8.9"></a>8.3-8.9</h2><h3 id="8月3日"><a href="#8月3日" class="headerlink" title="8月3日"></a>8月3日</h3><p>大数据相关的删掉了, 移动到了单独的一篇博客</p><h3 id="8月4日"><a href="#8月4日" class="headerlink" title="8月4日"></a>8月4日</h3><p>大数据相关的删掉了, 移动到了单独的一篇博客</p><h3 id="8月8日"><a href="#8月8日" class="headerlink" title="8月8日"></a>8月8日</h3><p>继续学习大数据相关内容, 刷了一道算法题.待会看看Java IO流</p><p><em>暑期计划就到此了, 自己对于将来从事什么, 还是有些迷茫, 还是多去刷刷算法题目, 找找自己的路再走吧</em></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 第一个暑假学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大学的第一个暑假 </tag>
            
            <tag> 暑假学习的大纲 </tag>
            
            <tag> 记录每天假期干了什么 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校园网络助手更新</title>
      <link href="/2019/06/%E5%B0%8F%E9%A1%B9%E7%9B%AE-%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%BB%9C%E5%8A%A9%E6%89%8B%E6%9B%B4%E6%96%B0/"/>
      <url>/2019/06/%E5%B0%8F%E9%A1%B9%E7%9B%AE-%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%BB%9C%E5%8A%A9%E6%89%8B%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>这个星期把校园网络助手更新了一下, 连接部分重写了, 还有就是增加了问题反馈和其他内容<br><strong>未解决问题, 均与jvm虚拟机有关 首先是平台编码指定问题 再者为System.getProperty(“user.dir”)会得到system32文件夹</strong></p><a id="more"></a><h2 id="信息发送类"><a href="#信息发送类" class="headerlink" title="信息发送类"></a>信息发送类</h2><h3 id="信息的加入"><a href="#信息的加入" class="headerlink" title="信息的加入"></a>信息的加入</h3><p><strong>收获则为分离了 信息发送, 抽象为一个类 并使用队列存储信息</strong><br>这次的信息发送没有分开请求不同的URL 而是统一到了一个类中. 这个类中有个static的 队列<br>通过<code>addMessageToQue(String msg)</code>函数把要发送的信息 生成<code>Message</code>对象 加入队列之中.<br>有个<code>Message</code>类其中的<code>setMsg(String msg)</code>会自动生成信息发送的时间, 加入发送信息的ID.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addMessageToQue</span><span class="hljs-params">(String msg)</span></span>&#123;<br>        DatabaseMessage databaseMessage = <span class="hljs-keyword">new</span> DatabaseMessage();<br>        databaseMessage.setMsg(msg);<br>        databaseMessageQueue.offer(databaseMessage);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="信息的发送"><a href="#信息的发送" class="headerlink" title="信息的发送"></a>信息的发送</h3><p>信息的发送由一个定时器控制, 每间隔一段时间判断队列是否为空.<br>如果队列不为空, 且当前存在网络则会进行信息的发送</p><h2 id="判断网络链接"><a href="#判断网络链接" class="headerlink" title="判断网络链接"></a>判断网络链接</h2><p>这次更改判断逻辑为 存在网络为主, 登录页面信息为辅的判断逻辑.<br>由于可能不存在网络, 直接<code>url.openStream()</code> 时间可能会非常之久才会抛出异常<br>更改代码为.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">URLConnection conn = url.openConnection();<br>conn.setConnectTimeout(<span class="hljs-number">1000</span>);<br>conn.setReadTimeout(<span class="hljs-number">1000</span>);<br>conn.connect();<br>conn.getInputStream();<br></code></pre></td></tr></table></figure><p>这样可以限制时间, 不过最佳的设置时间, 并没有进行测试为1S.</p><h2 id="判断登录页面信息"><a href="#判断登录页面信息" class="headerlink" title="判断登录页面信息"></a>判断登录页面信息</h2><p>登录页面直接爬取的话无法获取到相应的信息, 最后偶然发现, 登录请求的时候就有信息, 直接获取json即可.</p><p>json获取到后需要判断当前是否自动的登录, 如果是则判断状态码, 状态码不同则显示信息, 手动的话则一律显示.<br>对获取到的信息 经过函数处理得到相应的提示信息, 加入队列, 并且提示.</p><h2 id="对所有的msg加密"><a href="#对所有的msg加密" class="headerlink" title="对所有的msg加密"></a>对所有的msg加密</h2><p><strong>涉及到编码问题, 要注意指定编码, 出现乱码则要进行转换</strong><br>由于为了简单的得到加密 使用了固定秘钥的DES加密, 这其中出现了插曲.<br>未打成jar包前一切正常, 达成jar后乱码.经过排查最后锁定在了加密工具类中<br>其中有个<code>getBytes()</code>引起了我的注意</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**<br>  * Encodes this &#123;<span class="hljs-doctag">@code</span> String&#125; into a sequence of bytes using the<br>  * platform's default charset, storing the result into a new byte array.<br>  *<br>  * &lt;p&gt; The behavior of this method when this string cannot be encoded in<br>  * the default charset is unspecified.  The &#123;<span class="hljs-doctag">@link</span><br>  * java.nio.charset.CharsetEncoder&#125; class should be used when more control<br>  * over the encoding process is required.<br>  *<br>  * <span class="hljs-doctag">@return</span>  The resultant byte array<br>  *<br>  * <span class="hljs-doctag">@since</span>      JDK1.1<br>  */</span><br></code></pre></td></tr></table></figure><p>这里的注释明确说明了, 未指定的话则为平台默认的编码, 这个平台默认编码, 暂不清楚 //TODO</p><h2 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h2><p>最魔性的则为设置开机启动<br>由于管理员权限问题 最后使用了bat文件</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off<br><span class="hljs-built_in">cd</span> /d "%~dp0"<br><span class="hljs-built_in">cacls</span>.exe "<span class="hljs-variable">%SystemDrive%</span>\System Volume Information" &gt;<span class="hljs-built_in">nul</span> <span class="hljs-number">2</span>&gt;<span class="hljs-built_in">nul</span><br><span class="hljs-keyword">if</span> <span class="hljs-variable">%errorlevel%</span>==<span class="hljs-number">0</span> <span class="hljs-keyword">goto</span> Admin<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">exist</span> "<span class="hljs-variable">%temp%</span>\getadmin.vbs" <span class="hljs-built_in">del</span> /f /q "<span class="hljs-variable">%temp%</span>\getadmin.vbs"<br><span class="hljs-built_in">echo</span> <span class="hljs-built_in">Set</span> RequestUAC = CreateObject^("Shell.Application"^)&gt;"<span class="hljs-variable">%temp%</span>\getadmin.vbs"<br><span class="hljs-built_in">echo</span> RequestUAC.ShellExecute "%~s0","","","runas",<span class="hljs-number">1</span> &gt;&gt;"<span class="hljs-variable">%temp%</span>\getadmin.vbs"<br><span class="hljs-built_in">echo</span> WScript.Quit &gt;&gt;"<span class="hljs-variable">%temp%</span>\getadmin.vbs"<br>"<span class="hljs-variable">%temp%</span>\getadmin.vbs" /f<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">exist</span> "<span class="hljs-variable">%temp%</span>\getadmin.vbs" <span class="hljs-built_in">del</span> /f /q "<span class="hljs-variable">%temp%</span>\getadmin.vbs"<br><span class="hljs-keyword">exit</span><br><br>:Admin<br>reg delete HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run /v NetWork /f<br>reg add HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run /v NetWork /t reg_sz /d "%~dp0校园网络助手.exe"<br></code></pre></td></tr></table></figure><p>通过这个bat文件来实现获取管理员权限后 加入注册表<br>把这个文件放在exe外面, 感觉不是特别美观, 直接放在jar包里无法使用file来操作位置<br>最后通过获取流来写到硬盘解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeStartBat</span><span class="hljs-params">( )</span></span>&#123;<br>    InputStream inputStream = classLoader.getResourceAsStream(<span class="hljs-string">"start.bat"</span>);<br>    writeToLocal(path, inputStream);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeToLocal</span><span class="hljs-params">(String destination, InputStream input)</span> </span>&#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-keyword">int</span> index;<br>        <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        FileOutputStream downloadFile = <span class="hljs-keyword">new</span> FileOutputStream(destination);<br>        <span class="hljs-keyword">while</span> ((index = input.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>            downloadFile.write(bytes, <span class="hljs-number">0</span>, index);<br>            downloadFile.flush();<br>        &#125;<br>        downloadFile.close();<br>        input.close();<br>    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;e.printStackTrace();&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>图片同样可以 这样写入后吗加载完毕删除</p><p>不过还有一个问题在开机的时候 <code>System.getProperty(&quot;user.dir&quot;)</code> 这样会得到 system32文件夹!!!!!<br>这个问题还未搜索</p>]]></content>
      
      
      <categories>
          
          <category> 项目制作 </category>
          
          <category> 中等项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 校园网络助手1.5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>纯洁的微笑Gitchat 课程笔记2</title>
      <link href="/2019/06/Java-Springboot%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%862/"/>
      <url>/2019/06/Java-Springboot%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%862/</url>
      
        <content type="html"><![CDATA[<p>在Gitchat上 买了一个多月的 纯洁的微笑的SpringBoot讲解 这次来慢慢看看吧一共42讲 <a href="https://gitbook.cn/gitchat/column/5b86228ce15aa17d68b5b55a" target="_blank" rel="noopener">GitChat链接,不妨给一杯咖啡</a></p><a id="more"></a><p><strong>首先是约定优于配置, springboot已经定义好了大部分东西, 只有在不符合约定的时候, 才需要手动去配置相关文件</strong></p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h3><p>这个注解等于<code>@ResponseBody ＋ @Controller</code><br>返回json数据的便捷注解</p><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h3><p><code>@RequestMapping(name=&quot;/getUser&quot;, method= RequestMethod.POST)</code></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="MockMVC"><a href="#MockMVC" class="headerlink" title="MockMVC"></a>MockMVC</h3><p>MockMVC 可以进行POST GET 模拟请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldTest</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> MockMvc mockMvc;<br><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-comment">//`@Before`注解的方法 在启动测试后首先执行, 来进行资源的初始化</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUp</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        mockMvc = MockMvcBuilders.standaloneSetup(<span class="hljs-keyword">new</span> HelloController()).build();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getHello</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        mockMvc.perform(MockMvcRequestBuilders.post(<span class="hljs-string">"/hello"</span>)<br>          .accept(MediaType.APPLICATION_JSON_UTF8)).andDo(print());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p><a href="https://blog.lsmg.xyz/2019/05/18/dataInteraction/">之前的一篇博客, 传送门</a></p><h3 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h3><p>控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(name = <span class="hljs-string">"/saveUser"</span>, method = RequestMethod.POST)<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveUser</span><span class="hljs-params">(@Valid User user, BindingResult result)</span> </span>&#123; <span class="hljs-comment">//@Valid 代表对这个参数进行校验 BindingResult 用于存储校验结果</span><br>    <span class="hljs-keyword">if</span>(result.hasErrors()) &#123;<br>        List&lt;ObjectError&gt; list = result.getAllErrors();<br>        <span class="hljs-keyword">for</span> (ObjectError error : list) &#123;<br>            System.out.println(error.getCode()+ <span class="hljs-string">"-"</span> + error.getDefaultMessage());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@NotEmpty</span>(message = <span class="hljs-string">"姓名不能为空"</span>)<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-meta">@Max</span>(value = <span class="hljs-number">100</span>, message = <span class="hljs-string">"年龄不能大于100岁"</span>)<br><span class="hljs-meta">@Min</span>(value= <span class="hljs-number">0</span> ,message= <span class="hljs-string">"年龄必须大于0岁！"</span> )<br><span class="hljs-keyword">private</span> String sex;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br></code></pre></td></tr></table></figure><p>对应的测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveUser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    mockMvc.perform(MockMvcRequestBuilders.post(<span class="hljs-string">"/saveUser"</span>)<br>            .param(<span class="hljs-string">"name"</span>,<span class="hljs-string">""</span>)<br>            .param(<span class="hljs-string">"age"</span>, <span class="hljs-string">"101"</span>)<br>            .param(<span class="hljs-string">"sex"</span>, <span class="hljs-string">"男"</span>)<br>    );<br>&#125;<br><span class="hljs-comment">/*Min-年龄必须大于0岁！<br>  NotEmpty-姓名不能为空<br>  Max-年龄不能大于100岁*/</span><br></code></pre></td></tr></table></figure><h3 id="校验的注解汇总"><a href="#校验的注解汇总" class="headerlink" title="校验的注解汇总"></a>校验的注解汇总</h3><table><thead><tr><th>注解</th><th>应用对象</th><th>检查内容</th></tr></thead><tbody><tr><td>@Length(min=, max=)</td><td>用于String对象</td><td>检查字符串长度</td></tr><tr><td>@Max(value=)</td><td></td><td>最大值</td></tr><tr><td>@Min(value=)</td><td></td><td>最小值</td></tr><tr><td>@NotNull</td><td></td><td>不为空</td></tr><tr><td>@Past</td><td>date 或 calendar</td><td>时间是过去吗?</td></tr><tr><td>@Future</td><td>date 或 calendar</td><td>时间是将来吗?</td></tr><tr><td>@Email</td><td>String</td><td>格式是邮箱吗?</td></tr></tbody></table><h2 id="配置文件的使用"><a href="#配置文件的使用" class="headerlink" title="配置文件的使用"></a>配置文件的使用</h2><h3 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//application.properties --&gt;neo.title=lsmg</span><br><br><span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;neo.title&#125;"</span>) <span class="hljs-comment">//使用注解来获取内容</span><br><span class="hljs-keyword">private</span> String title;<br></code></pre></td></tr></table></figure><h2 id="thymeleaf"><a href="#thymeleaf" class="headerlink" title="thymeleaf"></a>thymeleaf</h2><p>引入命令空间<br><code>&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</code></p><h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><h4 id="字符串赋值拼接"><a href="#字符串赋值拼接" class="headerlink" title="字符串赋值拼接"></a>字符串赋值拼接</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">"$&#123;属性名&#125;"</span><br><span class="hljs-string">"'这是固定部分' + $&#123;变化部分属性名&#125;"</span><br><br>简写形式<br><span class="hljs-string">"|固定部分$&#123;变化部分属性名&#125;|"</span> <span class="hljs-comment">//直接混合</span><br></code></pre></td></tr></table></figure><h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//if只有内容为真才会显示, unless内容为假才会显示</span><br>th:<span class="hljs-keyword">if</span>=<span class="hljs-string">"$&#123;flag == 'yes'&#125;"</span><br>th:unless=<span class="hljs-string">"$&#123;flag == 'yes'&#125;"</span><br></code></pre></td></tr></table></figure><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>  <span class="hljs-attr">th:each</span>=<span class="hljs-string">"user,iterStat : $&#123;users&#125;"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;user.name&#125;"</span>&gt;</span>neo<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;iterStat.index&#125;"</span>&gt;</span>index<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>iterStat 属性值</strong><br>index，当前迭代对象的 index（从 0 开始计算）；<br>count，当前迭代对象的 index（从 1 开始计算）；<br>size，被迭代对象的大小；<br>current，当前迭代变量；<br>even/odd，布尔值，当前循环是否是偶数/奇数（从 0 开始计算）；<br>first，布尔值，当前循环是否是第一个；<br>last，布尔值，当前循环是否是最后一个。</p><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p><code>th:href=&quot;@{http://www.lsmg.xyz/{id}(id=${id})}&quot;</code><br><strong>如果需要 Thymeleaf 对 URL 进行渲染，那么务必使用 th:href、th:src 等属性</strong></p><div th:style="'background:url(' + @{${img url}} + ');'">`{id}(id=${id})` 这部分方便了阅读<h4 id="三目运算"><a href="#三目运算" class="headerlink" title="三目运算"></a>三目运算</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">$&#123;age gt <span class="hljs-number">30</span> ? <span class="hljs-string">'中年'</span>:<span class="hljs-string">'年轻'</span>&#125;<br><br>gt：great than（大于）<br>ge：great equal（大于等于）<br>eq：equal（等于）<br>lt：less than（小于）<br>le：less equal（小于等于）<br>ne：not equal（不等于）<br></code></pre></td></tr></table></figure><h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:switch</span>=<span class="hljs-string">"$&#123;sex&#125;"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:case</span>=<span class="hljs-string">"'woman'"</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:case</span>=<span class="hljs-string">"'man'"</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- *: case的默认的选项 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:case</span>=<span class="hljs-string">"*"</span>&gt;</span>蓝<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="高阶使用"><a href="#高阶使用" class="headerlink" title="高阶使用"></a>高阶使用</h3><h4 id="内联"><a href="#内联" class="headerlink" title="内联[[]]"></a>内联<code>[[]]</code></h4><p>如果要使用内联方式 需要在标签或者父标签 甚至是在body中加入 <code>th:inline=&quot;text/javascript/none&quot;</code><br>进行激活</p><p><strong>看了下官方文档<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html" target="_blank" rel="noopener">传送门</a></strong><br><code>th:inline=&quot;none&quot;</code>代表不显示,其中的<code>[[]]</code>不会被thymeleaf识别</p><p><code>th:inline=&quot;javascript&quot;</code> 代表在js中使用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script th:inline="javascript"&gt;<br>    ...<br>    var username = [[$&#123;session.user.name&#125;]];<br>    ...<br>&lt;/script&gt;<br>&lt;script th:inline="javascript"&gt;<br>    ...<br>    var username = "Sebastian \"Fruity\" Applejuice";<br>    ...<br>&lt;/script&gt;<br><br>&lt;script th:inline="javascript"&gt;<br>    ...<br>    var username = [($&#123;session.user.name&#125;)];  // [()] 类似于 th:utext<br>    ...<br>&lt;/script&gt;<br>&lt;script th:inline="javascript"&gt;<br>    ...<br>    var username = Sebastian "Fruity" Applejuice;<br>    ...<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>上面的方式会 让它在静态显示时出现错误。<br>一般需要加上注释 /**/ 来包裹<code>[[]]</code></p><p>thymeleaf支持多种格式</p><ul><li>Strings</li><li>Numbers</li><li>Booleans</li><li>Arrays</li><li>Collections</li><li>Maps</li><li>Beans (objects with getter and setter methods)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*&lt;![CDATA[*/</span><br>  <span class="hljs-comment">//这里说一下经常看到的</span><br>  <span class="hljs-comment">//XHTML解析器会把CDATA中的内容当作纯文本处理，</span><br>  <span class="hljs-comment">//里面的 &lt; &amp; 不会被js翻译而是直接显示</span><br><span class="hljs-comment">/*]]&gt;*/</span><br><br><span class="hljs-comment">//&lt;![CDATA[</span><br>  <span class="hljs-comment">//相同效果</span><br><span class="hljs-comment">//*]]&gt;*</span><br></code></pre></td></tr></table></figure><h4 id="基本对象"><a href="#基本对象" class="headerlink" title="基本对象"></a>基本对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">#ctx：上下文对象<br>#vars：上下文变量<br>#locale：区域对象<br>#request：（仅 Web 环境可用）HttpServletRequest 对象<br>#response：（仅 Web 环境可用）HttpServletResponse 对象 &#x2F;&#x2F;常用<br>#session：（仅 Web 环境可用）HttpSession 对象 &#x2F;&#x2F;常用<br>#servletContext：（仅 Web 环境可用）ServletContext 对象<br></code></pre></td></tr></table></figure><h4 id="内嵌变量"><a href="#内嵌变量" class="headerlink" title="内嵌变量"></a>内嵌变量</h4><p><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#inlining" target="_blank" rel="noopener">文档地址, 内容太多, 贴不过来了</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--格式化时间--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;#dates.format(date, 'yyyy-MM-dd HH:mm:ss')&#125;"</span>&gt;</span>neo<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-comment">&lt;!--创建当前时间 精确到天--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;#dates.createToday()&#125;"</span>&gt;</span>neo<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-comment">&lt;!--创建当前时间 精确到秒--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;#dates.createNow()&#125;"</span>&gt;</span>neo<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--判断是否为空--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;#strings.isEmpty(userName)&#125;"</span>&gt;</span>userName<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-comment">&lt;!--判断 list 是否为空--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;#strings.listIsEmpty(users)&#125;"</span>&gt;</span>userName<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-comment">&lt;!--输出字符串长度--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;#strings.length(userName)&#125;"</span>&gt;</span>userName<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-comment">&lt;!--拼接字符串--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;#strings.concat(userName,userName,userName)&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-comment">&lt;!--创建自定长度的字符串--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;#strings.randomAlphanumeric(count)&#125;"</span>&gt;</span>userName<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="springboot和thymeleaf上传文件"><a href="#springboot和thymeleaf上传文件" class="headerlink" title="springboot和thymeleaf上传文件"></a>springboot和thymeleaf上传文件</h2><h3 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h3><p>常用部分</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">#支持的最大文件<br>spring.servlet.multipart.max-file-size=100MB<br>#文件请求最大限制<br>spring.servlet.multipart.max-request-size=100MB<br></code></pre></td></tr></table></figure><p>其他常用设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">spring.servlet.multipart.enabled=true，是否支持 multipart 上传文件<br>spring.servlet.multipart.file-size-threshold=0，支持文件写入磁盘<br>spring.servlet.multipart.location=，上传文件的临时目录<br>spring.servlet.multipart.max-file-size=10Mb，最大支持文件大小<br>spring.servlet.multipart.max-request-sizee=10Mb，最大支持请求大小<br>spring.servlet.multipart.resolve-lazily=false，是否支持 multipart 上传文件时懒加载<br></code></pre></td></tr></table></figure><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>解决上传文件大于 10M 出现连接重置的问题<br><strong>终于去看了看  表达式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Tomcat large file upload connection reset</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> TomcatServletWebServerFactory <span class="hljs-title">tomcatEmbedded</span><span class="hljs-params">()</span> </span>&#123;<br>    TomcatServletWebServerFactory tomcat = <span class="hljs-keyword">new</span> TomcatServletWebServerFactory();<br>    tomcat.addConnectorCustomizers((TomcatConnectorCustomizer) connector -&gt; &#123;<br>        <span class="hljs-keyword">if</span> ((connector.getProtocolHandler() <span class="hljs-keyword">instanceof</span> AbstractHttp11Protocol&lt;?&gt;)) &#123;<br>            <span class="hljs-comment">//-1 means unlimited</span><br>            ((AbstractHttp11Protocol&lt;?&gt;) connector.getProtocolHandler()).setMaxSwallowSize(-<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> tomcat;<br>&#125;<br></code></pre></td></tr></table></figure><p>前端网页</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"POST"</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/upload"</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">"multipart/form-data"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"file"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Submit"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>补充 enctype属性<br>| 值                                | 描述                                                        |<br>| ——————————— | ———————————————————– |<br>| application/x-www-form-urlencoded | 在发送前编码所有字符（默认）                                |<br>| multipart/form-data               | 不对字符编码 在使用包含文件上传控件的表单时，必须使用该值。 |<br>| text/plain                        | 空格转换为 “+” 加号，但不对特殊字符编码。                   |</p><p><strong>RedirectAttributes</strong><br>RedirectAttributes attr</p><p><strong>attr.addAttribute(“param”, value);</strong><br>attr.addAttribute(“name”, “user”);<br>attr.addAttribute(“success”, “ok”);<br>return “redirect:/index”;<br>这种方式相当于系统自动的拼接了url 仍然会暴露信息</p><p><strong>attr.addFlashAttribute(“param”, value);</strong><br>attr.addFlashAttribute(“status”,”999”);<br>attr.addFlashAttribute(“message”,”登录失败”);<br>return “redirect:/toLogin”;<br>这种方式通过session传递, session在跳转到页面后就是马上移除对象, 刷新后即消失</p><p><strong>上传控制器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/upload"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">singleFileUpload</span><span class="hljs-params">(@RequestParam(<span class="hljs-string">"file"</span>)</span> MultipartFile file,<br>                             RedirectAttributes redirectAttributes) </span>&#123;<br>  <span class="hljs-keyword">if</span> (file.isEmpty()) &#123;<br>      redirectAttributes.addFlashAttribute(<span class="hljs-string">"message"</span>, <span class="hljs-string">"Please select a file to upload"</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:uploadStatus"</span>;<br>  &#125;<br>  <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// Get the file and save it somewhere</span><br>      <span class="hljs-keyword">byte</span>[] bytes = file.getBytes();<br>      <span class="hljs-comment">// UPLOADED_FOLDER 文件本地存储地址</span><br>      Path path = Paths.get(UPLOADED_FOLDER + file.getOriginalFilename());<br>      Files.write(path, bytes);<br><br>      redirectAttributes.addFlashAttribute(<span class="hljs-string">"message"</span>,<br>              <span class="hljs-string">"You successfully uploaded '"</span> + file.getOriginalFilename() + <span class="hljs-string">"'"</span>);<br><br>  &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>      e.printStackTrace();<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/uploadStatus"</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"POST"</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/uploadMore"</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">"multipart/form-data"</span>&gt;</span><br>    文件1： <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"file"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    文件2： <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"file"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    文件3： <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"file"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Submit"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/uploadMore"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">moreFileUpload</span><span class="hljs-params">(@RequestParam(<span class="hljs-string">"file"</span>)</span> MultipartFile[] files,<br>                               RedirectAttributes redirectAttributes) </span>&#123;<br>    <span class="hljs-keyword">if</span> (files.length==<span class="hljs-number">0</span>) &#123;<br>        redirectAttributes.addFlashAttribute(<span class="hljs-string">"message"</span>, <span class="hljs-string">"Please select a file to upload"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:uploadStatus"</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(MultipartFile file:files)&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">byte</span>[] bytes = file.getBytes();<br>            Path path = Paths.get(UPLOADED_FOLDER + file.getOriginalFilename());<br>            Files.write(path, bytes);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    redirectAttributes.addFlashAttribute(<span class="hljs-string">"message"</span>, <span class="hljs-string">"You successfully uploaded all"</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/uploadStatus"</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Restful-api"><a href="#Restful-api" class="headerlink" title="Restful api"></a>Restful api</h2><p>使用 swagger2 构建restful api</p><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><h3 id="使用注解方式"><a href="#使用注解方式" class="headerlink" title="使用注解方式"></a>使用注解方式</h3><p>启动类 加上注解 <code>@EnableScheduling</code> 然后在<br>实现类上要有组件的注解@Component<br>要定时的方法上加上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> SimpleDateFormat df = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">"HH:mm:ss"</span>);<br><br><span class="hljs-meta">@Scheduled</span>(fixedRate = <span class="hljs-number">1000</span>) <span class="hljs-comment">//单位为秒</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getCount</span><span class="hljs-params">()</span> </span>&#123;<br>   System.out.println(df.format(<span class="hljs-keyword">new</span> Date())+<span class="hljs-string">" "</span>+count);<br>   <span class="hljs-keyword">return</span> ++count;<br>&#125;<br></code></pre></td></tr></table></figure><p> @Scheduled(cron = “*/6 * * * * *”) 的cron属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*<br>The pattern is a list of six single space-separated fields: representing second, minute, hour, day, month, weekday. Month and weekday names can be given as the first three letters of the English names.<br>6个由空格间隔的单独的数字  分别代表 xxxxx 月份和工作日可以用英文前三个字母代替<br>*/</span><br></code></pre></td></tr></table></figure><p><strong>星花和斜杠含义</strong></p><p>*/10 * * * * * = every ten seconds.  */10<br>这四个字符(由于第一位代表秒 *为通配符任意秒 /为每隔 10与/组合意味每十秒 */10意为 从任意秒开始每10S执行<br>末尾的 * * * * * 意味任意的 分钟小时……</p><p><em>可以结合下面这个看</em><br>10 * * * * *<br>这个意思为 任意的分钟小时…… 当秒为10的时候 触发</p><p><strong>再来一个例子</strong><br>0 0/30 8-10 * * *<br>后三个星花表示任意的 天月和工作日<br>第一个0表示 0S时<br>第二个 0/30 表示从0Min开始每隔30Min<br>第三个 <code>-</code> 表示8H和9H和10H<br>如果第三个 <code>-</code> 换为<code>,</code> 则为8H和10H</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>纯洁的微笑Gitchat 课程笔记1</title>
      <link href="/2019/06/Java-Springboot%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861/"/>
      <url>/2019/06/Java-Springboot%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861/</url>
      
        <content type="html"><![CDATA[<p>这篇博客主要是想整理下 纯洁的微笑博客的观后感 <a href="http://www.ityouknow.com/springboot/2016/02/03/spring-boot-web.html" target="_blank" rel="noopener">传送门</a>. 针对所列的框架, 自己再去丰富内容</p><a id="more"></a><h2 id="Web-开发"><a href="#Web-开发" class="headerlink" title="Web 开发"></a>Web 开发</h2><h3 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h3><p>Filter在servlet被调用前 截获request. 检查request, 可以进行request的修改(request头和request数据).<br>在离开response后处理response.</p><p><strong>一种方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebConfigure</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RemoteIpFilter <span class="hljs-title">remoteIpFilter</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RemoteIpFilter();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title">testFilter</span><span class="hljs-params">()</span></span>&#123;<br><br>        <span class="hljs-comment">//新建过滤器注册类</span><br>        FilterRegistrationBean registrationBean = <span class="hljs-keyword">new</span> FilterRegistrationBean();<br>        <span class="hljs-comment">//将自己的过滤器添加</span><br>        registrationBean.setFilter(<span class="hljs-keyword">new</span> MyFilter());<br>        <span class="hljs-comment">//设置过滤器的URL模式</span><br>        registrationBean.addUrlPatterns(<span class="hljs-string">"/*"</span>);<br>        <span class="hljs-comment">//初始化Filter参数</span><br>        registrationBean.addInitParameter(<span class="hljs-string">"paramName"</span>, <span class="hljs-string">"paramValue"</span>);<br>        registrationBean.setName(<span class="hljs-string">"MyFilter"</span>);<br>        registrationBean.setOrder(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> registrationBean;<br>    &#125;<br>    <span class="hljs-comment">//实现Filter的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>            HttpServletRequest request = (HttpServletRequest) servletRequest;<br>            System.out.println(<span class="hljs-string">"拦截器: "</span> + request.getRequestURI());<br>            filterChain.doFilter(servletRequest, servletResponse);<br>        &#125;<br>        <span class="hljs-comment">//删除部分代码</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>推荐的方式</strong> 不过这种方式虽然简单 但不能定义优先级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//启动类加上 @ServletComponentScan 注解</span><br><br><span class="hljs-comment">//这种方式通过filterName来控制优先级......</span><br><span class="hljs-meta">@WebFilter</span>(filterName = <span class="hljs-string">"secondFilter"</span>, urlPatterns = <span class="hljs-string">"/*"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        HttpServletRequest request = (HttpServletRequest) servletRequest;<br>        System.out.println(<span class="hljs-string">"拦截器2: "</span> + request.getRequestURI());<br>        filterChain.doFilter(servletRequest, servletResponse);<br>    &#125;<br><span class="hljs-comment">//删除部分代码</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年5月30日</title>
      <link href="/2019/05/Linux-Ubuntu%E7%9A%84%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E7%BE%8E%E5%8C%96/"/>
      <url>/2019/05/Linux-Ubuntu%E7%9A%84%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>由于自己的电脑配置太低了。 没想到8G内存都不够netty项目吃的 CPU每次运行飙升。<br>所以来试一试Ubuntu<br>我把我整块硬盘格式化了 重装了win10系统 然后安装了ubuntu18.04STL 版本</p><a id="more"></a><h3 id="安装Ubuntu"><a href="#安装Ubuntu" class="headerlink" title="安装Ubuntu"></a>安装Ubuntu</h3><p>安装的时候出现了好多问题弄得我 重新装了一次。<br>出现的问题就是root文件夹里没有相关的启动项目， 无奈只能重新安装。<br>    —自己找了个U盘做了个启动盘才安装上。<br>最后选择的是共存， 使用Ubuntu来引导Win10 还可以吧就这样</p><p><a href="https://www.sysgeek.cn/speed-up-ubuntu-linux-top-10/" target="_blank" rel="noopener">一些优化操作</a></p><h3 id="既然用了Ubuntu怎么能没有界面的美化"><a href="#既然用了Ubuntu怎么能没有界面的美化" class="headerlink" title="既然用了Ubuntu怎么能没有界面的美化"></a>既然用了Ubuntu怎么能没有界面的美化</h3><p><img src="https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/Ubuntu1.png" alt=""><br>先上一张图片 就是这样子<br>之前用过黑苹果就安装了苹果的主题<br>参考的博客也挺多的</p><p><a href="https://zhuanlan.zhihu.com/p/37314255" target="_blank" rel="noopener">Ubuntu 18.04 LTS 安装、美化</a></p><p><a href="https://www.jianshu.com/p/4fb9f91a5866" target="_blank" rel="noopener">Ubuntu18.04美化主题(mac主题)</a></p><p><a href="https://blog.csdn.net/zyqblog/article/details/80152016" target="_blank" rel="noopener">Gnome-shell Extensions安装 这个是好多的基础操作</a></p><p><a href="https://blog.csdn.net/qq_32447361/article/details/85946268" target="_blank" rel="noopener">其中一个主题</a></p><p><a href="https://jasongrass.gitee.io/2018-06-mac%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BE%8E%E5%8C%96/" target="_blank" rel="noopener">怎么能少的了命令行</a><br><img src="./2019n5y30r/zsh.png" alt=""></p><p><a href="https://blog.csdn.net/tecn14/article/details/24489031" target="_blank" rel="noopener">实时显示网速插件</a></p><h3 id="怎么能少的了梯子"><a href="#怎么能少的了梯子" class="headerlink" title="怎么能少的了梯子?"></a>怎么能少的了梯子?</h3><p><a href="https://www.jianshu.com/p/9fd29c00d881" target="_blank" rel="noopener">作者的Github关闭了, 这是备份</a><br>开始用了各种办法, 最后还是找到了这个备份解决的问题 默默的fork一份</p><h3 id="一些常用的软件"><a href="#一些常用的软件" class="headerlink" title="一些常用的软件"></a>一些常用的软件</h3><p>没想到 有搜狗输入法 不爽的是没有QQ和微信… 只能使用网页版微信来传输文件了. 目前有办法安装QQ不过还没有去查看</p><p>IDEA 全家桶没想到也有Linux版本的 现在是通过命令行启动 等我以后找找有没有其他的便捷方式</p><h3 id="一些小的问题"><a href="#一些小的问题" class="headerlink" title="一些小的问题"></a>一些小的问题</h3><p>比如文件夹 桌面 这类中文的改成了英文, 中文的话不太好打出来</p><p><a href="https://www.cnblogs.com/vincent-hv/p/3348920.html" target="_blank" rel="noopener">【原】中文Ubuntu主目录下的文档文件夹改回英文</a></p><p>打开终端，在终端中输入命令:<br>export LANG=en_US<br>xdg-user-dirs-gtk-update<br>在弹出的窗口中询问是否将目录转化为英文路径,同意并关闭.<br>在终端中输入命令:<br>export LANG=zh_CN<br>关闭终端,并注销或重启.下次进入系统,系统会提示是否把转化好的目录改回中文.选择不许要并且勾上不再提示,并取消修改.主目录的中文转英文就完成了~</p><p>markdown编辑器使用了atom 这个编辑器喜欢上了,</p><h3 id="一个神奇的网站"><a href="#一个神奇的网站" class="headerlink" title="一个神奇的网站"></a>一个神奇的网站</h3><p>可以无损放大图片!!!!</p><p><a href="http://waifu2x.udp.jp/index.zh-CN.html" target="_blank" rel="noopener">中文网页</a></p><p>本程序使用卷积神经网络对动漫风格的图片进行放大操作（支持照片）。<br>…咋也不懂啥是 卷积神经网络</p><p><img src="http://wx1.sinaimg.cn/large/0066wpcPly1g29v0exyslj306o06o3yo.jpg" alt=""></p><h3 id="Ubuntu-快捷方式制作"><a href="#Ubuntu-快捷方式制作" class="headerlink" title="Ubuntu 快捷方式制作"></a>Ubuntu 快捷方式制作</h3><p>2019年05月30日21:51:14</p><p>[Desktop Entry]<br>Encoding=UTF-8<br>Version=1.0<br>Name=图标名称<br>GenericName=Java IDE<br>Comment= 这里是描述<br>Exec=sh /home/lsmg/software/idea-IU-191.7479.19/bin/idea.sh<br>Icon=/home/lsmg/software/idea-IU-191.7479.19/bin/idea.png<br>Terminal=false<br>Type=Application<br>StartupNotify=true<br>StartupWMClass=jetbrains-idea<br>Categories=Development;IDE</p><p>Exec后写sh完整路径<br>Icon后写完整图标路径<br>StartupWMClass 这个设置正确则会显示小点 而不是显示多个图标</p><p><img src="https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/Ubuntu2.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 使用Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式</title>
      <link href="/2019/05/Java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/05/Java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<div class="alert-red">Java设计模式</div><div class="alert-blue"></div><div class="alert-green"></div><a id="more"></a>## 大神文章[自己是看的作者的书](https://blog.csdn.net/lovelion/article/details/17517213)<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>使用单例模式可以确保一个类只有一个实例化的对象</p><h3 id="饿汉式单例模式"><a href="#饿汉式单例模式" class="headerlink" title="饿汉式单例模式"></a>饿汉式单例模式</h3><p> 饿汉式单例模式 无延迟加载 不需要解决多线程问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**<br> * <span class="hljs-doctag">@ClassName</span> singletonpattern.Connect<br> * <span class="hljs-doctag">@Description</span><br> * 饿汉式单例模式 无延迟加载 不需要解决多线程问题<br> * Author lsmg<br> * Date 2019/5/21 13:25<br> * <span class="hljs-doctag">@Version</span> 1.0<br> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Connect</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Connect instance = <span class="hljs-keyword">new</span> Connect();<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Connect</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connect <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="懒汉式单例模式"><a href="#懒汉式单例模式" class="headerlink" title="懒汉式单例模式"></a>懒汉式单例模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> singletonpattern;<br>懒汉式单例模式 实现了延迟加载,但需要解决多线程问题<br><span class="hljs-comment">/**<br> * <span class="hljs-doctag">@ClassName</span> singletonpattern.Connect1_2<br> * <span class="hljs-doctag">@Description</span> TODO<br> * 懒汉式单例模式 实现了延迟加载,但需要解决多线程问题<br> * Author lsmg<br> * Date 2019/5/21 13:30<br> * <span class="hljs-doctag">@Version</span> 1.0<br> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Connect1_2</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Connect1_2  connect1_2;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Connect1_2</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-comment">//这种方式会造成多线程访问的时候实例化多个对象</span><br><span class="hljs-comment">//    public  static singletonpattern.Connect1_2 getInstance()&#123;</span><br><span class="hljs-comment">//        if(connect1_2 == null)&#123;</span><br><span class="hljs-comment">//            connect1_2 = new singletonpattern.Connect1_2();</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        return connect1_2;</span><br><span class="hljs-comment">//    &#125;</span><br><br>    <span class="hljs-comment">//这种方式虽然确保了只有一个线程进入, 但是降低了多线程的性能</span><br><span class="hljs-comment">//    public synchronized static singletonpattern.Connect1_2 getInstance()&#123;</span><br><span class="hljs-comment">//        if(connect1_2 == null)&#123;</span><br><span class="hljs-comment">//            connect1_2 = new singletonpattern.Connect1_2();</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        return connect1_2;</span><br><span class="hljs-comment">//    &#125;</span><br><br><br>    <span class="hljs-comment">//这种方式需要在private "volatile" static singletonpattern.Connect1_2 connect1_2 这样同样降低效率</span><br><span class="hljs-comment">//    public synchronized static singletonpattern.Connect1_2 getInstance()&#123;</span><br><span class="hljs-comment">//        if(connect1_2 == null)&#123;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//            synchronized (singletonpattern.Connect1_2.class)&#123;</span><br><span class="hljs-comment">//                if(connect1_2 == null)&#123;</span><br><span class="hljs-comment">//                    connect1_2 = new singletonpattern.Connect1_2();</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        return connect1_2;</span><br><span class="hljs-comment">//    &#125;</span><br><br>    <span class="hljs-comment">//使用IoDH 方法</span><br>    <span class="hljs-comment">//建立一个静态内部类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HoldeClass</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Connect1_2 instance = <span class="hljs-keyword">new</span> Connect1_2();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Connect1_2 <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> HoldeClass.instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot数据交互</title>
      <link href="/2019/05/Java-Springboot%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92/"/>
      <url>/2019/05/Java-Springboot%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92/</url>
      
        <content type="html"><![CDATA[<div class="alert-red"></div><div class="alert-blue"></div><div class="alert-green"></div><a id="more"></a>## 后端向前端传送<p>这种方式需要注意 编写html的时候 提示根据return的 页面决定 return了对应的页面对应的页面就会有提示 这种方法重定向无法传递</p><p>###</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/index"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span></span>&#123;<br>map.put(<span class="hljs-string">"username"</span>,<span class="hljs-string">"123"</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">"index"</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="json报文-来源"><a href="#json报文-来源" class="headerlink" title="json报文 来源"></a>json报文 <a href="https://blog.csdn.net/chinrui/article/details/70832310" target="_blank" rel="noopener">来源</a></h3><p>返回的格式为json格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, String&gt; <span class="hljs-title">login</span><span class="hljs-params">()</span> </span>&#123;<br>Map&lt;String, String&gt; hashMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>hashMap.put(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"登录成功"</span>);<br><span class="hljs-keyword">return</span> hashMap;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于上面的代码来说，还可以做进一步的优化，由于所有的 Restful 接口都只是返回数据，所以我们可以直接在类级别上添加 @ResponseBody 注解。<br>而大多数情况下，@Controller 与 @ResponseBody 又会一起使用，所以我们使用 @RestController 注解来替换掉它们，从而更加简洁地实现功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/sys/user"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"login"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, String&gt; <span class="hljs-title">login</span><span class="hljs-params">()</span> </span>&#123;<br>Map&lt;String, String&gt; hashMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>hashMap.put(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"登录成功"</span>);<br><span class="hljs-keyword">return</span> hashMap;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="解决重定向传参问题"><a href="#解决重定向传参问题" class="headerlink" title="解决重定向传参问题"></a>解决重定向传参问题</h3><p><strong>RedirectAttributes</strong><br>RedirectAttributes attr</p><p><strong>attr.addAttribute(“param”, value);</strong><br>attr.addAttribute(“name”, “user”);<br>attr.addAttribute(“success”, “ok”);<br>return “redirect:/index”;<br>这种方式相当于系统自动的拼接了url 仍然会暴露信息</p><p><strong>attr.addFlashAttribute(“param”, value);</strong><br>attr.addFlashAttribute(“status”,”999”);<br>attr.addFlashAttribute(“message”,”登录失败”);<br>return “redirect:/toLogin”;<br>这种方式通过session传递, session在跳转到页面后就是马上移除对象, 刷新后即消失</p><h2 id="前端向后短传送"><a href="#前端向后短传送" class="headerlink" title="前端向后短传送"></a>前端向后短传送</h2><h3 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.ajax(&#123;<br><span class="hljs-attr">type</span>: <span class="hljs-string">"POST"</span>,<br><span class="hljs-attr">dataType</span>: <span class="hljs-string">"json"</span>,<br><span class="hljs-attr">url</span>: <span class="hljs-string">"/login"</span>,<br><span class="hljs-attr">data</span>: $(<span class="hljs-string">'#loginForm'</span>).serialize(),<br><br><span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) </span>&#123;<br><span class="hljs-keyword">if</span>(result.info===<span class="hljs-string">"登录失败"</span>)&#123;<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"info"</span>).innerText=<span class="hljs-string">"账号不存在或密码错误"</span>;<br>&#125;<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="模拟表单"><a href="#模拟表单" class="headerlink" title="模拟表单"></a>模拟表单</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toMain</span>(<span class="hljs-params">key</span>) </span>&#123;<br><span class="hljs-keyword">var</span> input1 = $(<span class="hljs-string">"&lt;input&gt;"</span>);<br>input1.attr(<span class="hljs-string">"type"</span>, <span class="hljs-string">"hidden"</span>);<br>input1.attr(<span class="hljs-string">"name"</span>, <span class="hljs-string">"key"</span>);<br>input1.attr(<span class="hljs-string">"value"</span>, key);<br><br><span class="hljs-keyword">var</span> $form = $(<span class="hljs-string">'&lt;form method="POST"&gt;&lt;/form&gt;'</span>);<br>$form.attr(<span class="hljs-string">'action'</span>, <span class="hljs-string">"/toMain"</span>);<br>$form.appendTo($(<span class="hljs-string">'body'</span>));<br>$form.append(input1);<br>$form.submit();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="RequestParam注解"><a href="#RequestParam注解" class="headerlink" title="@RequestParam注解"></a>@RequestParam注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/index"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index1</span><span class="hljs-params">(@RequestParam(value = <span class="hljs-string">"username"</span>)</span>String name)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">"index"</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="PathVariable注解-使用url-额外文本传参数"><a href="#PathVariable注解-使用url-额外文本传参数" class="headerlink" title="@PathVariable注解 使用url+额外文本传参数"></a>@PathVariable注解 使用url+额外文本传参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">RequestMapping(<span class="hljs-string">"user/get/mac/&#123;macAddress&#125;"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getByMacAddress</span><span class="hljs-params">(@PathVariable String macAddress)</span></span>&#123;<br>　　<span class="hljs-comment">//do something;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="对应的直接传递"><a href="#对应的直接传递" class="headerlink" title="对应的直接传递"></a>对应的直接传递</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getByMacAddress</span><span class="hljs-params">(String username, String password)</span></span>&#123;<br>　　对应表单直接赋值<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"login"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">login</span><span class="hljs-params">(@RequestBody @Valid UserModel userModel)</span> </span>&#123;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserModel</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-meta">@NotBlank</span>(message = <span class="hljs-string">"用户名不能为空"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-meta">@NotBlank</span>(message = <span class="hljs-string">"密码不能为空"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassword</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正则表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@NotBlank</span>(message = <span class="hljs-string">"用户名不能为空"</span>)<br><span class="hljs-meta">@Pattern</span>(<br>        regexp = <span class="hljs-string">"1(([38]\\d)|(5[^4&amp;&amp;\\d])|(4[579])|(7[0135678]))\\d&#123;8&#125;"</span>,<br>        message = <span class="hljs-string">"手机号格式不合法"</span><br>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> username;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot数据交互 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot日志操作</title>
      <link href="/2019/05/Java-Springboot%E6%97%A5%E5%BF%97%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/05/Java-Springboot%E6%97%A5%E5%BF%97%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<div class="alert-red">springboot</div><div class="alert-blue">日志</div><div class="alert-green"></div><a id="more"></a><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Logger logger = LoggerFactory.getLogger(getClass());<br>logger.trace();<br>logger.debug();<br>logger.info();<br>logger.warn();<br>logger.error();<br><br>springboot 默认日志级别为info及以上<br></code></pre></td></tr></table></figure><h3 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"># com.xyz 下日志级别<br>logging.level.com.xyz=trace<br># 设置root级别 设置默认级别<br>logging.level.root=debug<br><br>#输出到当前项目根路径下的 springboot.log 文件中<br>#logging.file=springboot.log<br>#输出到当前项目所在磁盘根路径下的 /springboot/log目录中的 spring.log 文件中,<br>logging.path=springboot/log<br></code></pre></td></tr></table></figure><h3 id="更改输出格式"><a href="#更改输出格式" class="headerlink" title="更改输出格式"></a>更改输出格式</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"># 日志输出格式说明：<br># %d 输出日期时间，<br># %thread 输出当前线程名，<br># %-5level 输出日志级别，左对齐5个字符宽度<br># %logger&#123;50&#125; 输出全类名最长50个字符，超过按照句点分割<br># %msg 日志信息<br># %n 换行符<br># 修改控制台输出的日志格式<br>logging.pattern.console=%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<br># 修改文件中输出的日志格式<br>logging.pattern.file=%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; &gt;&gt;&gt; [%thread] &gt;&gt;&gt; %-5level &gt;&gt;&gt;<br>%logger&#123;50&#125; &gt;&gt;&gt; %msg%n<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年4月19日</title>
      <link href="/2019/04/%E5%B0%8F%E9%A1%B9%E7%9B%AE-%E8%87%AA%E5%8A%A8%E6%9F%A5%E8%AF%A2%E9%A2%98%E5%BA%93/"/>
      <url>/2019/04/%E5%B0%8F%E9%A1%B9%E7%9B%AE-%E8%87%AA%E5%8A%A8%E6%9F%A5%E8%AF%A2%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<div class="alert-red">自动查询题库</div><div class="alert-blue"></div><div class="alert-green">springboot复健</div><a id="more"></a><p><strong>只是为了自己以后查阅方便 =_=</strong><br><strong>继续自己的爬虫去了</strong></p><h3 id="SpringBoot部分"><a href="#SpringBoot部分" class="headerlink" title="SpringBoot部分"></a>SpringBoot部分</h3><h4 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/inquire"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">find</span><span class="hljs-params">(HttpSession session, @RequestParam(<span class="hljs-string">"quesion"</span>)</span>String quesionText)</span>&#123;<br>String[] line = quesionText.split(<span class="hljs-string">"\\r?\\n"</span>);  <span class="hljs-comment">//对字符串切割 使用换行切割</span><br>startInquire startInquire = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>startInquire=<span class="hljs-keyword">new</span> startInquire(line);<br>&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;e.printStackTrace();<br>&#125;<br>String answer = startInquire.getAnswer();<br>session.setAttribute(<span class="hljs-string">"answer"</span>,answer);<br><br>Clear clear = <span class="hljs-keyword">new</span> Clear(session);<br>clear.start();<br><br><span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/"</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h5><p>参考文章 <a href="https://segmentfault.com/a/1190000009162306" target="_blank" rel="noopener">正则表达式</a></p><h4 id="视图控制器"><a href="#视图控制器" class="headerlink" title="视图控制器"></a>视图控制器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringMvc</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>&#123;<br>        registry.addViewController(<span class="hljs-string">"/"</span>).setViewName(<span class="hljs-string">"index"</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:method</span>=<span class="hljs-string">"post"</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">"@&#123;/inquire&#125;"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"title"</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>欢迎来到本站~~~~ 目前题库只有校史比赛 =_=! 后续待学校是否出新的<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"inputTextBorder"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"inputArea"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"quesion"</span>&gt;</span>题目粘贴到此处<br>        注意只需要在试题页面按 CTRL+A CTRL+C 粘贴到这里即可<br>        经测试谷歌浏览器正常使用 火狐暂不支持<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"hestoryButton"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span>&gt;</span>查询校史题库---&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"outputTextBorder"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"outputArea"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;session.answer==''?'答案将会显示在这里哦':session.answer&#125;"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>outputArea–&gt; 能回车的输入框</p><p>post方法 不限制参数长度<br>get方法限制参数长度<br><code>${session.answer==&#39;&#39;? &#39;答案将会显示在这里哦&#39;:session.answer}</code> 三目运算符</p><h3 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h3><p>后端的代码改了好久匹配的算法 好吧最后感觉收益不是特别的高 目前删除了部分代码</p><h4 id="读取问题"><a href="#读取问题" class="headerlink" title="读取问题"></a>读取问题</h4><p>这里的代码通用性 很差具体修改等以后放出新的试题 感觉问题不大(指易班网)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**<br> * <span class="hljs-doctag">@ClassName</span> ReadQuesion<br> * <span class="hljs-doctag">@Description</span> TODO<br> * 读取题目 存入list中<br> * Author lsmg<br> * Date 2019/4/16 18:55<br> * <span class="hljs-doctag">@Version</span> 1.0<br> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReadQuesion</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> List&lt;Quesion&gt; originQuesions;<br>    <span class="hljs-keyword">private</span> Quesion originQuesion;<br>    <span class="hljs-keyword">private</span> String[] quesion;<br><br>    <span class="hljs-comment">/**<br>     * <span class="hljs-doctag">@Author</span> lsmg<br>     * <span class="hljs-doctag">@Description</span> //TODO <br>     * <span class="hljs-doctag">@Date</span> 22:53 2019/4/19<br>     * <span class="hljs-doctag">@param</span> quesion 控制器传入的前段问题数组<br>     * <span class="hljs-doctag">@return</span> <br>     **/</span><br>    ReadQuesion(String[] quesion)&#123;<br>        originQuesions = <span class="hljs-keyword">new</span> ArrayList&lt;Quesion&gt;();<br><br>        <span class="hljs-keyword">boolean</span> quesionStart=<span class="hljs-keyword">false</span>;<br><br>        <span class="hljs-keyword">this</span>.quesion = quesion;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=quesion.length-<span class="hljs-number">1</span>;i+=(quesionStart?<span class="hljs-number">5</span>:<span class="hljs-number">1</span>))&#123;<br>            String line = quesion[i];<br>            <span class="hljs-comment">//除去开头多余行数</span><br>            <span class="hljs-keyword">if</span>(!quesionStart)&#123;<br>                <span class="hljs-keyword">if</span>(!line.contains(<span class="hljs-string">"1【单选】"</span>))&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    quesionStart=<span class="hljs-keyword">true</span>;<br>                &#125;<br>            &#125;<br>            <br>            <span class="hljs-comment">//去除EF选项</span><br>            <span class="hljs-keyword">if</span>(line.contains(<span class="hljs-string">"E. E"</span>))&#123;<br>                <span class="hljs-keyword">if</span>(quesion[i+<span class="hljs-number">1</span>].contains(<span class="hljs-string">"F. F"</span>))&#123;<br>                    i++;<br>                &#125;<br>                i++;<br>            &#125;<br>            <br>            <span class="hljs-comment">//判断结尾</span><br>            <span class="hljs-keyword">if</span>(i&gt;=<span class="hljs-number">40</span>)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">4</span>;j++)&#123;<br>                    <span class="hljs-keyword">if</span>(quesion[i+j].contains(<span class="hljs-string">"立即交卷"</span>))&#123;<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <br>            <span class="hljs-comment">//五行为一个题目</span><br>            String []result=<span class="hljs-keyword">new</span> String[<span class="hljs-number">5</span>];<br>            result[<span class="hljs-number">0</span>]=quesion[i];<br>            result[<span class="hljs-number">1</span>]=quesion[i+<span class="hljs-number">1</span>];<br>            result[<span class="hljs-number">2</span>]=quesion[i+<span class="hljs-number">2</span>];<br>            result[<span class="hljs-number">3</span>]=quesion[i+<span class="hljs-number">3</span>];<br>            result[<span class="hljs-number">4</span>]=quesion[i+<span class="hljs-number">4</span>];<br>            stringProcess(result);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Quesion&gt; <span class="hljs-title">getOriginQuesions</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> originQuesions;<br>    &#125;<br>    <br>    <span class="hljs-comment">/**<br>     * <span class="hljs-doctag">@Author</span> lsmg<br>     * <span class="hljs-doctag">@Description</span> //TODO <br>     * 将每个题目的数组转成对象放入list中<br>     * <span class="hljs-doctag">@Date</span> 22:54 2019/4/19<br>     * <span class="hljs-doctag">@param</span> string 每个题目组成的数组<br>     * <span class="hljs-doctag">@return</span> void<br>     **/</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stringProcess</span><span class="hljs-params">(String[] string)</span></span>&#123;<br>        originQuesion = <span class="hljs-keyword">new</span> Quesion();<br><br>        originQuesion.setQuesionText(string[<span class="hljs-number">0</span>]);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=string.length-<span class="hljs-number">1</span>;i++)&#123;<br>            originQuesion.setChoiceText(string[i],i);<br>        &#125;<br><br>        originQuesions.add(originQuesion);<br><br><br>        originQuesion=<span class="hljs-keyword">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="读取题库"><a href="#读取题库" class="headerlink" title="读取题库"></a>读取题库</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReadAnswer</span> </span>&#123;<br><br>    <span class="hljs-comment">//题库路径</span><br>    String[] QuesionBank;<br>    Quesion quesion;<br>    List&lt;Quesion&gt; quesionList;<br><br>    ReadAnswer() <span class="hljs-keyword">throws</span> Exception&#123;<br>        quesion = <span class="hljs-keyword">new</span> Quesion();<br>        quesionList=<span class="hljs-keyword">new</span> ArrayList&lt;Quesion&gt;();<br><br><span class="hljs-comment">//题库路径部分 方便以后添加题库</span><br>        String[] dirName = <span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">"校史"</span>&#125;;<br>        String parentPath = System.getProperty(<span class="hljs-string">"user.dir"</span>)+File.separator+dirName[<span class="hljs-number">0</span>]+File.separator;<br>        System.out.println(parentPath);<br>        QuesionBank = <span class="hljs-keyword">new</span> String[]&#123;parentPath+<span class="hljs-string">"单项选择题库.txt"</span>,parentPath+<span class="hljs-string">"单项选择题库补充.txt"</span>,parentPath+<span class="hljs-string">"多项选择题库.txt"</span>,parentPath+<span class="hljs-string">"长知识点.txt"</span>&#125;;<span class="hljs-comment">//,parentPath+"短知识点.txt"</span><br><br>        readStringFromBank();<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * <span class="hljs-doctag">@Author</span> lsmg<br>     * <span class="hljs-doctag">@Description</span> //TODO<br>     * 用于从题库读取字符串 传入处理函数处理字符串<br>     * <span class="hljs-doctag">@Date</span> 16:52 2019/4/17<br>     * <span class="hljs-doctag">@return</span> void<br>     **/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readStringFromBank</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br><br>        <span class="hljs-keyword">for</span>(String path :QuesionBank)&#123;<br>            FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(path));<br>            InputStreamReader in = <span class="hljs-keyword">new</span> InputStreamReader(fileInputStream,<span class="hljs-string">"GB2312"</span>);<br>            BufferedReader bf = <span class="hljs-keyword">new</span> BufferedReader(in);<br><br>            String line=<span class="hljs-string">""</span>;<br>            <span class="hljs-keyword">while</span>((line = bf.readLine())!=<span class="hljs-keyword">null</span>)&#123;<br>                processString(line);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">processString</span><span class="hljs-params">(String pendingProcessString)</span></span>&#123;<br><br>        <span class="hljs-comment">//判断字符串第一个是否为数字 为数字且包含.则为题干 生成一个题目对象</span><br>        <span class="hljs-keyword">if</span>(pendingProcessString.charAt(<span class="hljs-number">0</span>)&lt;<span class="hljs-number">57</span> &amp;&amp;pendingProcessString.contains(<span class="hljs-string">"."</span>))&#123;<br><br>            <span class="hljs-keyword">if</span>(quesion != <span class="hljs-keyword">null</span>)&#123;<br>                quesionList.add(quesion);<br>                quesion = <span class="hljs-keyword">null</span>;<br>            &#125;<br>            quesion = <span class="hljs-keyword">new</span> Quesion();<br><br>            <span class="hljs-comment">//生成新对象后加入到对象题干中</span><br>            quesion.setQuesionText(pendingProcessString);<br>            addQuesionAnswer(pendingProcessString);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        addQuesionAnswer(pendingProcessString);<br>        <span class="hljs-comment">//判断是否为选项是则 加入选项</span><br>        <span class="hljs-keyword">if</span>(pendingProcessString.charAt(<span class="hljs-number">0</span>)&gt;=<span class="hljs-string">'A'</span> &amp;&amp; pendingProcessString.charAt(<span class="hljs-number">0</span>)&lt;=<span class="hljs-string">'E'</span>)&#123;<br>            addQuesionAnswerText(pendingProcessString);<br>        &#125;<br><br>        <span class="hljs-comment">//都不符合则为剩余题干</span><br>        quesion.setQuesionText(quesion.getQuesionText()+pendingProcessString);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addQuesionAnswerText</span><span class="hljs-params">(String answerText)</span></span>&#123;<br>        quesion.setChoiceText(answerText, answerText.charAt(<span class="hljs-number">0</span>));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addQuesionAnswer</span><span class="hljs-params">(String line)</span></span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = line.indexOf(<span class="hljs-string">"（"</span>)+<span class="hljs-number">1</span>;i &lt;= line.indexOf(<span class="hljs-string">"）"</span>)-<span class="hljs-number">1</span>;i++)&#123;<br>            quesion.setAnswerText(quesion.getAnswerText()+line.charAt(i));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Quesion&gt; <span class="hljs-title">getQuesionList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> quesionList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Quesion</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String QuesionText;<br>    <span class="hljs-keyword">private</span> String[] ChoiceText;<br>    <span class="hljs-keyword">private</span> String AnswerText;<br>    Quesion()&#123;<br>        QuesionText=<span class="hljs-string">""</span>;<br>        ChoiceText = <span class="hljs-keyword">new</span> String[<span class="hljs-number">5</span>];<br>        AnswerText =<span class="hljs-string">""</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getQuesionText</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> QuesionText;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setQuesionText</span><span class="hljs-params">(String quesionText)</span> </span>&#123;<br>        QuesionText = quesionText;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String[] getChoiceText() &#123;<br>        <span class="hljs-keyword">return</span> ChoiceText;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setChoiceText</span><span class="hljs-params">(String choiceText,<span class="hljs-keyword">char</span> choice)</span> </span>&#123;<br>        ChoiceText[choice-<span class="hljs-number">65</span>] = choiceText;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setChoiceText</span><span class="hljs-params">(String choiceText,<span class="hljs-keyword">int</span> choice)</span> </span>&#123;<br>        ChoiceText[choice-<span class="hljs-number">1</span>] = choiceText;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAnswerText</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> AnswerText;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAnswerText</span><span class="hljs-params">(String answerText)</span> </span>&#123;<br>        AnswerText = answerText;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getTrueAnswerText</span><span class="hljs-params">()</span></span>&#123;<br>        String answer=<span class="hljs-string">""</span>;<br><br>        <span class="hljs-keyword">if</span>(AnswerText.equals(<span class="hljs-string">""</span>))&#123;<br>            <span class="hljs-keyword">return</span> QuesionText;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span> ; i&lt;=AnswerText.length();i++)&#123;<br>            answer += ChoiceText[AnswerText.charAt(i-<span class="hljs-number">1</span>)-<span class="hljs-number">65</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> answer;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="小功能部分"><a href="#小功能部分" class="headerlink" title="小功能部分"></a>小功能部分</h3><h4 id="删除多余字符"><a href="#删除多余字符" class="headerlink" title="删除多余字符"></a>删除多余字符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">deleteTexts</span><span class="hljs-params">(String line)</span></span>&#123;<br>String []deleteText = &#123;<span class="hljs-string">"哪"</span>,<span class="hljs-string">"几项"</span>,<span class="hljs-string">"指的是"</span>,<span class="hljs-string">"下列哪一项为正确选项"</span>,<span class="hljs-string">"正确"</span>,<span class="hljs-string">"【单选】"</span>,<span class="hljs-string">"【多选】"</span>,<span class="hljs-string">"、"</span>,<span class="hljs-string">"《"</span>,<span class="hljs-string">"》"</span>,<span class="hljs-string">"_"</span>,<span class="hljs-string">"所"</span>&#125;;<br><span class="hljs-keyword">for</span>(String string : deleteText)&#123;<br>line=line.replace(string,<span class="hljs-string">""</span>);<br>&#125;<br><span class="hljs-keyword">return</span> line;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目制作 </category>
          
          <category> 小项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动查询题库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年4月15日 java爬虫入门</title>
      <link href="/2019/04/Java-%E7%88%AC%E8%99%AB/"/>
      <url>/2019/04/Java-%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<div class="alert-red">java爬虫</div><div class="alert-blue">maven项目 下载和文件流</div><div class="alert-green">IDEA配置</div><a id="more"></a><p>这篇博客不知道为啥被覆盖了 哎还要从新写一次</p><h3 id="maven项目"><a href="#maven项目" class="headerlink" title="maven项目"></a>maven项目</h3><p>通过maven项目 不需要像java项目一样去下载第三方jar包了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--        所用到的httpclient包--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.guava<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>guava<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>r05<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--        Jsoup是一款Java的HTML解析器，可以直接解析某个URL地址，也可以解析HTML内容。其主要的功能包括解析HTM--&gt;</span><br><span class="hljs-comment">&lt;!--        L页面，通过DOM或者CSS选择器来查找、提取数据，可以更改HTML内容--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.jsoup<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsoup<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.10.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="下载类"><a href="#下载类" class="headerlink" title="下载类"></a>下载类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**<br>* <span class="hljs-doctag">@ClassName</span> Download<br>* <span class="hljs-doctag">@Description</span> TODO<br>* Author lsmg<br>* Date 2019/4/15 18:03<br>* <span class="hljs-doctag">@Version</span> 1.0<br>* 来自 https://www.cnblogs.com/lichenwei/p/4610298.html<br>**/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Download</span> </span>&#123;<br><span class="hljs-comment">/**<br> * <span class="hljs-doctag">@Author</span> lsmg<br> * <span class="hljs-doctag">@Description</span> //TODO<br> * <span class="hljs-doctag">@Date</span> 23:36 2019/4/15<br> * <span class="hljs-doctag">@param</span> imgUrl 图片url地址<br> * <span class="hljs-doctag">@param</span> extension 图片的后缀名<br> * <span class="hljs-doctag">@return</span> void<br> **/</span><br><span class="hljs-function"><span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">imgDownload</span><span class="hljs-params">(String imgUrl, String extension)</span></span>&#123;<br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-comment">//获取输入流</span><br>BufferedInputStream in = <span class="hljs-keyword">new</span> BufferedInputStream((<span class="hljs-keyword">new</span> URL(imgUrl).openStream()));<br><br><span class="hljs-comment">//文件名</span><br>SimpleDateFormat df = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">"HH时mm分ss秒SSS毫秒"</span>);<br><span class="hljs-comment">//创建文件流</span><br>File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"D:\\Pictures\\miku\\"</span>+df.format(<span class="hljs-keyword">new</span> Date())+<span class="hljs-string">"."</span>+extension);<br>System.out.println(file.getAbsolutePath());<br><br>FileOutputStream fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(file);<br>BufferedOutputStream out = <span class="hljs-keyword">new</span> BufferedOutputStream(fileOutputStream);<br><br><span class="hljs-comment">//缓冲字节流</span><br><span class="hljs-keyword">byte</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">int</span> length = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> ((length = in.read(data)) != -<span class="hljs-number">1</span>)&#123;<br>out.write(data,<span class="hljs-number">0</span>,length); <span class="hljs-comment">//这里划重点 这是修改后的代码没啥问题了 每次写入的长度不一定为1024 而应该是真实长度</span><br><br>&#125;<br>System.out.println(<span class="hljs-string">"正在下载图片 :"</span>+imgUrl);<br>in.close();<br>out.close();<br><br>&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><p>使用了多线程传入参数i 作用在后边说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">10</span>;i++)&#123;<br>Thread t =<span class="hljs-keyword">new</span> FindImg(i);<br>t.start();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="java爬虫"><a href="#java爬虫" class="headerlink" title="java爬虫"></a>java爬虫</h3><p>这个网页带有分页 每次切换页数url只有页数发生了变化 干脆加入了多线程 一个线程负责一页</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**<br> * <span class="hljs-doctag">@Author</span> lsmg<br> * <span class="hljs-doctag">@Description</span> //TODO 找到select的更好表示方式<br> * <span class="hljs-doctag">@Date</span> 23:42 2019/4/15<br> * <span class="hljs-doctag">@return</span> void<br> **/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Find</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-comment">//建立一个请求客户端</span><br>CloseableHttpClient httpClient = HttpClients.createDefault();<br><br>String url=<span class="hljs-string">"http://pic.netbian.com/e/search/result/index.php?page="</span>+index+<span class="hljs-string">"&amp;searchid=122"</span>;<br><br><span class="hljs-comment">//使用HttpGet方式请求网址</span><br>HttpGet httpGet = <span class="hljs-keyword">new</span> HttpGet(url);<br><br><span class="hljs-comment">//获取网址返回结果</span><br>CloseableHttpResponse response = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;                     <span class="hljs-comment">//....执行</span><br>response = httpClient.execute(httpGet);<br>&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>e.printStackTrace();<br>&#125;<br><br><span class="hljs-comment">//获取返回结构中的实体</span><br>HttpEntity entity = response.getEntity();<br><br>String html = <span class="hljs-keyword">null</span>;<br><span class="hljs-comment">//将返回实体输出</span><br><span class="hljs-keyword">try</span> &#123;<br>html= EntityUtils.toString(entity);<br><span class="hljs-comment">//System.out.println(html);</span><br>EntityUtils.consume(entity);<br>&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>e.printStackTrace();<br>&#125;<br><br><span class="hljs-comment">//解析html到一个document</span><br>Document document = Jsoup.parse(html);<br><br><span class="hljs-comment">//提取内容</span><br>Elements imgJpg = document.select(<span class="hljs-string">"img[src$=.jpg]"</span>); <span class="hljs-comment">//select选择器 下边说明 由于返回多个结果使用Elements存储</span><br><br><span class="hljs-comment">//下载对象</span><br>Download download = <span class="hljs-keyword">new</span> Download();<br><br><span class="hljs-keyword">for</span> (Element element : imgJpg)&#123;<br>download.imgDownload(<span class="hljs-string">"http://pic.netbian.com"</span>+element.attr(<span class="hljs-string">"src"</span>),<span class="hljs-string">"jpg"</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Jsoup-Java的HTML解析器"><a href="#Jsoup-Java的HTML解析器" class="headerlink" title="Jsoup-Java的HTML解析器"></a>Jsoup-Java的HTML解析器</h3><p>这个功能强大记录两条常用的<br><strong><a href="http://www.voidcn.com/article/p-qdzdjxky-p.html" target="_blank" rel="noopener">来自</a></strong></p><p>[attr^=value] 利用匹配属性值开头<br>[attr$=value] 利用匹配属性值结尾<br>[attr<em>=value]包含属性值来查找元素，比如：[href</em>=/path/]<br>还有<br>a[href] 带有herf内=内容的a标签<br>a[class=xxx] 带有xxxclass的a标签</p><p>element.attr(“src”) 找到src的内容</p><h3 id="自己的方法注释"><a href="#自己的方法注释" class="headerlink" title="自己的方法注释"></a>自己的方法注释</h3><p><a href="https://blog.csdn.net/qq_34533072/article/details/80830738" target="_blank" rel="noopener">https://blog.csdn.net/qq_34533072/article/details/80830738</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> java爬虫 </category>
          
          <category> java爬虫初步 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java输入输出流</title>
      <link href="/2019/04/Java-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81/"/>
      <url>/2019/04/Java-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<div class="alert-red">java输入输出流</div><div class="alert-blue">知识整理</div><div class="alert-green">IO流</div><a id="more"></a><h2 id="输入输出的区别"><a href="#输入输出的区别" class="headerlink" title="输入输出的区别"></a>输入输出的区别</h2><p><img src="https://blog.lsmg.xyz/2019/04/11/4y11r/1.png" alt=""></p><h3 id="InputStream、OutputStream"><a href="#InputStream、OutputStream" class="headerlink" title="InputStream、OutputStream"></a>InputStream、OutputStream</h3><p>处理字节流的抽象类<br>InputStream 是字节输入流的所有类的超类,一般我们使用它的子类,如FileInputStream等.<br>OutputStream是字节输出流的所有类的超类,一般我们使用它的子类,如FileOutputStream等.</p><h3 id="InputStreamReader-OutputStreamWriter"><a href="#InputStreamReader-OutputStreamWriter" class="headerlink" title="InputStreamReader  OutputStreamWriter"></a>InputStreamReader  OutputStreamWriter</h3><p>处理字符流的抽象类<br>InputStreamReader 是字节流通向字符流的桥梁,它将字节流转换为字符流. <strong>同时可以解决乱码问</strong>题<br>OutputStreamWriter是字符流通向字节流的桥梁，它将字符流转换为字节流.<strong>同时可以解决乱码问题</strong></p><h3 id="BufferedReader-BufferedWriter"><a href="#BufferedReader-BufferedWriter" class="headerlink" title="BufferedReader BufferedWriter"></a>BufferedReader BufferedWriter</h3><p>BufferedReader 由Reader类扩展而来，提供通用的缓冲方式文本读取，readLine读取一个文本行，<br>从字符输入流中读取文本，缓冲各个字符，从而提供字符、数组和行的高效读取。<br>BufferedWriter  由Writer 类扩展而来，提供通用的缓冲方式文本写入， newLine使用平台自己的行分隔符，<br>将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。</p><h2 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h2><h3 id="BufferedInputStream-带有缓冲区域的InputStream-来自"><a href="#BufferedInputStream-带有缓冲区域的InputStream-来自" class="headerlink" title="BufferedInputStream-带有缓冲区域的InputStream 来自"></a>BufferedInputStream-带有缓冲区域的InputStream <a href="https://blog.csdn.net/niyingxunzong/article/details/33335485" target="_blank" rel="noopener">来自</a></h3><p>InputStream<br>|–FilterInputStream<br>|—-BufferedInputStream</p><ol><li>BufferedInputStream对外提供滑动读取的功能实现，通过预先读入一整段原始输入流数据至缓冲区中。</li><li>外界对BufferedInputStream的读取操作实际上是在缓冲区上进行。</li><li>如果读取的数据超过了缓冲区的范围，那么BufferedInputStream负责重新从原始输入流中载入下一截数据填充缓冲区，然后外界继续通过缓冲区进行数据读取。<br>这样的设计的好处是：避免了大量的磁盘网络IO，因为原始的InputStream类实现的read是即时读取的，即每一次读取都会是一次IO操作（哪怕只读取了1个字节的数据），可想而知，如果数据量巨大，这样的磁盘网络消耗非常可怕。而通过缓冲区的实现，读取可以读取缓冲区中的内容，当读取超过缓冲区的内容后再进行一次IO，载入一段数据填充缓冲，那么下一次读取一般情况下就直接可以从缓冲区读取，减少了IO操作。</li></ol><h2 id="OutStream"><a href="#OutStream" class="headerlink" title="OutStream"></a>OutStream</h2><h3 id="flush操作"><a href="#flush操作" class="headerlink" title="flush操作"></a>flush操作</h3><p>当写文件需要flush()的效果时，需要<br>FileOutputStream fos = new FileOutputStream(“c:\a.txt”);<br>BufferedOutputStream bos = new BufferedOutputStream(fos);<br>也就是说，需要将FileOutputStream作为BufferedOutputStream构造函数的参数传入，然后对BufferedOutputStream进行写入操作，才能利用缓冲及flush()。</p><p>查看BufferedOutputStream的源代码，发现所谓的buffer其实就是一个byte[]。<br><strong>BufferedOutputStream的每一次write其实是将内容写入byte[]，当buffer容量到达上限时，会触发真正的磁盘写入.</strong><br>而另一种触发磁盘写入的办法就是调用<code>flush()</code>了。</p><p><code>BufferedOutputStream</code>在<code>close()</code>时会自动<code>flush ()</code></p><h3 id="输出时创建中间目录"><a href="#输出时创建中间目录" class="headerlink" title="输出时创建中间目录"></a>输出时创建中间目录</h3><p>只是创建一个文件对象不会在文件系统上创建相应的文件或目录。<br><code>File.mkdir()</code>和<code>File.mkdirs()</code>之间的区别是，后者将创建任何中间目录，如果它不存在。</p><h2 id="关闭流-来自"><a href="#关闭流-来自" class="headerlink" title="关闭流 来自"></a>关闭流 <a href="https://blog.csdn.net/zhaoyanjun6/article/details/54894451" target="_blank" rel="noopener">来自</a></h2><p>close（）方法的作用<br>1、关闭输入流，并且释放系统资源<br>2、BufferedInputStream装饰一个 InputStream 使之具有缓冲功能，is要关闭只需要调用最终被装饰出的对象的 close()方法即可，因为它最终会调用真正数据源对象的 close()方法。因此，可以只调用外层流的close方法关闭其装饰的内层流。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 知识整理 </category>
          
          <category> IO流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java输入输出流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年4月13日 FASTJson解析json</title>
      <link href="/2019/04/Java-SDK-Fastjson%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/04/Java-SDK-Fastjson%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<div class="alert-red"> FASTJson 解析json</div><div class="alert-blue"></div><div class="alert-green"></div><a id="more"></a><h3 id="调用api部分"><a href="#调用api部分" class="headerlink" title="调用api部分"></a>调用api部分</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">String u = <span class="hljs-string">"http://route.showapi.com/341-1?showapi_appid=搞了好久A&amp;showapi_sign=搞了好久B"</span>;<br>URL url = <span class="hljs-keyword">new</span> URL(u);<br>HttpURLConnection connection = (HttpURLConnection)url.openConnection();<br>connection.connect();<br><br>InputStreamReader in = <span class="hljs-keyword">new</span> InputStreamReader(connection.getInputStream());<br>BufferedReader bf = <span class="hljs-keyword">new</span> BufferedReader(in);<br>String stringJsonbf=<span class="hljs-keyword">null</span>; <span class="hljs-comment">//暂时存储</span><br>StringBuffer stringBuffer = <span class="hljs-keyword">new</span> StringBuffer();<br><span class="hljs-keyword">while</span> ((stringJsonbf= bf.readLine())!=<span class="hljs-keyword">null</span>)&#123;<br>stringBuffer.append(stringJsonbf);<br>&#125;<br>String stringJson=stringBuffer.toString(); <span class="hljs-comment">//得到json数据转为String</span><br>System.out.println(stringJson);<br></code></pre></td></tr></table></figure><h3 id="json解析部分"><a href="#json解析部分" class="headerlink" title="json解析部分"></a>json解析部分</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;类&gt; happies = <span class="hljs-keyword">new</span> ArrayList&lt;类&gt;(); <span class="hljs-comment">//类为json中所需要对象的对应类</span><br>JSONObject jsonObject1 = <span class="hljs-keyword">new</span> JSONObject(stringJson); <span class="hljs-comment">//string转换为json对象</span><br>JSONObject jsonObject2 = jsonObject1.getJSONObject(<span class="hljs-string">"showapi_res_body"</span>);<span class="hljs-comment">//这个对象中还有个对象用jsonObject1.getJSONObject获取</span><br>JSONArray jsonArray =jsonObject2.getJSONArray(<span class="hljs-string">"contentlist"</span>);<span class="hljs-comment">//获取后的对象里有数组获取数组</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;jsonArray.length();i++)&#123;<br>JSONObject jsTempt = jsonArray.getJSONObject(i);<br>String title = jsTempt.getString(<span class="hljs-string">"title"</span>);<br>String text = jsTempt.getString(<span class="hljs-string">"text"</span>);<br>String ct = jsTempt.getString(<span class="hljs-string">"ct"</span>);<br>Happy 对象 = <span class="hljs-keyword">new</span> 类(title,text,ct);<br>happies.add(对象);<span class="hljs-comment">//加入list中</span><br>&#125;<br>System.out.println(happies);<br></code></pre></td></tr></table></figure><h3 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h3><h4 id="搞了好久A和搞了好久B"><a href="#搞了好久A和搞了好久B" class="headerlink" title="搞了好久A和搞了好久B"></a>搞了好久A和搞了好久B</h4><p><img src="./2019n4y12r/2.png" alt=""><br>这里的appid和sign<strong>不是这个应用的id</strong>=, =而是你账号里的<br><img src="./2019n4y12r/1.png" alt=""><br>好吧………………生成sign的方式官方有</p><ol><li><p>您首先需要设置除了showapi_sign之外的所有必传参数，例如：<br><code>?title=足球&amp;page=1&amp;pag=for_test&amp;showapi_appid=123</code></p></li><li><p>对上述参数key进行排序按照字典序(a-z)，请注意byte[]类型的参数不参与排序和计算签名，比如上传的文件；空值的参数也不参与排序和计算签名。排序后以key+value方式拼装字符串如下：<br>pagfor_testpage1showapi_appid123title足球</p></li></ol><p><strong>请注意上述的pag字段排在page字段之前</strong></p><ol start="3"><li>String str=”pagfor_testpage1showapi_appid123title足球”<br>str=str+secret<br>也就是str=str+”006513e01bd344fca03610d1fd0145f0” //secret用小写<br>最后str=”pagfor_testpage1showapi_appid123title足球006513e01bd344fca03610d1fd0145f0”<br>注意在签名计算时,中文依然是中文,并没有被urlencode<br>String sign=DigestUtils.md5Hex(str.getBytes(“utf-8”))<br>最后得到 sign=”030554F4F9375B4DCFEF5ECEC4488737”</li></ol><p>不得不说这个代码表示真的好</p><h4 id="还有个json解析问题"><a href="#还有个json解析问题" class="headerlink" title="还有个json解析问题"></a>还有个json解析问题</h4><p><code>JSONObject jsonObject2 = new JSONObject(jsonObject1.getJSONObject(&quot;showapi_res_body&quot;))</code><br>好吧开始是这样的结果一直报错/……..具体原因先留个坑吧<br>2019年4月13日00:07:54</p><h3 id="FASTJson-解析json"><a href="#FASTJson-解析json" class="headerlink" title="FASTJson 解析json"></a>FASTJson 解析json</h3><p>文章学习来源 <a href="https://blog.csdn.net/xingfei_work/article/details/76572550" target="_blank" rel="noopener">声明出处</a><br>从这里我学会了解析json 自己也点写笔记</p><p><code>String json1 = &quot;{&#39;id&#39;:1,&#39;name&#39;:&#39;JAVAEE-1703&#39;,&#39;stus&#39;:[{&#39;id&#39;:101,&#39;name&#39;:&#39;刘铭&#39;,&#39;age&#39;:16}]}&quot;;</code><br>待解析json数据<br>构建对应的类</p><h3 id="解析对象"><a href="#解析对象" class="headerlink" title="解析对象"></a>解析对象</h3><h4 id="第一层"><a href="#第一层" class="headerlink" title="第一层"></a>第一层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Grade</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> ArrayList&lt;Student&gt; stus;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Grade</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name, ArrayList&lt;Student&gt; stus)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.id = id;<br><span class="hljs-keyword">this</span>.name = name;<br><span class="hljs-keyword">this</span>.stus = stus;<br>&#125;<span class="hljs-comment">//这个构造方法对应了json数据 由于json数据中有数组 所以写了链表存储数组</span><br><span class="hljs-comment">//省略若干get和set以及toString的重写(用于打印对象)</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="第二层"><a href="#第二层" class="headerlink" title="第二层"></a>第二层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><span class="hljs-comment">//省略若干get和set以及toString的重写(用于打印对象)</span><br>&#125;<span class="hljs-comment">//这里同样对应了json数组中的数据</span><br></code></pre></td></tr></table></figure><h4 id="主要部分"><a href="#主要部分" class="headerlink" title="主要部分"></a>主要部分</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String json1 = <span class="hljs-string">"&#123;'id':1,'name':'JAVAEE-1703','stus':[&#123;'id':101,'name':'刘铭','age':16&#125;]&#125;"</span>;<br>Grade grade = JSON.parseObject(json1,Grade<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>System.out.println(grade);<br></code></pre></td></tr></table></figure><p>不得不说阿里的这个简化了太多了疯狂扣6</p><h3 id="解析数组"><a href="#解析数组" class="headerlink" title="解析数组"></a>解析数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String json2 = <span class="hljs-string">"['北京','天津','杭州']"</span>;<br>List&lt;String&gt; list=JSON.parseArray(json2, String<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SDK </category>
          
          <category> FASTJson </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>4月11日 java文件操作</title>
      <link href="/2019/04/Java-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/04/Java-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<div class="alert-red">java文件操作</div><div class="alert-blue">#$%&^*%^&%$</div><div class="alert-green"></div><a id="more"></a><p><a href="https://blog.csdn.net/yhl_jxy/article/details/79272792" target="_blank" rel="noopener">博客来源</a></p><p><img src="https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/Java%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C.png" alt="来源"></p><p>Java IO读写文件的IO流分为两大类，字节流和字符流，<br>基于字节流的读写基类: InputStream和OutputStream<br>基于字符流的读写基类: Reader和Writer</p><p>如果是二进制文件，使用FileInputStream读取；如果是文本文件，使用FileReader读取；<br>这两个类允许我们从文件开始至文件结尾一个字节或字符的读取文件，或者将读取的文件写入字节数组或字符数组。<br>如果我们想随机的读取文件内容，可以使用RandomAccessFile。</p><h3 id="简单的文件读写"><a href="#简单的文件读写" class="headerlink" title="简单的文件读写"></a>简单的文件读写</h3><p><strong>File file = new File(“123.txt”);</strong></p><h4 id="字节流读取文件"><a href="#字节流读取文件" class="headerlink" title="字节流读取文件"></a>字节流读取文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (InputStream is = <span class="hljs-keyword">new</span> FileInputStream(file))&#123;<br><span class="hljs-keyword">byte</span>[] dataB=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>is.read(dataB);<br>System.out.println(<span class="hljs-string">"字节文件内容:"</span> + <span class="hljs-keyword">new</span> String(dataB));<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="字节流写文件"><a href="#字节流写文件" class="headerlink" title="字节流写文件"></a>字节流写文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>(OutputStream os = <span class="hljs-keyword">new</span> FileOutputStream(file))&#123;<br><span class="hljs-keyword">byte</span>[] dataB = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>String str = <span class="hljs-string">"1234567890abcdef"</span>;<br>dataB = str.getBytes();<br>os.write(dataB);<br>&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="字符流读取文件"><a href="#字符流读取文件" class="headerlink" title="字符流读取文件"></a>字符流读取文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"123.txt"</span>);<br><span class="hljs-keyword">try</span> (Reader reader = <span class="hljs-keyword">new</span> FileReader(file))&#123;<br><span class="hljs-keyword">char</span>[] dataC = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1024</span>];<br>reader.read(dataC);<br>System.out.println(<span class="hljs-string">"字符文件内容:"</span>+<span class="hljs-keyword">new</span> String(dataC));<br>&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="字符流写文件"><a href="#字符流写文件" class="headerlink" title="字符流写文件"></a>字符流写文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (Writer writer = <span class="hljs-keyword">new</span> FileWriter(file))&#123;<br><span class="hljs-keyword">char</span>[] dataC = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1024</span>];<br>String str=<span class="hljs-string">"@@@@1234567890abcdef"</span>;<br>dataC=str.toCharArray();<br>writer.write(dataC);<br>&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="简单的写文件-指定位置"><a href="#简单的写文件-指定位置" class="headerlink" title="简单的写文件-指定位置"></a>简单的写文件-指定位置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (RandomAccessFile raf = <span class="hljs-keyword">new</span> RandomAccessFile(file, <span class="hljs-string">"r"</span>)) &#123;<br><span class="hljs-comment">//获取RandomAccessFile对象文件指针的位置，初始位置是0</span><br>System.out.println(<span class="hljs-string">"RandomAccessFile文件指针的初始位置:"</span>+raf.getFilePointer());<br><span class="hljs-comment">//移动文件指针位置</span><br>raf.seek(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">byte</span>[]  buff=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-comment">//用于保存实际读取的字节数</span><br><span class="hljs-keyword">int</span> hasRead=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//循环读取</span><br><span class="hljs-keyword">while</span>((hasRead=raf.read(buff))&gt;<span class="hljs-number">0</span>)&#123;<br><span class="hljs-comment">//打印读取的内容,并将字节转为字符串输入</span><br>System.out.println(<span class="hljs-keyword">new</span> String(buff,<span class="hljs-number">0</span>,hasRead));<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 知识整理 </category>
          
          <category> 文件操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java文件操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows终端设置</title>
      <link href="/2019/04/Windows-%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/04/Windows-%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<div class="alert-red">今天和明天重装了系统配置电脑ing</div><div class="alert-blue">wsl-terminal终端的使用</div><div class="alert-green"></div><a id="more"></a><p>先放两张完成图噗噗噗<br><img src="https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/Windows%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A81.png" alt=""><br><img src="https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/Windows%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A82.png" alt=""></p><h4 id="windows一直没有一个好用的终端-昨天苦苦查找终于找到了下面是从零开始的配置"><a href="#windows一直没有一个好用的终端-昨天苦苦查找终于找到了下面是从零开始的配置" class="headerlink" title="windows一直没有一个好用的终端 昨天苦苦查找终于找到了下面是从零开始的配置"></a>windows一直没有一个好用的终端 昨天苦苦查找终于找到了下面是从零开始的配置</h4><p><a href="https://goreliu.github.io/wsl-terminal/README.zh_CN.html" target="_blank" rel="noopener">来源</a><br>从<a href="https://github.com/goreliu/wsl-terminal/releases" target="_blank" rel="noopener">这里</a>下载最新版本并解压</p><p>运行 open-wsl.exe 可以在当前目录打开一个 WSL 终端模拟器 *<em>没错你会发现你怎么都打不开2333333333 *</em></p><p>运行 tools/1-add-open-wsl-terminal-here-menu.js (帮助) 来添加一个 Open wsl-terminal Here 右键菜单到资源管理器上 (运行 tools/1-remove-open-wsl-terminal-here-menu.js 可以将其删除）</p><hr><p><a href="https://www.jianshu.com/p/b147735ff3f2" target="_blank" rel="noopener">来源</a></p><h4 id="设置-gt-搜索启用或关闭Windows功能-gt-在选项中勾上使用于Linux的Windows子系统"><a href="#设置-gt-搜索启用或关闭Windows功能-gt-在选项中勾上使用于Linux的Windows子系统" class="headerlink" title="设置-&gt;搜索启用或关闭Windows功能-&gt;在选项中勾上使用于Linux的Windows子系统:"></a>设置-&gt;搜索启用或关闭Windows功能-&gt;在选项中勾上使用于Linux的Windows子系统:</h4><p><img src="http://ww1.sinaimg.cn/mw690/7de3675bgy1fg9pi8iighj20bx0bt3zb.jpg" alt=""><br>重启电脑</p><h4 id="安装WSL"><a href="#安装WSL" class="headerlink" title="安装WSL"></a>安装WSL</h4><p>打开Win10应用商店，搜索Ubuntu，进行安装。安装成功后，在开始菜单中输入Ubuntu即可启动linux终端。<br><img src="https://upload-images.jianshu.io/upload_images/12990480-38923fd90957cbb0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/493/format/webp" alt=""><br>等上小10分钟 输入账号密码 安装成功</p><p>等你安装完就会发现上边下载的可以打开了 意不意外.</p><p>不行我要美化他</p><h3 id="美化设置"><a href="#美化设置" class="headerlink" title="美化设置"></a>美化设置</h3><p><a href="https://www.jianshu.com/p/b147735ff3f2" target="_blank" rel="noopener">来源</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install zsh<br>sh -c <span class="hljs-string">"<span class="hljs-variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span><br></code></pre></td></tr></table></figure><p>要让我们的终端变得更加漂亮，要配置两个部分：zsh主题（zsh theme）和终端的颜色主题（Color Theme）</p><h4 id="zsh主题（zsh-theme"><a href="#zsh主题（zsh-theme" class="headerlink" title="zsh主题（zsh theme)"></a>zsh主题（zsh theme)</h4><p>由于使用了oh-my-zsh，修改zsh的主题很容易，只要编辑~/.zshrc(直接输入 vim ~/.zshrc)文件，找到ZSH_THEME一行，改为agnoster即可<br><img src="https://upload-images.jianshu.io/upload_images/12990480-56f8f82cfbae3959.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/319/format/webp" alt=""></p><h4 id="终端的颜色主题（Color-Theme）"><a href="#终端的颜色主题（Color-Theme）" class="headerlink" title="终端的颜色主题（Color Theme）"></a>终端的颜色主题（Color Theme）</h4><p>但是Windows默认终端的Color Theme改起来比较费劲，需要使用一个叫做colortool的工具。他是微软自带的一个修改终端配色方案的工具<br>首先在<a href="https://github.com/Microsoft/console/releases" target="_blank" rel="noopener">这里</a> 下载压缩包</p><p>下载<code>colortool.zip</code>并解压后，进入文件夹，按住<code>shift并点击右键</code>选择在此处打开Powershell窗口<br>输入</p><pre><code>.\colortool.exe -d solarized_dark</code></pre><p>回到wsl输入</p><pre><code>source ~/.zshrc</code></pre><h4 id="这个字体要安装上"><a href="#这个字体要安装上" class="headerlink" title="这个字体要安装上"></a>这个字体要安装上</h4><p><a href="https://raw.githubusercontent.com/tonsky/FiraCode/master/distr/ttf/FiraCode-Retina.ttf" target="_blank" rel="noopener">下载</a><br><img src="https://upload-images.jianshu.io/upload_images/12990480-d8d28bcfb8e54925.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/889/format/webp" alt=""></p><p>安装好右键wsl的标题栏 选项 文本 选择(选择刚才的FiraCode-Retina)</p><h4 id="插件篇"><a href="#插件篇" class="headerlink" title="插件篇"></a>插件篇</h4><p>插件repo<br><a href="https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md#oh-my-zsh" target="_blank" rel="noopener">https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md#oh-my-zsh</a><br><a href="https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md" target="_blank" rel="noopener">https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md</a><br>这两个插件可以让你在终端输入命令时有语法高亮和自动补全。</p><p>自动补全了后面的路径<br><img src="https://upload-images.jianshu.io/upload_images/12990480-9c4aa71dfe25f4da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/793/format/webp" alt=""><br>错误的命令会显示成红色<br><img src="https://upload-images.jianshu.io/upload_images/12990480-e011eb347ba2215d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/677/format/webp" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/<br>git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting<br>git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions<br></code></pre></td></tr></table></figure><p>完毕后输入 vim ~/.zshrc<br>找到plugins=(git)这一行 改为<br>plugins=(git colored-man-pages zsh-autosuggestions zsh-syntax-highlighting)</p><h3 id="修改完了设置wsl启动后默认zsh"><a href="#修改完了设置wsl启动后默认zsh" class="headerlink" title="修改完了设置wsl启动后默认zsh"></a>修改完了设置wsl启动后默认zsh</h3><p>输入<br>vim ~/.bashrc<br>然后加入 <code>bash -c zsh</code><br>重新启动wsl吧</p><h3 id="问题处理篇"><a href="#问题处理篇" class="headerlink" title="问题处理篇"></a>问题处理篇</h3><h4 id="如果你上边配置完了-重启发现多了好多字符提示你权限问题"><a href="#如果你上边配置完了-重启发现多了好多字符提示你权限问题" class="headerlink" title="如果你上边配置完了 重启发现多了好多字符提示你权限问题"></a>如果你上边配置完了 重启发现多了好多字符提示你权限问题</h4><p>chmod 755 问题路径 就可以了</p><h4 id="方向键和滑轮乱码"><a href="#方向键和滑轮乱码" class="headerlink" title="方向键和滑轮乱码"></a>方向键和滑轮乱码</h4><p><a href="https://blog.csdn.net/as82984895ok/article/details/52067948" target="_blank" rel="noopener">来源</a></p><p>sudo vim /etc/vim/vimrc.tiny<br>set compatible–&gt;改为 set nocompatible<br>在下面加上 set backspace=2</p><p>就好了</p><p>sudo chmod 777 /etc/vim/vimrc<br>修改权限</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
          <category> 终端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows终端设置 </tag>
            
            <tag> 大量的此终端优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>隐藏dos窗口</title>
      <link href="/2019/03/Windows-%E9%9A%90%E8%97%8FDos%E7%AA%97%E5%8F%A3/"/>
      <url>/2019/03/Windows-%E9%9A%90%E8%97%8FDos%E7%AA%97%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bat"><span class="hljs-keyword">if</span> "%<span class="hljs-number">1</span>"=="hide" <span class="hljs-keyword">goto</span> CmdBegin<br><span class="hljs-built_in">start</span> mshta vbscript:createobject("wscript.shell").run("""%~<span class="hljs-number">0</span>"" hide",<span class="hljs-number">0</span>)(window.close)&amp;&amp;<span class="hljs-keyword">exit</span><br>:CmdBegin<br></code></pre></td></tr></table></figure><p>bat开头加上这段可以 隐藏dos窗口</p><p>jre\bin\java -jar Demo.jar 用这种方式就可以独立的jar运行了</p><p>完整代码</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bat"><span class="hljs-keyword">if</span> "%<span class="hljs-number">1</span>"=="hide" <span class="hljs-keyword">goto</span> CmdBegin<br><span class="hljs-built_in">start</span> mshta vbscript:createobject("wscript.shell").run("""%~<span class="hljs-number">0</span>"" hide",<span class="hljs-number">0</span>)(window.close)&amp;&amp;<span class="hljs-keyword">exit</span><br>:CmdBegin<br>jre\bin\java -jar Demo.jar<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
          <category> Dos </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git的使用</title>
      <link href="/2019/03/Git-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/03/Git-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>之前的Git博客 写的终于是自己都看不下去了. 所以打算来重新写一个博客<br>这篇博客主要还是参照的廖雪峰大佬的Git博客<br>自己只做整理方便自己察看</p><a id="more"></a><h1 id="命令总结"><a href="#命令总结" class="headerlink" title="命令总结"></a>命令总结</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs plain">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;<br><br>git init<br>git add &lt;file&gt;<br>git commit -m &lt;message&gt;<br>git remote add origin  # origin 意为远程库的名字, git的默认叫法<br><br>git status<br>git diff<br>git log<br>git log --pretty&#x3D;oneline # <br><br><br>git checkout -- &lt;filename&gt; # 恢复工作区, 可用于恢复修改和恢复勿删文件<br>git reset HEAD &lt;file&gt; # 恢复暂存区<br>git reset HEAD^ # 恢复版本库<br>git reflog # 所有版本日志<br><br>git rm 从版本库中删除文件<br><br>git push -u origin master # 带上 -u 以后提交就不需要加入origin master, 类似记忆功能<br></code></pre></td></tr></table></figure><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>首先把Git的三个区说明一下吧 自己后来慢慢感觉这些理论还是很重要的<br><img src="https://lsmg-img.oss-cn-beijing.aliyuncs.com/%E6%9D%82%E9%A1%B9/Git%E4%B8%89%E5%A4%A7%E5%88%86%E5%8C%BA.png" alt=""><br>工作区<br>顾名思义, 你当前在IDE直接修改的代码全部都是位于工作区的代码<br>暂存区<br>暂时存取的区域, 你每次使用add提交的文件全部在这个区域中, 这些文件等待你的commit<br>版本库<br>这里存放的是若干个版本, 你每次的commit就是将暂存区的文件作为一个版本提交到版本库, 同时相应的文件被提交后 暂存区的文件被清除</p><h1 id="基础的操作"><a href="#基础的操作" class="headerlink" title="基础的操作"></a>基础的操作</h1><p><strong>你的第一次提交</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">git init<br>git add &lt;file&gt;<br>git commit -m &lt;message&gt;<br></code></pre></td></tr></table></figure><p><code>git init</code><br>在你命令所执行的文件夹生成版本库<br><code>git add &lt;file&gt;</code><br>将指定文件从工作区添加到暂存区<br>如果<code>&lt;file&gt;</code>用 <code>.</code> 代替则为所有相对上一次commit修改过的文件<br><code>git commit -m &lt;message&gt;</code><br>提交暂存区的文件到版本库中成为一个版本 message为这个版本(提交)的描述</p><p><strong>好了你已经成功完成了一次提交, 继续去写代码了</strong><br>好你又写完了一堆代码 这时你想知道你工作区的状态是啥-你修改了哪些文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain">$git status<br>-------提示如下-----------<br>位于分支 master<br>尚未暂存以备提交的变更：<br>  （使用 &quot;git add &lt;文件&gt;...&quot; 更新要提交的内容）<br>  （使用 &quot;git checkout -- &lt;文件&gt;...&quot; 丢弃工作区的改动）<br><br>修改：     test.txt<br><br>修改尚未加入提交（使用 &quot;git add&quot; 和&#x2F;或 &quot;git commit -a&quot;）<br></code></pre></td></tr></table></figure><p><code>git status</code>告诉你 你修改了test.txt文件, 但是你想知道你怎么修改了这些文件, 做了什么改动<br>这时候就需要<code>git diff</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain">$git diff<br>-------提示如下-----------<br>diff --git a&#x2F;test.txt b&#x2F;test.txt<br>index 0858ae8..8c14912 100644<br>--- a&#x2F;test.txt<br>+++ b&#x2F;test.txt<br>@@ -1,3 +1,4 @@<br> 111111111111111<br> 222222222222222<br> 333333333333333<br>+444444444444444<br></code></pre></td></tr></table></figure><p><strong>现在你知道你进行了什么修改, 又进行了一次提交</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plain">lsmg@ubuntu:~&#x2F;temp$ git status<br>位于分支 master<br>尚未暂存以备提交的变更：<br>  （使用 &quot;git add &lt;文件&gt;...&quot; 更新要提交的内容）<br>  （使用 &quot;git checkout -- &lt;文件&gt;...&quot; 丢弃工作区的改动）<br>修改：     test.txt<br>修改尚未加入提交（使用 &quot;git add&quot; 和&#x2F;或 &quot;git commit -a&quot;）<br>lsmg@ubuntu:~&#x2F;temp$ git add test.txt <br>lsmg@ubuntu:~&#x2F;temp$ git status<br>位于分支 master<br>要提交的变更：<br>  （使用 &quot;git reset HEAD &lt;文件&gt;...&quot; 以取消暂存）<br>修改：     test.txt<br>lsmg@ubuntu:~&#x2F;temp$ git commit -m &quot;ver 0.02&quot;<br>[master ee4400f] ver 0.02<br> 1 file changed, 1 insertion(+)<br>lsmg@ubuntu:~&#x2F;temp$ git status<br>位于分支 master<br>无文件要提交，干净的工作区<br></code></pre></td></tr></table></figure><h1 id="时光穿梭机"><a href="#时光穿梭机" class="headerlink" title="时光穿梭机"></a>时光穿梭机</h1><p>我感觉廖雪峰大佬的博客, 生动诙谐, 其中用到了很多形象的比喻.<br>自己由于是为了方便日后察看 所以省略了这些内容, 感兴趣的可以去看看<br><strong>在commit之间切换</strong><br>Git还可以在不同commit间切换, 当然你必须知道进行过哪些commit, 你不能自己都记在脑子里吧, 所以也存在相关的命令<code>git log</code>来查看你的commit记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plain">lsmg@ubuntu:~&#x2F;temp$ git log<br>commit ee4400fc2b5694282b866b701f7c21655149e5a2 (HEAD -&gt; master)<br>Author: ***********<br>Date:   Sat Dec 7 21:06:42 2019 -0800<br>    ver 0.02<br><br>commit 603260e28ac0cc8fb8e4243120eb00bca83585d2<br>Author: ***********<br>Date:   Sat Dec 7 20:57:58 2019 -0800<br>    ver 0.01<br><br>lsmg@ubuntu:~&#x2F;temp$ git log --pretty&#x3D;oneline # 简洁显示<br>ee4400fc2b5694282b866b701f7c21655149e5a2 (HEAD -&gt; master) ver 0.02<br>603260e28ac0cc8fb8e4243120eb00bca83585d2 ver 0.01<br></code></pre></td></tr></table></figure><p>上面的<code>HEAD</code>代表当前版本, 上一个版本为<code>HEAD^</code>, 上上一个版本为<code>HEAD^^</code>如此类推<br>回到前N个版本<code>HEAD~N</code><br><code>git reset --hard HEAD^</code> 回到上一个版本.<br>这时你当前版本将会丢失, 使用<code>git log</code>也不会查看到原来的版本信息<br>这时使用<code>git reflog</code>来查看你的所有版本日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plain">lsmg@ubuntu:~&#x2F;temp$ git reset --hard 603260e28ac0cc8fb8e4243120eb00bca83585d2<br>HEAD 现在位于 603260e ver 0.01<br>lsmg@ubuntu:~&#x2F;temp$ git log<br>commit 603260e28ac0cc8fb8e4243120eb00bca83585d2 (HEAD -&gt; master)<br>Author: rjd67441 &lt;rjd67441@hotmail.com&gt;<br>Date:   Sat Dec 7 20:57:58 2019 -0800<br><br>    ver 0.01<br>lsmg@ubuntu:~&#x2F;temp$ git reflog <br>603260e (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to 603260e28ac0cc8fb8e4243120eb00bca83585d2<br>ee4400f HEAD@&#123;1&#125;: commit: ver 0.02<br>603260e (HEAD -&gt; master) HEAD@&#123;2&#125;: commit (initial): ver 0.01<br>lsmg@ubuntu:~&#x2F;temp$ git reset --hard ee4400f<br>HEAD 现在位于 ee4400f ver 0.02<br></code></pre></td></tr></table></figure><p><strong>撤销修改</strong><br>工作区中的撤销<br><code>git checkout -- &lt;filename&gt;</code><br>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；<br>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。<br>总之，就是让这个文件回到最近一次git commit或git add时的状态。<br>暂存区中的撤销<br><code>git reset HEAD &lt;file&gt;</code><br>版本库的撤销<br><code>git reset HEAD^</code> 乖乖回退一次</p><p><strong>删除文件</strong><br>删除本地文件后<br>确实需要从版本库中删除<br><code>git rm</code>删除然后<code>git commit</code>提交即可<br>误删除需要使用<code>git chechout -- &lt;filename&gt;</code>来恢复</p><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><p><code>git checkout -b dev</code>相当于一下两条命令<br><code>git branch dev</code> 分支创建<br><code>git branch -d dev</code> 分支删除<br><code>git checkout dev</code> 分支切换</p><p><code>git branch</code> 查看当前所有分支</p><p><code>git merge dev</code> 将制定的dev分支合并到当前的分支</p><p><strong>冲突解决</strong><br><code>git merge dev</code> 将制定的dev分支合并到当前的分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">1 111111111111111<br>2 222222222222222<br>3 333333333333333<br>4 444444444444444<br>5 &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD  # 我在master分支下添加了6666666 并提交<br>6 6666666<br>7 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>8 7777777<br>9 &gt;&gt;&gt;&gt;&gt;&gt;&gt; deb # 我在deb分支下添加了7777777 并提交<br></code></pre></td></tr></table></figure><p>  最后需要我手动修改这个文件为自己需要的内容 然后提交即可</p><p>  <strong>分支管理</strong><br>  通常Git会使用<code>Fast forward</code>模式 这样删除分支后会丢失分支的信息<br>  可以再merge的时候加入<code>--no-ff</code>这样就能解决问题<br>  <code>git merge --no-ff -m &quot;merge with no-ff&quot; dev</code><br>  由于禁用<code>Fast forward</code>后<br>  会生成新的commit所以需要加入<code>-m &quot;merge with no-ff&quot;</code></p><p>  <code>git stash</code> 可以储存当前的工作区 继续其他的工作<br>  <code>git stash list</code> 查看储存的工作区列表<br>  <code>git stash apply stash@{0}</code> 恢复指定的储存<br>  <code>git stash pop</code> 恢复并drop最近的存储</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs plain">$ cat test.txt # stash前<br>111111<br>$ vim test.txt <br>$ cat test.txt # 进行了修改<br>111111<br>222222<br>333333<br>$ git status<br>位于分支 master<br>修改：     test.txt<br>$ git stash # stash<br>保存工作目录和索引状态 WIP on master: 854b710 1<br>$ cat test.txt <br>111111<br>$ git status<br>位于分支 master<br>无文件要提交，干净的工作区<br>$ git stash pop<br>位于分支 master<br>修改：     test.txt<br>$ cat test.txt <br>111111<br>222222<br>333333<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 必备技能 </category>
          
          <category> Git操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git操作 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
